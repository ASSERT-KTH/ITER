text	label
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:293-if (plot == null) {	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:296-this.plot = plot;	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:297-}	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:1791-LegendItemCollection result = new LegendItemCollection();	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:1792-if (this.plot == null) {	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:1793-return result;	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:1795-int index = this.plot.getIndexOf(this);	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:1796-CategoryDataset dataset = this.plot.getDataset(index);	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:293-if (plot == null) {	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:296-this.plot = plot;	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:297-}	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:1791-LegendItemCollection result = new LegendItemCollection();	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:1792-if (this.plot == null) {	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:1793-return result;	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:1795-int index = this.plot.getIndexOf(this);	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:1796-CategoryDataset dataset = this.plot.getDataset(index);	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:1797-if (dataset != null) {	1
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:1798-return result;	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:249-protected AbstractCategoryItemRenderer() {	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:250-this.itemLabelGeneratorList = new ObjectList();	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:251-this.toolTipGeneratorList = new ObjectList();	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:252-this.urlGeneratorList = new ObjectList();	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:253-this.legendItemLabelGenerator	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:255-this.backgroundAnnotations = new ArrayList();	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:256-this.foregroundAnnotations = new ArrayList();	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:257-}	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:267-return 1;	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:280-return this.plot;	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:294-throw new IllegalArgumentException("Null 'plot' argument.");	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:317-CategoryItemLabelGenerator generator = (CategoryItemLabelGenerator)	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:319-if (generator == null) {	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:320-generator = this.baseItemLabelGenerator;	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:322-return generator;	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:335-return (CategoryItemLabelGenerator) this.itemLabelGeneratorList.get(	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:350-setSeriesItemLabelGenerator(series, generator, true);	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:351-}	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:367-this.itemLabelGeneratorList.set(series, generator);	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:368-if (notify) {	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:369-notifyListeners(new RendererChangeEvent(this));	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:371-}	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:381-return this.baseItemLabelGenerator;	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:394-setBaseItemLabelGenerator(generator, true);	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:395-}	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:410-this.baseItemLabelGenerator = generator;	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:411-if (notify) {	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:412-notifyListeners(new RendererChangeEvent(this));	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:414-}	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:434-CategoryToolTipGenerator result = null;	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:435-result = getSeriesToolTipGenerator(row);	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:436-if (result == null) {	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:437-result = this.baseToolTipGenerator;	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:439-return result;	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:453-return (CategoryToolTipGenerator) this.toolTipGeneratorList.get(series);	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:467-setSeriesToolTipGenerator(series, generator, true);	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:468-}	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:485-this.toolTipGeneratorList.set(series, generator);	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:486-if (notify) {	0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer:487-notifyListeners(new RendererChangeEvent(this));	0
org.jfree.data.general.DatasetUtilities:780-return null;	0
org.jfree.data.general.DatasetUtilities:726-return iterateDomainBounds(dataset, true);	0
org.jfree.data.general.DatasetUtilities:1284-return null;	0
org.jfree.data.general.DatasetUtilities:751-IntervalXYDataset intervalXYData = (IntervalXYDataset) dataset;	0
org.jfree.data.general.DatasetUtilities:752-for (int series = 0; series < seriesCount; series++) {	0
org.jfree.data.general.DatasetUtilities:753-int itemCount = dataset.getItemCount(series);	0
org.jfree.data.general.DatasetUtilities:754-for (int item = 0; item < itemCount; item++) {	0
org.jfree.data.general.DatasetUtilities:755-lvalue = intervalXYData.getStartXValue(series, item);	1
org.jfree.data.general.DatasetUtilities:756-uvalue = intervalXYData.getEndXValue(series, item);	0
org.jfree.data.general.DatasetUtilities:757-if (!Double.isNaN(lvalue)) {	0
org.jfree.data.general.DatasetUtilities:760-if (!Double.isNaN(uvalue)) {	0
org.jfree.data.general.DatasetUtilities:765-}	0
org.jfree.data.general.DatasetUtilities:1213-return iterateRangeBounds(dataset, true);	0
org.jfree.data.general.DatasetUtilities:1231-double minimum = Double.POSITIVE_INFINITY;	0
org.jfree.data.general.DatasetUtilities:1232-double maximum = Double.NEGATIVE_INFINITY;	0
org.jfree.data.general.DatasetUtilities:1233-int seriesCount = dataset.getSeriesCount();	0
org.jfree.data.general.DatasetUtilities:1236-if (includeInterval && dataset instanceof IntervalXYDataset) {	0
org.jfree.data.general.DatasetUtilities:1238-IntervalXYDataset ixyd = (IntervalXYDataset) dataset;	0
org.jfree.data.general.DatasetUtilities:1239-for (int series = 0; series < seriesCount; series++) {	0
org.jfree.data.general.DatasetUtilities:1240-int itemCount = dataset.getItemCount(series);	0
org.jfree.data.general.DatasetUtilities:1241-for (int item = 0; item < itemCount; item++) {	0
org.jfree.data.general.DatasetUtilities:1242-double lvalue = ixyd.getStartYValue(series, item);	1
org.jfree.data.general.DatasetUtilities:1243-double uvalue = ixyd.getEndYValue(series, item);	0
org.jfree.data.general.DatasetUtilities:1244-if (!Double.isNaN(lvalue)) {	0
org.jfree.data.general.DatasetUtilities:1247-if (!Double.isNaN(uvalue)) {	0
org.jfree.data.general.DatasetUtilities:1252-}	0
org.jfree.data.general.DatasetUtilities:1283-if (minimum == Double.POSITIVE_INFINITY) {	0
org.jfree.data.general.DatasetUtilities:742-if (dataset == null) {	0
org.jfree.data.general.DatasetUtilities:745-double minimum = Double.POSITIVE_INFINITY;	0
org.jfree.data.general.DatasetUtilities:746-double maximum = Double.NEGATIVE_INFINITY;	0
org.jfree.data.general.DatasetUtilities:747-int seriesCount = dataset.getSeriesCount();	0
org.jfree.data.general.DatasetUtilities:750-if (includeInterval && dataset instanceof IntervalXYDataset) {	0
org.jfree.data.general.DatasetUtilities:779-if (minimum > maximum) {	0
org.jfree.data.general.DatasetUtilities:167-private DatasetUtilities() {	0
org.jfree.data.general.DatasetUtilities:169-}	0
org.jfree.data.general.DatasetUtilities:181-if (dataset == null) {	0
org.jfree.data.general.DatasetUtilities:182-throw new IllegalArgumentException("Null 'dataset' argument.");	0
org.jfree.data.general.DatasetUtilities:184-List keys = dataset.getKeys();	0
org.jfree.data.general.DatasetUtilities:185-double totalValue = 0;	0
org.jfree.data.general.DatasetUtilities:186-Iterator iterator = keys.iterator();	0
org.jfree.data.general.DatasetUtilities:187-while (iterator.hasNext()) {	0
org.jfree.data.general.DatasetUtilities:188-Comparable current = (Comparable) iterator.next();	0
org.jfree.data.general.DatasetUtilities:189-if (current != null) {	0
org.jfree.data.general.DatasetUtilities:190-Number value = dataset.getValue(current);	0
org.jfree.data.general.DatasetUtilities:191-double v = 0.0;	0
org.jfree.data.general.DatasetUtilities:192-if (value != null) {	0
org.jfree.data.general.DatasetUtilities:193-v = value.doubleValue();	0
org.jfree.data.general.DatasetUtilities:195-if (v > 0) {	0
org.jfree.data.general.DatasetUtilities:196-totalValue = totalValue + v;	0
org.jfree.data.general.DatasetUtilities:199-}	0
org.jfree.data.time.TimeSeries:1050-if (start < 0) {	0
org.jfree.data.time.TimeSeries:1053-if (end < start) {	0
org.jfree.data.time.TimeSeries:1056-TimeSeries copy = (TimeSeries) super.clone();	0
org.jfree.data.time.TimeSeries:1057-copy.minY = Double.NaN;	1
org.jfree.data.time.TimeSeries:1058-copy.maxY = Double.NaN;	0
org.jfree.data.time.TimeSeries:1059-copy.data = new java.util.ArrayList();	0
org.jfree.data.time.TimeSeries:1060-if (this.data.size() > 0) {	0
org.jfree.data.time.TimeSeries:1062-TimeSeriesDataItem item	0
org.jfree.data.time.TimeSeries:1064-TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();	0
org.jfree.data.time.TimeSeries:1068-catch (SeriesException e) {	0
org.jfree.data.time.TimeSeries:1071-}	0
org.jfree.data.time.TimeSeries:564-add(item, true);	0
org.jfree.data.time.TimeSeries:565-}	0
org.jfree.data.time.TimeSeries:345-return this.minY;	0
org.jfree.data.time.TimeSeries:360-return this.maxY;	0
org.jfree.data.time.TimeSeries:653-add(period, value, true);	0
org.jfree.data.time.TimeSeries:654-}	0
org.jfree.data.time.TimeSeries:666-TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);	0
org.jfree.data.time.TimeSeries:667-add(item, notify);	0
org.jfree.data.time.TimeSeries:668-}	0
org.jfree.data.time.TimeSeries:169-this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION);	0
org.jfree.data.time.TimeSeries:170-}	0
org.jfree.data.time.TimeSeries:186-super(name);	0
org.jfree.data.time.TimeSeries:187-this.domain = domain;	0
org.jfree.data.time.TimeSeries:188-this.range = range;	0
org.jfree.data.time.TimeSeries:189-this.timePeriodClass = null;	0
org.jfree.data.time.TimeSeries:190-this.data = new java.util.ArrayList();	0
org.jfree.data.time.TimeSeries:191-this.maximumItemCount = Integer.MAX_VALUE;	0
org.jfree.data.time.TimeSeries:192-this.maximumItemAge = Long.MAX_VALUE;	0
org.jfree.data.time.TimeSeries:193-this.minY = Double.NaN;	0
org.jfree.data.time.TimeSeries:194-this.maxY = Double.NaN;	0
org.jfree.data.time.TimeSeries:195-}	0
org.jfree.data.time.TimeSeries:254-return this.data.size();	0
org.jfree.data.time.TimeSeries:429-return (TimeSeriesDataItem) this.data.get(index);	0
org.jfree.data.time.TimeSeries:463-return getRawDataItem(index).getPeriod();	0
org.jfree.data.time.TimeSeries:576-if (item == null) {	0
org.jfree.data.time.TimeSeries:579-item = (TimeSeriesDataItem) item.clone();	0
org.jfree.data.time.TimeSeries:580-Class c = item.getPeriod().getClass();	0
org.jfree.data.time.TimeSeries:581-if (this.timePeriodClass == null) {	0
org.jfree.data.time.TimeSeries:582-this.timePeriodClass = c;	0
org.jfree.data.time.TimeSeries:584-else if (!this.timePeriodClass.equals(c)) {	0
org.jfree.data.time.TimeSeries:596-boolean added = false;	0
org.jfree.data.time.TimeSeries:597-int count = getItemCount();	0
org.jfree.data.time.TimeSeries:598-if (count == 0) {	0
org.jfree.data.time.TimeSeries:599-this.data.add(item);	0
org.jfree.data.time.TimeSeries:600-added = true;	0
org.jfree.data.time.TimeSeries:603-RegularTimePeriod last = getTimePeriod(getItemCount() - 1);	0
org.jfree.data.time.TimeSeries:604-if (item.getPeriod().compareTo(last) > 0) {	0
org.jfree.data.time.TimeSeries:605-this.data.add(item);	0
org.jfree.data.time.TimeSeries:606-added = true;	0
org.jfree.chart.plot.XYPlot:4479-result = Range.combine(result,	0
org.jfree.chart.plot.XYPlot:1749-result = getRenderer();	0
org.jfree.chart.plot.XYPlot:1576-return getRenderer(0);	0
org.jfree.chart.plot.XYPlot:648-dataset.addChangeListener(this);	0
org.jfree.chart.plot.XYPlot:4473-XYItemRenderer r = getRendererForDataset(d);	0
org.jfree.chart.plot.XYPlot:4474-if (isDomainAxis) {	0
org.jfree.chart.plot.XYPlot:4475-if (r != null) {	0
org.jfree.chart.plot.XYPlot:4493-if (r != null) {	1
org.jfree.chart.plot.XYPlot:1744-XYItemRenderer result = null;	0
org.jfree.chart.plot.XYPlot:1745-for (int i = 0; i < this.datasets.size(); i++) {	0
org.jfree.chart.plot.XYPlot:1746-if (this.datasets.get(i) == dataset) {	0
org.jfree.chart.plot.XYPlot:1747-result = (XYItemRenderer) this.renderers.get(i);	0
org.jfree.chart.plot.XYPlot:1748-if (result == null) {	0
org.jfree.chart.plot.XYPlot:1754-return result;	0
org.jfree.chart.plot.XYPlot:1591-result = (XYItemRenderer) this.renderers.get(index);	0
org.jfree.chart.plot.XYPlot:1589-XYItemRenderer result = null;	0
org.jfree.chart.plot.XYPlot:1590-if (this.renderers.size() > index) {	0
org.jfree.chart.plot.XYPlot:1593-return result;	0
org.jfree.chart.plot.XYPlot:660-domainAxis.setPlot(this);	0
org.jfree.chart.plot.XYPlot:972-axis.configure();	0
org.jfree.chart.plot.XYPlot:4323-if (axisIndex == null) {	0
org.jfree.chart.plot.XYPlot:4326-List result = new ArrayList();	0
org.jfree.chart.plot.XYPlot:4327-for (int i = 0; i < this.datasets.size(); i++) {	0
org.jfree.chart.plot.XYPlot:4328-List mappedAxes = (List) this.datasetToDomainAxesMap.get(	0
org.jfree.chart.plot.XYPlot:4330-if (mappedAxes == null) {	0
org.jfree.chart.plot.XYPlot:4336-if (mappedAxes.contains(axisIndex)) {	0
org.jfree.chart.plot.XYPlot:4337-result.add(this.datasets.get(i));	0
org.jfree.chart.plot.XYPlot:4341-return result;	0
org.jfree.chart.plot.XYPlot:4384-int result = this.domainAxes.indexOf(axis);	0
org.jfree.chart.plot.XYPlot:4385-if (result < 0) {	0
org.jfree.chart.plot.XYPlot:4393-return result;	0
org.jfree.chart.plot.XYPlot:4406-int result = this.rangeAxes.indexOf(axis);	0
org.jfree.chart.plot.XYPlot:4407-if (result < 0) {	0
org.jfree.chart.plot.XYPlot:4409-Plot parent = getParent();	0
org.jfree.chart.plot.XYPlot:4410-if (parent instanceof XYPlot) {	0
org.jfree.chart.plot.XYPlot:4415-return result;	0
org.jfree.chart.plot.XYPlot:4427-Range result = null;	0
org.jfree.chart.plot.XYPlot:4428-List mappedDatasets = new ArrayList();	0
org.jfree.chart.plot.XYPlot:4429-List includedAnnotations = new ArrayList();	0
org.jfree.chart.plot.XYPlot:4430-boolean isDomainAxis = true;	0
org.jfree.chart.plot.XYPlot:4433-int domainIndex = getDomainAxisIndex(axis);	0
org.jfree.chart.plot.XYPlot:4434-if (domainIndex >= 0) {	0
org.jfree.chart.plot.XYPlot:4435-isDomainAxis = true;	0
org.jfree.chart.plot.XYPlot:4436-mappedDatasets.addAll(getDatasetsMappedToDomainAxis(	0
org.jfree.chart.plot.XYPlot:4438-if (domainIndex == 0) {	0
org.jfree.chart.plot.XYPlot:4440-Iterator iterator = this.annotations.iterator();	0
org.jfree.chart.plot.XYPlot:4441-while (iterator.hasNext()) {	0
org.jfree.chart.plot.XYPlot:4451-int rangeIndex = getRangeAxisIndex(axis);	0
org.jfree.chart.plot.XYPlot:4452-if (rangeIndex >= 0) {	0
org.jfree.chart.plot.XYPlot:4469-Iterator iterator = mappedDatasets.iterator();	0
org.jfree.data.xy.XYSeries:527-	0
org.jfree.data.xy.XYSeries:564-	0
org.jfree.data.xy.XYSeries:563-	0
org.jfree.data.xy.XYSeries:570-	0
org.jfree.data.xy.XYSeries:541-	0
org.jfree.data.xy.XYSeries:546-	0
org.jfree.data.xy.XYSeries:547-	0
org.jfree.data.xy.XYSeries:548-	1
org.jfree.data.xy.XYSeries:574-	0
org.jfree.data.xy.XYSeries:575-	0
org.jfree.data.xy.XYSeries:590-	0
org.jfree.data.xy.XYSeries:589-	0
org.jfree.data.xy.XYSeries:153-	0
org.jfree.data.xy.XYSeries:109-	0
org.jfree.data.xy.XYSeries:154-	0
org.jfree.data.xy.XYSeries:155-	0
org.jfree.data.xy.XYSeries:156-	0
org.jfree.data.xy.XYSeries:157-	0
org.jfree.data.xy.XYSeries:186-	0
org.jfree.data.xy.XYSeries:125-	0
org.jfree.data.xy.XYSeries:126-	0
org.jfree.data.xy.XYSeries:137-	0
org.jfree.data.xy.XYSeries:138-	0
org.jfree.data.xy.XYSeries:167-	0
org.jfree.data.xy.XYSeries:177-	0
org.jfree.data.xy.XYSeries:196-	0
org.jfree.data.xy.XYSeries:207-	0
org.jfree.data.xy.XYSeries:225-	0
org.jfree.data.xy.XYSeries:226-	0
org.jfree.data.xy.XYSeries:227-	0
org.jfree.data.xy.XYSeries:228-	0
org.jfree.data.xy.XYSeries:229-	0
org.jfree.data.xy.XYSeries:231-	0
org.jfree.data.xy.XYSeries:232-	0
org.jfree.data.xy.XYSeries:234-	0
org.jfree.data.xy.XYSeries:244-	0
org.jfree.data.xy.XYSeries:245-	0
org.jfree.data.xy.XYSeries:255-	0
org.jfree.data.xy.XYSeries:256-	0
org.jfree.data.xy.XYSeries:269-	0
org.jfree.data.xy.XYSeries:270-	0
org.jfree.data.xy.XYSeries:281-	0
org.jfree.data.xy.XYSeries:282-	0
org.jfree.data.xy.XYSeries:296-	0
org.jfree.data.xy.XYSeries:297-	0
org.jfree.data.xy.XYSeries:315-	0
org.jfree.data.xy.XYSeries:316-	0
org.jfree.data.xy.XYSeries:333-	0
org.jfree.data.xy.XYSeries:334-	0
org.jfree.data.xy.XYSeries:335-	0
org.jfree.chart.util.ShapeList:93-	0
org.jfree.chart.util.ShapeList:59-	0
org.jfree.chart.util.ShapeList:60-	0
org.jfree.chart.util.ShapeList:81-	0
org.jfree.chart.util.ShapeList:82-	0
org.jfree.chart.util.ShapeList:105-	0
org.jfree.chart.util.ShapeList:108-	0
org.jfree.chart.util.ShapeList:111-	1
org.jfree.chart.util.ShapeList:70-	0
org.jfree.chart.util.ShapeList:106-	0
org.jfree.chart.util.ShapeList:109-	0
org.jfree.chart.util.ShapeList:121-	0
org.jfree.chart.util.ShapeList:133-	0
org.jfree.chart.util.ShapeList:134-	0
org.jfree.chart.util.ShapeList:135-	0
org.jfree.chart.util.ShapeList:136-	0
org.jfree.chart.util.ShapeList:137-	0
org.jfree.chart.util.ShapeList:138-	0
org.jfree.chart.util.ShapeList:139-	0
org.jfree.chart.util.ShapeList:140-	0
org.jfree.chart.util.ShapeList:143-	0
org.jfree.chart.util.ShapeList:147-	0
org.jfree.chart.util.ShapeList:160-	0
org.jfree.chart.util.ShapeList:161-	0
org.jfree.chart.util.ShapeList:162-	0
org.jfree.chart.util.ShapeList:163-	0
org.jfree.chart.util.ShapeList:164-	0
org.jfree.chart.util.ShapeList:165-	0
org.jfree.chart.util.ShapeList:169-	0
org.jfree.data.time.TimePeriodValues:552-return this.maxMiddleIndex;	0
org.jfree.data.time.TimePeriodValues:267-this.minStartIndex = index;	0
org.jfree.data.time.TimePeriodValues:292-this.minMiddleIndex = index;	0
org.jfree.data.time.TimePeriodValues:317-this.minEndIndex = index;	0
org.jfree.data.time.TimePeriodValues:363-TimePeriodValue item = new TimePeriodValue(period, value);	0
org.jfree.data.time.TimePeriodValues:364-add(item);	0
org.jfree.data.time.TimePeriodValues:365-}	0
org.jfree.data.time.TimePeriodValues:114-this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION);	0
org.jfree.data.time.TimePeriodValues:115-}	0
org.jfree.data.time.TimePeriodValues:129-super(name);	0
org.jfree.data.time.TimePeriodValues:91-private int minStartIndex = -1;	0
org.jfree.data.time.TimePeriodValues:94-private int maxStartIndex = -1;	0
org.jfree.data.time.TimePeriodValues:97-private int minMiddleIndex = -1;	0
org.jfree.data.time.TimePeriodValues:100-private int maxMiddleIndex = -1;	0
org.jfree.data.time.TimePeriodValues:103-private int minEndIndex = -1;	0
org.jfree.data.time.TimePeriodValues:106-private int maxEndIndex = -1;	0
org.jfree.data.time.TimePeriodValues:130-this.domain = domain;	0
org.jfree.data.time.TimePeriodValues:131-this.range = range;	0
org.jfree.data.time.TimePeriodValues:132-this.data = new ArrayList();	0
org.jfree.data.time.TimePeriodValues:133-}	0
org.jfree.data.time.TimePeriodValues:205-return (TimePeriodValue) this.data.get(index);	0
org.jfree.data.time.TimePeriodValues:243-if (item == null) {	0
org.jfree.data.time.TimePeriodValues:246-this.data.add(item);	0
org.jfree.data.time.TimePeriodValues:247-updateBounds(item.getPeriod(), this.data.size() - 1);	0
org.jfree.data.time.TimePeriodValues:248-fireSeriesChanged();	0
org.jfree.data.time.TimePeriodValues:249-}	0
org.jfree.data.time.TimePeriodValues:259-long start = period.getStart().getTime();	0
org.jfree.data.time.TimePeriodValues:260-long end = period.getEnd().getTime();	0
org.jfree.data.time.TimePeriodValues:261-long middle = start + ((end - start) / 2);	0
org.jfree.data.time.TimePeriodValues:263-if (this.minStartIndex >= 0) {	0
org.jfree.data.time.TimePeriodValues:264-long minStart = getDataItem(this.minStartIndex).getPeriod()	0
org.jfree.data.time.TimePeriodValues:266-if (start < minStart) {	0
org.jfree.data.time.TimePeriodValues:269-}	0
org.jfree.data.time.TimePeriodValues:271-this.minStartIndex = index;	0
org.jfree.data.time.TimePeriodValues:274-if (this.maxStartIndex >= 0) {	0
org.jfree.data.time.TimePeriodValues:275-long maxStart = getDataItem(this.maxStartIndex).getPeriod()	0
org.jfree.data.time.TimePeriodValues:277-if (start > maxStart) {	0
org.jfree.data.time.TimePeriodValues:278-this.maxStartIndex = index;	0
org.jfree.data.time.TimePeriodValues:280-}	0
org.jfree.data.time.TimePeriodValues:282-this.maxStartIndex = index;	0
org.jfree.data.time.TimePeriodValues:285-if (this.minMiddleIndex >= 0) {	0
org.jfree.data.time.TimePeriodValues:286-long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()	0
org.jfree.data.time.TimePeriodValues:288-long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()	0
org.jfree.data.time.TimePeriodValues:290-long minMiddle = s + (e - s) / 2;	0
org.jfree.data.time.TimePeriodValues:291-if (middle < minMiddle) {	0
org.jfree.data.time.TimePeriodValues:294-}	0
org.jfree.data.time.TimePeriodValues:296-this.minMiddleIndex = index;	0
org.jfree.data.time.TimePeriodValues:299-if (this.maxMiddleIndex >= 0) {	0
org.jfree.data.time.TimePeriodValues:300-long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()	1
org.jfree.data.time.TimePeriodValues:302-long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()	0
org.jfree.data.time.Week:118-this(new Date());	0
org.jfree.data.time.Week:119-}	0
org.jfree.data.time.Week:127-public Week(int week, int year) {	0
org.jfree.data.time.Week:128-if ((week < FIRST_WEEK_IN_YEAR) && (week > LAST_WEEK_IN_YEAR)) {	0
org.jfree.data.time.Week:129-throw new IllegalArgumentException(	0
org.jfree.data.time.Week:132-this.week = (byte) week;	0
org.jfree.data.time.Week:133-this.year = (short) year;	0
org.jfree.data.time.Week:134-peg(Calendar.getInstance());	0
org.jfree.data.time.Week:135-}	0
org.jfree.data.time.Week:143-public Week(int week, Year year) {	0
org.jfree.data.time.Week:144-if ((week < FIRST_WEEK_IN_YEAR) && (week > LAST_WEEK_IN_YEAR)) {	0
org.jfree.data.time.Week:145-throw new IllegalArgumentException(	0
org.jfree.data.time.Week:148-this.week = (byte) week;	0
org.jfree.data.time.Week:149-this.year = (short) year.getYear();	0
org.jfree.data.time.Week:150-peg(Calendar.getInstance());	0
org.jfree.data.time.Week:151-}	0
org.jfree.data.time.Week:161-this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());	0
org.jfree.data.time.Week:162-}	0
org.jfree.data.time.Week:175-this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());	1
org.jfree.data.time.Week:176-}	0
org.jfree.data.time.Week:188-public Week(Date time, TimeZone zone, Locale locale) {	0
org.jfree.data.time.Week:189-if (time == null) {	0
org.jfree.data.time.Week:190-throw new IllegalArgumentException("Null 'time' argument.");	0
org.jfree.data.time.Week:192-if (zone == null) {	0
org.jfree.data.time.Week:193-throw new IllegalArgumentException("Null 'zone' argument.");	0
org.jfree.data.time.Week:195-if (locale == null) {	0
org.jfree.data.time.Week:196-throw new IllegalArgumentException("Null 'locale' argument.");	0
org.jfree.data.time.Week:198-Calendar calendar = Calendar.getInstance(zone, locale);	0
org.jfree.data.time.Week:199-calendar.setTime(time);	0
org.jfree.data.time.Week:204-int tempWeek = calendar.get(Calendar.WEEK_OF_YEAR);	0
org.jfree.data.time.Week:205-if (tempWeek == 1	0
org.jfree.data.time.Week:207-this.week = 1;	0
org.jfree.data.time.Week:208-this.year = (short) (calendar.get(Calendar.YEAR) + 1);	0
org.jfree.data.time.Week:211-this.week = (byte) Math.min(tempWeek, LAST_WEEK_IN_YEAR);	0
org.jfree.data.time.Week:212-int yyyy = calendar.get(Calendar.YEAR);	0
org.jfree.data.time.Week:215-if (calendar.get(Calendar.MONTH) == Calendar.JANUARY	0
org.jfree.data.time.Week:217-yyyy--;	0
org.jfree.data.time.Week:219-this.year = (short) yyyy;	0
org.jfree.data.time.Week:221-peg(calendar);	0
org.jfree.data.time.Week:222-}	0
org.jfree.data.time.Week:230-return new Year(this.year);	0
org.jfree.data.time.Week:239-return this.year;	0
org.jfree.data.time.Week:248-return this.week;	0
org.jfree.data.time.Week:262-return this.firstMillisecond;	0
org.jfree.data.time.Week:276-return this.lastMillisecond;	0
org.jfree.data.time.Week:288-this.firstMillisecond = getFirstMillisecond(calendar);	0
org.jfree.data.time.Week:289-this.lastMillisecond = getLastMillisecond(calendar);	0
org.jfree.data.time.Week:290-}	0
org.jfree.data.time.Week:303-if (this.week != FIRST_WEEK_IN_YEAR) {	0
org.jfree.data.time.Week:304-result = new Week(this.week - 1, this.year);	0
org.jfree.data.time.TimeSeries:883-throw new IllegalArgumentException("Requires start <= end.");	0
org.jfree.data.time.TimeSeries:921-if (start == null) {	0
org.jfree.data.time.TimeSeries:924-if (end == null) {	0
org.jfree.data.time.TimeSeries:927-if (start.compareTo(end) > 0) {	0
org.jfree.data.time.TimeSeries:931-boolean emptyRange = false;	0
org.jfree.data.time.TimeSeries:932-int startIndex = getIndex(start);	0
org.jfree.data.time.TimeSeries:933-if (startIndex < 0) {	0
org.jfree.data.time.TimeSeries:934-startIndex = -(startIndex + 1);	0
org.jfree.data.time.TimeSeries:935-if (startIndex == this.data.size()) {	0
org.jfree.data.time.TimeSeries:939-int endIndex = getIndex(end);	0
org.jfree.data.time.TimeSeries:940-if (endIndex < 0) { // end period is not in original series	0
org.jfree.data.time.TimeSeries:941-endIndex = -(endIndex + 1); // this is first item AFTER end period	0
org.jfree.data.time.TimeSeries:942-endIndex = endIndex - 1;// so this is last item BEFORE end	0
org.jfree.data.time.TimeSeries:944-if (endIndex < 0) {	1
org.jfree.data.time.TimeSeries:947-if (emptyRange) {	0
org.jfree.data.time.TimeSeries:953-return createCopy(startIndex, endIndex);	0
org.jfree.data.time.TimeSeries:879-if (start < 0) {	0
org.jfree.data.time.TimeSeries:882-if (end < start) {	0
org.jfree.data.time.TimeSeries:142-this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION,	0
org.jfree.data.time.TimeSeries:144-}	0
org.jfree.data.time.TimeSeries:430-if (period == null) {	0
org.jfree.data.time.TimeSeries:433-TimeSeriesDataItem dummy = new TimeSeriesDataItem(	0
org.jfree.data.time.TimeSeries:435-return Collections.binarySearch(this.data, dummy);	0
org.jfree.data.time.TimeSeries:561-add(period, value, true);	0
org.jfree.data.time.TimeSeries:562-}	0
org.jfree.data.time.TimeSeries:574-TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);	0
org.jfree.data.time.TimeSeries:575-add(item, notify);	0
org.jfree.data.time.TimeSeries:576-}	0
org.jfree.data.time.TimeSeries:155-this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION,	0
org.jfree.data.time.TimeSeries:157-}	0
org.jfree.data.time.TimeSeries:174-super(name);	0
org.jfree.data.time.TimeSeries:175-this.domain = domain;	0
org.jfree.data.time.TimeSeries:176-this.range = range;	0
org.jfree.data.time.TimeSeries:177-this.timePeriodClass = timePeriodClass;	0
org.jfree.data.time.TimeSeries:178-this.data = new java.util.ArrayList();	0
org.jfree.data.time.TimeSeries:179-this.maximumItemCount = Integer.MAX_VALUE;	0
org.jfree.data.time.TimeSeries:180-this.maximumItemAge = Long.MAX_VALUE;	0
org.jfree.data.time.TimeSeries:181-}	0
org.jfree.data.time.TimeSeries:240-return this.data.size();	0
org.jfree.data.time.TimeSeries:341-return (TimeSeriesDataItem) this.data.get(index);	0
org.jfree.data.time.TimeSeries:372-return getDataItem(index).getPeriod();	0
org.jfree.data.time.TimeSeries:491-if (item == null) {	0
org.jfree.data.time.TimeSeries:494-if (!item.getPeriod().getClass().equals(this.timePeriodClass)) {	0
org.jfree.data.time.TimeSeries:506-boolean added = false;	0
org.jfree.data.time.TimeSeries:507-int count = getItemCount();	0
org.jfree.data.time.TimeSeries:508-if (count == 0) {	0
org.jfree.data.time.TimeSeries:509-this.data.add(item);	0
org.jfree.data.time.TimeSeries:510-added = true;	0
org.jfree.data.time.TimeSeries:513-RegularTimePeriod last = getTimePeriod(getItemCount() - 1);	0
org.jfree.data.time.TimeSeries:514-if (item.getPeriod().compareTo(last) > 0) {	0
org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator:54-super();	0
org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator:55-}	0
org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator:65-return " title=\"" + toolTipText	1
org.jfree.chart.util.ShapeUtilities:265-if (p1 == null) {	0
org.jfree.chart.util.ShapeUtilities:268-if (p2 == null) {	0
org.jfree.chart.util.ShapeUtilities:271-if (p1.getWindingRule() != p2.getWindingRule()) {	0
org.jfree.chart.util.ShapeUtilities:274-PathIterator iterator1 = p1.getPathIterator(null);	0
org.jfree.chart.util.ShapeUtilities:275-PathIterator iterator2 = p1.getPathIterator(null);	1
org.jfree.chart.util.ShapeUtilities:276-double[] d1 = new double[6];	0
org.jfree.chart.util.ShapeUtilities:277-double[] d2 = new double[6];	0
org.jfree.chart.util.ShapeUtilities:278-boolean done = iterator1.isDone() && iterator2.isDone();	0
org.jfree.chart.util.ShapeUtilities:279-while (!done) {	0
org.jfree.chart.util.ShapeUtilities:280-if (iterator1.isDone() != iterator2.isDone()) {	0
org.jfree.chart.util.ShapeUtilities:283-int seg1 = iterator1.currentSegment(d1);	0
org.jfree.chart.util.ShapeUtilities:284-int seg2 = iterator2.currentSegment(d2);	0
org.jfree.chart.util.ShapeUtilities:285-if (seg1 != seg2) {	0
org.jfree.chart.util.ShapeUtilities:288-if (!Arrays.equals(d1, d2)) {	0
org.jfree.chart.util.ShapeUtilities:291-iterator1.next();	0
org.jfree.chart.util.ShapeUtilities:292-iterator2.next();	0
org.jfree.chart.util.ShapeUtilities:293-done = iterator1.isDone() && iterator2.isDone();	0
org.jfree.chart.util.ShapeUtilities:294-}	0
org.jfree.chart.util.ShapeUtilities:295-return true;	0
org.jfree.chart.util.ShapeUtilities:389-private static final float SQRT2 = (float) Math.pow(2.0, 0.5);	0
org.jfree.chart.util.ShapeUtilities:84-private ShapeUtilities() {	0
org.jfree.chart.util.ShapeUtilities:85-}	0
org.jfree.chart.util.ShapeUtilities:103-if (shape instanceof Cloneable) {	0
org.jfree.chart.util.ShapeUtilities:105-return (Shape) ObjectUtilities.clone(shape);	0
org.jfree.chart.util.ShapeUtilities:107-catch (CloneNotSupportedException cnse) {	0
org.jfree.chart.util.ShapeUtilities:110-Shape result = null;	0
org.jfree.chart.util.ShapeUtilities:111-return result;	0
org.jfree.chart.util.ShapeUtilities:128-if (s1 instanceof Line2D && s2 instanceof Line2D) {	0
org.jfree.chart.util.ShapeUtilities:129-return equal((Line2D) s1, (Line2D) s2);	0
org.jfree.chart.util.ShapeUtilities:131-else if (s1 instanceof Ellipse2D && s2 instanceof Ellipse2D) {	0
org.jfree.chart.util.ShapeUtilities:132-return equal((Ellipse2D) s1, (Ellipse2D) s2);	0
org.jfree.chart.util.ShapeUtilities:134-else if (s1 instanceof Arc2D && s2 instanceof Arc2D) {	0
org.jfree.chart.util.ShapeUtilities:135-return equal((Arc2D) s1, (Arc2D) s2);	0
org.jfree.chart.util.ShapeUtilities:137-else if (s1 instanceof Polygon && s2 instanceof Polygon) {	0
org.jfree.chart.util.ShapeUtilities:138-return equal((Polygon) s1, (Polygon) s2);	0
org.jfree.chart.util.ShapeUtilities:140-else if (s1 instanceof GeneralPath && s2 instanceof GeneralPath) {	0
org.jfree.chart.util.ShapeUtilities:141-return equal((GeneralPath) s1, (GeneralPath) s2);	0
org.jfree.chart.util.ShapeUtilities:145-return ObjectUtilities.equal(s1, s2);	0
org.jfree.chart.util.ShapeUtilities:159-if (l1 == null) {	0
org.jfree.chart.util.ShapeUtilities:160-return (l2 == null);	0
org.jfree.chart.util.ShapeUtilities:162-if (l2 == null) {	0
org.jfree.chart.util.ShapeUtilities:163-return false;	0
org.jfree.chart.util.ShapeUtilities:165-if (!l1.getP1().equals(l2.getP1())) {	0
org.jfree.chart.util.ShapeUtilities:166-return false;	0
org.jfree.chart.util.ShapeUtilities:168-if (!l1.getP2().equals(l2.getP2())) {	0
org.jfree.chart.util.ShapeUtilities:169-return false;	0
org.jfree.chart.util.ShapeUtilities:171-return true;	0
org.jfree.chart.util.ShapeUtilities:184-if (e1 == null) {	0
org.jfree.chart.util.ShapeUtilities:185-return (e2 == null);	0
org.jfree.chart.util.ShapeUtilities:187-if (e2 == null) {	0
org.jfree.chart.plot.MultiplePiePlot:166-return this.dataset;	0
org.jfree.chart.plot.MultiplePiePlot:135-this(null);	0
org.jfree.chart.plot.MultiplePiePlot:136-}	0
org.jfree.chart.plot.MultiplePiePlot:144-super();	0
org.jfree.chart.plot.MultiplePiePlot:111-private double limit = 0.0;	0
org.jfree.chart.plot.MultiplePiePlot:145-this.dataset = dataset;	1
org.jfree.chart.plot.MultiplePiePlot:146-PiePlot piePlot = new PiePlot(null);	0
org.jfree.chart.plot.MultiplePiePlot:147-this.pieChart = new JFreeChart(piePlot);	0
org.jfree.chart.plot.MultiplePiePlot:148-this.pieChart.removeLegend();	0
org.jfree.chart.plot.MultiplePiePlot:149-this.dataExtractOrder = TableOrder.BY_COLUMN;	0
org.jfree.chart.plot.MultiplePiePlot:150-this.pieChart.setBackgroundPaint(null);	0
org.jfree.chart.plot.MultiplePiePlot:151-TextTitle seriesTitle = new TextTitle("Series Title",	0
org.jfree.chart.plot.MultiplePiePlot:153-seriesTitle.setPosition(RectangleEdge.BOTTOM);	0
org.jfree.chart.plot.MultiplePiePlot:154-this.pieChart.setTitle(seriesTitle);	0
org.jfree.chart.plot.MultiplePiePlot:155-this.aggregatedItemsKey = "Other";	0
org.jfree.chart.plot.MultiplePiePlot:156-this.aggregatedItemsPaint = Color.lightGray;	0
org.jfree.chart.plot.MultiplePiePlot:157-this.sectionPaints = new HashMap();	0
org.jfree.chart.plot.MultiplePiePlot:158-}	0
org.jfree.chart.plot.MultiplePiePlot:178-if (this.dataset != null) {	0
org.jfree.chart.plot.MultiplePiePlot:179-this.dataset.removeChangeListener(this);	0
org.jfree.chart.plot.MultiplePiePlot:183-this.dataset = dataset;	0
org.jfree.chart.plot.MultiplePiePlot:184-if (dataset != null) {	0
org.jfree.chart.plot.MultiplePiePlot:185-setDatasetGroup(dataset.getGroup());	0
org.jfree.chart.plot.MultiplePiePlot:186-dataset.addChangeListener(this);	0
org.jfree.chart.plot.MultiplePiePlot:190-datasetChanged(new DatasetChangeEvent(this, dataset));	0
org.jfree.chart.plot.MultiplePiePlot:191-}	0
org.jfree.chart.plot.MultiplePiePlot:201-return this.pieChart;	0
org.jfree.chart.plot.MultiplePiePlot:213-if (pieChart == null) {	0
org.jfree.chart.plot.MultiplePiePlot:214-throw new IllegalArgumentException("Null 'pieChart' argument.");	0
org.jfree.chart.plot.MultiplePiePlot:216-if (!(pieChart.getPlot() instanceof PiePlot)) {	0
org.jfree.chart.plot.MultiplePiePlot:217-throw new IllegalArgumentException("The 'pieChart' argument must "	0
org.jfree.chart.plot.MultiplePiePlot:220-this.pieChart = pieChart;	0
org.jfree.chart.plot.MultiplePiePlot:221-fireChangeEvent();	0
org.jfree.chart.plot.MultiplePiePlot:222-}	0
org.jfree.chart.plot.MultiplePiePlot:230-return this.dataExtractOrder;	0
org.jfree.chart.plot.MultiplePiePlot:240-if (order == null) {	0
org.jfree.chart.plot.MultiplePiePlot:241-throw new IllegalArgumentException("Null 'order' argument");	0
org.jfree.chart.plot.MultiplePiePlot:243-this.dataExtractOrder = order;	0
org.jfree.chart.plot.MultiplePiePlot:244-fireChangeEvent();	0
org.jfree.chart.plot.MultiplePiePlot:245-}	0
org.jfree.chart.plot.MultiplePiePlot:254-return this.limit;	0
org.jfree.chart.plot.MultiplePiePlot:264-this.limit = limit;	0
org.jfree.chart.plot.MultiplePiePlot:265-fireChangeEvent();	0
org.jfree.chart.plot.MultiplePiePlot:266-}	0
org.jfree.chart.plot.MultiplePiePlot:277-return this.aggregatedItemsKey;	0
org.jfree.chart.plot.MultiplePiePlot:289-if (key == null) {	0
org.jfree.chart.plot.MultiplePiePlot:290-throw new IllegalArgumentException("Null 'key' argument.");	0
org.jfree.chart.plot.MultiplePiePlot:292-this.aggregatedItemsKey = key;	0
org.jfree.chart.plot.MultiplePiePlot:293-fireChangeEvent();	0
org.jfree.chart.plot.MultiplePiePlot:294-}	0
org.jfree.chart.block.BorderArrangement:147-else if (w == LengthConstraintType.FIXED) {	0
org.jfree.chart.block.BorderArrangement:148-if (h == LengthConstraintType.NONE) {	0
org.jfree.chart.block.BorderArrangement:149-contentSize = arrangeFN(container, g2, constraint.getWidth());	0
org.jfree.chart.block.BorderArrangement:151-else if (h == LengthConstraintType.FIXED) {	0
org.jfree.chart.block.BorderArrangement:152-contentSize = arrangeFF(container, g2, constraint);	0
org.jfree.chart.block.BorderArrangement:277-double[] w = new double[5];	0
org.jfree.chart.block.BorderArrangement:278-double[] h = new double[5];	0
org.jfree.chart.block.BorderArrangement:279-RectangleConstraint c1 = new RectangleConstraint(width, null,	0
org.jfree.chart.block.BorderArrangement:282-if (this.topBlock != null) {	0
org.jfree.chart.block.BorderArrangement:287-if (this.bottomBlock != null) {	0
org.jfree.chart.block.BorderArrangement:292-RectangleConstraint c2 = new RectangleConstraint(0.0,	0
org.jfree.chart.block.BorderArrangement:295-if (this.leftBlock != null) {	0
org.jfree.chart.block.BorderArrangement:296-Size2D size = this.leftBlock.arrange(g2, c2);	0
org.jfree.chart.block.BorderArrangement:297-w[2] = size.width;	0
org.jfree.chart.block.BorderArrangement:298-h[2] = size.height;	0
org.jfree.chart.block.BorderArrangement:300-if (this.rightBlock != null) {	0
org.jfree.chart.block.BorderArrangement:301-double maxW = Math.max(width - w[2], 0.0);	0
org.jfree.chart.block.BorderArrangement:302-RectangleConstraint c3 = new RectangleConstraint(0.0,	0
org.jfree.chart.block.BorderArrangement:306-Size2D size = this.rightBlock.arrange(g2, c3);	0
org.jfree.chart.block.BorderArrangement:307-w[3] = size.width;	0
org.jfree.chart.block.BorderArrangement:308-h[3] = size.height;	0
org.jfree.chart.block.BorderArrangement:311-h[2] = Math.max(h[2], h[3]);	0
org.jfree.chart.block.BorderArrangement:312-h[3] = h[2];	0
org.jfree.chart.block.BorderArrangement:314-if (this.centerBlock != null) {	0
org.jfree.chart.block.BorderArrangement:315-RectangleConstraint c4 = new RectangleConstraint(width - w[2]	0
org.jfree.chart.block.BorderArrangement:318-Size2D size = this.centerBlock.arrange(g2, c4);	0
org.jfree.chart.block.BorderArrangement:319-w[4] = size.width;	0
org.jfree.chart.block.BorderArrangement:320-h[4] = size.height;	0
org.jfree.chart.block.BorderArrangement:322-double height = h[0] + h[1] + Math.max(h[2], Math.max(h[3], h[4]));	0
org.jfree.chart.block.BorderArrangement:323-return arrange(container, g2, new RectangleConstraint(width, height));	0
org.jfree.chart.block.BorderArrangement:424-double[] w = new double[5];	0
org.jfree.chart.block.BorderArrangement:425-double[] h = new double[5];	0
org.jfree.chart.block.BorderArrangement:426-w[0] = constraint.getWidth();	0
org.jfree.chart.block.BorderArrangement:427-if (this.topBlock != null) {	0
org.jfree.chart.block.BorderArrangement:435-w[1] = w[0];	0
org.jfree.chart.block.BorderArrangement:436-if (this.bottomBlock != null) {	0
org.jfree.chart.block.BorderArrangement:443-h[2] = constraint.getHeight() - h[1] - h[0];	0
org.jfree.chart.block.BorderArrangement:444-if (this.leftBlock != null) {	0
org.jfree.chart.block.BorderArrangement:445-RectangleConstraint c3 = new RectangleConstraint(0.0,	0
org.jfree.chart.block.BorderArrangement:449-Size2D size = this.leftBlock.arrange(g2, c3);	0
org.jfree.chart.block.BorderArrangement:450-w[2] = size.width;	0
org.jfree.chart.block.BorderArrangement:452-h[3] = h[2];	0
org.jfree.chart.block.BorderArrangement:453-if (this.rightBlock != null) {	0
org.jfree.chart.block.BorderArrangement:454-RectangleConstraint c4 = new RectangleConstraint(0.0,	0
org.jfree.chart.block.BorderArrangement:458-Size2D size = this.rightBlock.arrange(g2, c4);	0
org.jfree.chart.block.BorderArrangement:459-w[3] = size.width;	0
org.jfree.chart.block.BorderArrangement:461-h[4] = h[2];	0
org.jfree.chart.block.BorderArrangement:462-w[4] = constraint.getWidth() - w[3] - w[2];	0
org.jfree.chart.block.BorderArrangement:463-RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);	0
org.jfree.chart.block.BorderArrangement:464-if (this.centerBlock != null) {	0
org.jfree.chart.plot.PiePlot:551-return this.dataset;	0
org.jfree.chart.plot.PiePlot:670-return this.interiorGap;	0
org.jfree.chart.plot.PiePlot:706-return this.circular;	0
org.jfree.chart.plot.PiePlot:1398-return this.labelGenerator;	0
org.jfree.chart.plot.PiePlot:1423-return this.labelGap;	0
org.jfree.chart.plot.PiePlot:1448-return this.maximumLabelWidth;	0
org.jfree.chart.plot.PiePlot:2049-PiePlotState state = new PiePlotState(info);	0
org.jfree.chart.plot.PiePlot:2050-state.setPassesRequired(2);	0
org.jfree.chart.plot.PiePlot:2051-state.setTotal(DatasetUtilities.calculatePieDatasetTotal(	1
org.jfree.chart.plot.PiePlot:2611-LegendItemCollection result = new LegendItemCollection();	0
org.jfree.chart.plot.PiePlot:2612-if (this.dataset == null) {	0
org.jfree.chart.plot.PiePlot:2613-return result;	0
org.jfree.chart.plot.PiePlot:492-super();	0
org.jfree.chart.plot.PiePlot:316-private transient Paint shadowPaint = Color.gray;	0
org.jfree.chart.plot.PiePlot:319-private double shadowXOffset = 4.0f;	0
org.jfree.chart.plot.PiePlot:322-private double shadowYOffset = 4.0f;	0
org.jfree.chart.plot.PiePlot:365-private boolean simpleLabels = true;	0
org.jfree.chart.plot.PiePlot:383-private double maximumLabelWidth = 0.14;	0
org.jfree.chart.plot.PiePlot:389-private double labelGap = 0.025;	0
org.jfree.chart.plot.PiePlot:395-private double labelLinkMargin = 0.025;	0
org.jfree.chart.plot.PiePlot:398-private transient Paint labelLinkPaint = Color.black;	0
org.jfree.chart.plot.PiePlot:401-private transient Stroke labelLinkStroke = new BasicStroke(0.5f);	0
org.jfree.chart.plot.PiePlot:493-this.dataset = dataset;	0
org.jfree.chart.plot.PiePlot:494-if (dataset != null) {	0
org.jfree.chart.plot.PiePlot:497-this.pieIndex = 0;	0
org.jfree.chart.plot.PiePlot:499-this.interiorGap = DEFAULT_INTERIOR_GAP;	0
org.jfree.chart.plot.PiePlot:500-this.circular = true;	0
org.jfree.chart.plot.PiePlot:501-this.startAngle = DEFAULT_START_ANGLE;	0
org.jfree.chart.plot.PiePlot:502-this.direction = Rotation.CLOCKWISE;	0
org.jfree.chart.plot.PiePlot:503-this.minimumArcAngleToDraw = DEFAULT_MINIMUM_ARC_ANGLE_TO_DRAW;	0
org.jfree.chart.plot.PiePlot:505-this.sectionPaintMap = new PaintMap();	0
org.jfree.chart.plot.PiePlot:506-this.baseSectionPaint = Color.gray;	0
org.jfree.chart.plot.PiePlot:508-this.sectionOutlinesVisible = true;	0
org.jfree.chart.plot.PiePlot:509-this.sectionOutlinePaintMap = new PaintMap();	0
org.jfree.chart.plot.PiePlot:510-this.baseSectionOutlinePaint = DEFAULT_OUTLINE_PAINT;	0
org.jfree.chart.plot.PiePlot:512-this.sectionOutlineStrokeMap = new StrokeMap();	0
org.jfree.chart.plot.PiePlot:513-this.baseSectionOutlineStroke = DEFAULT_OUTLINE_STROKE;	0
org.jfree.chart.plot.PiePlot:515-this.explodePercentages = new TreeMap();	0
org.jfree.chart.plot.PiePlot:517-this.labelGenerator = new StandardPieSectionLabelGenerator();	0
org.jfree.chart.plot.PiePlot:518-this.labelFont = DEFAULT_LABEL_FONT;	0
org.jfree.chart.plot.PiePlot:519-this.labelPaint = DEFAULT_LABEL_PAINT;	0
org.jfree.chart.plot.PiePlot:520-this.labelBackgroundPaint = DEFAULT_LABEL_BACKGROUND_PAINT;	0
org.jfree.chart.plot.PiePlot:521-this.labelOutlinePaint = DEFAULT_LABEL_OUTLINE_PAINT;	0
org.jfree.chart.plot.PiePlot:522-this.labelOutlineStroke = DEFAULT_LABEL_OUTLINE_STROKE;	0
org.jfree.chart.plot.PiePlot:523-this.labelShadowPaint = DEFAULT_LABEL_SHADOW_PAINT;	0
org.jfree.chart.plot.PiePlot:524-this.labelLinksVisible = true;	0
org.jfree.chart.plot.PiePlot:525-this.labelDistributor = new PieLabelDistributor(0);	0
org.jfree.chart.plot.PiePlot:527-this.simpleLabels = false;	0
org.jfree.chart.plot.PiePlot:528-this.simpleLabelOffset = new RectangleInsets(UnitType.RELATIVE, 0.18,	0
org.jfree.chart.plot.PiePlot:530-this.labelPadding = new RectangleInsets(2, 2, 2, 2);	0
org.jfree.data.time.TimeSeries:880-throw new IllegalArgumentException("Requires start <= end.");	0
org.jfree.data.time.TimeSeries:857-Object clone = createCopy(0, getItemCount() - 1);	1
org.jfree.data.time.TimeSeries:140-this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION,	0
org.jfree.data.time.TimeSeries:142-}	0
org.jfree.data.time.TimeSeries:876-if (start < 0) {	0
org.jfree.data.time.TimeSeries:879-if (end < start) {	0
org.jfree.data.time.TimeSeries:153-this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION,	0
org.jfree.data.time.TimeSeries:155-}	0
org.jfree.data.time.TimeSeries:172-super(name);	0
org.jfree.data.time.TimeSeries:173-this.domain = domain;	0
org.jfree.data.time.TimeSeries:174-this.range = range;	0
org.jfree.data.time.TimeSeries:175-this.timePeriodClass = timePeriodClass;	0
org.jfree.data.time.TimeSeries:176-this.data = new java.util.ArrayList();	0
org.jfree.data.time.TimeSeries:177-this.maximumItemCount = Integer.MAX_VALUE;	0
org.jfree.data.time.TimeSeries:178-this.maximumItemAge = Long.MAX_VALUE;	0
org.jfree.data.time.TimeSeries:179-}	0
org.jfree.data.time.TimeSeries:238-return this.data.size();	0
org.jfree.data.time.TimeSeries:339-return (TimeSeriesDataItem) this.data.get(index);	0
org.jfree.data.time.TimeSeries:370-return getDataItem(index).getPeriod();	0
org.jfree.data.time.TimeSeries:489-if (item == null) {	0
org.jfree.data.time.TimeSeries:492-if (!item.getPeriod().getClass().equals(this.timePeriodClass)) {	0
org.jfree.data.time.TimeSeries:504-boolean added = false;	0
org.jfree.data.time.TimeSeries:505-int count = getItemCount();	0
org.jfree.data.time.TimeSeries:506-if (count == 0) {	0
org.jfree.data.time.TimeSeries:507-this.data.add(item);	0
org.jfree.data.time.TimeSeries:508-added = true;	0
org.jfree.data.time.TimeSeries:511-RegularTimePeriod last = getTimePeriod(getItemCount() - 1);	0
org.jfree.data.time.TimeSeries:512-if (item.getPeriod().compareTo(last) > 0) {	0
org.jfree.data.time.TimeSeries:513-this.data.add(item);	0
org.jfree.data.time.TimeSeries:514-added = true;	0
org.jfree.data.time.TimeSeries:534-if (added) {	0
org.jfree.data.time.TimeSeries:536-if (getItemCount() > this.maximumItemCount) {	0
org.jfree.data.time.TimeSeries:540-removeAgedItems(false);// remove old items if necessary, but	0
org.jfree.data.time.TimeSeries:543-if (notify) {	0
org.jfree.data.time.TimeSeries:544-fireSeriesChanged();	0
org.jfree.data.time.TimeSeries:548-}	0
org.jfree.data.time.TimeSeries:586-add(period, value, true);	0
org.jfree.data.time.TimeSeries:587-}	0
org.jfree.data.time.TimeSeries:600-TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);	0
org.jfree.data.time.TimeSeries:601-add(item, notify);	0
org.jfree.data.time.TimeSeries:602-}	0
org.jfree.data.time.TimeSeries:738-if (getItemCount() > 1) {	0
org.jfree.data.time.TimeSeries:739-long latest = getTimePeriod(getItemCount() - 1).getSerialIndex();	0
org.jfree.data.time.TimeSeries:740-boolean removed = false;	0
org.jfree.data.time.TimeSeries:742-> this.maximumItemAge) {	0
org.jfree.data.time.TimeSeries:746-if (removed && notify) {	0
org.jfree.data.time.TimeSeries:750-}	0
org.jfree.data.time.TimeSeries:189-return this.domain;	0
org.jfree.data.time.TimeSeries:202-String old = this.domain;	0
org.jfree.data.time.TimeSeries:203-this.domain = description;	0
org.jfree.data.DefaultKeyedValues:316-this.keys.remove(index);	0
org.jfree.data.DefaultKeyedValues:317-this.values.remove(index);	0
org.jfree.data.DefaultKeyedValues:318-if (index < this.keys.size()) {	1
org.jfree.data.DefaultKeyedValues:321-}	0
org.jfree.data.DefaultKeyedValues:333-int index = getIndex(key);	0
org.jfree.data.DefaultKeyedValues:334-if (index < 0) {	0
org.jfree.data.DefaultKeyedValues:337-removeValue(index);	0
org.jfree.data.DefaultKeyedValues:338-}	0
org.jfree.data.DefaultKeyedValues:335-return;	1
org.jfree.data.DefaultKeyedValues2D:455-Iterator iterator = this.rows.iterator();	1
org.jfree.data.DefaultKeyedValues2D:456-while (iterator.hasNext()) {	0
org.jfree.data.DefaultKeyedValues2D:457-DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();	0
org.jfree.data.DefaultKeyedValues2D:458-rowData.removeValue(columnKey);	1
org.jfree.data.DefaultKeyedValues2D:459-}	0
org.jfree.data.DefaultKeyedValues2D:460-this.columnKeys.remove(columnKey);	0
org.jfree.data.DefaultKeyedValues2D:461-}	0
org.jfree.data.DefaultKeyedValues:319-rebuildIndex();	0
org.jfree.data.DefaultKeyedValues:157-return i.intValue();	0
org.jfree.data.DefaultKeyedValues:299-this.indexMap.clear();	0
org.jfree.data.DefaultKeyedValues:300-for (int i = 0; i < this.keys.size(); i++) {	0
org.jfree.data.DefaultKeyedValues:301-final Object key = this.keys.get(i);	0
org.jfree.data.DefaultKeyedValues:302-this.indexMap.put(key, new Integer(i));	0
org.jfree.data.DefaultKeyedValues:304-}	0
org.jfree.data.DefaultKeyedValues:229-if (key == null) {	0
org.jfree.data.DefaultKeyedValues:232-int keyIndex = getIndex(key);	0
org.jfree.data.DefaultKeyedValues:233-if (keyIndex >= 0) {	0
org.jfree.data.DefaultKeyedValues:238-this.keys.add(key);	0
org.jfree.data.DefaultKeyedValues:239-this.values.add(value);	0
org.jfree.data.DefaultKeyedValues:240-this.indexMap.put(key, new Integer(this.keys.size() - 1));	0
org.jfree.data.DefaultKeyedValues:242-}	0
org.jfree.data.DefaultKeyedValues:150-if (key == null) {	0
org.jfree.data.DefaultKeyedValues:153-final Integer i = (Integer) this.indexMap.get(key);	0
org.jfree.data.DefaultKeyedValues:154-if (i == null) {	0
org.jfree.data.DefaultKeyedValues:155-return -1;// key not found	0
org.jfree.data.DefaultKeyedValues:98-public DefaultKeyedValues() {	0
org.jfree.data.DefaultKeyedValues:99-this.keys = new ArrayList();	0
org.jfree.data.DefaultKeyedValues:100-this.values = new ArrayList();	0
org.jfree.data.DefaultKeyedValues:101-this.indexMap = new HashMap();	0
org.jfree.data.DefaultKeyedValues:102-}	0
org.jfree.data.DefaultKeyedValues:234-this.keys.set(keyIndex, key);	0
org.jfree.data.DefaultKeyedValues2D:323-row = (DefaultKeyedValues) this.rows.get(rowIndex);	0
org.jfree.data.DefaultKeyedValues:209-setValue(key, value);	0
org.jfree.data.DefaultKeyedValues:210-}	0
org.jfree.data.DefaultKeyedValues:197-addValue(key, new Double(value));	0
org.jfree.data.DefaultKeyedValues:198-}	0
org.jfree.data.DefaultKeyedValues2D:303-setValue(value, rowKey, columnKey);	0
org.jfree.data.DefaultKeyedValues2D:304-}	0
org.jfree.data.DefaultKeyedValues2D:182-if (key == null) {	0
org.jfree.data.DefaultKeyedValues2D:185-if (this.sortRowKeys) {	0
org.jfree.data.DefaultKeyedValues2D:189-return this.rowKeys.indexOf(key);	0
org.jfree.chart.plot.ValueMarker:95-super(paint, stroke, paint, stroke, alpha);	1
org.jfree.chart.plot.ValueMarker:96-this.value = value;	0
org.jfree.chart.plot.ValueMarker:97-}	0
org.jfree.chart.plot.ValueMarker:107-return this.value;	0
org.jfree.chart.plot.ValueMarker:68-super();	0
org.jfree.chart.plot.ValueMarker:69-this.value = value;	0
org.jfree.chart.plot.ValueMarker:70-}	0
org.jfree.chart.plot.ValueMarker:80-this(value, paint, stroke, paint, stroke, 1.0f);	0
org.jfree.chart.plot.ValueMarker:81-}	0
org.jfree.chart.plot.ValueMarker:121-this.value = value;	0
org.jfree.chart.plot.ValueMarker:122-notifyListeners(new MarkerChangeEvent(this));	0
org.jfree.chart.plot.ValueMarker:123-}	0
org.jfree.chart.plot.ValueMarker:141-if (obj == this) {	0
org.jfree.chart.plot.ValueMarker:142-return true;	0
org.jfree.chart.plot.ValueMarker:144-if (!super.equals(obj)) {	0
org.jfree.chart.plot.ValueMarker:145-return false;	0
org.jfree.chart.plot.ValueMarker:147-if (!(obj instanceof ValueMarker)) {	0
org.jfree.chart.plot.ValueMarker:148-return false;	0
org.jfree.chart.plot.ValueMarker:150-ValueMarker that = (ValueMarker) obj;	0
org.jfree.chart.plot.ValueMarker:151-if (this.value != that.value) {	0
org.jfree.chart.plot.ValueMarker:152-return false;	0
org.jfree.chart.plot.ValueMarker:154-return true;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:173-this.maximumRangeValue = maxval;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:174-this.maximumRangeValueRow = r;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:175-this.maximumRangeValueColumn = c;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:155-updateBounds();	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:183-else if (minval < this.minimumRangeValue) {	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:740-this.minimumRangeValue = Double.NaN;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:741-this.maximumRangeValue = Double.NaN;	1
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:742-}	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:172-else if (maxval > this.maximumRangeValue) {	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:532-return this.rangeBounds;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:147-this.data.addObject(item, rowKey, columnKey);	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:150-int r = this.data.getRowIndex(rowKey);	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:151-int c = this.data.getColumnIndex(columnKey);	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:152-if ((this.maximumRangeValueRow == r && this.maximumRangeValueColumn	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:158-double minval = Double.NaN;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:159-if (item.getMinOutlier() != null) {	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:160-minval = item.getMinOutlier().doubleValue();	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:162-double maxval = Double.NaN;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:163-if (item.getMaxOutlier() != null) {	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:164-maxval = item.getMaxOutlier().doubleValue();	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:167-if (Double.isNaN(this.maximumRangeValue)) {	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:168-this.maximumRangeValue = maxval;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:169-this.maximumRangeValueRow = r;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:170-this.maximumRangeValueColumn = c;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:178-if (Double.isNaN(this.minimumRangeValue)) {	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:179-this.minimumRangeValue = minval;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:180-this.minimumRangeValueRow = r;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:181-this.minimumRangeValueColumn = c;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:189-this.rangeBounds = new Range(this.minimumRangeValue,	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:191-fireDatasetChanged();	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:193-}	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:106-public DefaultBoxAndWhiskerCategoryDataset() {	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:107-this.data = new KeyedObjects2D();	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:108-this.minimumRangeValue = Double.NaN;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:109-this.minimumRangeValueRow = -1;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:110-this.minimumRangeValueColumn = -1;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:111-this.maximumRangeValue = Double.NaN;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:112-this.maximumRangeValueRow = -1;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:113-this.maximumRangeValueColumn = -1;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:114-this.rangeBounds = new Range(0.0, 0.0);	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:115-}	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:129-BoxAndWhiskerItem item = BoxAndWhiskerCalculator	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:131-add(item, rowKey, columnKey);	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:132-}	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:184-this.minimumRangeValue = minval;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:185-this.minimumRangeValueRow = r;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:186-this.minimumRangeValueColumn = c;	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:204-return (BoxAndWhiskerItem) this.data.getObject(row, column);	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:219-return getMedianValue(row, column);	0
org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset:234-return getMedianValue(rowKey, columnKey);	0
org.jfree.data.KeyedObjects2D:74-public KeyedObjects2D() {	0
org.jfree.data.KeyedObjects2D:75-this.rowKeys = new java.util.ArrayList();	0
org.jfree.data.KeyedObjects2D:76-this.columnKeys = new java.util.ArrayList();	0
org.jfree.data.KeyedObjects2D:77-this.rows = new java.util.ArrayList();	0
org.jfree.data.KeyedObjects2D:78-}	0
org.jfree.data.KeyedObjects2D:262-if (rowKey == null) {	0
org.jfree.data.KeyedObjects2D:265-if (columnKey == null) {	0
org.jfree.data.KeyedObjects2D:269-int rowIndex = this.rowKeys.indexOf(rowKey);	0
org.jfree.data.KeyedObjects2D:270-if (rowIndex >= 0) {	0
org.jfree.data.KeyedObjects2D:274-this.rowKeys.add(rowKey);	0
org.jfree.data.KeyedObjects2D:275-row = new KeyedObjects();	0
org.jfree.data.KeyedObjects2D:276-this.rows.add(row);	0
org.jfree.data.KeyedObjects2D:278-row.setObject(columnKey, object);	0
org.jfree.data.KeyedObjects2D:279-int columnIndex = this.columnKeys.indexOf(columnKey);	0
org.jfree.data.KeyedObjects2D:280-if (columnIndex < 0) {	0
org.jfree.data.KeyedObjects2D:281-this.columnKeys.add(columnKey);	0
org.jfree.data.KeyedObjects2D:284-}	0
org.jfree.data.KeyedObjects2D:150-return this.rowKeys.indexOf(key);	0
org.jfree.data.KeyedObjects2D:187-return this.columnKeys.indexOf(key);	0
org.jfree.data.KeyedObjects2D:215-if (rowKey == null) {	0
org.jfree.data.KeyedObjects2D:218-if (columnKey == null) {	0
org.jfree.data.KeyedObjects2D:221-int row = this.rowKeys.indexOf(rowKey);	0
org.jfree.data.KeyedObjects2D:222-if (row < 0) {	0
org.jfree.data.KeyedObjects2D:226-int column = this.columnKeys.indexOf(columnKey);	0
org.jfree.data.KeyedObjects2D:227-if (column < 0) {	0
org.jfree.data.KeyedObjects2D:231-if (row >= 0) {	1
org.jfree.data.KeyedObjects2D:232-KeyedObjects rowData = (KeyedObjects) this.rows.get(row);	0
org.jfree.data.KeyedObjects2D:233-return rowData.getObject(columnKey);	0
org.jfree.data.KeyedObjects2D:370-int index = getColumnIndex(columnKey);	0
org.jfree.data.KeyedObjects2D:371-if (index < 0) {	0
org.jfree.data.KeyedObjects2D:375-Iterator iterator = this.rows.iterator();	0
org.jfree.data.KeyedObjects2D:376-while (iterator.hasNext()) {	0
org.jfree.data.KeyedObjects2D:377-KeyedObjects rowData = (KeyedObjects) iterator.next();	0
org.jfree.data.KeyedObjects2D:378-rowData.removeValue(columnKey);	1
org.jfree.data.KeyedObjects2D:174-return (Comparable) this.columnKeys.get(column);	0
org.jfree.data.KeyedObjects2D:297-setObject(null, rowKey, columnKey);	0
org.jfree.data.KeyedObjects2D:300-boolean allNull = true;	0
org.jfree.data.KeyedObjects2D:301-int rowIndex = getRowIndex(rowKey);	0
org.jfree.data.KeyedObjects2D:302-KeyedObjects row = (KeyedObjects) this.rows.get(rowIndex);	0
org.jfree.data.KeyedObjects2D:304-for (int item = 0, itemCount = row.getItemCount(); item < itemCount;	0
org.jfree.data.KeyedObjects2D:306-if (row.getObject(item) != null) {	0
org.jfree.data.KeyedObjects2D:305-item++) {	0
org.jfree.data.KeyedObjects2D:312-if (allNull) {	0
org.jfree.data.KeyedObjects2D:313-this.rowKeys.remove(rowIndex);	0
org.jfree.data.KeyedObjects2D:314-this.rows.remove(rowIndex);	0
org.jfree.data.KeyedObjects2D:320-}	0
org.jfree.data.KeyedObjects2D:344-int index = getRowIndex(rowKey);	0
org.jfree.data.KeyedObjects2D:345-removeRow(index);	1
org.jfree.data.KeyedObjects2D:346-}	0
org.jfree.data.KeyedObjects2D:356-Comparable columnKey = getColumnKey(columnIndex);	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:169-if (this.plotLines != draw) {	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:170-this.plotLines = draw;	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:171-this.notifyListeners(new RendererChangeEvent(this));	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:174-}	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:144-super();	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:107-private boolean plotLines = false;	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:112-private transient Paint groupPaint = Color.black;	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:117-private transient Stroke groupStroke = new BasicStroke(1.0f);	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:120-private transient Icon minIcon = getIcon(new Arc2D.Double(-4, -4, 8, 8, 0,	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:124-private transient Icon maxIcon = getIcon(new Arc2D.Double(-4, -4, 8, 8, 0,	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:128-private transient Icon objectIcon = getIcon(new Line2D.Double(-4, 0, 4, 0),	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:132-private int lastCategory = -1;	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:145-}	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:448-final int width = shape.getBounds().width;	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:449-final int height = shape.getBounds().height;	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:450-final GeneralPath path = new GeneralPath(shape);	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:451-return new Icon() {	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:488-final int width = shape.getBounds().width;	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:489-final int height = shape.getBounds().height;	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:490-final GeneralPath path = new GeneralPath(shape);	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:491-return new Icon() {	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:156-return this.plotLines;	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:185-return this.groupPaint;	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:198-if (paint == null) {	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:199-throw new IllegalArgumentException("Null 'paint' argument.");	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:201-this.groupPaint = paint;	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:202-notifyListeners(new RendererChangeEvent(this));	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:203-}	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:214-return this.groupStroke;	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:225-if (stroke == null) {	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:226-throw new IllegalArgumentException("Null 'stroke' argument.");	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:228-this.groupStroke = stroke;	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:229-notifyListeners(new RendererChangeEvent(this));	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:230-}	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:240-return this.objectIcon;	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:251-if (icon == null) {	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:252-throw new IllegalArgumentException("Null 'icon' argument.");	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:254-this.objectIcon = icon;	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:255-notifyListeners(new RendererChangeEvent(this));	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:256-}	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:267-return this.maxIcon;	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:280-if (icon == null) {	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:281-throw new IllegalArgumentException("Null 'icon' argument.");	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:283-this.maxIcon = icon;	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:284-notifyListeners(new RendererChangeEvent(this));	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:285-}	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:296-return this.minIcon;	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:309-if (icon == null) {	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:310-throw new IllegalArgumentException("Null 'icon' argument.");	0
org.jfree.chart.renderer.category.MinMaxCategoryRenderer:312-this.minIcon = icon;	0
org.jfree.chart.renderer.GrayPaintScale:124-double v = Math.max(value, this.lowerBound);	0
org.jfree.chart.renderer.GrayPaintScale:125-v = Math.min(v, this.upperBound);	0
org.jfree.chart.renderer.GrayPaintScale:126-int g = (int) ((value - this.lowerBound) / (this.upperBound	1
org.jfree.chart.renderer.GrayPaintScale:128-return new Color(g, g, g);	0
org.jfree.chart.renderer.GrayPaintScale:72-this(0.0, 1.0);	0
org.jfree.chart.renderer.GrayPaintScale:73-}	0
org.jfree.chart.renderer.GrayPaintScale:84-public GrayPaintScale(double lowerBound, double upperBound) {	0
org.jfree.chart.renderer.GrayPaintScale:85-if (lowerBound >= upperBound) {	0
org.jfree.chart.renderer.GrayPaintScale:89-this.lowerBound = lowerBound;	0
org.jfree.chart.renderer.GrayPaintScale:90-this.upperBound = upperBound;	0
org.jfree.chart.renderer.GrayPaintScale:91-}	0
org.jfree.chart.renderer.GrayPaintScale:86-throw new IllegalArgumentException(	0
org.jfree.chart.renderer.GrayPaintScale:101-return this.lowerBound;	0
org.jfree.chart.renderer.GrayPaintScale:112-return this.upperBound;	0
org.jfree.chart.renderer.GrayPaintScale:145-if (obj == this) {	0
org.jfree.chart.renderer.GrayPaintScale:146-return true;	0
org.jfree.chart.renderer.GrayPaintScale:148-if (!(obj instanceof GrayPaintScale)) {	0
org.jfree.chart.renderer.GrayPaintScale:149-return false;	0
org.jfree.chart.renderer.GrayPaintScale:151-GrayPaintScale that = (GrayPaintScale) obj;	0
org.jfree.chart.renderer.GrayPaintScale:152-if (this.lowerBound != that.lowerBound) {	0
org.jfree.chart.renderer.GrayPaintScale:153-return false;	0
org.jfree.chart.renderer.GrayPaintScale:155-if (this.upperBound != that.upperBound) {	0
org.jfree.chart.renderer.GrayPaintScale:156-return false;	0
org.jfree.chart.renderer.GrayPaintScale:158-return true;	0
org.jfree.chart.renderer.GrayPaintScale:170-return super.clone();	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:200-if (!(data instanceof StatisticalCategoryDataset)) {	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:204-StatisticalCategoryDataset statData = (StatisticalCategoryDataset) data;	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:206-PlotOrientation orientation = plot.getOrientation();	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:207-if (orientation == PlotOrientation.HORIZONTAL) {	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:215-}	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:208-drawHorizontalItem(g2, state, dataArea, plot, domainAxis,	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:240-RectangleEdge xAxisLocation = plot.getDomainAxisEdge();	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:243-double rectY = domainAxis.getCategoryStart(column, getColumnCount(),	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:246-int seriesCount = getRowCount();	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:247-int categoryCount = getColumnCount();	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:248-if (seriesCount > 1) {	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:254-rectY = rectY + row * state.getBarWidth();	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:258-Number meanValue = dataset.getMeanValue(row, column);	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:260-double value = meanValue.doubleValue();	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:261-double base = 0.0;	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:262-double lclip = getLowerClip();	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:263-double uclip = getUpperClip();	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:265-if (uclip <= 0.0) {// cases 1, 2, 3 and 4	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:274-else if (lclip <= 0.0) { // cases 5, 6, 7 and 8	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:275-if (value >= uclip) {	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:279-if (value <= lclip) {	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:294-RectangleEdge yAxisLocation = plot.getRangeAxisEdge();	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:295-double transY1 = rangeAxis.valueToJava2D(base, dataArea, yAxisLocation);	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:296-double transY2 = rangeAxis.valueToJava2D(value, dataArea,	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:298-double rectX = Math.min(transY2, transY1);	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:300-double rectHeight = state.getBarWidth();	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:301-double rectWidth = Math.abs(transY2 - transY1);	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:303-Rectangle2D bar = new Rectangle2D.Double(rectX, rectY, rectWidth,	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:305-Paint seriesPaint = getItemPaint(row, column);	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:306-g2.setPaint(seriesPaint);	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:307-g2.fill(bar);	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:308-if (isDrawBarOutline() && state.getBarWidth() > 3) {	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:315-double valueDelta = dataset.getStdDevValue(row, column).doubleValue();	1
org.jfree.chart.renderer.category.StatisticalBarRenderer:316-double highVal = rangeAxis.valueToJava2D(meanValue.doubleValue()	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:318-double lowVal = rangeAxis.valueToJava2D(meanValue.doubleValue()	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:321-if (this.errorIndicatorStroke != null) {	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:322-g2.setStroke(this.errorIndicatorStroke);	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:327-if (this.errorIndicatorPaint != null) {	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:328-g2.setPaint(this.errorIndicatorPaint);	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:334-Line2D line = null;	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:335-line = new Line2D.Double(lowVal, rectY + rectHeight / 2.0d,	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:337-g2.draw(line);	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:338-line = new Line2D.Double(highVal, rectY + rectHeight * 0.25,	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:340-g2.draw(line);	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:341-line = new Line2D.Double(lowVal, rectY + rectHeight * 0.25,	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:343-g2.draw(line);	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:345-CategoryItemLabelGenerator generator = getItemLabelGenerator(row,	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:347-if (generator != null && isItemLabelVisible(row, column)) {	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:353-EntityCollection entities = state.getEntityCollection();	0
org.jfree.chart.renderer.category.StatisticalBarRenderer:354-if (entities != null) {	0
org.jfree.chart.axis.Axis:314-return this.visible;	0
org.jfree.chart.axis.Axis:315-}	0
org.jfree.chart.axis.Axis:343-}	0
org.jfree.chart.axis.Axis:382-}	0
org.jfree.chart.axis.Axis:411-}	0
org.jfree.chart.axis.Axis:439-}	0
org.jfree.chart.axis.Axis:468-}	0
org.jfree.chart.axis.Axis:550-}	0
org.jfree.chart.axis.Axis:632-}	0
org.jfree.chart.axis.Axis:663-}	0
org.jfree.chart.axis.Axis:695-}	0
org.jfree.chart.axis.Axis:722-}	0
org.jfree.chart.axis.Axis:912-}	0
org.jfree.chart.axis.Axis:1057-String axisLabel = getLabel();	0
org.jfree.chart.axis.Axis:1058-if (axisLabel != null && !axisLabel.equals("")) {	0
org.jfree.chart.axis.Axis:1059-FontMetrics fm = g2.getFontMetrics(getLabelFont());	0
org.jfree.chart.axis.Axis:1060-Rectangle2D bounds = TextUtilities.getTextBounds(axisLabel, g2, fm);	0
org.jfree.chart.axis.Axis:1061-RectangleInsets insets = getLabelInsets();	0
org.jfree.chart.axis.Axis:1062-bounds = insets.createOutsetRectangle(bounds);	0
org.jfree.chart.axis.Axis:1063-double angle = getLabelAngle();	0
org.jfree.chart.axis.Axis:1064-if (edge == RectangleEdge.LEFT || edge == RectangleEdge.RIGHT) {	0
org.jfree.chart.axis.Axis:1065-angle = angle - Math.PI / 2.0;	0
org.jfree.chart.axis.Axis:1066-}	0
org.jfree.chart.axis.Axis:1068-double y = bounds.getCenterY();	0
org.jfree.chart.axis.Axis:1069-AffineTransform transformer	0
org.jfree.chart.axis.Axis:1070-= AffineTransform.getRotateInstance(angle, x, y);	0
org.jfree.chart.axis.Axis:1072-result = labelBounds.getBounds2D();	0
org.jfree.chart.axis.Axis:1073-}	0
org.jfree.chart.axis.Axis:1076-	0
org.jfree.chart.axis.Axis:1098-throw new IllegalArgumentException("Null 'state' argument.");	0
org.jfree.chart.axis.Axis:1102-return state;	0
org.jfree.chart.axis.Axis:1106-RectangleInsets insets = getLabelInsets();	0
org.jfree.chart.axis.Axis:1107-g2.setFont(font);	0
org.jfree.chart.axis.Axis:1108-g2.setPaint(getLabelPaint());	0
org.jfree.chart.axis.Axis:1109-FontMetrics fm = g2.getFontMetrics();	0
org.jfree.chart.axis.Axis:1110-Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);	0
org.jfree.chart.axis.Axis:1111-Shape hotspot = null;	0
org.jfree.chart.axis.Axis:1112-	0
org.jfree.chart.axis.Axis:1114-AffineTransform t = AffineTransform.getRotateInstance(	0
org.jfree.chart.axis.Axis:1191-ChartRenderingInfo owner = plotState.getOwner();	0
org.jfree.chart.axis.Axis:1192-EntityCollection entities = owner.getEntityCollection();	1
org.jfree.chart.axis.Axis:1193-if (entities != null) {	0
org.jfree.chart.axis.Axis:1194-entities.add(new AxisLabelEntity(this, hotspot,	0
org.jfree.chart.axis.Axis:1195-this.labelToolTip, this.labelURL));	0
org.jfree.chart.axis.Axis:1196-}	0
org.jfree.chart.axis.Axis:1197-}	1
org.jfree.chart.axis.Axis:1115-getLabelAngle(), labelBounds.getCenterX(),	0
org.jfree.chart.axis.Axis:1118-labelBounds = rotatedLabelBounds.getBounds2D();	0
org.jfree.chart.axis.Axis:1119-float w = (float) labelBounds.getWidth();	0
org.jfree.chart.axis.Axis:1120-float h = (float) labelBounds.getHeight();	0
org.apache.commons.cli.CommandLine:57-{	0
org.apache.commons.cli.CommandLine:43-private List args = new LinkedList();	0
org.apache.commons.cli.CommandLine:46-private Map options = new HashMap();	1
org.apache.commons.cli.CommandLine:47-private Map names = new HashMap();	0
org.apache.commons.cli.CommandLine:51-private Map hashcodeMap = new HashMap();	1
org.apache.commons.cli.CommandLine:59-}	0
org.apache.commons.cli.CommandLine:69-return options.containsKey(opt);	1
org.apache.commons.cli.CommandLine:80-return hasOption(String.valueOf(opt));	0
org.apache.commons.cli.CommandLine:123-String[] values = getOptionValues(opt);	0
org.apache.commons.cli.CommandLine:125-return (values == null) ? null : values[0];	0
org.apache.commons.cli.CommandLine:137-return getOptionValue(String.valueOf(opt));	0
org.apache.commons.cli.CommandLine:149-opt = Util.stripLeadingHyphens(opt);	1
org.apache.commons.cli.CommandLine:151-String key = opt;	0
org.apache.commons.cli.CommandLine:152-if (names.containsKey(opt))	0
org.apache.commons.cli.CommandLine:155-key = (String) names.get(opt);	0
org.apache.commons.cli.CommandLine:158-if (options.containsKey(key))	0
org.apache.commons.cli.CommandLine:160-return ((Option) options.get(key)).getValues();	0
org.apache.commons.cli.CommandLine:278-hashcodeMap.put(new Integer(opt.hashCode()), opt);	1
org.apache.commons.cli.CommandLine:279-String key = opt.getKey();	0
org.apache.commons.cli.CommandLine:280-if (key == null)	0
org.apache.commons.cli.CommandLine:286-names.put(opt.getLongOpt(), key);	0
org.apache.commons.cli.CommandLine:288-options.put(key, opt);	0
org.apache.commons.cli.CommandLine:289-}	0
org.apache.commons.cli.CommandLine:91-String res = getOptionValue(opt);	0
org.apache.commons.cli.CommandLine:93-if (!options.containsKey(opt))	1
org.apache.commons.cli.CommandLine:95-return null;	0
org.apache.commons.cli.CommandLine:98-Object type = ((Option) options.get(opt)).getType();	1
org.apache.commons.cli.CommandLine:100-return (res == null)? null : TypeHandler.createValue(res, type);	0
org.apache.commons.cli.CommandLine:111-return getOptionObject(String.valueOf(opt));	0
org.apache.commons.cli.CommandLine:162-return null;	0
org.apache.commons.cli.CommandLine:181-return getOptionValues(String.valueOf(opt));	0
org.apache.commons.cli.CommandLine:195-String answer = getOptionValue(opt);	0
org.apache.commons.cli.CommandLine:197-return (answer != null) ? answer : defaultValue;	0
org.apache.commons.cli.CommandLine:211-return getOptionValue(String.valueOf(opt), defaultValue);	0
org.apache.commons.cli.CommandLine:221-String[] answer = new String[args.size()];	0
org.apache.commons.cli.CommandLine:223-args.toArray(answer);	0
org.apache.commons.cli.CommandLine:225-return answer;	0
org.apache.commons.cli.CommandLine:235-return args;	0
org.apache.commons.cli.CommandLine:267-args.add(arg);	0
org.apache.commons.cli.CommandLine:268-}	0
org.apache.commons.cli.CommandLine:282-key = opt.getLongOpt();	0
org.apache.commons.cli.CommandLine:299-return hashcodeMap.values().iterator();	1
org.apache.commons.cli.CommandLine:309-Collection processed = options.values();	1
org.apache.commons.cli.CommandLine:312-Option[] optionsArray = new Option[processed.size()];	0
org.apache.commons.cli.CommandLine:315-return (Option[]) processed.toArray(optionsArray);	0
org.apache.commons.cli.PosixParser:30-public class PosixParser extends Parser {	0
org.apache.commons.cli.PosixParser:33-private ArrayList tokens = new ArrayList();	0
org.apache.commons.cli.PosixParser:51-eatTheRest = false;	0
org.apache.commons.cli.PosixParser:52-tokens.clear();	0
org.apache.commons.cli.PosixParser:53-currentOption = null;	0
org.apache.commons.cli.PosixParser:54-}	0
org.apache.commons.cli.PosixParser:97-init();	0
org.apache.commons.cli.PosixParser:98-this.options = options;	0
org.apache.commons.cli.PosixParser:101-Iterator iter = Arrays.asList(arguments).iterator();	0
org.apache.commons.cli.PosixParser:105-while (iter.hasNext())	0
org.apache.commons.cli.PosixParser:108-token = (String) iter.next();	0
org.apache.commons.cli.PosixParser:111-if (token.startsWith("--"))	0
org.apache.commons.cli.PosixParser:126-else if ("-".equals(token))	0
org.apache.commons.cli.PosixParser:130-else if (token.startsWith("-"))	0
org.apache.commons.cli.PosixParser:132-int tokenLength = token.length();	0
org.apache.commons.cli.PosixParser:134-if (tokenLength == 2)	0
org.apache.commons.cli.PosixParser:136-processOptionToken(token, stopAtNonOption);	0
org.apache.commons.cli.PosixParser:138-else if (options.hasOption(token)) {	0
org.apache.commons.cli.PosixParser:144-burstToken(token, stopAtNonOption);	0
org.apache.commons.cli.PosixParser:146-}	0
org.apache.commons.cli.PosixParser:159-gobble(iter);	0
org.apache.commons.cli.PosixParser:162-return (String[]) tokens.toArray(new String[] {});	0
org.apache.commons.cli.PosixParser:172-if (eatTheRest)	0
org.apache.commons.cli.PosixParser:179-}	0
org.apache.commons.cli.PosixParser:241-if (this.options.hasOption(token))	0
org.apache.commons.cli.PosixParser:243-currentOption = this.options.getOption(token);	0
org.apache.commons.cli.PosixParser:244-tokens.add(token);	0
org.apache.commons.cli.PosixParser:250-}	0
org.apache.commons.cli.PosixParser:280-int tokenLength = token.length();	0
org.apache.commons.cli.PosixParser:282-for (int i = 1; i < tokenLength; i++)	0
org.apache.commons.cli.PosixParser:284-String ch = String.valueOf(token.charAt(i));	0
org.apache.commons.cli.PosixParser:285-boolean hasOption = options.hasOption(ch);	0
org.apache.commons.cli.PosixParser:287-if (hasOption)	0
org.apache.commons.cli.PosixParser:289-tokens.add("-" + ch);	0
org.apache.commons.cli.PosixParser:290-currentOption = options.getOption(ch);	0
org.apache.commons.cli.PosixParser:292-if (currentOption.hasArg() && (token.length() != (i + 1)))	0
org.apache.commons.cli.PosixParser:294-tokens.add(token.substring(i + 1));	0
org.apache.commons.cli.PosixParser:296-break;	0
org.apache.commons.cli.PosixParser:299-else if (stopAtNonOption)	0
org.apache.commons.cli.PosixParser:305-tokens.add("-" + ch);	1
org.apache.commons.cli.PosixParser:308-}	0
org.apache.commons.cli.PosixParser:113-if (token.indexOf('=') != -1)	0
org.apache.commons.cli.PosixParser:115-tokens.add(token.substring(0, token.indexOf('=')));	0
org.apache.commons.cli.PosixParser:116-tokens.add(token.substring(token.indexOf('=') + 1,	0
org.apache.commons.cli.PosixParser:121-tokens.add(token);	0
org.apache.commons.cli.PosixParser:128-processSingleHyphen(token);	0
org.apache.commons.cli.PosixParser:139-tokens.add(token);	0
org.apache.commons.cli.PosixParser:149-if (stopAtNonOption)	0
org.apache.commons.cli.PosixParser:151-process(token);	0
org.apache.commons.cli.PosixParser:155-tokens.add(token);	0
org.apache.commons.cli.TypeHandler:48-return createValue(str, (Class) obj);	0
org.apache.commons.cli.TypeHandler:62-if (PatternOptionBuilder.STRING_VALUE == clazz)	0
org.apache.commons.cli.TypeHandler:64-return str;	0
org.apache.commons.cli.TypeHandler:66-else if (PatternOptionBuilder.OBJECT_VALUE == clazz)	0
org.apache.commons.cli.TypeHandler:68-return createObject(str);	0
org.apache.commons.cli.TypeHandler:70-else if (PatternOptionBuilder.NUMBER_VALUE == clazz)	0
org.apache.commons.cli.TypeHandler:72-return createNumber(str);	0
org.apache.commons.cli.TypeHandler:74-else if (PatternOptionBuilder.DATE_VALUE == clazz)	0
org.apache.commons.cli.TypeHandler:78-else if (PatternOptionBuilder.CLASS_VALUE == clazz)	0
org.apache.commons.cli.TypeHandler:80-return createClass(str);	0
org.apache.commons.cli.TypeHandler:82-else if (PatternOptionBuilder.FILE_VALUE == clazz)	0
org.apache.commons.cli.TypeHandler:84-return createFile(str);	0
org.apache.commons.cli.TypeHandler:113-Class cl = null;	0
org.apache.commons.cli.TypeHandler:117-cl = Class.forName(str);	0
org.apache.commons.cli.TypeHandler:124-}	0
org.apache.commons.cli.TypeHandler:126-Object instance = null;	0
org.apache.commons.cli.TypeHandler:130-instance = cl.newInstance();	0
org.apache.commons.cli.TypeHandler:145-}	0
org.apache.commons.cli.TypeHandler:147-return instance;	0
org.apache.commons.cli.TypeHandler:162-return NumberUtils.createNumber(str);	1
org.apache.commons.cli.TypeHandler:182-return Class.forName(str);	0
org.apache.commons.cli.TypeHandler:240-return new File(str);	0
org.apache.commons.cli.TypeHandler:35-public class TypeHandler {	0
org.apache.commons.cli.TypeHandler:76-return createDate(str);	0
org.apache.commons.cli.TypeHandler:86-else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)	0
org.apache.commons.cli.TypeHandler:88-return createFile(str);	0
org.apache.commons.cli.TypeHandler:90-else if (PatternOptionBuilder.FILES_VALUE == clazz)	0
org.apache.commons.cli.TypeHandler:92-return createFiles(str);	0
org.apache.commons.cli.TypeHandler:94-else if (PatternOptionBuilder.URL_VALUE == clazz)	0
org.apache.commons.cli.TypeHandler:96-return createURL(str);	0
org.apache.commons.cli.TypeHandler:100-return null;	0
org.apache.commons.cli.TypeHandler:119-catch (ClassNotFoundException cnfe)	0
org.apache.commons.cli.TypeHandler:121-System.err.println("Unable to find: " + str);	0
org.apache.commons.cli.TypeHandler:123-return null;	0
org.apache.commons.cli.TypeHandler:132-catch (InstantiationException cnfe)	0
org.apache.commons.cli.TypeHandler:134-System.err.println("InstantiationException; Unable to create: "	0
org.apache.commons.cli.TypeHandler:137-return null;	0
org.apache.commons.cli.TypeHandler:139-catch (IllegalAccessException cnfe)	0
org.apache.commons.cli.TypeHandler:141-System.err.println("IllegalAccessException; Unable to create: "	0
org.apache.commons.cli.TypeHandler:144-return null;	0
org.apache.commons.cli.TypeHandler:164-catch (NumberFormatException nfe)	0
org.apache.commons.cli.TypeHandler:166-System.err.println(nfe.getMessage());	0
org.apache.commons.cli.TypeHandler:169-return null;	0
org.apache.commons.cli.TypeHandler:184-catch (ClassNotFoundException cnfe)	0
org.apache.commons.cli.TypeHandler:186-System.err.println("Unable to find: " + str);	0
org.apache.commons.cli.TypeHandler:188-return null;	0
org.apache.commons.cli.TypeHandler:201-Date date = null;	0
org.apache.commons.cli.TypeHandler:203-if (date == null)	0
org.apache.commons.cli.TypeHandler:205-System.err.println("Unable to parse: " + str);	0
org.apache.commons.cli.TypeHandler:208-return date;	0
org.apache.commons.cli.Parser:33-public abstract class Parser implements CommandLineParser {	0
org.apache.commons.cli.Parser:71-return parse(options, arguments, null, false);	0
org.apache.commons.cli.Parser:135-this.options = options;	0
org.apache.commons.cli.Parser:138-for (Iterator it = options.helpOptions().iterator(); it.hasNext();) {	0
org.apache.commons.cli.Parser:139-Option opt = (Option) it.next();	0
org.apache.commons.cli.Parser:140-opt.clearValues();	0
org.apache.commons.cli.Parser:141-}	0
org.apache.commons.cli.Parser:143-requiredOptions = options.getRequiredOptions();	0
org.apache.commons.cli.Parser:144-cmd = new CommandLine();	0
org.apache.commons.cli.Parser:146-boolean eatTheRest = false;	0
org.apache.commons.cli.Parser:148-if (arguments == null)	0
org.apache.commons.cli.Parser:153-List tokenList = Arrays.asList(flatten(this.options,	0
org.apache.commons.cli.Parser:157-ListIterator iterator = tokenList.listIterator();	0
org.apache.commons.cli.Parser:160-while (iterator.hasNext())	0
org.apache.commons.cli.Parser:224-processProperties(properties);	0
org.apache.commons.cli.Parser:225-checkRequiredOptions();	0
org.apache.commons.cli.Parser:238-if (properties == null)	0
org.apache.commons.cli.Parser:240-return;	0
org.apache.commons.cli.Parser:295-if (requiredOptions.size() > 0)	0
org.apache.commons.cli.Parser:297-Iterator iter = requiredOptions.iterator();	0
org.apache.commons.cli.Parser:298-StringBuffer buff = new StringBuffer();	1
org.apache.commons.cli.Parser:302-while (iter.hasNext())	0
org.apache.commons.cli.Parser:304-buff.append(iter.next());	0
org.apache.commons.cli.Parser:307-throw new MissingOptionException(buff.toString());	0
org.apache.commons.cli.Parser:90-return parse(options, arguments, properties, false);	0
org.apache.commons.cli.Parser:112-return parse(options, arguments, null, stopAtNonOption);	0
org.apache.commons.cli.Parser:150-arguments = new String[0];	0
org.apache.commons.cli.Parser:162-String t = (String) iterator.next();	0
org.apache.commons.cli.Parser:165-if ("--".equals(t))	0
org.apache.commons.cli.Parser:167-eatTheRest = true;	0
org.apache.commons.cli.Parser:171-else if ("-".equals(t))	0
org.apache.commons.cli.Parser:173-if (stopAtNonOption)	0
org.apache.commons.cli.Parser:175-eatTheRest = true;	0
org.apache.commons.cli.Parser:179-cmd.addArg(t);	0
org.apache.commons.cli.Parser:184-else if (t.startsWith("-"))	0
org.apache.commons.cli.Parser:186-if (stopAtNonOption && !options.hasOption(t))	0
org.apache.commons.cli.Parser:188-eatTheRest = true;	0
org.apache.commons.cli.Parser:189-cmd.addArg(t);	0
org.apache.commons.cli.Parser:193-processOption(t, iterator);	0
org.apache.commons.cli.Parser:200-cmd.addArg(t);	0
org.apache.commons.cli.Parser:202-if (stopAtNonOption)	0
org.apache.commons.cli.Parser:204-eatTheRest = true;	0
org.apache.commons.cli.Parser:209-if (eatTheRest)	0
org.apache.commons.cli.Parser:211-while (iterator.hasNext())	0
org.apache.commons.cli.Parser:213-String str = (String) iterator.next();	0
org.apache.commons.cli.Parser:216-if (!"--".equals(str))	0
org.apache.commons.cli.Parser:218-cmd.addArg(str);	0
org.apache.commons.cli.Parser:220-}	0
org.apache.commons.cli.Parser:222-}	0
org.apache.commons.cli.Parser:227-return cmd;	0
org.apache.commons.cli.Util:36-if (str.startsWith("--"))	1
org.apache.commons.cli.Util:38-return str.substring(2, str.length());	0
org.apache.commons.cli.Util:40-else if (str.startsWith("-"))	0
org.apache.commons.cli.Util:42-return str.substring(1, str.length());	0
org.apache.commons.cli.Util:24-class Util {	0
org.apache.commons.cli.Util:45-return str;	0
org.apache.commons.cli.Util:59-if (str.startsWith("\"")) {	0
org.apache.commons.cli.Util:60-str = str.substring(1, str.length());	0
org.apache.commons.cli.Util:62-if (str.endsWith("\"")) {	0
org.apache.commons.cli.Util:63-str = str.substring(0, str.length()-1);	0
org.apache.commons.cli.Util:65-return str;	0
org.apache.commons.cli2.builder.PatternBuilder:46-this(	0
org.apache.commons.cli2.builder.PatternBuilder:50-}	0
org.apache.commons.cli2.builder.PatternBuilder:61-final ArgumentBuilder abuilder) {	0
org.apache.commons.cli2.builder.PatternBuilder:67-private final Set options = new HashSet();	1
org.apache.commons.cli2.builder.PatternBuilder:62-this.gbuilder = gbuilder;	0
org.apache.commons.cli2.builder.PatternBuilder:63-this.obuilder = obuilder;	0
org.apache.commons.cli2.builder.PatternBuilder:64-this.abuilder = abuilder;	0
org.apache.commons.cli2.builder.PatternBuilder:65-}	0
org.apache.commons.cli2.builder.PatternBuilder:76-if (options.size() == 1) {	0
org.apache.commons.cli2.builder.PatternBuilder:80-gbuilder.reset();	0
org.apache.commons.cli2.builder.PatternBuilder:81-for (final Iterator i = options.iterator(); i.hasNext();) {	0
org.apache.commons.cli2.builder.PatternBuilder:82-gbuilder.withOption((Option)i.next());	0
org.apache.commons.cli2.builder.PatternBuilder:84-option = gbuilder.create();	0
org.apache.commons.cli2.builder.PatternBuilder:87-reset();	0
org.apache.commons.cli2.builder.PatternBuilder:89-return option;	0
org.apache.commons.cli2.builder.PatternBuilder:96-options.clear();	0
org.apache.commons.cli2.builder.PatternBuilder:97-return this;	0
org.apache.commons.cli2.builder.PatternBuilder:105-if (type != ' ') {	0
org.apache.commons.cli2.builder.PatternBuilder:106-abuilder.reset();	0
org.apache.commons.cli2.builder.PatternBuilder:107-abuilder.withValidator(validator(type));	0
org.apache.commons.cli2.builder.PatternBuilder:108-if (required) {	0
org.apache.commons.cli2.builder.PatternBuilder:109-abuilder.withMinimum(1);	0
org.apache.commons.cli2.builder.PatternBuilder:111-if (type != '*') {	0
org.apache.commons.cli2.builder.PatternBuilder:112-abuilder.withMaximum(1);	0
org.apache.commons.cli2.builder.PatternBuilder:114-argument = abuilder.create();	0
org.apache.commons.cli2.builder.PatternBuilder:117-argument = null;	0
org.apache.commons.cli2.builder.PatternBuilder:120-obuilder.reset();	0
org.apache.commons.cli2.builder.PatternBuilder:121-obuilder.withArgument(argument);	0
org.apache.commons.cli2.builder.PatternBuilder:122-obuilder.withShortName(String.valueOf(opt));	0
org.apache.commons.cli2.builder.PatternBuilder:123-obuilder.withRequired(required);	0
org.apache.commons.cli2.builder.PatternBuilder:125-options.add(obuilder.create());	0
org.apache.commons.cli2.builder.PatternBuilder:126-}	0
org.apache.commons.cli2.builder.PatternBuilder:133-int sz = pattern.length();	0
org.apache.commons.cli2.builder.PatternBuilder:135-char opt = ' ';	0
org.apache.commons.cli2.builder.PatternBuilder:136-char ch = ' ';	0
org.apache.commons.cli2.builder.PatternBuilder:137-char type = ' ';	0
org.apache.commons.cli2.builder.PatternBuilder:138-boolean required = false;	0
org.apache.commons.cli2.builder.PatternBuilder:140-for (int i = 0; i < sz; i++) {	0
org.apache.commons.cli2.builder.PatternBuilder:141-ch = pattern.charAt(i);	0
org.apache.commons.cli2.builder.PatternBuilder:143-switch (ch) {	0
org.apache.commons.cli2.builder.PatternBuilder:145-required = true;	0
org.apache.commons.cli2.builder.PatternBuilder:146-break;	0
org.apache.commons.cli2.builder.PatternBuilder:156-type = ch;	0
org.apache.commons.cli2.builder.PatternBuilder:157-break;	0
org.apache.commons.cli2.builder.PatternBuilder:159-if (opt != ' ') {	0
org.apache.commons.cli2.builder.PatternBuilder:160-createOption(type, required, opt);	0
org.apache.commons.cli2.builder.PatternBuilder:161-required = false;	0
org.apache.commons.cli2.builder.PatternBuilder:162-type = ' ';	0
org.apache.commons.cli2.builder.PatternBuilder:165-opt = ch;	0
org.apache.commons.cli2.builder.PatternBuilder:169-if (opt != ' ') {	0
org.apache.commons.cli.HelpFormatter:225-return this.defaultNewLine;	0
org.apache.commons.cli.HelpFormatter:803-sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);	0
org.apache.commons.cli.HelpFormatter:807-final String padding = createPadding(nextLineTabStop);	0
org.apache.commons.cli.HelpFormatter:811-text = padding + text.substring(pos).trim();	0
org.apache.commons.cli.HelpFormatter:812-pos = findWrapPos(text, width, nextLineTabStop);	1
org.apache.commons.cli.HelpFormatter:814-if (pos == -1)	0
org.apache.commons.cli.HelpFormatter:816-sb.append(text);	0
org.apache.commons.cli.HelpFormatter:818-return sb;	0
org.apache.commons.cli.HelpFormatter:893-StringBuffer sb = new StringBuffer(len);	0
org.apache.commons.cli.HelpFormatter:895-for (int i = 0; i < len; ++i)	0
org.apache.commons.cli.HelpFormatter:897-sb.append(' ');	0
org.apache.commons.cli.HelpFormatter:900-return sb.toString();	0
org.apache.commons.cli.HelpFormatter:855-pos = startPos + width;	0
org.apache.commons.cli.HelpFormatter:860-&& (c != '\n') && (c != '\r'))	0
org.apache.commons.cli.HelpFormatter:862---pos;	0
org.apache.commons.cli.HelpFormatter:866-if (pos > startPos)	0
org.apache.commons.cli.HelpFormatter:868-return pos;	0
org.apache.commons.cli.HelpFormatter:795-int pos = findWrapPos(text, width, 0);	0
org.apache.commons.cli.HelpFormatter:797-if (pos == -1)	0
org.apache.commons.cli.HelpFormatter:912-if ((s == null) || (s.length() == 0))	0
org.apache.commons.cli.HelpFormatter:917-int pos = s.length();	0
org.apache.commons.cli.HelpFormatter:919-while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))	0
org.apache.commons.cli.HelpFormatter:924-return s.substring(0, pos);	0
org.apache.commons.cli.HelpFormatter:34-public class HelpFormatter {	0
org.apache.commons.cli.HelpFormatter:69-public int defaultWidth = DEFAULT_WIDTH;	0
org.apache.commons.cli.HelpFormatter:77-public int defaultLeftPad = DEFAULT_LEFT_PAD;	0
org.apache.commons.cli.HelpFormatter:86-public int defaultDescPad = DEFAULT_DESC_PAD;	0
org.apache.commons.cli.HelpFormatter:94-public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;	0
org.apache.commons.cli.HelpFormatter:102-public String defaultNewLine = System.getProperty("line.separator");	0
org.apache.commons.cli.HelpFormatter:110-public String defaultOptPrefix = DEFAULT_OPT_PREFIX;	0
org.apache.commons.cli.HelpFormatter:118-public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;	0
org.apache.commons.cli.HelpFormatter:126-public String defaultArgName = DEFAULT_ARG_NAME;	0
org.apache.commons.cli.HelpFormatter:934-private static class OptionComparator	0
org.apache.commons.cli.HelpFormatter:840-int pos = -1;	0
org.apache.commons.cli.HelpFormatter:843-if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)	0
org.apache.commons.cli.HelpFormatter:848-else if ((startPos + width) >= text.length())	0
org.apache.commons.cli.HelpFormatter:850-return -1;	0
org.apache.commons.cli.HelpFormatter:135-this.defaultWidth = width;	0
org.apache.commons.cli.HelpFormatter:136-}	0
org.apache.commons.cli.HelpFormatter:145-return this.defaultWidth;	0
org.apache.commons.cli.HelpFormatter:155-this.defaultLeftPad = padding;	0
org.apache.commons.cli.HelpFormatter:156-}	0
org.apache.commons.cli.HelpFormatter:165-return this.defaultLeftPad;	0
org.apache.commons.cli.HelpFormatter:175-this.defaultDescPad = padding;	0
org.apache.commons.cli.HelpFormatter:176-}	0
org.apache.commons.cli.HelpFormatter:185-return this.defaultDescPad;	0
org.apache.commons.cli.HelpFormatter:195-this.defaultSyntaxPrefix = prefix;	0
org.apache.commons.cli.HelpFormatter:196-}	0
org.apache.commons.cli.HelpFormatter:205-return this.defaultSyntaxPrefix;	0
org.apache.commons.cli.HelpFormatter:215-this.defaultNewLine = newline;	0
org.apache.commons.cli.Parser:310-Iterator iter = getRequiredOptions().iterator();	0
org.apache.commons.cli.Parser:311-StringBuffer buff = new StringBuffer("Missing required option");	0
org.apache.commons.cli.Parser:312-buff.append(getRequiredOptions().size() == 1 ? "" : "s");	0
org.apache.commons.cli.Parser:313-buff.append(": ");	0
org.apache.commons.cli.Parser:317-while (iter.hasNext())	0
org.apache.commons.cli.Parser:319-buff.append(iter.next());	0
org.apache.commons.cli.Parser:322-throw new MissingOptionException(buff.toString());	0
org.apache.commons.cli.Parser:33-public abstract class Parser implements CommandLineParser {	0
org.apache.commons.cli.Parser:45-this.options = options;	0
org.apache.commons.cli.Parser:46-this.requiredOptions = options.getRequiredOptions();	0
org.apache.commons.cli.Parser:47-}	0
org.apache.commons.cli.Parser:50-return options;	0
org.apache.commons.cli.Parser:54-return requiredOptions;	0
org.apache.commons.cli.Parser:85-return parse(options, arguments, null, false);	0
org.apache.commons.cli.Parser:149-for (Iterator it = options.helpOptions().iterator(); it.hasNext();) {	0
org.apache.commons.cli.Parser:150-Option opt = (Option) it.next();	0
org.apache.commons.cli.Parser:151-opt.clearValues();	0
org.apache.commons.cli.Parser:152-}	0
org.apache.commons.cli.Parser:155-setOptions(options);	0
org.apache.commons.cli.Parser:157-cmd = new CommandLine();	0
org.apache.commons.cli.Parser:159-boolean eatTheRest = false;	0
org.apache.commons.cli.Parser:161-if (arguments == null)	0
org.apache.commons.cli.Parser:166-List tokenList = Arrays.asList(flatten(getOptions(),	0
org.apache.commons.cli.Parser:170-ListIterator iterator = tokenList.listIterator();	0
org.apache.commons.cli.Parser:173-while (iterator.hasNext())	0
org.apache.commons.cli.Parser:237-processProperties(properties);	0
org.apache.commons.cli.Parser:238-checkRequiredOptions();	0
org.apache.commons.cli.Parser:251-if (properties == null)	0
org.apache.commons.cli.Parser:253-return;	0
org.apache.commons.cli.Parser:308-if (getRequiredOptions().size() > 0)	0
org.apache.commons.cli.Parser:175-String t = (String) iterator.next();	0
org.apache.commons.cli.Parser:178-if ("--".equals(t))	0
org.apache.commons.cli.Parser:184-else if ("-".equals(t))	0
org.apache.commons.cli.Parser:197-else if (t.startsWith("-"))	0
org.apache.commons.cli.Parser:199-if (stopAtNonOption && !getOptions().hasOption(t))	0
org.apache.commons.cli.Parser:206-processOption(t, iterator);	0
org.apache.commons.cli.Parser:222-if (eatTheRest)	0
org.apache.commons.cli.Parser:235-}	0
org.apache.commons.cli.Parser:387-boolean hasOption = getOptions().hasOption(arg);	0
org.apache.commons.cli.Parser:390-if (!hasOption)	0
org.apache.commons.cli.Parser:397-final Option opt = getOptions().getOption(arg);	0
org.apache.commons.cli.Parser:401-if (opt.isRequired())	0
org.apache.commons.cli.Parser:408-if (getOptions().getOptionGroup(opt) != null)	0
org.apache.commons.cli.Parser:421-if (opt.hasArg())	0
org.apache.commons.cli.Parser:428-cmd.addOption(opt);	0
org.apache.commons.cli.Parser:429-}	0
org.apache.commons.cli.Parser:104-return parse(options, arguments, properties, false);	0
org.apache.commons.cli.Parser:126-return parse(options, arguments, null, stopAtNonOption);	0
org.apache.commons.cli.Parser:163-arguments = new String[0];	0
org.apache.commons.cli.Parser:180-eatTheRest = true;	0
org.apache.commons.cli.Parser:240-return cmd;	0
org.apache.commons.cli.Parser:325-}	0
org.apache.commons.cli.Parser:404-getRequiredOptions().remove(opt.getKey());	0
org.apache.commons.cli.Parser:33-public abstract class Parser implements CommandLineParser {	0
org.apache.commons.cli.Parser:45-this.options = options;	0
org.apache.commons.cli.Parser:46-this.requiredOptions = options.getRequiredOptions();	1
org.apache.commons.cli.Parser:47-}	0
org.apache.commons.cli.Parser:50-return options;	0
org.apache.commons.cli.Parser:54-return requiredOptions;	0
org.apache.commons.cli.Parser:85-return parse(options, arguments, null, false);	0
org.apache.commons.cli.Parser:149-for (Iterator it = options.helpOptions().iterator(); it.hasNext();) {	0
org.apache.commons.cli.Parser:150-Option opt = (Option) it.next();	0
org.apache.commons.cli.Parser:151-opt.clearValues();	0
org.apache.commons.cli.Parser:152-}	0
org.apache.commons.cli.Parser:155-setOptions(options);	0
org.apache.commons.cli.Parser:157-cmd = new CommandLine();	0
org.apache.commons.cli.Parser:159-boolean eatTheRest = false;	0
org.apache.commons.cli.Parser:161-if (arguments == null)	0
org.apache.commons.cli.Parser:166-List tokenList = Arrays.asList(flatten(getOptions(),	0
org.apache.commons.cli.Parser:170-ListIterator iterator = tokenList.listIterator();	0
org.apache.commons.cli.Parser:173-while (iterator.hasNext())	0
org.apache.commons.cli.Parser:175-String t = (String) iterator.next();	0
org.apache.commons.cli.Parser:178-if ("--".equals(t))	0
org.apache.commons.cli.Parser:184-else if ("-".equals(t))	0
org.apache.commons.cli.Parser:197-else if (t.startsWith("-"))	0
org.apache.commons.cli.Parser:199-if (stopAtNonOption && !getOptions().hasOption(t))	0
org.apache.commons.cli.Parser:206-processOption(t, iterator);	0
org.apache.commons.cli.Parser:222-if (eatTheRest)	0
org.apache.commons.cli.Parser:235-}	0
org.apache.commons.cli.Parser:237-processProperties(properties);	0
org.apache.commons.cli.Parser:238-checkRequiredOptions();	0
org.apache.commons.cli.Parser:251-if (properties == null)	0
org.apache.commons.cli.Parser:253-return;	0
org.apache.commons.cli.Parser:308-if (getRequiredOptions().size() > 0)	0
org.apache.commons.cli.Parser:388-boolean hasOption = getOptions().hasOption(arg);	0
org.apache.commons.cli.Parser:391-if (!hasOption)	0
org.apache.commons.cli.Parser:398-final Option opt = getOptions().getOption(arg);	0
org.apache.commons.cli.Parser:402-if (opt.isRequired())	0
org.apache.commons.cli.Parser:409-if (getOptions().getOptionGroup(opt) != null)	0
org.apache.commons.cli.Parser:422-if (opt.hasArg())	0
org.apache.commons.cli.Parser:429-cmd.addOption(opt);	0
org.apache.commons.cli.Parser:430-}	0
org.apache.commons.cli.Parser:104-return parse(options, arguments, properties, false);	0
org.apache.commons.cli.Parser:126-return parse(options, arguments, null, stopAtNonOption);	0
org.apache.commons.cli.Parser:163-arguments = new String[0];	0
org.apache.commons.cli.Parser:180-eatTheRest = true;	0
org.apache.commons.cli.Parser:186-if (stopAtNonOption)	0
org.apache.commons.cli.Parser:188-eatTheRest = true;	0
org.apache.commons.cli.Parser:192-cmd.addArg(t);	0
org.apache.commons.cli.Parser:201-eatTheRest = true;	0
org.apache.commons.cli.HelpFormatter:634-buff.append(" <").append(option.getArgName()).append(">");	0
org.apache.commons.cli.HelpFormatter:555-appendOption(buff, option, option.isRequired());	0
org.apache.commons.cli.HelpFormatter:514-StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app)	0
org.apache.commons.cli.HelpFormatter:518-final Collection processedGroups = new ArrayList();	0
org.apache.commons.cli.HelpFormatter:523-List optList = new ArrayList(options.getOptions());	0
org.apache.commons.cli.HelpFormatter:524-Collections.sort(optList, getOptionComparator() );	0
org.apache.commons.cli.HelpFormatter:526-for (Iterator i = optList.iterator(); i.hasNext();)	0
org.apache.commons.cli.HelpFormatter:529-option = (Option) i.next();	0
org.apache.commons.cli.HelpFormatter:532-OptionGroup group = options.getOptionGroup(option);	0
org.apache.commons.cli.HelpFormatter:535-if (group != null)	0
org.apache.commons.cli.HelpFormatter:558-if (i.hasNext())	0
org.apache.commons.cli.HelpFormatter:562-}	0
org.apache.commons.cli.HelpFormatter:566-printWrapped(pw, width, buff.toString().indexOf(' ') + 1,	0
org.apache.commons.cli.HelpFormatter:568-}	0
org.apache.commons.cli.HelpFormatter:617-if (!required)	0
org.apache.commons.cli.HelpFormatter:622-if (option.getOpt() != null)	0
org.apache.commons.cli.HelpFormatter:624-buff.append("-").append(option.getOpt());	0
org.apache.commons.cli.HelpFormatter:632-if (option.hasArg() && (option.getArgName() != null))	1
org.apache.commons.cli.HelpFormatter:638-if (!required)	0
org.apache.commons.cli.HelpFormatter:642-}	0
org.apache.commons.cli.HelpFormatter:704-StringBuffer sb = new StringBuffer(text.length());	0
org.apache.commons.cli.HelpFormatter:706-renderWrappedText(sb, width, nextLineTabStop, text);	0
org.apache.commons.cli.HelpFormatter:707-pw.println(sb.toString());	0
org.apache.commons.cli.HelpFormatter:708-}	0
org.apache.commons.cli.HelpFormatter:302-return this.optionComparator;	0
org.apache.commons.cli.HelpFormatter:833-sb.append(rtrim(text));	0
org.apache.commons.cli.HelpFormatter:835-return sb;	0
org.apache.commons.cli.HelpFormatter:829-int pos = findWrapPos(text, width, 0);	0
org.apache.commons.cli.HelpFormatter:831-if (pos == -1)	0
org.apache.commons.cli.HelpFormatter:946-if ((s == null) || (s.length() == 0))	0
org.apache.commons.cli.HelpFormatter:951-int pos = s.length();	0
org.apache.commons.cli.HelpFormatter:953-while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))	0
org.apache.commons.cli.HelpFormatter:958-return s.substring(0, pos);	0
org.apache.commons.cli.HelpFormatter:34-public class HelpFormatter {	0
org.apache.commons.cli.HelpFormatter:69-public int defaultWidth = DEFAULT_WIDTH;	0
org.apache.commons.cli.HelpFormatter:77-public int defaultLeftPad = DEFAULT_LEFT_PAD;	0
org.apache.commons.cli.HelpFormatter:86-public int defaultDescPad = DEFAULT_DESC_PAD;	0
org.apache.commons.cli.HelpFormatter:94-public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;	0
org.apache.commons.cli.HelpFormatter:102-public String defaultNewLine = System.getProperty("line.separator");	0
org.apache.commons.cli.HelpFormatter:110-public String defaultOptPrefix = DEFAULT_OPT_PREFIX;	0
org.apache.commons.cli.HelpFormatter:118-public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;	0
org.apache.commons.cli.HelpFormatter:126-public String defaultArgName = DEFAULT_ARG_NAME;	0
org.apache.commons.cli.HelpFormatter:133-protected Comparator optionComparator = new OptionComparator();	0
org.apache.commons.cli.HelpFormatter:968-private static class OptionComparator	0
org.apache.commons.cli.HelpFormatter:874-int pos = -1;	0
org.apache.commons.cli.HelpFormatter:877-if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)	0
org.apache.commons.cli.HelpFormatter:882-else if ((startPos + width) >= text.length())	0
org.apache.commons.cli.HelpFormatter:884-return -1;	0
org.apache.commons.cli.HelpFormatter:142-this.defaultWidth = width;	0
org.apache.commons.cli.HelpFormatter:143-}	0
org.apache.commons.cli.GnuParser:81-if (options.hasOption(arg.substring(0, 2)))	1
org.apache.commons.cli.GnuParser:85-tokens.add(arg.substring(0, 2)); // -D	0
org.apache.commons.cli.GnuParser:86-tokens.add(arg.substring(2)); // property=value	0
org.apache.commons.cli.GnuParser:31-public class GnuParser extends Parser {	0
org.apache.commons.cli.GnuParser:54-List tokens = new ArrayList();	0
org.apache.commons.cli.GnuParser:56-boolean eatTheRest = false;	0
org.apache.commons.cli.GnuParser:58-for (int i = 0; i < arguments.length; i++)	0
org.apache.commons.cli.GnuParser:60-String arg = arguments[i];	0
org.apache.commons.cli.GnuParser:62-if ("--".equals(arg))	0
org.apache.commons.cli.GnuParser:67-else if ("-".equals(arg))	0
org.apache.commons.cli.GnuParser:71-else if (arg.startsWith("-"))	0
org.apache.commons.cli.GnuParser:73-String opt = Util.stripLeadingHyphens(arg);	0
org.apache.commons.cli.GnuParser:75-if (options.hasOption(opt))	0
org.apache.commons.cli.GnuParser:94-}	0
org.apache.commons.cli.GnuParser:100-if (eatTheRest)	0
org.apache.commons.cli.GnuParser:109-return (String[]) tokens.toArray(new String[tokens.size()]);	0
org.apache.commons.cli.GnuParser:90-eatTheRest = stopAtNonOption;	0
org.apache.commons.cli.GnuParser:91-tokens.add(arg);	0
org.apache.commons.cli.GnuParser:64-eatTheRest = true;	0
org.apache.commons.cli.GnuParser:65-tokens.add("--");	0
org.apache.commons.cli.GnuParser:69-tokens.add("-");	0
org.apache.commons.cli.GnuParser:77-tokens.add(arg);	0
org.apache.commons.cli.GnuParser:97-tokens.add(arg);	0
org.apache.commons.cli.GnuParser:102-for (i++; i < arguments.length; i++)	0
org.apache.commons.cli.GnuParser:104-tokens.add(arguments[i]);	0
org.apache.commons.cli2.option.ArgumentImpl:144-int argumentCount = 0;	1
org.apache.commons.cli2.option.ArgumentImpl:146-while (arguments.hasNext() && (argumentCount < maximum)) {	0
org.apache.commons.cli2.option.ArgumentImpl:147-final String allValuesQuoted = (String) arguments.next();	0
org.apache.commons.cli2.option.ArgumentImpl:148-final String allValues = stripBoundaryQuotes(allValuesQuoted);	0
org.apache.commons.cli2.option.ArgumentImpl:151-if (allValuesQuoted.equals(consumeRemaining)) {	0
org.apache.commons.cli2.option.ArgumentImpl:158-else if (commandLine.looksLikeOption(allValuesQuoted)) {	0
org.apache.commons.cli2.option.ArgumentImpl:164-else if (subsequentSplit) {	0
org.apache.commons.cli2.option.ArgumentImpl:185-++argumentCount;	0
org.apache.commons.cli2.option.ArgumentImpl:186-commandLine.addValue(option, allValues);	0
org.apache.commons.cli2.option.ArgumentImpl:188-}	0
org.apache.commons.cli2.option.ArgumentImpl:189-}	0
org.apache.commons.cli2.option.ArgumentImpl:193-return true;	0
org.apache.commons.cli2.option.ArgumentImpl:203-processValues(commandLine, args, this);	0
org.apache.commons.cli2.option.ArgumentImpl:204-}	0
org.apache.commons.cli2.option.ArgumentImpl:232-validate(commandLine, this);	0
org.apache.commons.cli2.option.ArgumentImpl:238-final List values = commandLine.getValues(option);	0
org.apache.commons.cli2.option.ArgumentImpl:240-if (values.size() < minimum) {	0
org.apache.commons.cli2.option.ArgumentImpl:244-if (values.size() > maximum) {	0
org.apache.commons.cli2.option.ArgumentImpl:245-throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,	0
org.apache.commons.cli2.option.ArgumentImpl:263-final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);	0
org.apache.commons.cli2.option.ArgumentImpl:266-final boolean numbered =	0
org.apache.commons.cli2.option.ArgumentImpl:269-final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);	0
org.apache.commons.cli2.option.ArgumentImpl:272-final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum;	0
org.apache.commons.cli2.option.ArgumentImpl:274-int i = 0;	0
org.apache.commons.cli2.option.ArgumentImpl:277-while (i < max) {	0
org.apache.commons.cli2.option.ArgumentImpl:279-if (i > 0) {	0
org.apache.commons.cli2.option.ArgumentImpl:284-if ((i >= minimum) && (optional || (i > 0))) {	0
org.apache.commons.cli2.option.ArgumentImpl:288-if (bracketed) {	0
org.apache.commons.cli2.option.ArgumentImpl:293-buffer.append(name);	0
org.apache.commons.cli2.option.ArgumentImpl:294-++i;	0
org.apache.commons.cli2.option.ArgumentImpl:297-if (numbered) {	0
org.apache.commons.cli2.option.ArgumentImpl:301-if (bracketed) {	0
org.apache.commons.cli2.option.ArgumentImpl:307-if (maximum == Integer.MAX_VALUE) {	0
org.apache.commons.cli2.option.ArgumentImpl:313-while (i > 0) {	0
org.apache.commons.cli2.option.ArgumentImpl:314---i;	0
org.apache.commons.cli2.option.ArgumentImpl:317-if ((i >= minimum) && (optional || (i > 0))) {	0
org.apache.commons.cli2.option.ArgumentImpl:321-}	0
org.apache.commons.cli2.option.ArgumentImpl:336-return maximum;	0
org.apache.commons.cli2.option.ArgumentImpl:340-return minimum;	0
org.apache.commons.cli2.option.ArgumentImpl:353-if (!token.startsWith("\"") || !token.endsWith("\"")) {	0
org.apache.commons.cli2.option.ArgumentImpl:354-return token;	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:64-options.add(option);	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:65-nameToOption.put(option.getPreferredName(), option);	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:67-for (Iterator i = option.getTriggers().iterator(); i.hasNext();) {	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:70-}	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:74-if (option instanceof Argument) {	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:75-addOption(option);	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:78-List valueList = (List) values.get(option);	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:80-if (valueList == null) {	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:81-valueList = new ArrayList();	0
org.apache.commons.cli2.option.GroupImpl:69-super(0, false);	0
org.apache.commons.cli2.option.GroupImpl:71-this.name = name;	0
org.apache.commons.cli2.option.GroupImpl:72-this.description = description;	0
org.apache.commons.cli2.option.GroupImpl:73-this.minimum = minimum;	0
org.apache.commons.cli2.option.GroupImpl:74-this.maximum = maximum;	0
org.apache.commons.cli2.option.GroupImpl:78-this.options = Collections.unmodifiableList(options);	0
org.apache.commons.cli2.option.GroupImpl:81-final List newAnonymous = new ArrayList();	0
org.apache.commons.cli2.option.GroupImpl:84-final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance());	0
org.apache.commons.cli2.option.GroupImpl:87-final Set newPrefixes = new HashSet();	0
org.apache.commons.cli2.option.GroupImpl:90-for (final Iterator i = options.iterator(); i.hasNext();) {	0
org.apache.commons.cli2.option.GroupImpl:91-final Option option = (Option) i.next();	0
org.apache.commons.cli2.option.GroupImpl:93-if (option instanceof Argument) {	0
org.apache.commons.cli2.option.GroupImpl:97-final Set triggers = option.getTriggers();	0
org.apache.commons.cli2.option.GroupImpl:99-for (Iterator j = triggers.iterator(); j.hasNext();) {	0
org.apache.commons.cli2.option.GroupImpl:100-newOptionMap.put(j.next(), option);	0
org.apache.commons.cli2.option.GroupImpl:104-newPrefixes.addAll(option.getPrefixes());	0
org.apache.commons.cli2.option.GroupImpl:106-}	0
org.apache.commons.cli2.option.GroupImpl:108-this.anonymous = Collections.unmodifiableList(newAnonymous);	0
org.apache.commons.cli2.option.GroupImpl:109-this.optionMap = Collections.unmodifiableSortedMap(newOptionMap);	0
org.apache.commons.cli2.option.GroupImpl:110-this.prefixes = Collections.unmodifiableSet(newPrefixes);	0
org.apache.commons.cli2.option.GroupImpl:111-}	0
org.apache.commons.cli2.option.GroupImpl:115-if (arg == null) {	0
org.apache.commons.cli2.option.GroupImpl:120-if (optionMap.containsKey(arg)) {	0
org.apache.commons.cli2.option.GroupImpl:121-return true;	0
org.apache.commons.cli2.option.GroupImpl:149-return prefixes;	0
org.apache.commons.cli2.option.GroupImpl:159-String previous = null;	0
org.apache.commons.cli2.option.GroupImpl:162-while (arguments.hasNext()) {	0
org.apache.commons.cli2.option.GroupImpl:164-final String arg = (String) arguments.next();	0
org.apache.commons.cli2.option.GroupImpl:167-if (arg == previous) {	0
org.apache.commons.cli2.option.GroupImpl:175-previous = arg;	0
org.apache.commons.cli2.option.GroupImpl:177-final Option opt = (Option) optionMap.get(arg);	0
org.apache.commons.cli2.option.GroupImpl:180-if (opt != null) {	0
org.apache.commons.cli2.option.GroupImpl:181-arguments.previous();	0
org.apache.commons.cli2.option.GroupImpl:182-opt.process(commandLine, arguments);	0
org.apache.commons.cli2.option.GroupImpl:234-} // [END process each command line token	0
org.apache.commons.cli2.option.GroupImpl:235-}	0
org.apache.commons.cli2.option.GroupImpl:240-int present = 0;	0
org.apache.commons.cli2.option.GroupImpl:243-Option unexpected = null;	0
org.apache.commons.cli2.option.GroupImpl:245-for (final Iterator i = options.iterator(); i.hasNext();) {	0
org.apache.commons.cli2.option.GroupImpl:246-final Option option = (Option) i.next();	0
org.apache.commons.cli2.option.GroupImpl:249-boolean validate = option.isRequired() || option instanceof Group;	0
org.apache.commons.cli2.option.GroupImpl:250-if (validate) {	1
org.apache.commons.cli2.option.GroupImpl:251-option.validate(commandLine);	0
org.apache.commons.cli2.option.GroupImpl:255-if (commandLine.hasOption(option)) {	0
org.apache.commons.cli2.option.GroupImpl:256-if (++present > maximum) {	0
org.apache.commons.cli2.option.GroupImpl:262-option.validate(commandLine);	0
org.apache.commons.cli2.option.GroupImpl:477-super.defaults(commandLine);	0
org.apache.commons.cli2.option.GroupImpl:479-for (final Iterator i = options.iterator(); i.hasNext();) {	0
org.apache.commons.cli2.option.GroupImpl:480-final Option option = (Option) i.next();	0
org.apache.commons.cli2.option.GroupImpl:481-option.defaults(commandLine);	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:76-if (option instanceof Argument) {	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:80-List valueList = (List) values.get(option);	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:82-if (valueList == null) {	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:83-valueList = new ArrayList();	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:84-values.put(option, valueList);	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:87-valueList.add(value);	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:88-}	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:204-for (final Iterator i = prefixes.iterator(); i.hasNext();) {	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:205-final String prefix = (String) i.next();	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:207-if (trigger.startsWith(prefix)) {	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:210-}	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:212-return false;	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:60-final List arguments) {	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:41-private final Map optionToProperties = new HashMap();	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:43-private final List options = new ArrayList();	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:44-private final Map nameToOption = new HashMap();	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:45-private final Map values = new HashMap();	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:46-private final Map switches = new HashMap();	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:47-private final Map defaultValues = new HashMap();	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:48-private final Map defaultSwitches = new HashMap();	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:61-this.prefixes = rootOption.getPrefixes();	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:62-this.normalised = arguments;	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:63-}	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:66-options.add(option);	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:67-nameToOption.put(option.getPreferredName(), option);	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:69-for (Iterator i = option.getTriggers().iterator(); i.hasNext();) {	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:70-nameToOption.put(i.next(), option);	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:72-}	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:102-final boolean present = options.contains(option);	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:104-return present;	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:108-return (Option) nameToOption.get(trigger);	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:114-List valueList = (List) values.get(option);	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:117-if ((valueList == null) || valueList.isEmpty()) {	1
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:122-if ((valueList == null) || valueList.isEmpty()) {	1
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:129-return valueList == null ? Collections.EMPTY_LIST : valueList;	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:134-List valueList = (List) values.get(option);	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:137-if (valueList == null) {	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:138-valueList = Collections.EMPTY_LIST;	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:141-return valueList;	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:246-if (defaults == null) {	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:249-defaultValues.put(option, defaults);	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:251-}	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:77-addOption(option);	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:92-addOption(option);	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:94-if (switches.containsKey(option)) {	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:95-throw new IllegalStateException(ResourceHelper.getResourceHelper().getMessage(ResourceConstants.SWITCH_ALREADY_SET));	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:97-switches.put(option, value ? Boolean.TRUE : Boolean.FALSE);	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:99-}	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:118-valueList = defaultValues;	0
org.apache.commons.cli2.commandline.WriteableCommandLineImpl:123-valueList = (List) this.defaultValues.get(option);	0
org.apache.commons.cli2.option.GroupImpl:295-appendUsage(buffer, helpSettings, comp, "|");	0
org.apache.commons.cli2.option.GroupImpl:296-}	0
org.apache.commons.cli2.option.GroupImpl:302-final Set helpSettingsCopy = new HashSet(helpSettings);	0
org.apache.commons.cli2.option.GroupImpl:304-final boolean optional =	0
org.apache.commons.cli2.option.GroupImpl:307-final boolean expanded =	0
org.apache.commons.cli2.option.GroupImpl:310-final boolean named =	0
org.apache.commons.cli2.option.GroupImpl:314-final boolean arguments = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_ARGUMENT);	0
org.apache.commons.cli2.option.GroupImpl:316-final boolean outer = helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_OUTER);	0
org.apache.commons.cli2.option.GroupImpl:318-helpSettingsCopy.remove(DisplaySetting.DISPLAY_GROUP_OUTER);	0
org.apache.commons.cli2.option.GroupImpl:320-final boolean both = named && expanded;	0
org.apache.commons.cli2.option.GroupImpl:322-if (optional) {	0
org.apache.commons.cli2.option.GroupImpl:326-if (named) {	0
org.apache.commons.cli2.option.GroupImpl:330-if (both) {	0
org.apache.commons.cli2.option.GroupImpl:334-if (expanded) {	0
org.apache.commons.cli2.option.GroupImpl:370-if (both) {	0
org.apache.commons.cli2.option.GroupImpl:374-if (optional && outer) {	0
org.apache.commons.cli2.option.GroupImpl:378-if (arguments) {	0
org.apache.commons.cli2.option.GroupImpl:387-if (optional && !outer) {	0
org.apache.commons.cli2.option.GroupImpl:390-}	0
org.apache.commons.cli2.option.OptionImpl:61-final StringBuffer buffer = new StringBuffer();	0
org.apache.commons.cli2.option.OptionImpl:62-appendUsage(buffer, DisplaySetting.ALL, null);	0
org.apache.commons.cli2.option.OptionImpl:64-return buffer.toString();	0
org.apache.commons.cli2.option.GroupImpl:323-buffer.append('[');	0
org.apache.commons.cli2.option.GroupImpl:337-if (!helpSettingsCopy.contains(DisplaySetting.DISPLAY_GROUP_EXPANDED)) {	0
org.apache.commons.cli2.option.GroupImpl:340-childSettings = new HashSet(helpSettingsCopy);	0
org.apache.commons.cli2.option.GroupImpl:341-childSettings.remove(DisplaySetting.DISPLAY_OPTIONAL);	0
org.apache.commons.cli2.option.GroupImpl:347-if (comp == null) {	0
org.apache.commons.cli2.option.GroupImpl:349-list = options;	0
org.apache.commons.cli2.option.GroupImpl:357-for (final Iterator i = list.iterator(); i.hasNext();) {	0
org.apache.commons.cli2.option.GroupImpl:358-final Option option = (Option) i.next();	0
org.apache.commons.cli2.option.GroupImpl:361-option.appendUsage(buffer, childSettings, comp);	0
org.apache.commons.cli2.option.GroupImpl:364-if (i.hasNext()) {	0
org.apache.commons.cli2.option.GroupImpl:365-buffer.append(separator);	0
org.apache.commons.cli2.option.GroupImpl:367-}	0
org.apache.commons.cli2.option.GroupImpl:375-buffer.append(']');	0
org.apache.commons.cli2.option.GroupImpl:379-for (final Iterator i = anonymous.iterator(); i.hasNext();) {	0
org.apache.commons.cli2.option.GroupImpl:380-buffer.append(' ');	0
org.apache.commons.cli2.option.GroupImpl:382-final Option option = (Option) i.next();	0
org.apache.commons.cli2.option.GroupImpl:383-option.appendUsage(buffer, helpSettingsCopy, comp);	0
org.apache.commons.cli2.option.GroupImpl:384-}	0
org.apache.commons.cli2.option.OptionImpl:50-if (arguments.hasNext()) {	0
org.apache.commons.cli2.option.OptionImpl:51-final String argument = (String) arguments.next();	0
org.apache.commons.cli2.option.OptionImpl:52-arguments.previous();	0
org.apache.commons.cli2.option.OptionImpl:54-return canProcess(commandLine, argument);	0
org.apache.commons.cli2.option.OptionImpl:56-return false;	0
org.apache.commons.cli2.option.OptionImpl:121-return required;	0
org.apache.commons.cli2.option.OptionImpl:126-}	0
org.apache.commons.cli2.option.OptionImpl:155-}	0
org.apache.commons.cli2.option.GroupImpl:115-if (arg == null) {	0
org.apache.commons.cli2.option.GroupImpl:120-if (optionMap.containsKey(arg)) {	0
org.apache.commons.cli.PosixParser:302-process(token.substring(i));	0
org.apache.commons.cli.PosixParser:300-else if (stopAtNonOption)	0
org.apache.commons.cli.PosixParser:175-while (iter.hasNext())	0
org.apache.commons.cli.PosixParser:199-if (currentOption != null && currentOption.hasArg())	0
org.apache.commons.cli.PosixParser:213-eatTheRest = true;	0
org.apache.commons.cli.PosixParser:214-tokens.add("--");	0
org.apache.commons.cli.PosixParser:215-tokens.add(value);	0
org.apache.commons.cli.PosixParser:217-}	0
org.apache.commons.cli.PosixParser:145-burstToken(token, stopAtNonOption);	0
org.apache.commons.cli.PosixParser:284-for (int i = 1; i < token.length(); i++)	0
org.apache.commons.cli.PosixParser:286-String ch = String.valueOf(token.charAt(i));	0
org.apache.commons.cli.PosixParser:288-if (options.hasOption(ch))	0
org.apache.commons.cli.PosixParser:290-tokens.add("-" + ch);	0
org.apache.commons.cli.PosixParser:291-currentOption = options.getOption(ch);	0
org.apache.commons.cli.PosixParser:293-if (currentOption.hasArg() && (token.length() != (i + 1)))	0
org.apache.commons.cli.PosixParser:310-}	0
org.apache.commons.cli.PosixParser:138-else if (options.hasOption(token))	0
org.apache.commons.cli.PosixParser:132-int tokenLength = token.length();	0
org.apache.commons.cli.PosixParser:134-if (tokenLength == 2)	0
org.apache.commons.cli.PosixParser:147-}	0
org.apache.commons.cli.PosixParser:33-public class PosixParser extends Parser {	0
org.apache.commons.cli.PosixParser:36-private List tokens = new ArrayList();	0
org.apache.commons.cli.PosixParser:54-eatTheRest = false;	0
org.apache.commons.cli.PosixParser:55-tokens.clear();	0
org.apache.commons.cli.PosixParser:56-currentOption = null;	0
org.apache.commons.cli.PosixParser:57-}	0
org.apache.commons.cli.PosixParser:99-init();	0
org.apache.commons.cli.PosixParser:100-this.options = options;	0
org.apache.commons.cli.PosixParser:103-Iterator iter = Arrays.asList(arguments).iterator();	0
org.apache.commons.cli.PosixParser:106-while (iter.hasNext())	0
org.apache.commons.cli.PosixParser:109-String token = (String) iter.next();	0
org.apache.commons.cli.PosixParser:112-if (token.startsWith("--"))	0
org.apache.commons.cli.PosixParser:126-else if ("-".equals(token))	0
org.apache.commons.cli.PosixParser:130-else if (token.startsWith("-"))	0
org.apache.commons.cli.PosixParser:160-gobble(iter);	0
org.apache.commons.cli.PosixParser:161-}	0
org.apache.commons.cli.PosixParser:163-return (String[]) tokens.toArray(new String[tokens.size()]);	0
org.apache.commons.cli.PosixParser:173-if (eatTheRest)	0
org.apache.commons.cli.PosixParser:180-}	0
org.apache.commons.cli.PosixParser:114-if (token.indexOf('=') != -1)	0
org.apache.commons.cli.PosixParser:116-tokens.add(token.substring(0, token.indexOf('=')));	0
org.apache.commons.cli.PosixParser:117-tokens.add(token.substring(token.indexOf('=') + 1, token.length()));	0
org.apache.commons.cli.PosixParser:121-tokens.add(token);	0
org.apache.commons.cli.PosixParser:128-processSingleHyphen(token);	0
org.apache.commons.cli.PosixParser:136-processOptionToken(token, stopAtNonOption);	0
org.apache.commons.cli.PosixParser:140-tokens.add(token);	0
org.apache.commons.cli.PosixParser:150-if (stopAtNonOption)	0
org.apache.commons.cli.PosixParser:152-process(token);	0
org.apache.commons.cli.PosixParser:156-tokens.add(token);	0
org.apache.commons.cli.PosixParser:177-tokens.add(iter.next());	0
org.apache.commons.cli.PosixParser:238-else if (stopAtNonOption)	0
org.apache.commons.cli.PosixParser:240-eatTheRest = true;	0
org.apache.commons.cli.PosixParser:172-tokens.add(iter.next());	0
org.apache.commons.cli.PosixParser:170-while (iter.hasNext())	0
org.apache.commons.cli.PosixParser:134-processOptionToken(token, stopAtNonOption);	0
org.apache.commons.cli.PosixParser:233-if (options.hasOption(token))	0
org.apache.commons.cli.PosixParser:242-}	0
org.apache.commons.cli.PosixParser:132-if (token.length() == 2)	0
org.apache.commons.cli.PosixParser:33-public class PosixParser extends Parser {	0
org.apache.commons.cli.PosixParser:36-private List tokens = new ArrayList();	0
org.apache.commons.cli.PosixParser:54-eatTheRest = false;	0
org.apache.commons.cli.PosixParser:55-tokens.clear();	0
org.apache.commons.cli.PosixParser:56-currentOption = null;	0
org.apache.commons.cli.PosixParser:57-}	0
org.apache.commons.cli.PosixParser:99-init();	0
org.apache.commons.cli.PosixParser:100-this.options = options;	0
org.apache.commons.cli.PosixParser:103-Iterator iter = Arrays.asList(arguments).iterator();	0
org.apache.commons.cli.PosixParser:106-while (iter.hasNext())	0
org.apache.commons.cli.PosixParser:109-String token = (String) iter.next();	0
org.apache.commons.cli.PosixParser:112-if (token.startsWith("--"))	0
org.apache.commons.cli.PosixParser:126-else if ("-".equals(token))	0
org.apache.commons.cli.PosixParser:130-else if (token.startsWith("-"))	0
org.apache.commons.cli.PosixParser:155-gobble(iter);	0
org.apache.commons.cli.PosixParser:156-}	0
org.apache.commons.cli.PosixParser:158-return (String[]) tokens.toArray(new String[tokens.size()]);	0
org.apache.commons.cli.PosixParser:168-if (eatTheRest)	0
org.apache.commons.cli.PosixParser:175-}	0
org.apache.commons.cli.PosixParser:114-if (token.indexOf('=') != -1)	0
org.apache.commons.cli.PosixParser:116-tokens.add(token.substring(0, token.indexOf('=')));	0
org.apache.commons.cli.PosixParser:117-tokens.add(token.substring(token.indexOf('=') + 1, token.length()));	0
org.apache.commons.cli.PosixParser:121-tokens.add(token);	0
org.apache.commons.cli.PosixParser:128-processSingleHyphen(token);	1
org.apache.commons.cli.PosixParser:136-else if (options.hasOption(token))	0
org.apache.commons.cli.PosixParser:138-tokens.add(token);	0
org.apache.commons.cli.PosixParser:143-burstToken(token, stopAtNonOption);	0
org.apache.commons.cli.PosixParser:146-else if (stopAtNonOption)	0
org.apache.commons.cli.PosixParser:148-process(token);	0
org.apache.commons.cli.PosixParser:152-tokens.add(token);	0
org.apache.commons.cli.PosixParser:194-if (currentOption != null && currentOption.hasArg())	0
org.apache.commons.cli.PosixParser:196-if (currentOption.hasArg())	0
org.apache.commons.cli.PosixParser:198-tokens.add(value);	0
org.apache.commons.cli.PosixParser:199-currentOption = null;	0
org.apache.commons.cli.PosixParser:201-else if (currentOption.hasArgs())	0
org.apache.commons.cli.PosixParser:203-tokens.add(value);	0
org.apache.commons.cli.PosixParser:208-eatTheRest = true;	0
org.apache.commons.cli.PosixParser:209-tokens.add("--");	0
org.apache.commons.cli.PosixParser:210-tokens.add(value);	0
org.apache.commons.cli.PosixParser:212-}	0
org.apache.commons.cli.PosixParser:215-tokens.add(hyphen);	0
org.apache.commons.cli.PosixParser:216-}	0
org.apache.commons.cli.PosixParser:234-else if (stopAtNonOption)	0
org.apache.commons.cli.PosixParser:280-tokens.add(token.substring(i + 1));	0
org.apache.commons.cli.PosixParser:282-break;	0
org.apache.commons.cli.PosixParser:143-burstToken(token, stopAtNonOption);	0
org.apache.commons.cli.PosixParser:269-for (int i = 1; i < token.length(); i++)	0
org.apache.commons.cli.PosixParser:271-String ch = String.valueOf(token.charAt(i));	0
org.apache.commons.cli.PosixParser:273-if (options.hasOption(ch))	0
org.apache.commons.cli.PosixParser:275-tokens.add("-" + ch);	0
org.apache.commons.cli.PosixParser:276-currentOption = options.getOption(ch);	0
org.apache.commons.cli.PosixParser:278-if (currentOption.hasArg() && (token.length() != (i + 1)))	0
org.apache.commons.cli.PosixParser:296-}	0
org.apache.commons.cli.PosixParser:136-else if (options.hasOption(token))	0
org.apache.commons.cli.PosixParser:134-processOptionToken(token, stopAtNonOption);	0
org.apache.commons.cli.PosixParser:229-if (options.hasOption(token))	0
org.apache.commons.cli.PosixParser:239-}	0
org.apache.commons.cli.PosixParser:152-tokens.add(token);	0
org.apache.commons.cli.PosixParser:146-else if (stopAtNonOption)	0
org.apache.commons.cli.PosixParser:132-if (token.length() == 2)	0
org.apache.commons.cli.PosixParser:33-public class PosixParser extends Parser {	0
org.apache.commons.cli.PosixParser:36-private List tokens = new ArrayList();	0
org.apache.commons.cli.PosixParser:54-eatTheRest = false;	0
org.apache.commons.cli.PosixParser:55-tokens.clear();	0
org.apache.commons.cli.PosixParser:56-currentOption = null;	0
org.apache.commons.cli.PosixParser:57-}	0
org.apache.commons.cli.PosixParser:99-init();	0
org.apache.commons.cli.PosixParser:100-this.options = options;	0
org.apache.commons.cli.PosixParser:103-Iterator iter = Arrays.asList(arguments).iterator();	0
org.apache.commons.cli.PosixParser:106-while (iter.hasNext())	0
org.apache.commons.cli.PosixParser:109-String token = (String) iter.next();	0
org.apache.commons.cli.PosixParser:112-if (token.startsWith("--"))	0
org.apache.commons.cli.PosixParser:126-else if ("-".equals(token))	0
org.apache.commons.cli.PosixParser:130-else if (token.startsWith("-"))	0
org.apache.commons.cli.PosixParser:155-gobble(iter);	0
org.apache.commons.cli.PosixParser:156-}	0
org.apache.commons.cli.PosixParser:158-return (String[]) tokens.toArray(new String[tokens.size()]);	0
org.apache.commons.cli.PosixParser:168-if (eatTheRest)	0
org.apache.commons.cli.PosixParser:175-}	0
org.apache.commons.cli.PosixParser:114-if (token.indexOf('=') != -1)	0
org.apache.commons.cli.PosixParser:116-tokens.add(token.substring(0, token.indexOf('=')));	0
org.apache.commons.cli.PosixParser:117-tokens.add(token.substring(token.indexOf('=') + 1, token.length()));	0
org.apache.commons.cli.PosixParser:121-tokens.add(token);	0
org.apache.commons.cli.PosixParser:128-tokens.add(token);	0
org.apache.commons.cli.PosixParser:138-tokens.add(token);	0
org.apache.commons.cli.PosixParser:148-process(token);	0
org.apache.commons.cli.PosixParser:170-while (iter.hasNext())	0
org.apache.commons.cli.PosixParser:172-tokens.add(iter.next());	0
org.apache.commons.cli.PosixParser:194-if (currentOption != null && currentOption.hasArg())	0
org.apache.commons.cli.PosixParser:196-if (currentOption.hasArg())	0
org.apache.commons.cli.PosixParser:198-tokens.add(value);	0
org.apache.commons.cli.PosixParser:199-currentOption = null;	0
org.apache.commons.cli.PosixParser:116-tokens.add(token.substring(0, token.indexOf('=')));	0
org.apache.commons.cli.PosixParser:117-tokens.add(token.substring(token.indexOf('=') + 1, token.length()));	0
org.apache.commons.cli.PosixParser:114-if (token.indexOf('=') != -1)	1
org.apache.commons.cli.PosixParser:280-tokens.add(token.substring(i + 1));	0
org.apache.commons.cli.PosixParser:282-break;	0
org.apache.commons.cli.PosixParser:143-burstToken(token, stopAtNonOption);	0
org.apache.commons.cli.PosixParser:269-for (int i = 1; i < token.length(); i++)	0
org.apache.commons.cli.PosixParser:271-String ch = String.valueOf(token.charAt(i));	0
org.apache.commons.cli.PosixParser:273-if (options.hasOption(ch))	0
org.apache.commons.cli.PosixParser:275-tokens.add("-" + ch);	0
org.apache.commons.cli.PosixParser:276-currentOption = options.getOption(ch);	0
org.apache.commons.cli.PosixParser:278-if (currentOption.hasArg() && (token.length() != (i + 1)))	0
org.apache.commons.cli.PosixParser:296-}	0
org.apache.commons.cli.PosixParser:136-else if (options.hasOption(token))	0
org.apache.commons.cli.PosixParser:132-if (token.length() == 2)	0
org.apache.commons.cli.PosixParser:33-public class PosixParser extends Parser {	0
org.apache.commons.cli.PosixParser:36-private List tokens = new ArrayList();	0
org.apache.commons.cli.PosixParser:54-eatTheRest = false;	0
org.apache.commons.cli.PosixParser:55-tokens.clear();	0
org.apache.commons.cli.PosixParser:56-currentOption = null;	0
org.apache.commons.cli.PosixParser:57-}	0
org.apache.commons.cli.PosixParser:99-init();	0
org.apache.commons.cli.PosixParser:100-this.options = options;	0
org.apache.commons.cli.PosixParser:103-Iterator iter = Arrays.asList(arguments).iterator();	0
org.apache.commons.cli.PosixParser:106-while (iter.hasNext())	0
org.apache.commons.cli.PosixParser:109-String token = (String) iter.next();	0
org.apache.commons.cli.PosixParser:112-if (token.startsWith("--"))	0
org.apache.commons.cli.PosixParser:126-else if ("-".equals(token))	0
org.apache.commons.cli.PosixParser:130-else if (token.startsWith("-"))	0
org.apache.commons.cli.PosixParser:155-gobble(iter);	0
org.apache.commons.cli.PosixParser:156-}	0
org.apache.commons.cli.PosixParser:158-return (String[]) tokens.toArray(new String[tokens.size()]);	0
org.apache.commons.cli.PosixParser:168-if (eatTheRest)	0
org.apache.commons.cli.PosixParser:175-}	0
org.apache.commons.cli.PosixParser:121-tokens.add(token);	1
org.apache.commons.cli.PosixParser:128-tokens.add(token);	0
org.apache.commons.cli.PosixParser:134-processOptionToken(token, stopAtNonOption);	0
org.apache.commons.cli.PosixParser:138-tokens.add(token);	0
org.apache.commons.cli.PosixParser:146-else if (stopAtNonOption)	0
org.apache.commons.cli.PosixParser:148-process(token);	0
org.apache.commons.cli.PosixParser:152-tokens.add(token);	0
org.apache.commons.cli.PosixParser:170-while (iter.hasNext())	0
org.apache.commons.cli.PosixParser:172-tokens.add(iter.next());	0
org.apache.commons.cli.PosixParser:194-if (currentOption != null && currentOption.hasArg())	0
org.apache.commons.cli.PosixParser:196-if (currentOption.hasArg())	0
org.apache.commons.cli.PosixParser:198-tokens.add(value);	0
org.apache.commons.cli.PosixParser:199-currentOption = null;	0
org.apache.commons.cli.PosixParser:201-else if (currentOption.hasArgs())	0
org.apache.commons.cli.PosixParser:203-tokens.add(value);	0
org.apache.commons.cli.PosixParser:208-eatTheRest = true;	0
org.apache.commons.cli2.option.GroupImpl:71-super(0, required);	0
org.apache.commons.cli2.option.GroupImpl:73-this.name = name;	0
org.apache.commons.cli2.option.GroupImpl:74-this.description = description;	0
org.apache.commons.cli2.option.GroupImpl:75-this.minimum = minimum;	0
org.apache.commons.cli2.option.GroupImpl:76-this.maximum = maximum;	0
org.apache.commons.cli2.option.GroupImpl:80-this.options = Collections.unmodifiableList(options);	0
org.apache.commons.cli2.option.GroupImpl:83-final List newAnonymous = new ArrayList();	0
org.apache.commons.cli2.option.GroupImpl:86-final SortedMap newOptionMap = new TreeMap(ReverseStringComparator.getInstance());	0
org.apache.commons.cli2.option.GroupImpl:89-final Set newPrefixes = new HashSet();	0
org.apache.commons.cli2.option.GroupImpl:92-for (final Iterator i = options.iterator(); i.hasNext();) {	0
org.apache.commons.cli2.option.GroupImpl:93-final Option option = (Option) i.next();	0
org.apache.commons.cli2.option.GroupImpl:94-option.setParent(this);	0
org.apache.commons.cli2.option.GroupImpl:96-if (option instanceof Argument) {	0
org.apache.commons.cli2.option.GroupImpl:100-final Set triggers = option.getTriggers();	0
org.apache.commons.cli2.option.GroupImpl:102-for (Iterator j = triggers.iterator(); j.hasNext();) {	0
org.apache.commons.cli2.option.GroupImpl:103-newOptionMap.put(j.next(), option);	0
org.apache.commons.cli2.option.GroupImpl:107-newPrefixes.addAll(option.getPrefixes());	0
org.apache.commons.cli2.option.GroupImpl:109-}	0
org.apache.commons.cli2.option.GroupImpl:111-this.anonymous = Collections.unmodifiableList(newAnonymous);	0
org.apache.commons.cli2.option.GroupImpl:112-this.optionMap = Collections.unmodifiableSortedMap(newOptionMap);	0
org.apache.commons.cli2.option.GroupImpl:113-this.prefixes = Collections.unmodifiableSet(newPrefixes);	0
org.apache.commons.cli2.option.GroupImpl:114-}	0
org.apache.commons.cli2.option.GroupImpl:118-if (arg == null) {	0
org.apache.commons.cli2.option.GroupImpl:123-if (optionMap.containsKey(arg)) {	0
org.apache.commons.cli2.option.GroupImpl:124-return true;	0
org.apache.commons.cli2.option.GroupImpl:128-final Map tailMap = optionMap.tailMap(arg);	0
org.apache.commons.cli2.option.GroupImpl:131-for (final Iterator iter = tailMap.values().iterator(); iter.hasNext();) {	0
org.apache.commons.cli2.option.GroupImpl:132-final Option option = (Option) iter.next();	0
org.apache.commons.cli2.option.GroupImpl:134-if (option.canProcess(commandLine, arg)) {	0
org.apache.commons.cli2.option.GroupImpl:137-}	0
org.apache.commons.cli2.option.GroupImpl:139-if (looksLikeOption(commandLine, arg)) {	0
org.apache.commons.cli2.option.GroupImpl:140-return false;	0
org.apache.commons.cli2.option.GroupImpl:152-return prefixes;	0
org.apache.commons.cli2.option.GroupImpl:162-String previous = null;	0
org.apache.commons.cli2.option.GroupImpl:165-while (arguments.hasNext()) {	0
org.apache.commons.cli2.option.GroupImpl:167-final String arg = (String) arguments.next();	0
org.apache.commons.cli2.option.GroupImpl:170-if (arg == previous) {	0
org.apache.commons.cli2.option.GroupImpl:178-previous = arg;	0
org.apache.commons.cli2.option.GroupImpl:180-final Option opt = (Option) optionMap.get(arg);	0
org.apache.commons.cli2.option.GroupImpl:183-if (opt != null) {	0
org.apache.commons.cli2.option.GroupImpl:184-arguments.previous();	0
org.apache.commons.cli2.option.GroupImpl:185-opt.process(commandLine, arguments);	0
org.apache.commons.cli2.option.GroupImpl:191-if (looksLikeOption(commandLine, arg)) {	0
org.apache.commons.cli2.option.GroupImpl:193-final Collection values = optionMap.tailMap(arg).values();	0
org.apache.commons.cli2.option.GroupImpl:195-boolean foundMemberOption = false;	0
org.apache.commons.cli2.option.GroupImpl:197-for (Iterator i = values.iterator(); i.hasNext() && !foundMemberOption;) {	0
org.apache.commons.cli2.option.GroupImpl:198-final Option option = (Option) i.next();	0
org.apache.commons.cli2.option.GroupImpl:200-if (option.canProcess(commandLine, arg)) {	0
org.apache.commons.cli2.option.GroupImpl:205-}	0
org.apache.commons.cli2.option.GroupImpl:208-if (!foundMemberOption) {	0
org.apache.commons.cli.PosixParser:148-processNonOptionToken(token);	0
org.apache.commons.cli.PosixParser:186-eatTheRest = true;	0
org.apache.commons.cli.PosixParser:187-tokens.add("--");	0
org.apache.commons.cli.PosixParser:189-tokens.add(value);	0
org.apache.commons.cli.PosixParser:190-}	0
org.apache.commons.cli.PosixParser:170-while (iter.hasNext())	0
org.apache.commons.cli.PosixParser:146-else if (stopAtNonOption)	1
org.apache.commons.cli.PosixParser:138-processOptionToken(token, stopAtNonOption);	0
org.apache.commons.cli.PosixParser:206-if (stopAtNonOption && !options.hasOption(token))	0
org.apache.commons.cli.PosixParser:212-tokens.add(token);	0
org.apache.commons.cli.PosixParser:213-}	0
org.apache.commons.cli.PosixParser:136-if (token.length() == 2 || options.hasOption(token))	0
org.apache.commons.cli.PosixParser:130-else if ("-".equals(token))	0
org.apache.commons.cli.PosixParser:134-else if (token.startsWith("-"))	0
org.apache.commons.cli.PosixParser:52-eatTheRest = false;	0
org.apache.commons.cli.PosixParser:53-tokens.clear();	0
org.apache.commons.cli.PosixParser:54-}	0
org.apache.commons.cli.PosixParser:96-init();	0
org.apache.commons.cli.PosixParser:97-this.options = options;	0
org.apache.commons.cli.PosixParser:100-Iterator iter = Arrays.asList(arguments).iterator();	0
org.apache.commons.cli.PosixParser:103-while (iter.hasNext())	0
org.apache.commons.cli.PosixParser:106-String token = (String) iter.next();	0
org.apache.commons.cli.PosixParser:109-if (token.startsWith("--"))	0
org.apache.commons.cli.PosixParser:155-gobble(iter);	0
org.apache.commons.cli.PosixParser:156-}	0
org.apache.commons.cli.PosixParser:158-return (String[]) tokens.toArray(new String[tokens.size()]);	0
org.apache.commons.cli.PosixParser:168-if (eatTheRest)	0
org.apache.commons.cli.PosixParser:175-}	0
org.apache.commons.cli.PosixParser:32-public class PosixParser extends Parser	0
org.apache.commons.cli.PosixParser:35-private List tokens = new ArrayList();	0
org.apache.commons.cli.PosixParser:111-int pos = token.indexOf('=');	0
org.apache.commons.cli.PosixParser:112-String opt = pos == -1 ? token : token.substring(0, pos); // --foo	0
org.apache.commons.cli.PosixParser:114-if (!options.hasOption(opt))	0
org.apache.commons.cli.PosixParser:116-processNonOptionToken(token);	1
org.apache.commons.cli.PosixParser:121-tokens.add(opt);	0
org.apache.commons.cli.PosixParser:122-if (pos != -1)	0
org.apache.commons.cli.PosixParser:124-tokens.add(token.substring(pos + 1));	0
org.apache.commons.cli.PosixParser:127-}	0
org.apache.commons.cli.PosixParser:132-tokens.add(token);	0
org.apache.commons.cli.PosixParser:143-burstToken(token, stopAtNonOption);	0
org.apache.commons.cli.PosixParser:152-tokens.add(token);	0
org.apache.commons.cli.PosixParser:172-tokens.add(iter.next());	0
org.apache.commons.cli.PosixParser:208-eatTheRest = true;	0
org.apache.commons.cli.PosixParser:244-for (int i = 1; i < token.length(); i++)	0
org.apache.commons.cli.PosixParser:246-String ch = String.valueOf(token.charAt(i));	0
org.apache.commons.cli.PosixParser:248-if (options.hasOption(ch))	0
org.apache.commons.cli.PosixParser:250-tokens.add("-" + ch);	0
org.apache.commons.cli.PosixParser:251-currentOption = options.getOption(ch);	0
org.apache.commons.cli.PosixParser:253-if (currentOption.hasArg() && (token.length() != (i + 1)))	0
org.apache.commons.cli.PosixParser:255-tokens.add(token.substring(i + 1));	0
org.apache.commons.cli.HelpFormatter:35-public class HelpFormatter	0
org.apache.commons.cli.HelpFormatter:71-public int defaultWidth = DEFAULT_WIDTH;	0
org.apache.commons.cli.HelpFormatter:79-public int defaultLeftPad = DEFAULT_LEFT_PAD;	0
org.apache.commons.cli.HelpFormatter:88-public int defaultDescPad = DEFAULT_DESC_PAD;	0
org.apache.commons.cli.HelpFormatter:96-public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;	0
org.apache.commons.cli.HelpFormatter:104-public String defaultNewLine = System.getProperty("line.separator");	0
org.apache.commons.cli.HelpFormatter:112-public String defaultOptPrefix = DEFAULT_OPT_PREFIX;	0
org.apache.commons.cli.HelpFormatter:120-public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;	0
org.apache.commons.cli.HelpFormatter:128-public String defaultArgName = DEFAULT_ARG_NAME;	0
org.apache.commons.cli.HelpFormatter:135-protected Comparator optionComparator = new OptionComparator();	0
org.apache.commons.cli.HelpFormatter:952-private static class OptionComparator implements Comparator	0
org.apache.commons.cli.HelpFormatter:304-return optionComparator;	0
org.apache.commons.cli.HelpFormatter:334-printHelp(defaultWidth, cmdLineSyntax, null, options, null, false);	0
org.apache.commons.cli.HelpFormatter:416-PrintWriter pw = new PrintWriter(System.out);	0
org.apache.commons.cli.HelpFormatter:418-printHelp(pw, width, cmdLineSyntax, header, options, defaultLeftPad, defaultDescPad, footer, autoUsage);	0
org.apache.commons.cli.HelpFormatter:466-if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))	0
org.apache.commons.cli.HelpFormatter:471-if (autoUsage)	0
org.apache.commons.cli.HelpFormatter:477-printUsage(pw, width, cmdLineSyntax);	0
org.apache.commons.cli.HelpFormatter:480-if ((header != null) && (header.trim().length() > 0))	0
org.apache.commons.cli.HelpFormatter:485-printOptions(pw, width, options, leftPad, descPad);	0
org.apache.commons.cli.HelpFormatter:640-int argPos = cmdLineSyntax.indexOf(' ') + 1;	0
org.apache.commons.cli.HelpFormatter:642-printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);	0
org.apache.commons.cli.HelpFormatter:643-}	0
org.apache.commons.cli.HelpFormatter:660-StringBuffer sb = new StringBuffer();	0
org.apache.commons.cli.HelpFormatter:662-renderOptions(sb, width, options, leftPad, descPad);	0
org.apache.commons.cli.HelpFormatter:688-StringBuffer sb = new StringBuffer(text.length());	0
org.apache.commons.cli.HelpFormatter:690-renderWrappedText(sb, width, nextLineTabStop, text);	0
org.apache.commons.cli.HelpFormatter:691-pw.println(sb.toString());	0
org.apache.commons.cli.HelpFormatter:692-}	0
org.apache.commons.cli.HelpFormatter:712-final String lpad = createPadding(leftPad);	0
org.apache.commons.cli.HelpFormatter:713-final String dpad = createPadding(descPad);	0
org.apache.commons.cli.HelpFormatter:719-int max = 0;	0
org.apache.commons.cli.HelpFormatter:721-List prefixList = new ArrayList();	0
org.apache.commons.cli.HelpFormatter:723-List optList = options.helpOptions();	0
org.apache.commons.cli.HelpFormatter:725-Collections.sort(optList, getOptionComparator());	0
org.apache.commons.cli.HelpFormatter:727-for (Iterator i = optList.iterator(); i.hasNext();)	0
org.apache.commons.cli.HelpFormatter:729-Option option = (Option) i.next();	0
org.apache.commons.cli.HelpFormatter:730-optBuf = new StringBuffer(8);	0
org.apache.commons.cli.HelpFormatter:732-if (option.getOpt() == null)	0
org.apache.commons.cli.HelpFormatter:738-optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());	0
org.apache.commons.cli.HelpFormatter:740-if (option.hasLongOpt())	0
org.apache.commons.cli.HelpFormatter:742-optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());	0
org.apache.commons.cli.HelpFormatter:746-if (option.hasArg())	0
org.apache.commons.cli.HelpFormatter:758-prefixList.add(optBuf);	0
org.apache.commons.cli.HelpFormatter:759-max = (optBuf.length() > max) ? optBuf.length() : max;	0
org.apache.commons.cli.HelpFormatter:760-}	0
org.apache.commons.cli.HelpFormatter:762-int x = 0;	0
org.apache.commons.cli.HelpFormatter:764-for (Iterator i = optList.iterator(); i.hasNext();)	0
org.apache.commons.cli.HelpFormatter:766-Option option = (Option) i.next();	0
org.apache.commons.cli.HelpFormatter:767-optBuf = new StringBuffer(prefixList.get(x++).toString());	0
org.apache.commons.cli.HelpFormatter:825-throw new IllegalStateException("Total width is less than the width of the argument and indent " +	1
org.apache.commons.cli.HelpFormatter:950---pos;	0
org.apache.commons.cli.HelpFormatter:443-printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);	0
org.apache.commons.cli.HelpFormatter:486-printWrapped(pw, width, header);	0
org.apache.commons.cli.HelpFormatter:679-printWrapped(pw, width, 0, text);	0
org.apache.commons.cli.HelpFormatter:680-}	0
org.apache.commons.cli.HelpFormatter:35-public class HelpFormatter	0
org.apache.commons.cli.HelpFormatter:71-public int defaultWidth = DEFAULT_WIDTH;	0
org.apache.commons.cli.HelpFormatter:79-public int defaultLeftPad = DEFAULT_LEFT_PAD;	0
org.apache.commons.cli.HelpFormatter:88-public int defaultDescPad = DEFAULT_DESC_PAD;	0
org.apache.commons.cli.HelpFormatter:96-public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;	0
org.apache.commons.cli.HelpFormatter:104-public String defaultNewLine = System.getProperty("line.separator");	0
org.apache.commons.cli.HelpFormatter:112-public String defaultOptPrefix = DEFAULT_OPT_PREFIX;	0
org.apache.commons.cli.HelpFormatter:120-public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;	0
org.apache.commons.cli.HelpFormatter:128-public String defaultArgName = DEFAULT_ARG_NAME;	0
org.apache.commons.cli.HelpFormatter:135-protected Comparator optionComparator = new OptionComparator();	0
org.apache.commons.cli.HelpFormatter:963-private static class OptionComparator implements Comparator	0
org.apache.commons.cli.HelpFormatter:304-return optionComparator;	0
org.apache.commons.cli.HelpFormatter:470-if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))	0
org.apache.commons.cli.HelpFormatter:475-if (autoUsage)	0
org.apache.commons.cli.HelpFormatter:481-printUsage(pw, width, cmdLineSyntax);	0
org.apache.commons.cli.HelpFormatter:484-if ((header != null) && (header.trim().length() > 0))	0
org.apache.commons.cli.HelpFormatter:489-printOptions(pw, width, options, leftPad, descPad);	0
org.apache.commons.cli.HelpFormatter:644-int argPos = cmdLineSyntax.indexOf(' ') + 1;	0
org.apache.commons.cli.HelpFormatter:646-printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);	0
org.apache.commons.cli.HelpFormatter:647-}	0
org.apache.commons.cli.HelpFormatter:664-StringBuffer sb = new StringBuffer();	0
org.apache.commons.cli.HelpFormatter:666-renderOptions(sb, width, options, leftPad, descPad);	0
org.apache.commons.cli.HelpFormatter:692-StringBuffer sb = new StringBuffer(text.length());	0
org.apache.commons.cli.HelpFormatter:694-renderWrappedText(sb, width, nextLineTabStop, text);	0
org.apache.commons.cli.HelpFormatter:695-pw.println(sb.toString());	0
org.apache.commons.cli.HelpFormatter:696-}	0
org.apache.commons.cli.HelpFormatter:716-final String lpad = createPadding(leftPad);	0
org.apache.commons.cli.HelpFormatter:717-final String dpad = createPadding(descPad);	0
org.apache.commons.cli.HelpFormatter:723-int max = 0;	0
org.apache.commons.cli.HelpFormatter:725-List prefixList = new ArrayList();	0
org.apache.commons.cli.HelpFormatter:727-List optList = options.helpOptions();	0
org.apache.commons.cli.HelpFormatter:729-Collections.sort(optList, getOptionComparator());	0
org.apache.commons.cli.HelpFormatter:731-for (Iterator i = optList.iterator(); i.hasNext();)	0
org.apache.commons.cli.HelpFormatter:733-Option option = (Option) i.next();	0
org.apache.commons.cli.HelpFormatter:734-optBuf = new StringBuffer(8);	0
org.apache.commons.cli.HelpFormatter:736-if (option.getOpt() == null)	0
org.apache.commons.cli.HelpFormatter:742-optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());	0
org.apache.commons.cli.HelpFormatter:744-if (option.hasLongOpt())	0
org.apache.commons.cli.HelpFormatter:746-optBuf.append(',').append(defaultLongOptPrefix).append(option.getLongOpt());	0
org.apache.commons.cli.HelpFormatter:750-if (option.hasArg())	0
org.apache.commons.cli.HelpFormatter:762-prefixList.add(optBuf);	0
org.apache.commons.cli.HelpFormatter:763-max = (optBuf.length() > max) ? optBuf.length() : max;	0
org.apache.commons.cli.HelpFormatter:764-}	0
org.apache.commons.cli.HelpFormatter:766-int x = 0;	0
org.apache.commons.cli.HelpFormatter:825-nextLineTabStop = width - 1;	1
org.apache.commons.cli.HelpFormatter:949---pos;	0
org.apache.commons.cli.HelpFormatter:443-printHelp(pw, width, cmdLineSyntax, header, options, leftPad, descPad, footer, false);	0
org.apache.commons.cli.HelpFormatter:444-}	0
org.apache.commons.cli.HelpFormatter:486-printWrapped(pw, width, header);	0
org.apache.commons.cli.HelpFormatter:493-printWrapped(pw, width, footer);	0
org.apache.commons.cli.HelpFormatter:679-printWrapped(pw, width, 0, text);	0
org.apache.commons.cli.HelpFormatter:680-}	0
org.apache.commons.cli.HelpFormatter:35-public class HelpFormatter	0
org.apache.commons.cli.HelpFormatter:71-public int defaultWidth = DEFAULT_WIDTH;	0
org.apache.commons.cli.HelpFormatter:79-public int defaultLeftPad = DEFAULT_LEFT_PAD;	0
org.apache.commons.cli.HelpFormatter:88-public int defaultDescPad = DEFAULT_DESC_PAD;	0
org.apache.commons.cli.HelpFormatter:96-public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;	0
org.apache.commons.cli.HelpFormatter:104-public String defaultNewLine = System.getProperty("line.separator");	0
org.apache.commons.cli.HelpFormatter:112-public String defaultOptPrefix = DEFAULT_OPT_PREFIX;	0
org.apache.commons.cli.HelpFormatter:120-public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;	0
org.apache.commons.cli.HelpFormatter:128-public String defaultArgName = DEFAULT_ARG_NAME;	0
org.apache.commons.cli.HelpFormatter:135-protected Comparator optionComparator = new OptionComparator();	0
org.apache.commons.cli.HelpFormatter:962-private static class OptionComparator implements Comparator	0
org.apache.commons.cli.HelpFormatter:304-return optionComparator;	0
org.apache.commons.cli.HelpFormatter:470-if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))	0
org.apache.commons.cli.HelpFormatter:475-if (autoUsage)	0
org.apache.commons.cli.HelpFormatter:481-printUsage(pw, width, cmdLineSyntax);	0
org.apache.commons.cli.HelpFormatter:484-if ((header != null) && (header.trim().length() > 0))	0
org.apache.commons.cli.HelpFormatter:489-printOptions(pw, width, options, leftPad, descPad);	0
org.apache.commons.cli.HelpFormatter:491-if ((footer != null) && (footer.trim().length() > 0))	0
org.apache.commons.cli.HelpFormatter:495-}	0
org.apache.commons.cli.HelpFormatter:644-int argPos = cmdLineSyntax.indexOf(' ') + 1;	0
org.apache.commons.cli.HelpFormatter:646-printWrapped(pw, width, defaultSyntaxPrefix.length() + argPos, defaultSyntaxPrefix + cmdLineSyntax);	0
org.apache.commons.cli.HelpFormatter:647-}	0
org.apache.commons.cli.HelpFormatter:664-StringBuffer sb = new StringBuffer();	0
org.apache.commons.cli.HelpFormatter:666-renderOptions(sb, width, options, leftPad, descPad);	0
org.apache.commons.cli.HelpFormatter:667-pw.println(sb.toString());	0
org.apache.commons.cli.HelpFormatter:668-}	0
org.apache.commons.cli.HelpFormatter:692-StringBuffer sb = new StringBuffer(text.length());	0
org.apache.commons.cli.HelpFormatter:694-renderWrappedText(sb, width, nextLineTabStop, text);	0
org.apache.commons.cli.HelpFormatter:695-pw.println(sb.toString());	0
org.apache.commons.cli.HelpFormatter:696-}	0
org.apache.commons.cli.HelpFormatter:716-final String lpad = createPadding(leftPad);	0
org.apache.commons.cli.HelpFormatter:717-final String dpad = createPadding(descPad);	0
org.apache.commons.cli.HelpFormatter:723-int max = 0;	0
org.apache.commons.cli.HelpFormatter:725-List prefixList = new ArrayList();	0
org.apache.commons.cli.HelpFormatter:727-List optList = options.helpOptions();	0
org.apache.commons.cli.HelpFormatter:729-Collections.sort(optList, getOptionComparator());	0
org.apache.commons.cli.HelpFormatter:731-for (Iterator i = optList.iterator(); i.hasNext();)	0
org.apache.commons.cli.HelpFormatter:733-Option option = (Option) i.next();	0
org.apache.commons.cli.HelpFormatter:734-optBuf = new StringBuffer(8);	0
org.apache.commons.cli.HelpFormatter:736-if (option.getOpt() == null)	0
org.apache.commons.cli.HelpFormatter:742-optBuf.append(lpad).append(defaultOptPrefix).append(option.getOpt());	0
org.apache.commons.cli.HelpFormatter:744-if (option.hasLongOpt())	0
org.apache.commons.cli.OptionBuilder:316-return create(String.valueOf(opt));	0
org.apache.commons.cli.OptionBuilder:300-OptionBuilder.description = newDescription;	0
org.apache.commons.cli.OptionBuilder:302-return instance;	0
org.apache.commons.cli.OptionBuilder:64-{	0
org.apache.commons.cli.OptionBuilder:66-}	0
org.apache.commons.cli.OptionBuilder:46-private static int numberOfArgs = Option.UNINITIALIZED;	0
org.apache.commons.cli.OptionBuilder:58-private static OptionBuilder instance = new OptionBuilder();	0
org.apache.commons.cli.OptionBuilder:73-description = null;	0
org.apache.commons.cli.OptionBuilder:74-argName = "arg";	0
org.apache.commons.cli.OptionBuilder:75-longopt = null;	0
org.apache.commons.cli.OptionBuilder:76-type = null;	0
org.apache.commons.cli.OptionBuilder:77-required = false;	0
org.apache.commons.cli.OptionBuilder:78-numberOfArgs = Option.UNINITIALIZED;	0
org.apache.commons.cli.OptionBuilder:82-optionalArg = false;	0
org.apache.commons.cli.OptionBuilder:83-valuesep = (char) 0;	0
org.apache.commons.cli.OptionBuilder:84-}	0
org.apache.commons.cli.OptionBuilder:349-Option option = new Option(opt, description);	0
org.apache.commons.cli.OptionBuilder:352-option.setLongOpt(longopt);	0
org.apache.commons.cli.OptionBuilder:353-option.setRequired(required);	0
org.apache.commons.cli.OptionBuilder:354-option.setOptionalArg(optionalArg);	0
org.apache.commons.cli.OptionBuilder:355-option.setArgs(numberOfArgs);	0
org.apache.commons.cli.OptionBuilder:356-option.setType(type);	0
org.apache.commons.cli.OptionBuilder:357-option.setValueSeparator(valuesep);	0
org.apache.commons.cli.OptionBuilder:358-option.setArgName(argName);	0
org.apache.commons.cli.OptionBuilder:360-OptionBuilder.reset();	0
org.apache.commons.cli.OptionBuilder:363-return option;	0
org.apache.commons.cli.OptionBuilder:94-OptionBuilder.longopt = newLongopt;	0
org.apache.commons.cli.OptionBuilder:96-return instance;	0
org.apache.commons.cli.OptionBuilder:106-OptionBuilder.numberOfArgs = 1;	0
org.apache.commons.cli.OptionBuilder:108-return instance;	0
org.apache.commons.cli.OptionBuilder:120-OptionBuilder.numberOfArgs = hasArg ? 1 : Option.UNINITIALIZED;	0
org.apache.commons.cli.OptionBuilder:122-return instance;	0
org.apache.commons.cli.OptionBuilder:133-OptionBuilder.argName = name;	0
org.apache.commons.cli.OptionBuilder:135-return instance;	0
org.apache.commons.cli.OptionBuilder:145-OptionBuilder.required = true;	0
org.apache.commons.cli.OptionBuilder:147-return instance;	0
org.apache.commons.cli.OptionBuilder:170-OptionBuilder.valuesep = sep;	0
org.apache.commons.cli.OptionBuilder:172-return instance;	0
org.apache.commons.cli.OptionBuilder:193-OptionBuilder.valuesep = '=';	0
org.apache.commons.cli.OptionBuilder:195-return instance;	0
org.apache.commons.cli.OptionBuilder:207-OptionBuilder.required = newRequired;	0
org.apache.commons.cli.OptionBuilder:209-return instance;	0
org.apache.commons.cli.OptionBuilder:219-OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES;	0
org.apache.commons.cli.OptionBuilder:221-return instance;	0
org.apache.commons.cli.OptionBuilder:232-OptionBuilder.numberOfArgs = num;	0
org.apache.commons.cli.OptionBuilder:234-return instance;	0
org.apache.commons.cli.OptionBuilder:244-OptionBuilder.numberOfArgs = 1;	0
org.apache.commons.cli.OptionBuilder:245-OptionBuilder.optionalArg = true;	0
org.apache.commons.cli.OptionBuilder:247-return instance;	0
org.apache.commons.cli.OptionBuilder:257-OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES;	0
org.apache.commons.cli.OptionGroup:98-if (selected == null || selected.equals(option.getOpt()))	1
org.apache.commons.cli.OptionGroup:100-selected = option.getOpt();	0
org.apache.commons.cli.OptionGroup:106-}	0
org.apache.commons.cli.OptionGroup:113-return selected;	0
org.apache.commons.cli.OptionGroup:32-public class OptionGroup implements Serializable	0
org.apache.commons.cli.OptionGroup:37-private Map optionMap = new HashMap();	0
org.apache.commons.cli.OptionGroup:55-optionMap.put(option.getKey(), option);	0
org.apache.commons.cli.OptionGroup:57-return this;	0
org.apache.commons.cli.OptionGroup:76-return optionMap.values();	0
org.apache.commons.cli.OptionGroup:88-if (option == null)	0
org.apache.commons.cli.OptionGroup:91-selected = null;	0
org.apache.commons.cli.OptionGroup:92-return;	0
org.apache.commons.cli.OptionGroup:131-return required;	0
org.apache.commons.cli.OptionGroup:67-return optionMap.keySet();	0
org.apache.commons.cli.OptionGroup:104-throw new AlreadySelectedException(this, option);	0
org.apache.commons.cli.OptionGroup:121-this.required = required;	0
org.apache.commons.cli.OptionGroup:122-}	0
org.apache.commons.cli.OptionGroup:141-StringBuffer buff = new StringBuffer();	0
org.apache.commons.cli.OptionGroup:143-Iterator iter = getOptions().iterator();	0
org.apache.commons.cli.OptionGroup:145-buff.append("[");	0
org.apache.commons.cli.OptionGroup:147-while (iter.hasNext())	0
org.apache.commons.cli.OptionGroup:149-Option option = (Option) iter.next();	0
org.apache.commons.cli.OptionGroup:151-if (option.getOpt() != null)	0
org.apache.commons.cli.OptionGroup:153-buff.append("-");	0
org.apache.commons.cli.OptionGroup:154-buff.append(option.getOpt());	0
org.apache.commons.cli.OptionGroup:158-buff.append("--");	0
org.apache.commons.cli.OptionGroup:159-buff.append(option.getLongOpt());	0
org.apache.commons.cli.OptionGroup:162-buff.append(" ");	0
org.apache.commons.cli.OptionGroup:163-buff.append(option.getDescription());	0
org.apache.commons.cli.OptionGroup:165-if (iter.hasNext())	0
org.apache.commons.cli.OptionGroup:167-buff.append(", ");	0
org.apache.commons.cli.OptionGroup:169-}	0
org.apache.commons.cli.OptionGroup:171-buff.append("]");	0
org.apache.commons.cli.OptionGroup:173-return buff.toString();	0
org.apache.commons.cli.Parser:284-else if (!("yes".equalsIgnoreCase(value)	0
org.apache.commons.cli.Parser:290-break;	1
org.apache.commons.cli.Parser:169-arguments = new String[0];	0
org.apache.commons.cli.Parser:265-Option opt = getOptions().getOption(option);	0
org.apache.commons.cli.Parser:268-String value = properties.getProperty(option);	0
org.apache.commons.cli.Parser:270-if (opt.hasArg())	0
org.apache.commons.cli.Parser:272-if (opt.getValues() == null || opt.getValues().length == 0)	0
org.apache.commons.cli.Parser:276-opt.addValueForProcessing(value);	0
org.apache.commons.cli.Parser:281-}	0
org.apache.commons.cli.Parser:293-cmd.addOption(opt);	0
org.apache.commons.cli.Parser:103-return parse(options, arguments, properties, false);	0
org.apache.commons.cli.Parser:259-for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)	0
org.apache.commons.cli.Parser:261-String option = e.nextElement().toString();	0
org.apache.commons.cli.Parser:263-if (!cmd.hasOption(option))	0
org.apache.commons.cli.Parser:295-}	0
org.apache.commons.cli.Parser:296-}	0
org.apache.commons.cli.Parser:35-public abstract class Parser implements CommandLineParser	0
org.apache.commons.cli.Parser:48-this.options = options;	0
org.apache.commons.cli.Parser:49-this.requiredOptions = new ArrayList(options.getRequiredOptions());	0
org.apache.commons.cli.Parser:50-}	0
org.apache.commons.cli.Parser:54-return options;	0
org.apache.commons.cli.Parser:59-return requiredOptions;	0
org.apache.commons.cli.Parser:86-return parse(options, arguments, null, false);	0
org.apache.commons.cli.Parser:147-for (Iterator it = options.helpOptions().iterator(); it.hasNext();)	0
org.apache.commons.cli.Parser:149-Option opt = (Option) it.next();	0
org.apache.commons.cli.Parser:150-opt.clearValues();	0
org.apache.commons.cli.Parser:151-}	0
org.apache.commons.cli.Parser:154-for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();)	0
org.apache.commons.cli.Parser:161-setOptions(options);	0
org.apache.commons.cli.Parser:163-cmd = new CommandLine();	0
org.apache.commons.cli.Parser:165-boolean eatTheRest = false;	0
org.apache.commons.cli.Parser:167-if (arguments == null)	0
org.apache.commons.cli.Parser:172-List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));	0
org.apache.commons.cli.Parser:174-ListIterator iterator = tokenList.listIterator();	0
org.apache.commons.cli.Parser:177-while (iterator.hasNext())	0
org.apache.commons.cli.Parser:179-String t = (String) iterator.next();	0
org.apache.commons.cli.Parser:182-if ("--".equals(t))	0
org.apache.commons.cli.Parser:188-else if ("-".equals(t))	0
org.apache.commons.cli.Parser:201-else if (t.startsWith("-"))	0
org.apache.commons.cli.Parser:203-if (stopAtNonOption && !getOptions().hasOption(t))	0
org.apache.commons.cli.Parser:210-processOption(t, iterator);	0
org.apache.commons.cli.Parser:226-if (eatTheRest)	0
org.apache.commons.cli.Parser:239-}	0
org.apache.commons.cli.Parser:241-processProperties(properties);	0
org.apache.commons.cli.Parser:242-checkRequiredOptions();	0
org.apache.commons.cli.Parser:244-return cmd;	0
org.apache.commons.cli.Parser:254-if (properties == null)	0
org.apache.commons.cli.Parser:256-return;	0
org.apache.commons.cli.Parser:308-if (!getRequiredOptions().isEmpty())	0
org.apache.commons.cli.Parser:312-}	0
org.apache.commons.cli.Util:65-if (str.startsWith("\""))	1
org.apache.commons.cli.Util:67-str = str.substring(1, str.length());	0
org.apache.commons.cli.Util:69-int length = str.length();	0
org.apache.commons.cli.Util:70-if (str.endsWith("\""))	0
org.apache.commons.cli.Util:72-str = str.substring(0, length - 1);	0
org.apache.commons.cli.Util:75-return str;	0
org.apache.commons.cli.Util:26-class Util	0
org.apache.commons.cli.Util:38-if (str == null)	0
org.apache.commons.cli.Util:40-return null;	0
org.apache.commons.cli.Util:42-if (str.startsWith("--"))	0
org.apache.commons.cli.Util:44-return str.substring(2, str.length());	0
org.apache.commons.cli.Util:46-else if (str.startsWith("-"))	0
org.apache.commons.cli.Util:48-return str.substring(1, str.length());	0
org.apache.commons.cli.Util:51-return str;	0
org.apache.commons.cli.Parser:265-Option opt = getOptions().getOption(option);	0
org.apache.commons.cli.Parser:270-String value = properties.getProperty(option);	0
org.apache.commons.cli.Parser:272-if (opt.hasArg())	0
org.apache.commons.cli.Parser:103-return parse(options, arguments, properties, false);	0
org.apache.commons.cli.Parser:259-for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)	0
org.apache.commons.cli.Parser:261-String option = e.nextElement().toString();	0
org.apache.commons.cli.Parser:263-if (!cmd.hasOption(option))	1
org.apache.commons.cli.Parser:286-else if (!("yes".equalsIgnoreCase(value)	0
org.apache.commons.cli.Parser:295-cmd.addOption(opt);	0
org.apache.commons.cli.Parser:296-updateRequiredOptions(opt);	0
org.apache.commons.cli.Parser:414-OptionGroup group = getOptions().getOptionGroup(opt);	0
org.apache.commons.cli.Parser:416-if (group.isRequired())	0
org.apache.commons.cli.Parser:421-group.setSelected(opt);	0
org.apache.commons.cli.Parser:156-OptionGroup group = (OptionGroup) it.next();	0
org.apache.commons.cli.Parser:157-group.setSelected(null);	0
org.apache.commons.cli.Parser:158-}	0
org.apache.commons.cli.DefaultParser:152-Option opt = options.getOption(option);	0
org.apache.commons.cli.DefaultParser:157-String value = properties.getProperty(option);	0
org.apache.commons.cli.DefaultParser:159-if (opt.hasArg())	0
org.apache.commons.cli.Parser:169-arguments = new String[0];	0
org.apache.commons.cli.DefaultParser:146-for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)	0
org.apache.commons.cli.DefaultParser:148-String option = e.nextElement().toString();	0
org.apache.commons.cli.DefaultParser:150-if (!cmd.hasOption(option))	1
org.apache.commons.cli.Parser:241-processProperties(properties);	0
org.apache.commons.cli.Parser:254-if (properties == null)	0
org.apache.commons.cli.Parser:174-ListIterator iterator = tokenList.listIterator();	0
org.apache.commons.cli.Parser:177-while (iterator.hasNext())	0
org.apache.commons.cli.Parser:48-this.options = options;	0
org.apache.commons.cli.Parser:49-this.requiredOptions = new ArrayList(options.getRequiredOptions());	0
org.apache.commons.cli.Parser:50-}	0
org.apache.commons.cli.Parser:54-return options;	0
org.apache.commons.cli.Parser:147-for (Iterator it = options.helpOptions().iterator(); it.hasNext();)	0
org.apache.commons.cli.Parser:154-for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();)	0
org.apache.commons.cli.Parser:161-setOptions(options);	0
org.apache.commons.cli.Parser:163-cmd = new CommandLine();	0
org.apache.commons.cli.Parser:165-boolean eatTheRest = false;	0
org.apache.commons.cli.Parser:167-if (arguments == null)	0
org.apache.commons.cli.Parser:172-List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));	0
org.apache.commons.cli.DefaultParser:166-else if (!("yes".equalsIgnoreCase(value)	0
org.apache.commons.cli.DefaultParser:623-OptionGroup group = options.getOptionGroup(option);	0
org.apache.commons.cli.DefaultParser:625-if (group.isRequired())	0
org.apache.commons.cli.DefaultParser:630-group.setSelected(option);	0
org.apache.commons.cli.Parser:35-public abstract class Parser implements CommandLineParser	0
org.apache.commons.cli.DefaultParser:109-OptionGroup group = (OptionGroup) it.next();	0
org.apache.commons.cli.DefaultParser:110-group.setSelected(null);	0
org.apache.commons.cli.DefaultParser:111-}	0
org.apache.commons.cli.DefaultParser:174-handleOption(opt);	0
org.apache.commons.cli.Parser:393-cmd.addOption(opt);	0
org.apache.commons.cli.Parser:394-}	0
org.apache.commons.cli.Parser:381-Option opt = (Option) getOptions().getOption(arg).clone();	0
org.apache.commons.cli.OptionBuilder:148-OptionBuilder.required = true;	0
org.apache.commons.cli.OptionBuilder:150-return instance;	0
org.apache.commons.cli.HelpFormatter:314-this.defaultArgName = name;	0
org.apache.commons.cli.HelpFormatter:315-}	0
org.apache.commons.cli.HelpFormatter:655-buff.append(option.getOpt() == null ? longOptSeparator : " ");	0
org.apache.commons.cli.HelpFormatter:656-buff.append("<").append(option.getArgName()).append(">");	0
org.apache.commons.cli.Option:318-return argName;	0
org.apache.commons.cli.Option:328-return argName != null && argName.length() > 0;	0
org.apache.commons.cli.OptionBuilder:109-OptionBuilder.numberOfArgs = 1;	0
org.apache.commons.cli.OptionBuilder:111-return instance;	0
org.apache.commons.cli.Option:198-this.type = type;	0
org.apache.commons.cli.Option:199-}	0
org.apache.commons.cli.Option:218-this.longOpt = longOpt;	0
org.apache.commons.cli.Option:219-}	0
org.apache.commons.cli.Option:229-this.optionalArg = optionalArg;	0
org.apache.commons.cli.Option:230-}	0
org.apache.commons.cli.Option:348-this.numberOfArgs = num;	0
org.apache.commons.cli.Option:349-}	0
org.apache.commons.cli.Option:359-this.valuesep = sep;	0
org.apache.commons.cli.Option:360-}	0
org.apache.commons.cli.OptionBuilder:70-{	0
org.apache.commons.cli.OptionBuilder:72-}	0
org.apache.commons.cli.OptionBuilder:46-private static int numberOfArgs = Option.UNINITIALIZED;	0
org.apache.commons.cli.OptionBuilder:58-private static OptionBuilder instance = new OptionBuilder();	0
org.apache.commons.cli.OptionBuilder:63-reset();	0
org.apache.commons.cli.OptionBuilder:64-}	0
org.apache.commons.cli.OptionBuilder:79-description = null;	0
org.apache.commons.cli.OptionBuilder:80-argName = "arg";	1
org.apache.commons.cli.OptionBuilder:81-longopt = null;	0
org.apache.commons.cli.OptionBuilder:82-type = null;	0
org.apache.commons.cli.OptionBuilder:83-required = false;	0
org.apache.commons.cli.OptionBuilder:84-numberOfArgs = Option.UNINITIALIZED;	0
org.apache.commons.cli.OptionBuilder:85-optionalArg = false;	0
org.apache.commons.cli.OptionBuilder:86-valuesep = (char) 0;	0
org.apache.commons.cli.OptionBuilder:87-}	0
org.apache.commons.cli.OptionBuilder:351-Option option = null;	0
org.apache.commons.cli.OptionBuilder:355-option = new Option(opt, description);	0
org.apache.commons.cli.OptionBuilder:358-option.setLongOpt(longopt);	0
org.apache.commons.cli.OptionBuilder:359-option.setRequired(required);	0
org.apache.commons.cli.OptionBuilder:360-option.setOptionalArg(optionalArg);	0
org.apache.commons.cli.OptionBuilder:361-option.setArgs(numberOfArgs);	0
org.apache.commons.cli.OptionBuilder:362-option.setType(type);	0
org.apache.commons.cli.OptionBuilder:363-option.setValueSeparator(valuesep);	0
org.apache.commons.cli.OptionBuilder:364-option.setArgName(argName);	0
org.apache.commons.cli.OptionBuilder:369-OptionBuilder.reset();	0
org.apache.commons.cli.OptionBuilder:370-}	0
org.apache.commons.cli.OptionBuilder:373-return option;	0
org.apache.commons.cli.Option:298-this.required = required;	0
org.apache.commons.cli.Option:299-}	0
org.apache.commons.cli.Option:308-this.argName = argName;	0
org.apache.commons.cli.HelpFormatter:936-pos = startPos + width;	0
org.apache.commons.cli.HelpFormatter:938-&& (c != '\n') && (c != '\r'))	0
org.apache.commons.cli.HelpFormatter:940-++pos;	0
org.apache.commons.cli.HelpFormatter:942-return pos == text.length() ? -1 : pos;	0
org.apache.commons.cli.HelpFormatter:919-pos = startPos + width;	0
org.apache.commons.cli.HelpFormatter:924-&& (c != '\n') && (c != '\r'))	0
org.apache.commons.cli.HelpFormatter:926---pos;	0
org.apache.commons.cli.HelpFormatter:930-if (pos > startPos)	0
org.apache.commons.cli.HelpFormatter:907-if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)	0
org.apache.commons.cli.HelpFormatter:912-else if (startPos + width >= text.length())	0
org.apache.commons.cli.HelpFormatter:36-public class HelpFormatter	0
org.apache.commons.cli.HelpFormatter:75-public int defaultWidth = DEFAULT_WIDTH;	0
org.apache.commons.cli.HelpFormatter:83-public int defaultLeftPad = DEFAULT_LEFT_PAD;	0
org.apache.commons.cli.HelpFormatter:92-public int defaultDescPad = DEFAULT_DESC_PAD;	0
org.apache.commons.cli.HelpFormatter:100-public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;	0
org.apache.commons.cli.HelpFormatter:108-public String defaultNewLine = System.getProperty("line.separator");	0
org.apache.commons.cli.HelpFormatter:116-public String defaultOptPrefix = DEFAULT_OPT_PREFIX;	0
org.apache.commons.cli.HelpFormatter:124-public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;	0
org.apache.commons.cli.HelpFormatter:127-private String longOptSeparator = DEFAULT_LONG_OPT_SEPARATOR;	0
org.apache.commons.cli.HelpFormatter:135-public String defaultArgName = DEFAULT_ARG_NAME;	0
org.apache.commons.cli.HelpFormatter:142-protected Comparator optionComparator = new OptionComparator();	0
org.apache.commons.cli.HelpFormatter:991-private static class OptionComparator implements Comparator	0
org.apache.commons.cli.HelpFormatter:932-return pos;	0
org.apache.commons.cli.HelpFormatter:848-int pos = findWrapPos(text, width, 0);	0
org.apache.commons.cli.HelpFormatter:914-return -1;	0
org.apache.commons.cli.HelpFormatter:151-this.defaultWidth = width;	0
org.apache.commons.cli.HelpFormatter:152-}	0
org.apache.commons.cli.HelpFormatter:161-return defaultWidth;	0
org.apache.commons.cli.HelpFormatter:171-this.defaultLeftPad = padding;	0
org.apache.commons.cli.HelpFormatter:172-}	0
org.apache.commons.cli.HelpFormatter:181-return defaultLeftPad;	0
org.apache.commons.cli.HelpFormatter:191-this.defaultDescPad = padding;	0
org.apache.commons.cli.HelpFormatter:192-}	0
org.apache.commons.cli.HelpFormatter:201-return defaultDescPad;	0
org.apache.commons.cli.HelpFormatter:211-this.defaultSyntaxPrefix = prefix;	0
org.apache.commons.cli.HelpFormatter:212-}	0
org.apache.commons.cli.HelpFormatter:221-return defaultSyntaxPrefix;	0
org.apache.commons.cli.HelpFormatter:231-this.defaultNewLine = newline;	0
org.apache.commons.cli.HelpFormatter:232-}	0
org.apache.commons.cli.HelpFormatter:241-return defaultNewLine;	0
org.apache.commons.cli.HelpFormatter:251-this.defaultOptPrefix = prefix;	0
org.apache.commons.cli.HelpFormatter:252-}	0
org.apache.commons.cli.HelpFormatter:261-return defaultOptPrefix;	0
org.apache.commons.cli.HelpFormatter:271-this.defaultLongOptPrefix = prefix;	0
org.apache.commons.cli.HelpFormatter:272-}	0
org.apache.commons.cli.HelpFormatter:281-return defaultLongOptPrefix;	0
org.apache.commons.cli.HelpFormatter:294-this.longOptSeparator = longOptSeparator;	0
org.apache.commons.cli.HelpFormatter:295-}	0
org.apache.commons.cli.HelpFormatter:305-return longOptSeparator;	0
org.apache.commons.cli.HelpFormatter:315-this.defaultArgName = name;	0
org.apache.commons.cli.HelpFormatter:513-printUsage(pw, width, cmdLineSyntax, options);	0
org.apache.commons.cli.HelpFormatter:522-printWrapped(pw, width, header);	0
org.apache.commons.cli.HelpFormatter:529-printWrapped(pw, width, footer);	0
org.apache.commons.cli.HelpFormatter:715-printWrapped(pw, width, 0, text);	0
org.apache.commons.cli.HelpFormatter:716-}	0
org.apache.commons.cli.HelpFormatter:925-return pos + 1;	0
org.apache.commons.cli.HelpFormatter:511-if (autoUsage)	0
org.apache.commons.cli.HelpFormatter:520-if ((header != null) && (header.trim().length() > 0))	0
org.apache.commons.cli.HelpFormatter:525-printOptions(pw, width, options, leftPad, descPad);	0
org.apache.commons.cli.HelpFormatter:527-if ((footer != null) && (footer.trim().length() > 0))	0
org.apache.commons.cli.HelpFormatter:531-}	0
org.apache.commons.cli.HelpFormatter:700-StringBuffer sb = new StringBuffer();	0
org.apache.commons.cli.HelpFormatter:702-renderOptions(sb, width, options, leftPad, descPad);	0
org.apache.commons.cli.HelpFormatter:703-pw.println(sb.toString());	0
org.apache.commons.cli.HelpFormatter:704-}	0
org.apache.commons.cli.HelpFormatter:506-if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))	0
org.apache.commons.cli.HelpFormatter:752-final String lpad = createPadding(leftPad);	0
org.apache.commons.cli.HelpFormatter:753-final String dpad = createPadding(descPad);	0
org.apache.commons.cli.HelpFormatter:759-int max = 0;	0
org.apache.commons.cli.HelpFormatter:761-List prefixList = new ArrayList();	0
org.apache.commons.cli.HelpFormatter:763-List optList = options.helpOptions();	0
org.apache.commons.cli.HelpFormatter:765-Collections.sort(optList, getOptionComparator());	0
org.apache.commons.cli.HelpFormatter:767-for (Iterator i = optList.iterator(); i.hasNext();)	0
org.apache.commons.cli.HelpFormatter:805-int x = 0;	0
org.apache.commons.cli.HelpFormatter:807-for (Iterator i = optList.iterator(); i.hasNext();)	0
org.apache.commons.cli.HelpFormatter:834-return sb;	0
org.apache.commons.cli.HelpFormatter:989---pos;	0
org.apache.commons.cli.HelpFormatter:859-sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);	0
org.apache.commons.cli.HelpFormatter:861-if (nextLineTabStop >= width)	0
org.apache.commons.cli.HelpFormatter:868-final String padding = createPadding(nextLineTabStop);	0
org.apache.commons.cli.HelpFormatter:872-text = padding + text.substring(pos).trim();	0
org.apache.commons.cli.HelpFormatter:873-pos = findWrapPos(text, width, 0);	0
org.apache.commons.cli.HelpFormatter:875-if (pos == -1)	0
org.apache.commons.cli.HelpFormatter:877-sb.append(text);	0
org.apache.commons.cli.HelpFormatter:879-return sb;	0
org.apache.commons.cli.HelpFormatter:965-char[] padding = new char[len];	0
org.apache.commons.cli.HelpFormatter:966-Arrays.fill(padding, ' ');	0
org.apache.commons.cli.HelpFormatter:968-return new String(padding);	0
org.apache.commons.cli.HelpFormatter:544-StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(" ");	0
org.apache.commons.cli.HelpFormatter:547-final Collection processedGroups = new ArrayList();	0
org.apache.commons.cli.HelpFormatter:552-List optList = new ArrayList(options.getOptions());	0
org.apache.commons.cli.HelpFormatter:553-Collections.sort(optList, getOptionComparator());	0
org.apache.commons.cli.HelpFormatter:555-for (Iterator i = optList.iterator(); i.hasNext();)	0
org.apache.commons.cli.HelpFormatter:595-printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());	0
org.apache.commons.cli.HelpFormatter:596-}	0
org.apache.commons.cli.HelpFormatter:728-StringBuffer sb = new StringBuffer(text.length());	0
org.apache.commons.cli.HelpFormatter:730-renderWrappedText(sb, width, nextLineTabStop, text);	1
org.apache.commons.cli.HelpFormatter:731-pw.println(sb.toString());	0
org.apache.commons.cli.HelpFormatter:732-}	0
org.apache.commons.cli.HelpFormatter:339-return optionComparator;	0
org.apache.commons.cli.Options:245-matchingOpts.add(longOpt);	0
org.apache.commons.cli.Options:243-if (longOpt.startsWith(opt))	0
org.apache.commons.cli.Options:247-}	0
org.apache.commons.cli.Options:235-opt = Util.stripLeadingHyphens(opt);	0
org.apache.commons.cli.Options:237-List<String> matchingOpts = new ArrayList<String>();	0
org.apache.commons.cli.Options:241-for (String longOpt : longOpts.keySet())	0
org.apache.commons.cli.Options:249-return matchingOpts;	0
org.apache.commons.cli.Options:44-public class Options implements Serializable	0
org.apache.commons.cli.Options:50-private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>();	0
org.apache.commons.cli.Options:53-private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>();	0
org.apache.commons.cli.Options:58-private final List<Object> requiredOpts = new ArrayList<Object>();	0
org.apache.commons.cli.Options:61-private final Map<String, OptionGroup> optionGroups = new HashMap<String, OptionGroup>();	0
org.apache.commons.cli.Options:97-return new HashSet<OptionGroup>(optionGroups.values());	0
org.apache.commons.cli.Options:142-addOption(new Option(opt, longOpt, hasArg, description));	0
org.apache.commons.cli.Options:143-return this;	0
org.apache.commons.cli.Options:154-String key = opt.getKey();	0
org.apache.commons.cli.Options:157-if (opt.hasLongOpt())	0
org.apache.commons.cli.Options:159-longOpts.put(opt.getLongOpt(), opt);	0
org.apache.commons.cli.Options:163-if (opt.isRequired())	0
org.apache.commons.cli.Options:172-shortOpts.put(key, opt);	0
org.apache.commons.cli.Options:174-return this;	0
org.apache.commons.cli.Options:204-return Collections.unmodifiableList(requiredOpts);	0
org.apache.commons.cli.Options:71-if (group.isRequired())	0
org.apache.commons.cli.Options:73-requiredOpts.add(group);	0
org.apache.commons.cli.Options:76-for (Option option : group.getOptions())	0
org.apache.commons.cli.Options:81-option.setRequired(false);	0
org.apache.commons.cli.Options:82-addOption(option);	0
org.apache.commons.cli.Options:84-optionGroups.put(option.getKey(), group);	0
org.apache.commons.cli.Options:85-}	0
org.apache.commons.cli.Options:87-return this;	0
org.apache.commons.cli.Options:111-addOption(opt, null, false, description);	0
org.apache.commons.cli.Options:112-return this;	0
org.apache.commons.cli.Options:126-addOption(opt, null, hasArg, description);	0
org.apache.commons.cli.Options:127-return this;	0
org.apache.commons.cli.Options:165-if (requiredOpts.contains(key))	0
org.apache.commons.cli.Options:167-requiredOpts.remove(requiredOpts.indexOf(key));	0
org.apache.commons.cli.Options:169-requiredOpts.add(key);	0
org.apache.commons.cli.Options:184-return Collections.unmodifiableCollection(helpOptions());	0
org.apache.commons.cli.Options:194-return new ArrayList<Option>(shortOpts.values());	0
org.apache.commons.cli.Options:216-opt = Util.stripLeadingHyphens(opt);	0
org.apache.commons.cli.Options:218-if (shortOpts.containsKey(opt))	0
org.apache.commons.cli.Options:220-return shortOpts.get(opt);	0
org.apache.commons.cli.Options:223-return longOpts.get(opt);	0
org.apache.commons.cli.Options:260-opt = Util.stripLeadingHyphens(opt);	0
org.apache.commons.cli.Options:262-return shortOpts.containsKey(opt) || longOpts.containsKey(opt);	0
org.apache.commons.cli.Options:274-opt = Util.stripLeadingHyphens(opt);	0
org.apache.commons.cli.Options:276-return longOpts.containsKey(opt);	0
org.apache.commons.cli.Options:288-opt = Util.stripLeadingHyphens(opt);	0
org.apache.commons.cli.Options:290-return shortOpts.containsKey(opt);	0
org.apache.commons.cli.Options:302-return optionGroups.get(opt.getKey());	0
org.apache.commons.cli.Options:44-public class Options implements Serializable	0
org.apache.commons.cli.Options:50-private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>();	0
org.apache.commons.cli.Options:53-private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>();	0
org.apache.commons.cli.Options:58-private final List<Object> requiredOpts = new ArrayList<Object>();	0
org.apache.commons.cli.Options:61-private final Map<String, OptionGroup> optionGroups = new HashMap<String, OptionGroup>();	1
org.apache.commons.cli.Options:71-if (group.isRequired())	0
org.apache.commons.cli.Options:73-requiredOpts.add(group);	0
org.apache.commons.cli.Options:76-for (Option option : group.getOptions())	0
org.apache.commons.cli.Options:81-option.setRequired(false);	0
org.apache.commons.cli.Options:82-addOption(option);	0
org.apache.commons.cli.Options:84-optionGroups.put(option.getKey(), group);	0
org.apache.commons.cli.Options:85-}	0
org.apache.commons.cli.Options:87-return this;	0
org.apache.commons.cli.Options:154-String key = opt.getKey();	0
org.apache.commons.cli.Options:157-if (opt.hasLongOpt())	0
org.apache.commons.cli.Options:159-longOpts.put(opt.getLongOpt(), opt);	0
org.apache.commons.cli.Options:163-if (opt.isRequired())	0
org.apache.commons.cli.Options:165-if (requiredOpts.contains(key))	0
org.apache.commons.cli.Options:169-requiredOpts.add(key);	0
org.apache.commons.cli.Options:172-shortOpts.put(key, opt);	0
org.apache.commons.cli.Options:174-return this;	0
org.apache.commons.cli.Options:184-return Collections.unmodifiableCollection(helpOptions());	0
org.apache.commons.cli.Options:194-return new ArrayList<Option>(shortOpts.values());	0
org.apache.commons.cli.OptionGroup:31-public class OptionGroup implements Serializable	0
org.apache.commons.cli.OptionGroup:37-private final Map<String, Option> optionMap = new HashMap<String, Option>();	1
org.apache.commons.cli.OptionGroup:55-optionMap.put(option.getKey(), option);	0
org.apache.commons.cli.OptionGroup:57-return this;	0
org.apache.commons.cli.OptionGroup:76-return optionMap.values();	0
org.apache.commons.cli.OptionGroup:121-this.required = required;	0
org.apache.commons.cli.OptionGroup:122-}	0
org.apache.commons.cli.OptionGroup:131-return required;	0
org.apache.commons.cli.Options:97-return new HashSet<OptionGroup>(optionGroups.values());	0
org.apache.commons.cli.Options:111-addOption(opt, null, false, description);	0
org.apache.commons.cli.Options:112-return this;	0
org.apache.commons.cli.Options:126-addOption(opt, null, hasArg, description);	0
org.apache.commons.cli.Options:127-return this;	0
org.apache.commons.cli.Options:142-addOption(new Option(opt, longOpt, hasArg, description));	0
org.apache.commons.cli.Options:143-return this;	0
org.apache.commons.cli.Options:167-requiredOpts.remove(requiredOpts.indexOf(key));	0
org.apache.commons.cli.Options:204-return Collections.unmodifiableList(requiredOpts);	0
org.apache.commons.cli.Options:216-opt = Util.stripLeadingHyphens(opt);	0
org.apache.commons.cli.Options:218-if (shortOpts.containsKey(opt))	0
org.apache.commons.cli.Options:220-return shortOpts.get(opt);	0
org.apache.commons.cli.Options:223-return longOpts.get(opt);	0
org.apache.commons.cli.Options:235-opt = Util.stripLeadingHyphens(opt);	0
org.apache.commons.cli.Options:237-List<String> matchingOpts = new ArrayList<String>();	0
org.apache.commons.cli.Options:240-if (longOpts.keySet().contains(opt))	0
org.apache.commons.cli.Options:242-return Collections.singletonList(opt);	0
org.apache.commons.cli.Options:245-for (String longOpt : longOpts.keySet())	0
org.apache.commons.cli.Options:247-if (longOpt.startsWith(opt))	0
org.apache.commons.cli.DefaultParser:319-int pos = token.indexOf("=");	0
org.apache.commons.cli.DefaultParser:320-String t = pos == -1 ? token : token.substring(0, pos);	0
org.apache.commons.cli.DefaultParser:322-if (!options.getMatchingOptions(t).isEmpty())	0
org.apache.commons.cli.DefaultParser:327-else if (getLongPrefix(token) != null && !token.startsWith("--"))	0
org.apache.commons.cli.DefaultParser:333-return false;	0
org.apache.commons.cli.DefaultParser:570-String t = Util.stripLeadingHyphens(token);	0
org.apache.commons.cli.DefaultParser:573-String opt = null;	0
org.apache.commons.cli.DefaultParser:574-for (i = t.length() - 2; i > 1; i--)	0
org.apache.commons.cli.DefaultParser:576-String prefix = t.substring(0, i);	0
org.apache.commons.cli.DefaultParser:577-if (options.hasLongOption(prefix))	0
org.apache.commons.cli.DefaultParser:584-return opt;	0
org.apache.commons.cli.DefaultParser:31-public class DefaultParser implements CommandLineParser	0
org.apache.commons.cli.DefaultParser:60-return parse(options, arguments, null);	0
org.apache.commons.cli.DefaultParser:76-return parse(options, arguments, properties, false);	0
org.apache.commons.cli.DefaultParser:102-this.options = options;	0
org.apache.commons.cli.DefaultParser:103-this.stopAtNonOption = stopAtNonOption;	0
org.apache.commons.cli.DefaultParser:104-skipParsing = false;	0
org.apache.commons.cli.DefaultParser:105-currentOption = null;	0
org.apache.commons.cli.DefaultParser:106-expectedOpts = new ArrayList(options.getRequiredOptions());	0
org.apache.commons.cli.DefaultParser:109-for (OptionGroup group : options.getOptionGroups())	0
org.apache.commons.cli.DefaultParser:114-cmd = new CommandLine();	0
org.apache.commons.cli.DefaultParser:116-if (arguments != null)	0
org.apache.commons.cli.DefaultParser:118-for (String argument : arguments)	0
org.apache.commons.cli.DefaultParser:120-handleToken(argument);	0
org.apache.commons.cli.DefaultParser:125-checkRequiredArgs();	0
org.apache.commons.cli.DefaultParser:128-handleProperties(properties);	0
org.apache.commons.cli.DefaultParser:130-checkRequiredOptions();	0
org.apache.commons.cli.DefaultParser:132-return cmd;	0
org.apache.commons.cli.DefaultParser:142-if (properties == null)	0
org.apache.commons.cli.DefaultParser:144-return;	0
org.apache.commons.cli.DefaultParser:197-if (!expectedOpts.isEmpty())	0
org.apache.commons.cli.DefaultParser:201-}	0
org.apache.commons.cli.DefaultParser:209-if (currentOption != null && currentOption.requiresArg())	0
org.apache.commons.cli.DefaultParser:213-}	0
org.apache.commons.cli.DefaultParser:223-currentToken = token;	0
org.apache.commons.cli.DefaultParser:225-if (skipParsing)	0
org.apache.commons.cli.DefaultParser:229-else if ("--".equals(token))	0
org.apache.commons.cli.DefaultParser:233-else if (currentOption != null && currentOption.acceptsArg() && isArgument(token))	0
org.apache.commons.cli.DefaultParser:235-currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token));	0
org.apache.commons.cli.DefaultParser:237-else if (token.startsWith("--"))	0
org.apache.commons.cli.DefaultParser:241-else if (token.startsWith("-") && !"-".equals(token))	0
org.apache.commons.cli.DefaultParser:243-handleShortAndLongOption(token);	0
org.apache.commons.cli.DefaultParser:250-if (currentOption != null && !currentOption.acceptsArg())	0
org.apache.commons.cli.DefaultParser:252-currentOption = null;	0
org.apache.commons.cli.DefaultParser:254-}	0
org.apache.commons.cli.DefaultParser:263-return !isOption(token) || isNegativeNumber(token);	0
org.apache.commons.cli.DefaultParser:291-return isLongOption(token) || isShortOption(token);	0
org.apache.commons.cli.DefaultParser:302-return token.startsWith("-") && token.length() >= 2 && options.hasShortOption(token.substring(1, 2));	1
org.apache.commons.cli.DefaultParser:314-if (!token.startsWith("-") || token.length() == 1)	0
org.apache.commons.cli.DefaultParser:473-String t = Util.stripLeadingHyphens(token);	0
org.apache.commons.cli.DefaultParser:235-currentOption.addValueForProcessing(Util.stripLeadingAndTrailingQuotes(token));	0
org.apache.commons.cli.DefaultParser:252-currentOption = null;	0
org.apache.commons.cli.DefaultParser:308-int pos = token.indexOf("=");	0
org.apache.commons.cli.DefaultParser:309-String optName = pos == -1 ? token.substring(1) : token.substring(1, pos);	0
org.apache.commons.cli.DefaultParser:310-return options.hasShortOption(optName);	1
org.apache.commons.cli.DefaultParser:326-int pos = token.indexOf("=");	0
org.apache.commons.cli.DefaultParser:327-String t = pos == -1 ? token : token.substring(0, pos);	0
org.apache.commons.cli.DefaultParser:329-if (!options.getMatchingOptions(t).isEmpty())	0
org.apache.commons.cli.DefaultParser:334-else if (getLongPrefix(token) != null && !token.startsWith("--"))	0
org.apache.commons.cli.DefaultParser:340-return false;	0
org.apache.commons.cli.DefaultParser:577-String t = Util.stripLeadingHyphens(token);	0
org.apache.commons.cli.DefaultParser:580-String opt = null;	0
org.apache.commons.cli.DefaultParser:581-for (i = t.length() - 2; i > 1; i--)	0
org.apache.commons.cli.DefaultParser:591-return opt;	0
org.apache.commons.cli.DefaultParser:31-public class DefaultParser implements CommandLineParser	0
org.apache.commons.cli.DefaultParser:60-return parse(options, arguments, null);	0
org.apache.commons.cli.DefaultParser:76-return parse(options, arguments, properties, false);	0
org.apache.commons.cli.DefaultParser:102-this.options = options;	0
org.apache.commons.cli.DefaultParser:103-this.stopAtNonOption = stopAtNonOption;	0
org.apache.commons.cli.DefaultParser:104-skipParsing = false;	0
org.apache.commons.cli.DefaultParser:105-currentOption = null;	0
org.apache.commons.cli.DefaultParser:106-expectedOpts = new ArrayList(options.getRequiredOptions());	0
org.apache.commons.cli.DefaultParser:109-for (OptionGroup group : options.getOptionGroups())	0
org.apache.commons.cli.DefaultParser:114-cmd = new CommandLine();	0
org.apache.commons.cli.DefaultParser:116-if (arguments != null)	0
org.apache.commons.cli.DefaultParser:118-for (String argument : arguments)	0
org.apache.commons.cli.DefaultParser:120-handleToken(argument);	0
org.apache.commons.cli.DefaultParser:125-checkRequiredArgs();	0
org.apache.commons.cli.DefaultParser:128-handleProperties(properties);	0
org.apache.commons.cli.DefaultParser:130-checkRequiredOptions();	0
org.apache.commons.cli.DefaultParser:132-return cmd;	0
org.apache.commons.cli.DefaultParser:142-if (properties == null)	0
org.apache.commons.cli.DefaultParser:144-return;	0
org.apache.commons.cli.DefaultParser:197-if (!expectedOpts.isEmpty())	0
org.apache.commons.cli.DefaultParser:201-}	0
org.apache.commons.cli.DefaultParser:209-if (currentOption != null && currentOption.requiresArg())	0
org.apache.commons.cli.DefaultParser:213-}	0
org.apache.commons.cli.DefaultParser:223-currentToken = token;	0
org.apache.commons.cli.DefaultParser:225-if (skipParsing)	0
org.apache.commons.cli.DefaultParser:229-else if ("--".equals(token))	0
org.apache.commons.cli.DefaultParser:233-else if (currentOption != null && currentOption.acceptsArg() && isArgument(token))	0
org.apache.commons.cli.DefaultParser:237-else if (token.startsWith("--"))	0
org.apache.commons.cli.DefaultParser:241-else if (token.startsWith("-") && !"-".equals(token))	0
org.apache.commons.cli.DefaultParser:243-handleShortAndLongOption(token);	0
org.apache.commons.cli.DefaultParser:250-if (currentOption != null && !currentOption.acceptsArg())	0
org.apache.commons.cli.DefaultParser:254-}	0
org.apache.commons.cli.DefaultParser:263-return !isOption(token) || isNegativeNumber(token);	0
org.apache.commons.cli.DefaultParser:291-return isLongOption(token) || isShortOption(token);	0
org.apache.commons.cli.DefaultParser:302-if (!token.startsWith("-") || token.length() == 1)	0
org.apache.commons.cli.DefaultParser:321-if (!token.startsWith("-") || token.length() == 1)	0
org.apache.commons.cli.TypeHandler:92-return createFile(str);	1
org.apache.commons.cli.TypeHandler:224-return new File(str);	0
org.apache.commons.cli.TypeHandler:86-else if (PatternOptionBuilder.FILE_VALUE == clazz)	0
org.apache.commons.cli.TypeHandler:90-else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)	0
org.apache.commons.cli.TypeHandler:78-else if (PatternOptionBuilder.DATE_VALUE == clazz)	0
org.apache.commons.cli.TypeHandler:82-else if (PatternOptionBuilder.CLASS_VALUE == clazz)	0
org.apache.commons.cli.TypeHandler:74-else if (PatternOptionBuilder.NUMBER_VALUE == clazz)	0
org.apache.commons.cli.TypeHandler:51-return createValue(str, (Class<?>) obj);	0
org.apache.commons.cli.TypeHandler:66-if (PatternOptionBuilder.STRING_VALUE == clazz)	0
org.apache.commons.cli.TypeHandler:70-else if (PatternOptionBuilder.OBJECT_VALUE == clazz)	0
org.apache.commons.cli.TypeHandler:37-public class TypeHandler	0
org.apache.commons.cli.TypeHandler:68-return str;	0
org.apache.commons.cli.TypeHandler:72-return createObject(str);	0
org.apache.commons.cli.TypeHandler:76-return createNumber(str);	0
org.apache.commons.cli.TypeHandler:80-return createDate(str);	0
org.apache.commons.cli.TypeHandler:84-return createClass(str);	0
org.apache.commons.cli.TypeHandler:88-return createFile(str);	0
org.apache.commons.cli.TypeHandler:94-else if (PatternOptionBuilder.FILES_VALUE == clazz)	0
org.apache.commons.cli.TypeHandler:96-return createFiles(str);	0
org.apache.commons.cli.TypeHandler:98-else if (PatternOptionBuilder.URL_VALUE == clazz)	0
org.apache.commons.cli.TypeHandler:100-return createURL(str);	0
org.apache.commons.cli.TypeHandler:104-return null;	0
org.apache.commons.cli.TypeHandler:121-cl = Class.forName(classname);	0
org.apache.commons.cli.TypeHandler:126-}	0
org.apache.commons.cli.TypeHandler:123-catch (final ClassNotFoundException cnfe)	0
org.apache.commons.cli.TypeHandler:125-throw new ParseException("Unable to find the class: " + classname);	0
org.apache.commons.cli.TypeHandler:130-return cl.newInstance();	0
org.apache.commons.cli.TypeHandler:132-catch (final Exception e)	0
org.apache.commons.cli.TypeHandler:134-throw new ParseException(e.getClass().getName() + "; Unable to create an instance of: " + classname);	0
org.apache.commons.cli.TypeHandler:150-if (str.indexOf('.') != -1)	0
org.apache.commons.cli.TypeHandler:152-return Double.valueOf(str);	0
org.apache.commons.cli.TypeHandler:154-return Long.valueOf(str);	0
org.apache.commons.cli.TypeHandler:156-catch (final NumberFormatException e)	0
org.apache.commons.cli.TypeHandler:158-throw new ParseException(e.getMessage());	0
org.apache.commons.cli.TypeHandler:173-return Class.forName(classname);	0
org.apache.commons.cli.TypeHandler:175-catch (final ClassNotFoundException e)	0
org.apache.commons.cli.TypeHandler:177-throw new ParseException("Unable to find the class: " + classname);	0
org.apache.commons.cli.TypeHandler:194-throw new UnsupportedOperationException("Not yet implemented");	0
org.apache.commons.cli.TypeHandler:208-return new URL(str);	0
org.apache.commons.cli.TypeHandler:210-catch (final MalformedURLException e)	0
org.apache.commons.cli.TypeHandler:212-throw new ParseException("Unable to parse the URL: " + str);	0
org.apache.commons.cli.TypeHandler:249-throw new UnsupportedOperationException("Not yet implemented");	0
com.google.javascript.jscomp.RemoveUnusedVars:310-return false;	0
com.google.javascript.jscomp.RemoveUnusedVars:397-argList.removeChild(lastArg);	0
com.google.javascript.jscomp.RemoveUnusedVars:398-compiler.reportCodeChange();	0
com.google.javascript.jscomp.RemoveUnusedVars:402-}	0
com.google.javascript.jscomp.RemoveUnusedVars:395-Var var = fnScope.getVar(lastArg.getString());	0
com.google.javascript.jscomp.RemoveUnusedVars:396-if (!referenced.contains(var)) {	0
com.google.javascript.jscomp.RemoveUnusedVars:206-traverseFunction(n, scope);	0
com.google.javascript.jscomp.RemoveUnusedVars:746-assignedToUnknownValue = true;	0
com.google.javascript.jscomp.RemoveUnusedVars:394-while ((lastArg = argList.getLastChild()) != null) {	0
com.google.javascript.jscomp.RemoveUnusedVars:403-} else {	0
com.google.javascript.jscomp.RemoveUnusedVars:273-} else {	0
com.google.javascript.jscomp.RemoveUnusedVars:388-Node argList = getFunctionArgList(function);	0
com.google.javascript.jscomp.RemoveUnusedVars:389-boolean modifyCallers = modifyCallSites	0
com.google.javascript.jscomp.RemoveUnusedVars:391-if (!modifyCallers) {	0
com.google.javascript.jscomp.RemoveUnusedVars:406-}	0
com.google.javascript.jscomp.RemoveUnusedVars:413-return function.getFirstChild().getNext();	0
com.google.javascript.jscomp.RemoveUnusedVars:179-removeUnreferencedFunctionArgs(fnScope);	0
com.google.javascript.jscomp.RemoveUnusedVars:180-}	0
com.google.javascript.jscomp.RemoveUnusedVars:335-Preconditions.checkState(n.getChildCount() == 3);	0
com.google.javascript.jscomp.RemoveUnusedVars:336-Preconditions.checkState(n.isFunction());	0
com.google.javascript.jscomp.RemoveUnusedVars:338-final Node body = n.getLastChild();	0
com.google.javascript.jscomp.RemoveUnusedVars:339-Preconditions.checkState(body.getNext() == null &&	0
com.google.javascript.jscomp.RemoveUnusedVars:342-Scope fnScope =	0
com.google.javascript.jscomp.RemoveUnusedVars:344-traverseNode(body, n, fnScope);	0
com.google.javascript.jscomp.RemoveUnusedVars:346-collectMaybeUnreferencedVars(fnScope);	0
com.google.javascript.jscomp.RemoveUnusedVars:347-allFunctionScopes.add(fnScope);	0
com.google.javascript.jscomp.RemoveUnusedVars:348-}	0
com.google.javascript.jscomp.RemoveUnusedVars:380-Node function = fnScope.getRootNode();	0
com.google.javascript.jscomp.RemoveUnusedVars:382-Preconditions.checkState(function.isFunction());	0
com.google.javascript.jscomp.RemoveUnusedVars:383-if (NodeUtil.isGetOrSetKey(function.getParent())) {	0
com.google.javascript.jscomp.RemoveUnusedVars:199-if (NodeUtil.isFunctionDeclaration(n)) {	0
com.google.javascript.jscomp.RemoveUnusedVars:203-if (var != null && isRemovableVar(var)) {	0
com.google.javascript.jscomp.RemoveUnusedVars:208-return;	0
com.google.javascript.jscomp.RemoveUnusedVars:200-var = scope.getVar(n.getFirstChild().getString());	0
com.google.javascript.jscomp.RemoveUnusedVars:776-for (Assign assign : assignsByVar.get(var)) {	0
com.google.javascript.jscomp.RemoveUnusedVars:780-}	0
com.google.javascript.jscomp.RemoveUnusedVars:805-Var var = it.next();	0
com.google.javascript.jscomp.RemoveUnusedVars:809-for (Node exprCallNode : classDefiningCalls.get(var)) {	0
com.google.javascript.jscomp.RemoveUnusedVars:817-removeAllAssigns(var);	0
com.google.javascript.jscomp.RemoveUnusedVars:819-compiler.addToDebugLog("Unreferenced var: " + var.name);	0
com.google.javascript.jscomp.RemoveUnusedVars:820-Node nameNode = var.nameNode;	0
com.google.javascript.jscomp.RemoveUnusedVars:821-Node toRemove = nameNode.getParent();	0
com.google.javascript.jscomp.RemoveUnusedVars:822-Node parent = toRemove.getParent();	0
com.google.javascript.jscomp.RemoveUnusedVars:824-Preconditions.checkState(	0
com.google.javascript.jscomp.RemoveUnusedVars:831-if (toRemove.isParamList() &&	0
com.google.javascript.jscomp.RemoveUnusedVars:866-}	0
com.google.javascript.jscomp.RemoveUnusedVars:358-maybeUnreferenced.add(var);	0
com.google.javascript.jscomp.RemoveUnusedVars:730-Var var = maybeUnreferenced.get(current);	0
com.google.javascript.jscomp.RemoveUnusedVars:731-if (referenced.contains(var)) {	0
com.google.javascript.jscomp.RemoveUnusedVars:735-boolean assignedToUnknownValue = false;	0
com.google.javascript.jscomp.TypeCheck:1570-ObjectType implicitProto = interfaceType.getImplicitPrototype();	0
com.google.javascript.jscomp.TypeCheck:1574-currentPropertyNames = implicitProto.getOwnPropertyNames();	0
com.google.javascript.jscomp.TypeCheck:1658-HashMap<String, ObjectType> properties	0
com.google.javascript.jscomp.TypeCheck:1660-HashMap<String, ObjectType> currentProperties	0
com.google.javascript.jscomp.TypeCheck:1662-for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {	0
com.google.javascript.jscomp.TypeCheck:1663-currentProperties.clear();	0
com.google.javascript.jscomp.TypeCheck:1664-checkInterfaceConflictProperties(t, n, functionPrivateName,	0
com.google.javascript.jscomp.TypeCheck:1647-if (extInterface.getConstructor() != null	0
com.google.javascript.jscomp.TypeCheck:1653-}	0
com.google.javascript.jscomp.TypeCheck:1646-for (ObjectType extInterface : functionType.getExtendedInterfaces()) {	0
com.google.javascript.jscomp.TypeCheck:1656-if (functionType.getExtendedInterfacesCount() > 1) {	0
com.google.javascript.jscomp.TypeCheck:338-this(compiler, reverseInterpreter, typeRegistry, null, null,	0
com.google.javascript.jscomp.TypeCheck:340-}	0
com.google.javascript.jscomp.TypeCheck:447-final Scope outerScope = t.getScope();	0
com.google.javascript.jscomp.TypeCheck:448-final String functionPrivateName = n.getFirstChild().getString();	0
com.google.javascript.jscomp.TypeCheck:449-if (functionPrivateName != null && functionPrivateName.length() > 0 &&	0
com.google.javascript.jscomp.TypeCheck:504-typeable = false;	0
com.google.javascript.jscomp.TypeCheck:505-break;	0
com.google.javascript.jscomp.TypeCheck:778-visitFunction(t, n);	0
com.google.javascript.jscomp.TypeCheck:1602-FunctionType functionType = JSType.toMaybeFunctionType(n.getJSType());	0
com.google.javascript.jscomp.TypeCheck:1603-String functionPrivateName = n.getFirstChild().getString();	0
com.google.javascript.jscomp.TypeCheck:1604-if (functionType.isConstructor()) {	0
com.google.javascript.jscomp.TypeCheck:1644-} else if (functionType.isInterface()) {	0
com.google.javascript.jscomp.TypeCheck:1357-return false;	0
com.google.javascript.jscomp.TypeCheck:420-JSDocInfo info = n.getJSDocInfo();	0
com.google.javascript.jscomp.TypeCheck:421-if (info != null && info.isNoTypeCheck()) {	0
com.google.javascript.jscomp.TypeCheck:428-validator.setShouldReport(noTypeCheckSection == 0);	0
com.google.javascript.jscomp.TypeCheck:796-typeable = false;	0
com.google.javascript.jscomp.TypeCheck:797-break;	0
com.google.javascript.jscomp.TypeCheck:500-typeable = visitName(t, n, parent);	0
com.google.javascript.jscomp.TypeCheck:501-break;	0
com.google.javascript.jscomp.TypeCheck:1352-int parentNodeType = parent.getType();	0
com.google.javascript.jscomp.TypeCheck:1353-if (parentNodeType == Token.FUNCTION ||	0
com.google.javascript.jscomp.TypeCheck:321-CheckLevel reportUnknownTypes) {	0
com.google.javascript.jscomp.TypeCheck:301-private boolean reportMissingProperties = true;	0
com.google.javascript.jscomp.TypeCheck:303-private InferJSDocInfo inferJSDocInfo = null;	0
com.google.javascript.jscomp.TypeCheck:306-private int typedCount = 0;	0
com.google.javascript.jscomp.TypeCheck:307-private int nullCount = 0;	0
com.google.javascript.jscomp.TypeCheck:308-private int unknownCount = 0;	0
com.google.javascript.jscomp.TypeCheck:313-private int noTypeCheckSection = 0;	0
com.google.javascript.jscomp.TypeCheck:322-this.compiler = compiler;	0
com.google.javascript.jscomp.TypeCheck:323-this.validator = compiler.getTypeValidator();	0
com.google.javascript.jscomp.TypeCheck:324-this.reverseInterpreter = reverseInterpreter;	0
com.google.javascript.jscomp.TypeCheck:325-this.typeRegistry = typeRegistry;	0
com.google.javascript.jscomp.TypeCheck:326-this.topScope = topScope;	0
com.google.javascript.jscomp.TypeCheck:327-this.scopeCreator = scopeCreator;	0
com.google.javascript.jscomp.TypeCheck:328-this.reportMissingOverride = reportMissingOverride;	0
com.google.javascript.jscomp.TypeCheck:329-this.reportUnknownTypes = reportUnknownTypes;	0
com.google.javascript.jscomp.TypeCheck:330-this.inferJSDocInfo = new InferJSDocInfo(compiler);	0
com.google.javascript.jscomp.TypeCheck:331-}	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:166-inlinedNewDependencies.add(t.getScope().getVar(c.varName));	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:156-c.inlineVariable();	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:165-if (!c.defMetadata.depends.isEmpty()) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:524-for (Node cur = p.getParent().getFirstChild(); cur != p;	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:503-for (Node p = n; p != expressionRoot; p = p.getParent()) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:504-for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:510-return false;	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:523-for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:531-return false;	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:155-if (c.canInline()) {	1
com.google.javascript.jscomp.FlowSensitiveInlineVariables:169-}	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:120-public FlowSensitiveInlineVariables(AbstractCompiler compiler) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:77-private final Set<Var> inlinedNewDependencies = Sets.newHashSet();	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:121-this.compiler = compiler;	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:122-}	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:86-private static final Predicate<Node> SIDE_EFFECT_PREDICATE =	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:127-if (t.inGlobalScope()) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:128-return; // Don't even brother. All global variables are likely escaped.	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:131-if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE <	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:137-ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:139-Preconditions.checkState(t.getScopeRoot().isFunction());	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:140-cfa.process(null, t.getScopeRoot().getLastChild());	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:141-cfg = cfa.getCfg();	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:142-reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler);	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:143-reachingDef.analyze();	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:144-candidates = Lists.newLinkedList();	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:148-new NodeTraversal(compiler, new GatherCandiates()).traverse(	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:152-reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:153-reachingUses.analyze();	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:154-for (Candidate c : candidates) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:170-}	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:173-public void exitScope(NodeTraversal t) {}	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:177-(new NodeTraversal(compiler, this)).traverseRoots(externs, root);	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:178-}	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:187-}	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:133-return;	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:505-if (predicate.apply(cur)) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:506-return true;	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:526-if (predicate.apply(cur)) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:527-return true;	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:525-cur = cur.getNext()) {	0
com.google.javascript.jscomp.InlineObjectLiterals:58-Supplier<String> safeNameIdSupplier) {	0
com.google.javascript.jscomp.InlineObjectLiterals:59-this.compiler = compiler;	0
com.google.javascript.jscomp.InlineObjectLiterals:60-this.safeNameIdSupplier = safeNameIdSupplier;	0
com.google.javascript.jscomp.InlineObjectLiterals:61-}	0
com.google.javascript.jscomp.InlineObjectLiterals:65-ReferenceCollectingCallback callback = new ReferenceCollectingCallback(	0
com.google.javascript.jscomp.InlineObjectLiterals:67-callback.process(externs, root);	0
com.google.javascript.jscomp.InlineObjectLiterals:68-}	0
com.google.javascript.jscomp.TypeValidator:367-registerMismatch(rightType, leftType, null);	0
com.google.javascript.jscomp.TypeValidator:406-registerMismatch(rightType, leftType, null);	0
com.google.javascript.jscomp.TypeValidator:534-info = parent.getJSDocInfo();	0
com.google.javascript.jscomp.TypeValidator:577-report(JSError.make(sourceName, n, DUP_VAR_DECLARATION,	0
com.google.javascript.jscomp.TypeValidator:677-FunctionType fnTypeA = found.toMaybeFunctionType();	0
com.google.javascript.jscomp.TypeValidator:678-FunctionType fnTypeB = required.toMaybeFunctionType();	0
com.google.javascript.jscomp.TypeValidator:679-Iterator<Node> paramItA = fnTypeA.getParameters().iterator();	0
com.google.javascript.jscomp.TypeValidator:680-Iterator<Node> paramItB = fnTypeB.getParameters().iterator();	0
com.google.javascript.jscomp.TypeValidator:681-while (paramItA.hasNext() && paramItB.hasNext()) {	0
com.google.javascript.jscomp.TypeValidator:686-registerIfMismatch(	0
com.google.javascript.jscomp.TypeValidator:693-if (found != null && required != null &&	0
com.google.javascript.jscomp.TypeValidator:697-}	0
com.google.javascript.jscomp.TypeValidator:532-JSDocInfo info = n.getJSDocInfo();	0
com.google.javascript.jscomp.TypeValidator:533-if (info == null) {	0
com.google.javascript.jscomp.TypeValidator:536-allowDupe =	0
com.google.javascript.jscomp.TypeValidator:386-return false;	0
com.google.javascript.jscomp.TypeValidator:366-if ((leftType.isConstructor() || leftType.isEnumType()) && (rightType.isConstructor() || rightType.isEnumType())) {	1
com.google.javascript.jscomp.TypeValidator:574-if (!(allowDupe ||	0
com.google.javascript.jscomp.TypeValidator:674-mismatches.add(new TypeMismatch(found, required, error));	0
com.google.javascript.jscomp.TypeValidator:675-if (found.isFunctionType() &&	0
com.google.javascript.jscomp.TypeValidator:689-}	0
com.google.javascript.jscomp.TypeValidator:668-found = found.restrictByNotNullOrUndefined();	0
com.google.javascript.jscomp.TypeValidator:669-required = required.restrictByNotNullOrUndefined();	0
com.google.javascript.jscomp.TypeValidator:670-if (found.canAssignTo(required) || required.canAssignTo(found)) {	0
com.google.javascript.jscomp.TypeValidator:404-if (!rightType.canAssignTo(leftType)) {	0
com.google.javascript.jscomp.TypeValidator:793-compiler.report(error);	0
com.google.javascript.jscomp.TypeValidator:792-if (shouldReport) {	0
com.google.javascript.jscomp.TypeValidator:795-return error;	0
com.google.javascript.jscomp.TypeValidator:528-Var newVar = var;	0
com.google.javascript.jscomp.TypeValidator:529-boolean allowDupe = false;	0
com.google.javascript.jscomp.TypeValidator:530-if (n.isGetProp() ||	0
com.google.javascript.jscomp.TypeValidator:540-JSType varType = var.getType();	0
com.google.javascript.jscomp.TypeValidator:545-if (varType != null &&	0
com.google.javascript.jscomp.TypeValidator:554-if (var.input == null) {	0
com.google.javascript.jscomp.TypeValidator:585-return newVar;	0
com.google.javascript.jscomp.TypeValidator:388-return true;	0
com.google.javascript.jscomp.TypeValidator:365-if (!leftType.isNoType() && !rightType.canAssignTo(leftType)) {	0
com.google.javascript.jscomp.TypeValidator:594-ObjectType instance = type.getInstanceType();	0
com.google.javascript.jscomp.TypeValidator:595-for (ObjectType implemented : type.getAllImplementedInterfaces()) {	0
com.google.javascript.jscomp.TypeValidator:603-}	0
com.google.javascript.jscomp.TypeValidator:257-if (!type.isNoType() && !type.isUnknownType() &&	0
com.google.javascript.jscomp.TypeValidator:280-return true;	0
com.google.javascript.jscomp.TypeValidator:156-this.shouldReport = report;	0
com.google.javascript.jscomp.TypeValidator:157-}	0
com.google.javascript.jscomp.TypeValidator:136-TypeValidator(AbstractCompiler compiler) {	0
com.google.javascript.jscomp.TypeValidator:63-private boolean shouldReport = true;	0
com.google.javascript.jscomp.TypeValidator:69-private final List<TypeMismatch> mismatches = Lists.newArrayList();	0
com.google.javascript.jscomp.TypeValidator:137-this.compiler = compiler;	0
com.google.javascript.jscomp.TypeValidator:138-this.typeRegistry = compiler.getTypeRegistry();	0
com.google.javascript.jscomp.TypeValidator:139-this.allValueTypes = typeRegistry.createUnionType(	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:682-return type.visit(	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:674-if (type == null) {	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:687-return typeRegistry.getNativeType(typeId);	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:64-JSTypeRegistry typeRegistry) {	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:186-private final Visitor<JSType> restrictUndefinedVisitor =	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:274-private final Visitor<JSType> restrictNullVisitor =	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:65-Preconditions.checkNotNull(convention);	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:66-this.convention = convention;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:67-this.typeRegistry = typeRegistry;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:68-firstLink = this;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:69-nextLink = null;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:70-}	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:120-switch (node.getType()) {	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:122-StaticSlot<JSType> nameVar = scope.getSlot(node.getString());	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:123-if (nameVar != null) {	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:124-JSType nameVarType = nameVar.getType();	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:125-if (nameVarType == null) {	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:128-return nameVarType;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:159-switch (node.getType()) {	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:161-scope.inferSlotType(node.getString(), type);	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:162-break;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:181-}	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:82-Preconditions.checkArgument(lastLink.nextLink == null);	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:83-this.nextLink = lastLink;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:84-lastLink.firstLink = this.firstLink;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:85-return lastLink;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:92-return firstLink;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:100-return firstLink.getPreciserScopeKnowingConditionOutcome(	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:110-return nextLink != null ? nextLink.getPreciserScopeKnowingConditionOutcome(	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:126-nameVarType = node.getJSType();	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:130-return null;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:133-String qualifiedName = node.getQualifiedName();	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:134-if (qualifiedName == null) {	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:135-return null;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:137-StaticSlot<JSType> propVar = scope.getSlot(qualifiedName);	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:138-JSType propVarType = null;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:139-if (propVar != null) {	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:140-propVarType = propVar.getType();	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:142-if (propVarType == null) {	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:143-propVarType = node.getJSType();	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:145-if (propVarType == null) {	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:146-propVarType = getNativeType(UNKNOWN_TYPE);	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:148-return propVarType;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:150-return null;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:165-String qualifiedName = node.getQualifiedName();	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:166-Preconditions.checkNotNull(qualifiedName);	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:168-JSType origType = node.getJSType();	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:169-origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:170-scope.inferQualifiedSlot(node, qualifiedName, origType, type);	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:171-break;	0
com.google.javascript.jscomp.CollapseVariableDeclarations:228-Node assign = n.getFirstChild();	0
com.google.javascript.jscomp.CollapseVariableDeclarations:229-Node lhs = assign.getFirstChild();	0
com.google.javascript.jscomp.CollapseVariableDeclarations:230-Preconditions.checkState(lhs.isName());	0
com.google.javascript.jscomp.CollapseVariableDeclarations:231-Node rhs = assign.getLastChild();	0
com.google.javascript.jscomp.CollapseVariableDeclarations:232-lhs.addChildToBack(rhs.detachFromParent());	0
com.google.javascript.jscomp.CollapseVariableDeclarations:233-var.addChildToBack(lhs.detachFromParent());	0
com.google.javascript.jscomp.CollapseVariableDeclarations:234-redeclaration = true;	0
com.google.javascript.jscomp.CollapseVariableDeclarations:240-JSDocInfo info = new JSDocInfo();	0
com.google.javascript.jscomp.CollapseVariableDeclarations:241-info.addSuppression("duplicate");	0
com.google.javascript.jscomp.CollapseVariableDeclarations:242-var.setJSDocInfo(info);	0
com.google.javascript.jscomp.CollapseVariableDeclarations:116-applyCollapses();	0
com.google.javascript.jscomp.CollapseVariableDeclarations:117-compiler.reportCodeChange();	0
com.google.javascript.jscomp.CollapseVariableDeclarations:210-for (Collapse collapse : collapses) {	0
com.google.javascript.jscomp.CollapseVariableDeclarations:212-Node var = new Node(Token.VAR);	0
com.google.javascript.jscomp.CollapseVariableDeclarations:213-var.copyInformationFrom(collapse.startNode);	0
com.google.javascript.jscomp.CollapseVariableDeclarations:214-collapse.parent.addChildBefore(var, collapse.startNode);	0
com.google.javascript.jscomp.CollapseVariableDeclarations:216-boolean redeclaration = false;	0
com.google.javascript.jscomp.CollapseVariableDeclarations:217-for (Node n = collapse.startNode; n != collapse.endNode;) {	0
com.google.javascript.jscomp.CollapseVariableDeclarations:218-Node next = n.getNext();	0
com.google.javascript.jscomp.CollapseVariableDeclarations:220-Preconditions.checkState(var.getNext() == n);	0
com.google.javascript.jscomp.CollapseVariableDeclarations:221-collapse.parent.removeChildAfter(var);	0
com.google.javascript.jscomp.CollapseVariableDeclarations:223-if (n.isVar()) {	0
com.google.javascript.jscomp.CollapseVariableDeclarations:224-while(n.hasChildren()) {	0
com.google.javascript.jscomp.CollapseVariableDeclarations:225-var.addChildToBack(n.removeFirstChild());	0
com.google.javascript.jscomp.CollapseVariableDeclarations:236-n = next;	0
com.google.javascript.jscomp.CollapseVariableDeclarations:237-}	0
com.google.javascript.jscomp.CollapseVariableDeclarations:239-if (redeclaration) {	0
com.google.javascript.jscomp.CollapseVariableDeclarations:244-}	0
com.google.javascript.jscomp.CollapseVariableDeclarations:245-}	0
com.google.javascript.jscomp.CollapseVariableDeclarations:103-CollapseVariableDeclarations(AbstractCompiler compiler) {	0
com.google.javascript.jscomp.CollapseVariableDeclarations:94-private final List<Collapse> collapses = Lists.newArrayList();	0
com.google.javascript.jscomp.CollapseVariableDeclarations:101-private final Set<Node> nodesToCollapse = Sets.newHashSet();	0
com.google.javascript.jscomp.CollapseVariableDeclarations:104-Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized());	0
com.google.javascript.jscomp.CollapseVariableDeclarations:105-this.compiler = compiler;	0
com.google.javascript.jscomp.CollapseVariableDeclarations:106-}	0
com.google.javascript.jscomp.CollapseVariableDeclarations:110-collapses.clear();	0
com.google.javascript.jscomp.CollapseVariableDeclarations:111-nodesToCollapse.clear();	0
com.google.javascript.jscomp.CollapseVariableDeclarations:113-NodeTraversal.traverse(compiler, root, new GatherCollapses());	0
com.google.javascript.jscomp.CollapseVariableDeclarations:115-if (!collapses.isEmpty()) {	0
com.google.javascript.jscomp.CollapseVariableDeclarations:119-}	0
com.google.javascript.jscomp.ProcessCommonJSModules:54-this(compiler, filenamePrefix, true);	0
com.google.javascript.jscomp.ProcessCommonJSModules:55-}	0
com.google.javascript.jscomp.ProcessCommonJSModules:121-filename = filename.substring(filenamePrefix.length());	0
com.google.javascript.jscomp.ProcessCommonJSModules:58-boolean reportDependencies) {	0
com.google.javascript.jscomp.ProcessCommonJSModules:59-this.compiler = compiler;	0
com.google.javascript.jscomp.ProcessCommonJSModules:60-this.filenamePrefix = filenamePrefix.endsWith(MODULE_SLASH) ?	0
com.google.javascript.jscomp.ProcessCommonJSModules:62-this.reportDependencies = reportDependencies;	0
com.google.javascript.jscomp.ProcessCommonJSModules:63-}	0
com.google.javascript.jscomp.ProcessCommonJSModules:72-return toModuleName(normalizeSourceName(filename));	0
com.google.javascript.jscomp.ProcessCommonJSModules:89-return MODULE_NAME_PREFIX +	0
com.google.javascript.jscomp.ProcessCommonJSModules:120-if (filename.indexOf(filenamePrefix) == 0) {	0
com.google.javascript.jscomp.ProcessCommonJSModules:124-return filename;	0
com.google.javascript.jscomp.ProcessCommonJSModules:67-NodeTraversal	0
com.google.javascript.jscomp.ProcessCommonJSModules:69-}	0
com.google.javascript.jscomp.ProcessCommonJSModules:80-return module;	0
com.google.javascript.jscomp.ProcessCommonJSModules:101-requiredFilename = requiredFilename.replaceAll("\\.js$", "");	0
com.google.javascript.jscomp.ProcessCommonJSModules:102-currentFilename = currentFilename.replaceAll("\\.js$", "");	0
com.google.javascript.jscomp.ProcessCommonJSModules:104-if (requiredFilename.startsWith("." + MODULE_SLASH) ||	0
com.google.javascript.jscomp.ProcessCommonJSModules:107-requiredFilename = (new URI(currentFilename)).resolve(new URI(requiredFilename))	0
com.google.javascript.jscomp.ProcessCommonJSModules:111-}	0
com.google.javascript.jscomp.ProcessCommonJSModules:109-} catch (URISyntaxException e) {	0
com.google.javascript.jscomp.ProcessCommonJSModules:110-throw new RuntimeException(e);	0
com.google.javascript.jscomp.ProcessCommonJSModules:113-return toModuleName(requiredFilename);	0
com.google.javascript.jscomp.NodeUtil:1271-return allResultsMatch(n.getFirstChild().getNext(), p)	0
com.google.javascript.jscomp.NodeUtil:2150-case Token.GT: return ">";	0
com.google.javascript.jscomp.NodeUtil:337-String s = trimJsWhiteSpace(rawJsString);	0
com.google.javascript.jscomp.NodeUtil:339-if (s.length() == 0) {	0
com.google.javascript.jscomp.NodeUtil:343-if (s.length() > 2	0
com.google.javascript.jscomp.NodeUtil:354-if (s.length() > 3	0
com.google.javascript.jscomp.NodeUtil:364-if (s.equals("infinity")	0
com.google.javascript.jscomp.NodeUtil:371-return Double.parseDouble(s);	0
com.google.javascript.jscomp.NodeUtil:378-int start = 0;	0
com.google.javascript.jscomp.NodeUtil:379-int end = s.length();	0
com.google.javascript.jscomp.NodeUtil:381-&& isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {	0
com.google.javascript.jscomp.NodeUtil:385-&& isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {	0
com.google.javascript.jscomp.NodeUtil:388-return s.substring(start, end);	0
com.google.javascript.jscomp.NodeUtil:395-switch (c) {	0
com.google.javascript.jscomp.NodeUtil:409-return (Character.getType(c) == Character.SPACE_SEPARATOR)	0
com.google.javascript.jscomp.NodeUtil:1198-case Token.IN: return 9;	0
com.google.javascript.jscomp.NodeUtil:1444-return false;	0
com.google.javascript.jscomp.NodeUtil:320-return getStringNumberValue(n.getString());	0
com.google.javascript.jscomp.NodeUtil:332-if (rawJsString.contains("\u000b")) {	0
com.google.javascript.jscomp.NodeUtil:1183-case Token.HOOK: return 2;// ?: operator	0
com.google.javascript.jscomp.NodeUtil:328-return null;	0
com.google.javascript.jscomp.NodeUtil:3225-result.srcrefTree(srcref);	0
com.google.javascript.jscomp.NodeUtil:1419-return mayBeStringHelper(n);	0
com.google.javascript.jscomp.NodeUtil:516-return false;	0
com.google.javascript.jscomp.NodeUtil:1435-switch (type) {	0
com.google.javascript.jscomp.NodeUtil:1203-case Token.ADD:return 11;	0
com.google.javascript.jscomp.NodeUtil:2155-case Token.ADD: return "+";	0
com.google.javascript.jscomp.NodeUtil:1348-return false;	0
com.google.javascript.jscomp.NodeUtil:1337-return true;	0
com.google.javascript.jscomp.NodeUtil:1392-return false;	0
com.google.javascript.jscomp.NodeUtil:1366-return allResultsMatch(n, BOOLEAN_RESULT_PREDICATE);	0
com.google.javascript.jscomp.NodeUtil:1370-switch (n.getType()) {	0
com.google.javascript.jscomp.NodeUtil:1534-return n.isGetProp() || n.isGetElem();	0
com.google.javascript.jscomp.NodeUtil:3222-result = IR.number(value);	0
com.google.javascript.jscomp.NodeUtil:1319-return !mayBeString(n.getFirstChild())	0
com.google.javascript.jscomp.NodeUtil:1412-return mayBeString(n, true);	0
com.google.javascript.jscomp.NodeUtil:1416-if (recurse) {	0
com.google.javascript.jscomp.NodeUtil:1417-return allResultsMatch(n, MAY_BE_STRING_PREDICATE);	1
com.google.javascript.jscomp.NodeUtil:1424-return !isNumericResult(n) && !isBooleanResult(n)	0
com.google.javascript.jscomp.NodeUtil:3219-} else if (value == Double.NEGATIVE_INFINITY) {	0
com.google.javascript.jscomp.NodeUtil:1262-switch (n.getType()) {	0
com.google.javascript.jscomp.NodeUtil:1274-return p.apply(n);	0
com.google.javascript.jscomp.NodeUtil:1313-return allResultsMatch(n, NUMBERIC_RESULT_PREDICATE);	0
com.google.javascript.jscomp.NodeUtil:1317-switch (n.getType()) {	0
com.google.javascript.jscomp.NodeUtil:3215-if (Double.isNaN(value)) {	0
com.google.javascript.jscomp.NodeUtil:3217-} else if (value == Double.POSITIVE_INFINITY) {	0
com.google.javascript.jscomp.NodeUtil:3224-if (srcref != null) {	0
com.google.javascript.jscomp.NodeUtil:3227-return result;	0
com.google.javascript.jscomp.NodeUtil:282-return n.getDouble();	0
com.google.javascript.jscomp.NodeUtil:273-switch (n.getType()) {	0
com.google.javascript.jscomp.TypeCheck:921-return;	0
com.google.javascript.jscomp.TypeCheck:490-ensureTyped(t, n, NULL_TYPE);	0
com.google.javascript.jscomp.TypeCheck:491-break;	0
com.google.javascript.jscomp.TypeCheck:486-ensureTyped(t, n, t.getScope().getTypeOfThis());	0
com.google.javascript.jscomp.TypeCheck:487-break;	0
com.google.javascript.jscomp.TypeCheck:1442-info = varInfo;	0
com.google.javascript.jscomp.TypeCheck:1436-JSType valueType = getJSType(value);	0
com.google.javascript.jscomp.TypeCheck:1437-JSType nameType = var.getType();	0
com.google.javascript.jscomp.TypeCheck:1438-nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;	0
com.google.javascript.jscomp.TypeCheck:1440-JSDocInfo info = name.getJSDocInfo();	0
com.google.javascript.jscomp.TypeCheck:1441-if (info == null) {	0
com.google.javascript.jscomp.TypeCheck:1445-checkEnumAlias(t, info, value);	0
com.google.javascript.jscomp.TypeCheck:1446-if (var.isTypeInferred()) {	0
com.google.javascript.jscomp.TypeCheck:920-if (var.isTypeInferred()) {	0
com.google.javascript.jscomp.TypeCheck:533-visitVar(t, n);	0
com.google.javascript.jscomp.TypeCheck:534-typeable = false;	0
com.google.javascript.jscomp.TypeCheck:535-break;	0
com.google.javascript.jscomp.TypeCheck:1429-JSDocInfo varInfo = n.hasOneChild() ? n.getJSDocInfo() : null;	0
com.google.javascript.jscomp.TypeCheck:1430-for (Node name : n.children()) {	0
com.google.javascript.jscomp.TypeCheck:1431-Node value = name.getFirstChild();	0
com.google.javascript.jscomp.TypeCheck:1433-Var var = t.getScope().getVar(name.getString());	0
com.google.javascript.jscomp.TypeCheck:1435-if (value != null) {	0
com.google.javascript.jscomp.TypeCheck:1453-}	0
com.google.javascript.jscomp.TypeCheck:1454-}	0
com.google.javascript.jscomp.TypeCheck:905-checkPropertyInheritanceOnGetpropAssign(	0
com.google.javascript.jscomp.TypeCheck:825-if (reportUnknownTypes.isOn()) {	0
com.google.javascript.jscomp.TypeCheck:829-unknownCount++;	0
com.google.javascript.jscomp.TypeCheck:917-JSType rvalueType = getJSType(assign.getLastChild());	0
com.google.javascript.jscomp.TypeCheck:918-Var var = t.getScope().getVar(lvalue.getQualifiedName());	0
com.google.javascript.jscomp.TypeCheck:919-if (var != null) {	0
com.google.javascript.jscomp.TypeCheck:914-JSType leftType = getJSType(lvalue);	0
com.google.javascript.jscomp.TypeCheck:915-if (lvalue.isQualifiedName()) {	0
com.google.javascript.jscomp.TypeCheck:355-check(externsRoot, true);	0
com.google.javascript.jscomp.TypeCheck:388-inferJSDocInfo.process(node, null);	0
com.google.javascript.jscomp.TypeCheck:1103-ctorType.getAllImplementedInterfaces()) {	0
com.google.javascript.jscomp.TypeCheck:1132-return;	0
com.google.javascript.jscomp.TypeCheck:1210-ctor = maybeSuperInstanceType.getConstructor();	0
com.google.javascript.jscomp.TypeCheck:1211-if (ctor == null) {	0
com.google.javascript.jscomp.TypeCheck:1214-Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());	0
com.google.javascript.jscomp.TypeCheck:1215-}	0
com.google.javascript.jscomp.TypeCheck:1079-FunctionType superClass = ctorType.getSuperClassConstructor();	0
com.google.javascript.jscomp.TypeCheck:1080-boolean superClassHasProperty = superClass != null &&	0
com.google.javascript.jscomp.TypeCheck:1082-boolean superClassHasDeclaredProperty = superClass != null &&	0
com.google.javascript.jscomp.TypeCheck:1086-boolean superInterfaceHasProperty = false;	0
com.google.javascript.jscomp.TypeCheck:1087-boolean superInterfaceHasDeclaredProperty = false;	0
com.google.javascript.jscomp.TypeCheck:1088-if (ctorType.isInterface()) {	0
com.google.javascript.jscomp.TypeCheck:1098-boolean declaredOverride = info != null && info.isOverride();	0
com.google.javascript.jscomp.TypeCheck:1100-boolean foundInterfaceProperty = false;	0
com.google.javascript.jscomp.TypeCheck:1101-if (ctorType.isConstructor()) {	0
com.google.javascript.jscomp.TypeCheck:1128-if (!declaredOverride	0
com.google.javascript.jscomp.MaybeReachingVariableUse:291-GraphNode<Node, Branch> n = getCfg().getNode(defNode);	0
com.google.javascript.jscomp.MaybeReachingVariableUse:292-Preconditions.checkNotNull(n);	0
com.google.javascript.jscomp.MaybeReachingVariableUse:293-FlowState<ReachingUses> state = n.getAnnotation();	0
com.google.javascript.jscomp.MaybeReachingVariableUse:294-return state.getOut().mayUseMap.get(jsScope.getVar(name));	0
com.google.javascript.jscomp.MaybeReachingVariableUse:226-Node name = n.getFirstChild();	0
com.google.javascript.jscomp.MaybeReachingVariableUse:227-if (!conditional) {	0
com.google.javascript.jscomp.MaybeReachingVariableUse:228-removeFromUseIfLocal(name.getString(), output);	0
com.google.javascript.jscomp.MaybeReachingVariableUse:232-if (!n.isAssign()) {	0
com.google.javascript.jscomp.MaybeReachingVariableUse:236-computeMayUse(name.getNext(), cfgNode, output, conditional);	0
com.google.javascript.jscomp.MaybeReachingVariableUse:237-} else {	0
com.google.javascript.jscomp.MaybeReachingVariableUse:217-computeMayUse(varName.getFirstChild(), cfgNode, output, conditional);	0
com.google.javascript.jscomp.MaybeReachingVariableUse:218-if (!conditional) {	0
com.google.javascript.jscomp.MaybeReachingVariableUse:219-removeFromUseIfLocal(varName.getString(), output);	0
com.google.javascript.jscomp.MaybeReachingVariableUse:258-return;	0
com.google.javascript.jscomp.MaybeReachingVariableUse:261-use.mayUseMap.put(var, node);	0
com.google.javascript.jscomp.MaybeReachingVariableUse:172-addToUseIfLocal(n.getString(), cfgNode, output);	0
com.google.javascript.jscomp.MaybeReachingVariableUse:173-return;	0
com.google.javascript.jscomp.MaybeReachingVariableUse:276-use.mayUseMap.removeAll(var);	0
com.google.javascript.jscomp.MaybeReachingVariableUse:213-Node varName = n.getFirstChild();	0
com.google.javascript.jscomp.MaybeReachingVariableUse:214-Preconditions.checkState(n.hasChildren(), "AST should be normalized");	0
com.google.javascript.jscomp.MaybeReachingVariableUse:216-if (varName.hasChildren()) {	0
com.google.javascript.jscomp.MaybeReachingVariableUse:222-return;	0
com.google.javascript.jscomp.MaybeReachingVariableUse:244-computeMayUse(c, cfgNode, output, conditional);	0
com.google.javascript.jscomp.MaybeReachingVariableUse:53-super(cfg, new ReachingUsesJoinOp());	0
com.google.javascript.jscomp.MaybeReachingVariableUse:54-this.jsScope = jsScope;	0
com.google.javascript.jscomp.MaybeReachingVariableUse:55-this.escaped = Sets.newHashSet();	0
com.google.javascript.jscomp.MaybeReachingVariableUse:59-computeEscaped(jsScope, escaped, compiler);	0
com.google.javascript.jscomp.MaybeReachingVariableUse:60-}	0
com.google.javascript.jscomp.MaybeReachingVariableUse:133-return false;	0
com.google.javascript.jscomp.MaybeReachingVariableUse:138-return new ReachingUses();	0
com.google.javascript.jscomp.MaybeReachingVariableUse:143-return new ReachingUses();	0
com.google.javascript.jscomp.MaybeReachingVariableUse:148-ReachingUses output = new ReachingUses(input);	0
com.google.javascript.jscomp.MaybeReachingVariableUse:153-boolean conditional = hasExceptionHandler(n);	0
com.google.javascript.jscomp.MaybeReachingVariableUse:154-computeMayUse(n, n, output, conditional);	0
com.google.javascript.jscomp.MaybeReachingVariableUse:156-return output;	0
com.google.javascript.jscomp.MaybeReachingVariableUse:160-return false;	1
com.google.javascript.jscomp.MaybeReachingVariableUse:165-switch (n.getType()) {	0
com.google.javascript.jscomp.MaybeReachingVariableUse:169-return;	0
com.google.javascript.jscomp.MaybeReachingVariableUse:225-if (NodeUtil.isAssignmentOp(n) && n.getFirstChild().isName()) {	0
com.google.javascript.jscomp.MaybeReachingVariableUse:243-for (Node c = n.getLastChild(); c != null; c = n.getChildBefore(c)) {	0
com.google.javascript.jscomp.MaybeReachingVariableUse:248-}	0
com.google.javascript.jscomp.MaybeReachingVariableUse:256-Var var = jsScope.getVar(name);	0
com.google.javascript.jscomp.MaybeReachingVariableUse:257-if (var == null || var.scope != jsScope) {	0
com.google.javascript.jscomp.MaybeReachingVariableUse:260-if (!escaped.contains(var)) {	0
com.google.javascript.jscomp.MaybeReachingVariableUse:263-}	0
com.google.javascript.jscomp.MaybeReachingVariableUse:271-Var var = jsScope.getVar(name);	0
com.google.javascript.jscomp.MaybeReachingVariableUse:272-if (var == null || var.scope != jsScope) {	0
com.google.javascript.jscomp.MaybeReachingVariableUse:275-if (!escaped.contains(var)) {	0
com.google.javascript.jscomp.MaybeReachingVariableUse:278-}	0
com.google.javascript.jscomp.MaybeReachingVariableUse:178-computeMayUse(	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:119-return;	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:160-return false;	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:184-somethingChanged = true;	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:186-currentVersionOfNode = newVersionOfNode;	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:148-state.changed = false;	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:149-state.traverseChildScopes = false;	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:150-return true;	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:94-AbstractPeepholeOptimization... optimizations) {	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:41-private StateStack traversalState = new StateStack();	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:95-this.compiler = compiler;	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:96-this.peepholeOptimizations = optimizations;	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:97-}	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:105-PeepholeChangeHandler handler = new PeepholeChangeHandler();	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:106-compiler.addChangeHandler(handler);	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:107-beginTraversal();	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:108-traverse(root);	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:109-endTraversal();	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:110-compiler.removeChangeHandler(handler);	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:111-}	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:118-if (!shouldVisit(node)) {	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:122-int visits = 0;	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:124-Node c = node.getFirstChild();	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:125-while(c != null) {	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:126-traverse(c);	1
com.google.javascript.jscomp.PeepholeOptimizationsPass:127-Node next = c.getNext();	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:128-c = next;	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:129-}	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:131-visit(node);	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:132-visits++;	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:134-Preconditions.checkState(visits < 10000, "too many interations");	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:135-} while (shouldRetraverse(node));	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:137-exitNode(node);	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:138-}	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:141-if (node.getParent() != null && node.isFunction() || node.isScript()) {	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:142-ScopeState state = traversalState.peek();	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:143-if (state.changed) {	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:153-return false;	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:157-if (node.isFunction() || node.isScript()) {	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:158-ScopeState previous = traversalState.peek();	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:159-if (!previous.traverseChildScopes) {	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:162-traversalState.push();	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:164-return true;	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:168-if (node.isFunction() || node.isScript()) {	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:169-traversalState.pop();	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:171-}	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:174-Node currentVersionOfNode = n;	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:175-boolean somethingChanged = false;	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:178-somethingChanged = false;	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:179-for (AbstractPeepholeOptimization optimization : peepholeOptimizations) {	0
com.google.javascript.jscomp.PeepholeOptimizationsPass:180-Node newVersionOfNode =	0
com.google.javascript.jscomp.ControlFlowAnalysis:767-cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);	1
com.google.javascript.jscomp.ControlFlowAnalysis:768-}	0
com.google.javascript.jscomp.ControlFlowAnalysis:579-finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));	0
com.google.javascript.jscomp.ControlFlowAnalysis:844-finallyMap.put(lastJump, handler.getLastChild());	0
com.google.javascript.jscomp.ControlFlowAnalysis:491-return;	0
com.google.javascript.jscomp.ControlFlowAnalysis:764-} else if (parent.getLastChild() == node){	0
com.google.javascript.jscomp.ControlFlowAnalysis:765-if (cfa != null) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:766-for (Node finallyNode : cfa.finallyMap.get(parent)) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:770-return computeFollowNode(fromNode, parent, cfa);	0
com.google.javascript.jscomp.ControlFlowAnalysis:752-return computeFallThrough(parent.getLastChild());	0
com.google.javascript.jscomp.ControlFlowAnalysis:841-if (lastJump == cfgNode) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:842-createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());	0
com.google.javascript.jscomp.ControlFlowAnalysis:854-lastJump = handler;	0
com.google.javascript.jscomp.ControlFlowAnalysis:855-}	0
com.google.javascript.jscomp.ControlFlowAnalysis:751-if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.	0
com.google.javascript.jscomp.ControlFlowAnalysis:757-} else if (NodeUtil.getCatchBlock(parent) == node){	0
com.google.javascript.jscomp.ControlFlowAnalysis:363-createEdge(node, Branch.ON_FALSE,	0
com.google.javascript.jscomp.ControlFlowAnalysis:575-if (lastJump == node) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:576-createEdge(lastJump, Branch.UNCOND, computeFallThrough(	0
com.google.javascript.jscomp.ControlFlowAnalysis:581-lastJump = cur;	0
com.google.javascript.jscomp.ControlFlowAnalysis:597-finallyMap.put(lastJump, computeFollowNode(cur, this));	0
com.google.javascript.jscomp.ControlFlowAnalysis:260-return n != parent.getFirstChild();	0
com.google.javascript.jscomp.ControlFlowAnalysis:230-exceptionHandler.push(n);	0
com.google.javascript.jscomp.ControlFlowAnalysis:231-return true;	0
com.google.javascript.jscomp.ControlFlowAnalysis:285-if (n == parent.getFirstChild().getNext()) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:286-Preconditions.checkState(exceptionHandler.peek() == parent);	0
com.google.javascript.jscomp.ControlFlowAnalysis:287-exceptionHandler.pop();	0
com.google.javascript.jscomp.ControlFlowAnalysis:332-handleTry(n);	0
com.google.javascript.jscomp.ControlFlowAnalysis:333-return;	0
com.google.javascript.jscomp.ControlFlowAnalysis:544-createEdge(node, Branch.UNCOND, node.getFirstChild());	0
com.google.javascript.jscomp.ControlFlowAnalysis:545-}	0
com.google.javascript.jscomp.ControlFlowAnalysis:750-if (parent.getFirstChild() == node) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:506-createEdge(node, Branch.UNCOND, computeFollowNode(node, this));	0
com.google.javascript.jscomp.ControlFlowAnalysis:515-break;	0
com.google.javascript.jscomp.ControlFlowAnalysis:352-handleStmt(n);	0
com.google.javascript.jscomp.ControlFlowAnalysis:353-return;	0
com.google.javascript.jscomp.ControlFlowAnalysis:670-createEdge(node, Branch.UNCOND, computeFollowNode(node, this));	0
com.google.javascript.jscomp.ControlFlowAnalysis:671-connectToPossibleExceptionHandler(node, node);	0
com.google.javascript.jscomp.ControlFlowAnalysis:672-}	0
com.google.javascript.jscomp.ControlFlowAnalysis:298-handleIf(n);	0
com.google.javascript.jscomp.ControlFlowAnalysis:299-return;	0
com.google.javascript.jscomp.ControlFlowAnalysis:358-Node thenBlock = node.getFirstChild().getNext();	0
com.google.javascript.jscomp.ControlFlowAnalysis:359-Node elseBlock = thenBlock.getNext();	0
com.google.javascript.jscomp.ControlFlowAnalysis:360-createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock));	0
com.google.javascript.jscomp.ControlFlowAnalysis:362-if (elseBlock == null) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:368-connectToPossibleExceptionHandler(	0
com.google.javascript.jscomp.ControlFlowAnalysis:370-}	0
com.google.javascript.jscomp.ControlFlowAnalysis:837-Preconditions.checkState(handler.isTry());	0
com.google.javascript.jscomp.ControlFlowAnalysis:838-Node catchBlock = NodeUtil.getCatchBlock(handler);	0
com.google.javascript.jscomp.ControlFlowAnalysis:840-if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:148-c.inlineVariable();	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:468-for (Node p = n; p != expressionRoot; p = p.getParent()) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:469-for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:475-return false;	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:488-for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:496-return false;	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:147-if (c.canInline()) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:150-}	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:112-public FlowSensitiveInlineVariables(AbstractCompiler compiler) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:113-this.compiler = compiler;	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:114-}	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:81-private static final Predicate<Node> SIDE_EFFECT_PREDICATE =	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:119-if (t.inGlobalScope()) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:120-return; // Don't even brother. All global variables are likely escaped.	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:123-if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE <	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:129-ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:131-Preconditions.checkState(t.getScopeRoot().isFunction());	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:132-cfa.process(null, t.getScopeRoot().getLastChild());	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:133-cfg = cfa.getCfg();	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:134-reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler);	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:135-reachingDef.analyze();	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:136-candidates = Lists.newLinkedList();	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:140-new NodeTraversal(compiler, new GatherCandiates()).traverse(	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:144-reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:145-reachingUses.analyze();	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:146-for (Candidate c : candidates) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:151-}	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:154-public void exitScope(NodeTraversal t) {}	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:158-(new NodeTraversal(compiler, this)).traverseRoots(externs, root);	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:159-}	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:168-}	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:125-return;	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:470-if (predicate.apply(cur)) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:471-return true;	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:489-for (Node cur = p.getParent().getFirstChild(); cur != p;	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:491-if (predicate.apply(cur)) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:492-return true;	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:490-cur = cur.getNext()) {	0
com.google.javascript.jscomp.ScopedAliases:115-aliasUsage.applyAlias();	0
com.google.javascript.jscomp.ScopedAliases:116-}	0
com.google.javascript.jscomp.ScopedAliases:120-if (aliasDefinition.getParent().isVar() &&	0
com.google.javascript.jscomp.ScopedAliases:122-aliasDefinition.getParent().detachFromParent();	0
com.google.javascript.jscomp.ScopedAliases:126-}	0
com.google.javascript.jscomp.ScopedAliases:130-Node expressionWithScopeCall = scopeCall.getParent();	0
com.google.javascript.jscomp.ScopedAliases:131-Node scopeClosureBlock = scopeCall.getLastChild().getLastChild();	0
com.google.javascript.jscomp.ScopedAliases:132-scopeClosureBlock.detachFromParent();	0
com.google.javascript.jscomp.ScopedAliases:133-expressionWithScopeCall.getParent().replaceChild(	0
com.google.javascript.jscomp.ScopedAliases:136-NodeUtil.tryMergeBlock(scopeClosureBlock);	0
com.google.javascript.jscomp.ScopedAliases:137-}	0
com.google.javascript.jscomp.ScopedAliases:142-compiler.reportCodeChange();	0
com.google.javascript.jscomp.ScopedAliases:114-for (AliasUsage aliasUsage : traversal.getAliasUsages()) {	0
com.google.javascript.jscomp.ScopedAliases:119-for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder()) {	0
com.google.javascript.jscomp.ScopedAliases:129-for (Node scopeCall : traversal.getScopeCalls()) {	0
com.google.javascript.jscomp.ScopedAliases:139-if (traversal.getAliasUsages().size() > 0 ||	0
com.google.javascript.jscomp.ScopedAliases:95-AliasTransformationHandler transformationHandler) {	0
com.google.javascript.jscomp.ScopedAliases:96-this.compiler = compiler;	0
com.google.javascript.jscomp.ScopedAliases:97-this.preprocessorSymbolTable = preprocessorSymbolTable;	0
com.google.javascript.jscomp.ScopedAliases:98-this.transformationHandler = transformationHandler;	0
com.google.javascript.jscomp.ScopedAliases:99-}	0
com.google.javascript.jscomp.ScopedAliases:63-static final DiagnosticType GOOG_SCOPE_USED_IMPROPERLY = DiagnosticType.error(	0
com.google.javascript.jscomp.ScopedAliases:67-static final DiagnosticType GOOG_SCOPE_HAS_BAD_PARAMETERS =	0
com.google.javascript.jscomp.ScopedAliases:73-static final DiagnosticType GOOG_SCOPE_REFERENCES_THIS = DiagnosticType.error(	0
com.google.javascript.jscomp.ScopedAliases:77-static final DiagnosticType GOOG_SCOPE_USES_RETURN = DiagnosticType.error(	0
com.google.javascript.jscomp.ScopedAliases:81-static final DiagnosticType GOOG_SCOPE_USES_THROW = DiagnosticType.error(	0
com.google.javascript.jscomp.ScopedAliases:85-static final DiagnosticType GOOG_SCOPE_ALIAS_REDEFINED = DiagnosticType.error(	0
com.google.javascript.jscomp.ScopedAliases:89-static final DiagnosticType GOOG_SCOPE_NON_ALIAS_LOCAL = DiagnosticType.error(	0
com.google.javascript.jscomp.ScopedAliases:103-hotSwapScript(root, null);	0
com.google.javascript.jscomp.ScopedAliases:104-}	0
com.google.javascript.jscomp.ScopedAliases:108-Traversal traversal = new Traversal();	0
com.google.javascript.jscomp.ScopedAliases:109-NodeTraversal.traverse(compiler, root, traversal);	0
com.google.javascript.jscomp.ScopedAliases:111-if (!traversal.hasErrors()) {	0
com.google.javascript.jscomp.ScopedAliases:145-}	0
com.google.javascript.jscomp.ScopedAliases:124-aliasDefinition.detachFromParent();	0
com.google.javascript.jscomp.TypedScopeCreator:228-NodeTraversal.traverse(compiler, functionNode.getLastChild(),	0
com.google.javascript.jscomp.TypedScopeCreator:223-JSType type = functionNode.getJSType();	0
com.google.javascript.jscomp.TypedScopeCreator:224-if (type != null && type.isFunctionType()) {	0
com.google.javascript.jscomp.TypedScopeCreator:225-FunctionType fnType = type.toMaybeFunctionType();	0
com.google.javascript.jscomp.TypedScopeCreator:226-ObjectType fnThisType = fnType.getTypeOfThis();	0
com.google.javascript.jscomp.TypedScopeCreator:227-if (!fnThisType.isUnknownType()) {	0
com.google.javascript.jscomp.TypedScopeCreator:232-}	0
com.google.javascript.jscomp.TypedScopeCreator:210-newScope = new Scope(parent, root);	0
com.google.javascript.jscomp.TypedScopeCreator:211-LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);	0
com.google.javascript.jscomp.TypedScopeCreator:212-scopeBuilder = localScopeBuilder;	0
com.google.javascript.jscomp.TypedScopeCreator:213-localScopeBuilder.build();	0
com.google.javascript.jscomp.TypedScopeCreator:2020-return functionAnalysisResults.get(n);	0
com.google.javascript.jscomp.TypedScopeCreator:2014-if (n == null) {	0
com.google.javascript.jscomp.TypedScopeCreator:391-return typeRegistry.getNativeType(nativeType);	0
com.google.javascript.jscomp.TypedScopeCreator:175-this(compiler, compiler.getCodingConvention());	0
com.google.javascript.jscomp.TypedScopeCreator:176-}	0
com.google.javascript.jscomp.TypedScopeCreator:196-Scope newScope = null;	0
com.google.javascript.jscomp.TypedScopeCreator:197-AbstractScopeBuilder scopeBuilder = null;	0
com.google.javascript.jscomp.TypedScopeCreator:198-if (parent == null) {	0
com.google.javascript.jscomp.TypedScopeCreator:200-(new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults))	0
com.google.javascript.jscomp.TypedScopeCreator:204-newScope = createInitialScope(root);	0
com.google.javascript.jscomp.TypedScopeCreator:206-GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);	0
com.google.javascript.jscomp.TypedScopeCreator:207-scopeBuilder = globalScopeBuilder;	0
com.google.javascript.jscomp.TypedScopeCreator:208-NodeTraversal.traverse(compiler, root, scopeBuilder);	0
com.google.javascript.jscomp.TypedScopeCreator:209-} else {	0
com.google.javascript.jscomp.TypedScopeCreator:216-scopeBuilder.resolveStubDeclarations();	0
com.google.javascript.jscomp.TypedScopeCreator:217-scopeBuilder.resolveTypes();	0
com.google.javascript.jscomp.TypedScopeCreator:222-for (Node functionNode : scopeBuilder.nonExternFunctions) {	0
com.google.javascript.jscomp.TypedScopeCreator:234-if (parent == null) {	0
com.google.javascript.jscomp.TypedScopeCreator:235-codingConvention.defineDelegateProxyPrototypeProperties(	0
com.google.javascript.jscomp.TypedScopeCreator:239-return newScope;	0
com.google.javascript.jscomp.TypedScopeCreator:179-CodingConvention codingConvention) {	0
com.google.javascript.jscomp.TypedScopeCreator:142-private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();	0
com.google.javascript.jscomp.TypedScopeCreator:143-private final Map<String, String> delegateCallingConventions =	0
com.google.javascript.jscomp.TypedScopeCreator:147-private final Map<Node, AstFunctionContents> functionAnalysisResults =	0
com.google.javascript.jscomp.TypedScopeCreator:180-this.compiler = compiler;	0
com.google.javascript.jscomp.TypedScopeCreator:181-this.validator = compiler.getTypeValidator();	0
com.google.javascript.jscomp.TypedScopeCreator:182-this.codingConvention = codingConvention;	0
com.google.javascript.jscomp.TypedScopeCreator:183-this.typeRegistry = compiler.getTypeRegistry();	0
com.google.javascript.jscomp.TypedScopeCreator:184-this.typeParsingErrorReporter = typeRegistry.getErrorReporter();	0
com.google.javascript.jscomp.TypedScopeCreator:185-}	0
com.google.javascript.jscomp.TypedScopeCreator:99-static final String DELEGATE_PROXY_SUFFIX =	0
com.google.javascript.jscomp.TypedScopeCreator:102-static final DiagnosticType MALFORMED_TYPEDEF =	0
com.google.javascript.jscomp.TypedScopeCreator:107-static final DiagnosticType ENUM_INITIALIZER =	0
com.google.javascript.jscomp.TypedScopeCreator:112-static final DiagnosticType CTOR_INITIALIZER =	0
com.google.javascript.jscomp.TypedScopeCreator:117-static final DiagnosticType IFACE_INITIALIZER =	0
com.google.javascript.jscomp.TypedScopeCreator:122-static final DiagnosticType CONSTRUCTOR_EXPECTED =	0
com.google.javascript.jscomp.TypedScopeCreator:127-static final DiagnosticType UNKNOWN_LENDS =	0
com.google.javascript.jscomp.TypedScopeCreator:132-static final DiagnosticType LENDS_ON_NON_OBJECT =	0
com.google.javascript.jscomp.TypedScopeCreator:297-NodeTraversal.traverse(	0
com.google.javascript.jscomp.Compiler:363-this.moduleGraph = new JSModuleGraph(modules);	0
com.google.javascript.jscomp.Compiler:370-}	0
com.google.javascript.jscomp.Compiler:2334-if (synthesizedExternsInput == null) {	0
com.google.javascript.jscomp.Compiler:2335-synthesizedExternsInput = newExternInput(SYNTHETIC_EXTERNS);	0
com.google.javascript.jscomp.Compiler:2337-return synthesizedExternsInput;	0
com.google.javascript.jscomp.Compiler:1027-SourceAst ast = new SyntheticAst(name);	0
com.google.javascript.jscomp.Compiler:1028-if (inputsById.containsKey(ast.getInputId())) {	0
com.google.javascript.jscomp.Compiler:1031-CompilerInput input = new CompilerInput(ast, true);	0
com.google.javascript.jscomp.Compiler:1032-putCompilerInput(input.getInputId(), input);	0
com.google.javascript.jscomp.Compiler:1033-externsRoot.addChildToFront(ast.getAstRoot(this));	0
com.google.javascript.jscomp.Compiler:1034-externs.add(0, input);	0
com.google.javascript.jscomp.Compiler:1035-return input;	0
com.google.javascript.jscomp.Compiler:2033-level = newLevel;	0
com.google.javascript.jscomp.Compiler:2307-return hasRegExpGlobalReferences;	0
com.google.javascript.jscomp.Compiler:2029-CheckLevel level = error.getDefaultLevel();	0
com.google.javascript.jscomp.Compiler:2030-if (warningsGuard != null) {	0
com.google.javascript.jscomp.Compiler:2031-CheckLevel newLevel = warningsGuard.level(error);	0
com.google.javascript.jscomp.Compiler:2032-if (newLevel != null) {	0
com.google.javascript.jscomp.Compiler:2037-if (level.isOn()) {	0
com.google.javascript.jscomp.Compiler:2043-}	0
com.google.javascript.jscomp.Compiler:1131-return moduleGraph;	0
com.google.javascript.jscomp.Compiler:1946-for (CodeChangeHandler handler : codeChangeHandlers) {	0
com.google.javascript.jscomp.Compiler:1947-handler.reportChange();	0
com.google.javascript.jscomp.Compiler:1948-}	0
com.google.javascript.jscomp.Compiler:1949-}	0
com.google.javascript.jscomp.Compiler:327-JSModule module = new JSModule(SINGLETON_MODULE_NAME);	0
com.google.javascript.jscomp.Compiler:328-for (SourceFile input : inputs) {	0
com.google.javascript.jscomp.Compiler:329-module.add(input);	0
com.google.javascript.jscomp.Compiler:330-}	0
com.google.javascript.jscomp.Compiler:332-initModules(externs, Lists.newArrayList(module), options);	0
com.google.javascript.jscomp.Compiler:333-}	0
com.google.javascript.jscomp.Compiler:954-return externAndJsRoot;	0
com.google.javascript.jscomp.Compiler:1524-if (options == null) {	0
com.google.javascript.jscomp.Compiler:1529-}	0
com.google.javascript.jscomp.Compiler:1745-initCompilerOptionsIfTesting();	0
com.google.javascript.jscomp.Compiler:1746-return toSource(n, null, true);	0
com.google.javascript.jscomp.Compiler:1753-CodePrinter.Builder builder = new CodePrinter.Builder(n);	0
com.google.javascript.jscomp.Compiler:1754-builder.setPrettyPrint(options.prettyPrint);	0
com.google.javascript.jscomp.Compiler:1755-builder.setLineBreak(options.lineBreak);	0
com.google.javascript.jscomp.Compiler:1756-builder.setPreferLineBreakAtEndOfFile(options.preferLineBreakAtEndOfFile);	0
com.google.javascript.jscomp.Compiler:1757-builder.setSourceMap(sourceMap);	0
com.google.javascript.jscomp.Compiler:1758-builder.setSourceMapDetailLevel(options.sourceMapDetailLevel);	0
com.google.javascript.jscomp.Compiler:1759-builder.setTagAsStrict(firstOutput &&	0
com.google.javascript.jscomp.Compiler:1761-builder.setLineLengthThreshold(options.lineLengthThreshold);	0
com.google.javascript.jscomp.Compiler:1763-Charset charset = options.outputCharset != null ?	0
com.google.javascript.jscomp.Compiler:1765-builder.setOutputCharset(charset);	0
com.google.javascript.jscomp.Compiler:1767-return builder.build();	0
com.google.javascript.jscomp.Compiler:1855-}	0
com.google.javascript.jscomp.Compiler:1852-if (hasErrors()) {	0
com.google.javascript.jscomp.Compiler:697-optimize();	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:175-throw new IllegalArgumentException("Node cannot be refined. \n" +	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:680-return typeRegistry.getNativeType(typeId);	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:149-return null;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:119-switch (node.getType()) {	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:158-switch (node.getType()) {	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:63-JSTypeRegistry typeRegistry) {	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:183-private final Visitor<JSType> restrictUndefinedVisitor =	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:271-private final Visitor<JSType> restrictNullVisitor =	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:64-Preconditions.checkNotNull(convention);	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:65-this.convention = convention;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:66-this.typeRegistry = typeRegistry;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:67-firstLink = this;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:68-nextLink = null;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:69-}	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:81-Preconditions.checkArgument(lastLink.nextLink == null);	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:82-this.nextLink = lastLink;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:83-lastLink.firstLink = this.firstLink;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:84-return lastLink;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:91-return firstLink;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:99-return firstLink.getPreciserScopeKnowingConditionOutcome(	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:109-return nextLink != null ? nextLink.getPreciserScopeKnowingConditionOutcome(	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:121-StaticSlot<JSType> nameVar = scope.getSlot(node.getString());	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:122-if (nameVar != null) {	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:123-JSType nameVarType = nameVar.getType();	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:124-if (nameVarType == null) {	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:125-nameVarType = node.getJSType();	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:127-return nameVarType;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:129-return null;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:132-String qualifiedName = node.getQualifiedName();	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:133-if (qualifiedName == null) {	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:134-return null;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:136-StaticSlot<JSType> propVar = scope.getSlot(qualifiedName);	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:137-JSType propVarType = null;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:138-if (propVar != null) {	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:139-propVarType = propVar.getType();	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:141-if (propVarType == null) {	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:142-propVarType = node.getJSType();	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:144-if (propVarType == null) {	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:145-propVarType = getNativeType(UNKNOWN_TYPE);	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:147-return propVarType;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:160-scope.inferSlotType(node.getString(), type);	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:161-break;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:164-String qualifiedName = node.getQualifiedName();	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:165-Preconditions.checkNotNull(qualifiedName);	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:167-JSType origType = node.getJSType();	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:168-origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:169-scope.inferQualifiedSlot(node, qualifiedName, origType, type);	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:170-break;	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:178-}	0
com.google.javascript.jscomp.type.ChainableReverseAbstractInterpreter:628-return type == null ? null : type.visit(restrictUndefinedVisitor);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:219-Node value = callTarget.getNext();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:220-if (value != null) {	1
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:221-Node addition = IR.add(	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:224-n.getParent().replaceChild(n, addition);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:225-reportCodeChange();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:226-return addition;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:1410-return n;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:144-result = tryFoldSimpleFunctionCall(node);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:145-if (result == node) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:146-result = tryFoldImmediateCallToBoundFunction(node);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:209-Preconditions.checkState(n.isCall());	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:210-Node callTarget = n.getFirstChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:211-if (callTarget != null && callTarget.isName() &&	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:229-return n;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:234-Preconditions.checkState(n.isCall());	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:235-Node callTarget = n.getFirstChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:236-Bind bind = getCodingConvention().describeFunctionBind(callTarget, false);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:237-if (bind != null) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:260-return n;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:142-Node result =tryFoldLiteralConstructor(node);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:143-if (result == node) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:149-return result;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:1364-Preconditions.checkArgument(n.isCall()	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:1367-Node constructorNameNode = n.getFirstChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:1369-Node newLiteralNode = null;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:1375-if (isASTNormalized() && Token.NAME == constructorNameNode.getType()) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:155-return tryReplaceUndefined(node);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:398-if (isASTNormalized()	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:406-return n;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:68-PeepholeSubstituteAlternateSyntax(boolean late) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:46-private final int STRING_SPLIT_OVERHEAD = ".split('.')".length();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:69-this.late = late;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:70-}	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:78-switch(node.getType()) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:158-return tryReplaceIf(node);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:164-return node; //Nothing changed	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:304-for (Node child = n.getFirstChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:305-child != null; child = child.getNext()){	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:306-if (child.isIf()){	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:372-return n;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:40-private static final int AND_PRECEDENCE = NodeUtil.precedence(Token.AND);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:41-private static final int OR_PRECEDENCE = NodeUtil.precedence(Token.OR);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:42-private static final int NOT_PRECEDENCE = NodeUtil.precedence(Token.NOT);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:48-static final DiagnosticType INVALID_REGULAR_EXPRESSION_FLAGS =	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:53-static final Predicate<Node> DONT_TRAVERSE_FUNCTIONS_PREDICATE	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:1325-private static final ImmutableSet<String> STANDARD_OBJECT_CONSTRUCTORS =	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:1601-private static final Pattern REGEXP_FLAGS_RE = Pattern.compile("^[gmi]*$");	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:80-Node result = tryRemoveRedundantExit(node);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:81-if (result != node) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:82-return result;	0
com.google.javascript.jscomp.CheckSideEffects:134-msg = "Is there a missing '+' on the previous line?";	0
com.google.javascript.jscomp.CheckSideEffects:115-return;	0
com.google.javascript.jscomp.CheckSideEffects:118-for (Node an : parent.getAncestors()) {	0
com.google.javascript.jscomp.CheckSideEffects:119-int ancestorType = an.getType();	0
com.google.javascript.jscomp.CheckSideEffects:120-if (ancestorType == Token.COMMA) continue;	0
com.google.javascript.jscomp.CheckSideEffects:121-if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK) return;	0
com.google.javascript.jscomp.CheckSideEffects:91-return;	0
com.google.javascript.jscomp.CheckSideEffects:114-if (isResultUsed) {	0
com.google.javascript.jscomp.CheckSideEffects:117-if (n == parent.getLastChild()) {	0
com.google.javascript.jscomp.CheckSideEffects:136-msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +	0
com.google.javascript.jscomp.CheckSideEffects:58-boolean protectSideEffectFreeCode) {	0
com.google.javascript.jscomp.CheckSideEffects:51-private final List<Node> problemNodes = Lists.newArrayList();	0
com.google.javascript.jscomp.CheckSideEffects:59-this.compiler = compiler;	0
com.google.javascript.jscomp.CheckSideEffects:60-this.level = level;	0
com.google.javascript.jscomp.CheckSideEffects:61-this.protectSideEffectFreeCode = protectSideEffectFreeCode;	0
com.google.javascript.jscomp.CheckSideEffects:62-}	0
com.google.javascript.jscomp.CheckSideEffects:43-static final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning(	0
com.google.javascript.jscomp.CheckSideEffects:66-NodeTraversal.traverse(compiler, root, this);	0
com.google.javascript.jscomp.CheckSideEffects:73-if (protectSideEffectFreeCode) {	0
com.google.javascript.jscomp.CheckSideEffects:74-protectSideEffects();	0
com.google.javascript.jscomp.CheckSideEffects:76-}	0
com.google.javascript.jscomp.CheckSideEffects:89-if (n.isEmpty() ||	0
com.google.javascript.jscomp.CheckSideEffects:94-if (parent == null) {	0
com.google.javascript.jscomp.CheckSideEffects:95-return;	0
com.google.javascript.jscomp.CheckSideEffects:101-if (n.isExprResult()) {	1
com.google.javascript.jscomp.CheckSideEffects:102-return;	0
com.google.javascript.jscomp.CheckSideEffects:107-if (n.isQualifiedName() && n.getJSDocInfo() != null) {	0
com.google.javascript.jscomp.CheckSideEffects:111-boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);	0
com.google.javascript.jscomp.CheckSideEffects:112-boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());	0
com.google.javascript.jscomp.CheckSideEffects:113-if (parent.getType() == Token.COMMA) {	1
com.google.javascript.jscomp.CheckSideEffects:125-} else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {	0
com.google.javascript.jscomp.CheckSideEffects:126-if (! (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() || n == parent.getFirstChild().getNext().getNext()))) {	0
com.google.javascript.jscomp.CheckSideEffects:127-return;	0
com.google.javascript.jscomp.CheckSideEffects:130-if (	0
com.google.javascript.jscomp.CheckSideEffects:132-String msg = "This code lacks side-effects. Is there a bug?";	0
com.google.javascript.jscomp.CheckSideEffects:133-if (n.isString()) {	0
com.google.javascript.jscomp.CheckSideEffects:135-} else if (isSimpleOp) {	0
com.google.javascript.jscomp.CheckSideEffects:140-t.getCompiler().report(	0
com.google.javascript.jscomp.CheckSideEffects:144-if (!NodeUtil.isStatement(n)) {	0
com.google.javascript.jscomp.CheckSideEffects:145-problemNodes.add(n);	0
com.google.javascript.jscomp.CheckSideEffects:148-}	0
com.google.javascript.jscomp.CheckSideEffects:156-if (!problemNodes.isEmpty()) {	0
com.google.javascript.jscomp.CheckSideEffects:157-addExtern();	0
com.google.javascript.jscomp.CheckSideEffects:158-for (Node n : problemNodes) {	0
com.google.javascript.jscomp.CheckSideEffects:159-Node name = IR.name(PROTECTOR_FN).srcref(n);	0
com.google.javascript.jscomp.CheckSideEffects:160-name.putBooleanProp(Node.IS_CONSTANT_NAME, true);	0
com.google.javascript.jscomp.CheckSideEffects:161-Node replacement = IR.call(name).srcref(n);	0
com.google.javascript.jscomp.CheckSideEffects:162-replacement.putBooleanProp(Node.FREE_CALL, true);	0
com.google.javascript.jscomp.CheckSideEffects:163-n.getParent().replaceChild(n, replacement);	0
com.google.javascript.jscomp.CheckSideEffects:164-replacement.addChildToBack(n);	0
com.google.javascript.jscomp.CheckSideEffects:115-continue;	0
com.google.javascript.jscomp.CheckSideEffects:141-msg = "Is there a missing '+' on the previous line?";	0
com.google.javascript.jscomp.CheckSideEffects:91-return;	0
com.google.javascript.jscomp.CheckSideEffects:102-Node gramps = parent.getParent();	0
com.google.javascript.jscomp.CheckSideEffects:103-if (gramps.isCall() && parent == gramps.getFirstChild()) {	0
com.google.javascript.jscomp.CheckSideEffects:111-if (n == parent.getLastChild()) {	1
com.google.javascript.jscomp.CheckSideEffects:112-for (Node an : parent.getAncestors()) {	0
com.google.javascript.jscomp.CheckSideEffects:113-int ancestorType = an.getType();	0
com.google.javascript.jscomp.CheckSideEffects:114-if (ancestorType == Token.COMMA)	0
com.google.javascript.jscomp.CheckSideEffects:116-if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)	0
com.google.javascript.jscomp.CheckSideEffects:117-return;	0
com.google.javascript.jscomp.CheckSideEffects:143-msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +	0
com.google.javascript.jscomp.CheckSideEffects:58-boolean protectSideEffectFreeCode) {	0
com.google.javascript.jscomp.CheckSideEffects:51-private final List<Node> problemNodes = Lists.newArrayList();	0
com.google.javascript.jscomp.CheckSideEffects:59-this.compiler = compiler;	0
com.google.javascript.jscomp.CheckSideEffects:60-this.level = level;	0
com.google.javascript.jscomp.CheckSideEffects:61-this.protectSideEffectFreeCode = protectSideEffectFreeCode;	0
com.google.javascript.jscomp.CheckSideEffects:62-}	0
com.google.javascript.jscomp.CheckSideEffects:43-static final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning(	0
com.google.javascript.jscomp.CheckSideEffects:66-NodeTraversal.traverse(compiler, root, this);	0
com.google.javascript.jscomp.CheckSideEffects:73-if (protectSideEffectFreeCode) {	0
com.google.javascript.jscomp.CheckSideEffects:74-protectSideEffects();	0
com.google.javascript.jscomp.CheckSideEffects:76-}	0
com.google.javascript.jscomp.CheckSideEffects:89-if (n.isEmpty() ||	0
com.google.javascript.jscomp.CheckSideEffects:94-if (parent == null) {	0
com.google.javascript.jscomp.CheckSideEffects:95-return;	0
com.google.javascript.jscomp.CheckSideEffects:101-if (parent.getType() == Token.COMMA) {	1
com.google.javascript.jscomp.CheckSideEffects:122-} else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {	0
com.google.javascript.jscomp.CheckSideEffects:123-if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||	0
com.google.javascript.jscomp.CheckSideEffects:126-return;	0
com.google.javascript.jscomp.CheckSideEffects:130-boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);	0
com.google.javascript.jscomp.CheckSideEffects:131-boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());	0
com.google.javascript.jscomp.CheckSideEffects:132-if (!isResultUsed &&	0
com.google.javascript.jscomp.CheckSideEffects:134-if (n.isQualifiedName() && n.getJSDocInfo() != null) {	1
com.google.javascript.jscomp.CheckSideEffects:136-} else if (n.isExprResult()) {	0
com.google.javascript.jscomp.CheckSideEffects:139-String msg = "This code lacks side-effects. Is there a bug?";	0
com.google.javascript.jscomp.CheckSideEffects:140-if (n.isString()) {	0
com.google.javascript.jscomp.CheckSideEffects:142-} else if (isSimpleOp) {	0
com.google.javascript.jscomp.CheckSideEffects:147-t.getCompiler().report(	0
com.google.javascript.jscomp.CheckSideEffects:151-if (!NodeUtil.isStatement(n)) {	0
com.google.javascript.jscomp.CheckSideEffects:152-problemNodes.add(n);	0
com.google.javascript.jscomp.CheckSideEffects:155-}	0
com.google.javascript.jscomp.CheckSideEffects:163-if (!problemNodes.isEmpty()) {	0
com.google.javascript.jscomp.CheckSideEffects:164-addExtern();	0
com.google.javascript.jscomp.CheckSideEffects:165-for (Node n : problemNodes) {	0
com.google.javascript.jscomp.CheckSideEffects:166-Node name = IR.name(PROTECTOR_FN).srcref(n);	0
com.google.javascript.jscomp.CheckSideEffects:167-name.putBooleanProp(Node.IS_CONSTANT_NAME, true);	0
com.google.javascript.jscomp.CheckSideEffects:168-Node replacement = IR.call(name).srcref(n);	0
com.google.javascript.jscomp.CheckSideEffects:169-replacement.putBooleanProp(Node.FREE_CALL, true);	0
com.google.javascript.jscomp.CheckSideEffects:170-n.getParent().replaceChild(n, replacement);	0
com.google.javascript.jscomp.PeepholeFoldConstants:1431-if (!right.isNumber()) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:1437-double index = right.getDouble();	0
com.google.javascript.jscomp.PeepholeFoldConstants:1438-int intIndex = (int) index;	0
com.google.javascript.jscomp.PeepholeFoldConstants:1439-if (intIndex != index) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:1444-if (intIndex < 0) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:1449-Node current = left.getFirstChild();	0
com.google.javascript.jscomp.PeepholeFoldConstants:1450-Node elem = null;	0
com.google.javascript.jscomp.PeepholeFoldConstants:1451-for (int i = 0; current != null && i < intIndex; i++) {	1
com.google.javascript.jscomp.PeepholeFoldConstants:1457-if (elem == null) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:1458-error(INDEX_OUT_OF_BOUNDS_ERROR, right);	0
com.google.javascript.jscomp.PeepholeFoldConstants:1459-return n;	0
com.google.javascript.jscomp.PeepholeFoldConstants:1364-return tryFoldArrayAccess(n, left, right);	0
com.google.javascript.jscomp.PeepholeFoldConstants:1423-Node parent = n.getParent();	0
com.google.javascript.jscomp.PeepholeFoldConstants:1427-if (isAssignmentTarget(n)) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:1363-if (left.isArrayLit()) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:118-return tryFoldGetElem(subtree, left, right);	0
com.google.javascript.jscomp.PeepholeFoldConstants:1357-Preconditions.checkArgument(n.isGetElem());	0
com.google.javascript.jscomp.PeepholeFoldConstants:1359-if (left.isObjectLit()) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:1419-return false;	0
com.google.javascript.jscomp.PeepholeFoldConstants:1410-Node parent = n.getParent();	0
com.google.javascript.jscomp.PeepholeFoldConstants:1411-if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)	0
com.google.javascript.jscomp.PeepholeFoldConstants:177-return subtree;	0
com.google.javascript.jscomp.PeepholeFoldConstants:462-return n;	0
com.google.javascript.jscomp.PeepholeFoldConstants:133-return tryFoldAssign(subtree, left, right);	0
com.google.javascript.jscomp.PeepholeFoldConstants:459-Preconditions.checkArgument(n.isAssign());	0
com.google.javascript.jscomp.PeepholeFoldConstants:461-if (!late) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:113-switch(subtree.getType()) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:70-PeepholeFoldConstants(boolean late) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:71-this.late = late;	0
com.google.javascript.jscomp.PeepholeFoldConstants:72-}	0
com.google.javascript.jscomp.PeepholeFoldConstants:32-static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =	0
com.google.javascript.jscomp.PeepholeFoldConstants:37-static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =	0
com.google.javascript.jscomp.PeepholeFoldConstants:42-static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =	0
com.google.javascript.jscomp.PeepholeFoldConstants:47-static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =	0
com.google.javascript.jscomp.PeepholeFoldConstants:52-static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(	0
com.google.javascript.jscomp.PeepholeFoldConstants:56-static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(	0
com.google.javascript.jscomp.PeepholeFoldConstants:60-private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);	0
com.google.javascript.jscomp.PeepholeFoldConstants:76-switch(subtree.getType()) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:94-tryReduceOperandsForOp(subtree);	0
com.google.javascript.jscomp.PeepholeFoldConstants:95-return tryFoldBinaryOperator(subtree);	0
com.google.javascript.jscomp.PeepholeFoldConstants:100-Node left = subtree.getFirstChild();	0
com.google.javascript.jscomp.PeepholeFoldConstants:102-if (left == null) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:103-return subtree;	0
com.google.javascript.jscomp.PeepholeFoldConstants:106-Node right = left.getNext();	0
com.google.javascript.jscomp.PeepholeFoldConstants:108-if (right == null) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:109-return subtree;	0
com.google.javascript.jscomp.PeepholeFoldConstants:193-switch (n.getType()) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:230-}	0
com.google.javascript.jscomp.PeepholeFoldConstants:78-return tryFoldCtorCall(subtree);	0
com.google.javascript.jscomp.PeepholeFoldConstants:81-return tryFoldTypeof(subtree);	0
com.google.javascript.jscomp.ScopedAliases:127-Node expressionWithScopeCall = scopeCall.getParent();	0
com.google.javascript.jscomp.ScopedAliases:128-Node scopeClosureBlock = scopeCall.getLastChild().getLastChild();	0
com.google.javascript.jscomp.ScopedAliases:129-scopeClosureBlock.detachFromParent();	0
com.google.javascript.jscomp.ScopedAliases:130-expressionWithScopeCall.getParent().replaceChild(	0
com.google.javascript.jscomp.ScopedAliases:133-NodeUtil.tryMergeBlock(scopeClosureBlock);	0
com.google.javascript.jscomp.ScopedAliases:134-}	0
com.google.javascript.jscomp.ScopedAliases:139-compiler.reportCodeChange();	0
com.google.javascript.jscomp.ScopedAliases:111-for (AliasUsage aliasUsage : traversal.getAliasUsages()) {	0
com.google.javascript.jscomp.ScopedAliases:116-for (Node aliasDefinition : traversal.getAliasDefinitionsInOrder()) {	0
com.google.javascript.jscomp.ScopedAliases:126-for (Node scopeCall : traversal.getScopeCalls()) {	0
com.google.javascript.jscomp.ScopedAliases:136-if (traversal.getAliasUsages().size() > 0 ||	0
com.google.javascript.jscomp.ScopedAliases:92-AliasTransformationHandler transformationHandler) {	0
com.google.javascript.jscomp.ScopedAliases:93-this.compiler = compiler;	0
com.google.javascript.jscomp.ScopedAliases:94-this.preprocessorSymbolTable = preprocessorSymbolTable;	0
com.google.javascript.jscomp.ScopedAliases:95-this.transformationHandler = transformationHandler;	0
com.google.javascript.jscomp.ScopedAliases:96-}	0
com.google.javascript.jscomp.ScopedAliases:60-static final DiagnosticType GOOG_SCOPE_USED_IMPROPERLY = DiagnosticType.error(	0
com.google.javascript.jscomp.ScopedAliases:64-static final DiagnosticType GOOG_SCOPE_HAS_BAD_PARAMETERS =	0
com.google.javascript.jscomp.ScopedAliases:70-static final DiagnosticType GOOG_SCOPE_REFERENCES_THIS = DiagnosticType.error(	0
com.google.javascript.jscomp.ScopedAliases:74-static final DiagnosticType GOOG_SCOPE_USES_RETURN = DiagnosticType.error(	0
com.google.javascript.jscomp.ScopedAliases:78-static final DiagnosticType GOOG_SCOPE_USES_THROW = DiagnosticType.error(	0
com.google.javascript.jscomp.ScopedAliases:82-static final DiagnosticType GOOG_SCOPE_ALIAS_REDEFINED = DiagnosticType.error(	0
com.google.javascript.jscomp.ScopedAliases:86-static final DiagnosticType GOOG_SCOPE_NON_ALIAS_LOCAL = DiagnosticType.error(	0
com.google.javascript.jscomp.ScopedAliases:100-hotSwapScript(root, null);	0
com.google.javascript.jscomp.ScopedAliases:101-}	0
com.google.javascript.jscomp.ScopedAliases:105-Traversal traversal = new Traversal();	0
com.google.javascript.jscomp.ScopedAliases:106-NodeTraversal.traverse(compiler, root, traversal);	0
com.google.javascript.jscomp.ScopedAliases:108-if (!traversal.hasErrors()) {	0
com.google.javascript.jscomp.ScopedAliases:142-}	0
com.google.javascript.jscomp.ScopedAliases:112-aliasUsage.applyAlias();	0
com.google.javascript.jscomp.ScopedAliases:113-}	0
com.google.javascript.jscomp.ScopedAliases:117-if (aliasDefinition.getParent().isVar() &&	0
com.google.javascript.jscomp.ScopedAliases:119-aliasDefinition.getParent().detachFromParent();	0
com.google.javascript.jscomp.ScopedAliases:121-aliasDefinition.detachFromParent();	0
com.google.javascript.jscomp.ScopedAliases:123-}	0
com.google.javascript.jscomp.TypeInference:1060-scope = traverse(arg, scope);	0
com.google.javascript.jscomp.TypeInference:288-scope = traverseNew(n, scope);	0
com.google.javascript.jscomp.TypeInference:289-break;	0
com.google.javascript.jscomp.TypeInference:1037-Node constructor = n.getFirstChild();	0
com.google.javascript.jscomp.TypeInference:1038-scope = traverse(constructor, scope);	0
com.google.javascript.jscomp.TypeInference:1039-JSType constructorType = constructor.getJSType();	0
com.google.javascript.jscomp.TypeInference:1040-JSType type = null;	0
com.google.javascript.jscomp.TypeInference:1041-if (constructorType != null) {	0
com.google.javascript.jscomp.TypeInference:1042-constructorType = constructorType.restrictByNotNullOrUndefined();	0
com.google.javascript.jscomp.TypeInference:1043-if (constructorType.isUnknownType()) {	0
com.google.javascript.jscomp.TypeInference:1046-FunctionType ct = constructorType.toMaybeFunctionType();	0
com.google.javascript.jscomp.TypeInference:1047-if (ct == null && constructorType instanceof FunctionType) {	0
com.google.javascript.jscomp.TypeInference:1053-if (ct != null && ct.isConstructor()) {	0
com.google.javascript.jscomp.TypeInference:1054-type = ct.getInstanceType();	0
com.google.javascript.jscomp.TypeInference:1058-n.setJSType(type);	0
com.google.javascript.jscomp.TypeInference:1059-for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {	1
com.google.javascript.jscomp.TypeInference:1062-return scope;	0
com.google.javascript.jscomp.TypeInference:280-scope = traverseObjectLiteral(n, scope);	0
com.google.javascript.jscomp.TypeInference:281-break;	0
com.google.javascript.jscomp.TypeInference:649-JSType type = n.getJSType();	0
com.google.javascript.jscomp.TypeInference:650-Preconditions.checkNotNull(type);	0
com.google.javascript.jscomp.TypeInference:652-for (Node name = n.getFirstChild(); name != null; name = name.getNext()) {	0
com.google.javascript.jscomp.TypeInference:662-ObjectType objectType = ObjectType.cast(type);	0
com.google.javascript.jscomp.TypeInference:663-if (objectType == null) {	0
com.google.javascript.jscomp.TypeInference:667-boolean hasLendsName = n.getJSDocInfo() != null &&	0
com.google.javascript.jscomp.TypeInference:669-if (objectType.hasReferenceName() && !hasLendsName) {	0
com.google.javascript.jscomp.TypeInference:673-String qObjName = NodeUtil.getBestLValueName(	0
com.google.javascript.jscomp.TypeInference:675-for (Node name = n.getFirstChild(); name != null;	0
com.google.javascript.jscomp.TypeInference:706-return scope;	0
com.google.javascript.jscomp.TypeInference:605-scope = traverse(value, scope);	0
com.google.javascript.jscomp.TypeInference:606-updateScopeForTypeChange(scope, n, n.getJSType() /* could be null */,	0
com.google.javascript.jscomp.TypeInference:608-return scope;	0
com.google.javascript.jscomp.TypeInference:106-this.functionScope.inferSlotType(	0
com.google.javascript.jscomp.TypeInference:108-}	0
com.google.javascript.jscomp.TypeInference:101-Var var = varIt.next();	0
com.google.javascript.jscomp.TypeInference:102-if (isUnflowable(var)) {	0
com.google.javascript.jscomp.TypeInference:389-scope = traverseChildren(n, scope);	0
com.google.javascript.jscomp.TypeInference:390-break;	0
com.google.javascript.jscomp.TypeInference:491-JSType oldType = var.getType();	0
com.google.javascript.jscomp.TypeInference:492-var.setType(oldType == null ?	0
com.google.javascript.jscomp.TypeInference:494-}	0
com.google.javascript.jscomp.TypeInference:373-scope = traverseChildren(n, scope);	0
com.google.javascript.jscomp.TypeInference:374-if (n.getFirstChild().isGetProp()) {	0
com.google.javascript.jscomp.TypeInference:617-boolean isInferred = var.isTypeInferred();	0
com.google.javascript.jscomp.TypeInference:618-boolean unflowable = isInferred &&	0
com.google.javascript.jscomp.TypeInference:624-boolean nonLocalInferredSlot =	0
com.google.javascript.jscomp.TypeInference:629-if (!unflowable && !nonLocalInferredSlot) {	0
com.google.javascript.jscomp.TypeInference:630-type = var.getType();	0
com.google.javascript.jscomp.TypeInference:631-if (type == null) {	0
com.google.javascript.jscomp.TypeInference:1398-return registry.getNativeType(typeId);	0
com.google.javascript.jscomp.ProcessCommonJSModules:65-NodeTraversal	0
com.google.javascript.jscomp.ProcessCommonJSModules:67-}	0
com.google.javascript.jscomp.ProcessCommonJSModules:56-boolean reportDependencies) {	0
com.google.javascript.jscomp.ProcessCommonJSModules:57-this.compiler = compiler;	0
com.google.javascript.jscomp.ProcessCommonJSModules:58-this.filenamePrefix = filenamePrefix.endsWith(File.separator) ?	0
com.google.javascript.jscomp.ProcessCommonJSModules:60-this.reportDependencies = reportDependencies;	0
com.google.javascript.jscomp.ProcessCommonJSModules:61-}	0
com.google.javascript.jscomp.ProcessCommonJSModules:41-public static final String DEFAULT_FILENAME_PREFIX = "." + File.separator;	0
com.google.javascript.jscomp.ProcessCommonJSModules:70-return toModuleName(normalizeSourceName(filename));	0
com.google.javascript.jscomp.ProcessCommonJSModules:87-return MODULE_NAME_PREFIX +	0
com.google.javascript.jscomp.ProcessCommonJSModules:115-if (filename.indexOf(filenamePrefix) == 0) {	0
com.google.javascript.jscomp.ProcessCommonJSModules:118-return filename;	0
com.google.javascript.jscomp.ProcessCommonJSModules:99-requiredFilename = requiredFilename.replaceAll("\\.js$", "");	0
com.google.javascript.jscomp.ProcessCommonJSModules:100-currentFilename = currentFilename.replaceAll("\\.js$", "");	0
com.google.javascript.jscomp.ProcessCommonJSModules:102-if (requiredFilename.startsWith("." + File.separator) ||	0
com.google.javascript.jscomp.ProcessCommonJSModules:111-return toModuleName(requiredFilename);	0
com.google.javascript.jscomp.ProcessCommonJSModules:105-requiredFilename = (new URI(currentFilename)).resolve(new URI(requiredFilename))	0
com.google.javascript.jscomp.ProcessCommonJSModules:109-}	0
com.google.javascript.jscomp.ProcessCommonJSModules:52-this(compiler, filenamePrefix, true);	0
com.google.javascript.jscomp.ProcessCommonJSModules:53-}	0
com.google.javascript.jscomp.ProcessCommonJSModules:78-return module;	0
com.google.javascript.jscomp.ProcessCommonJSModules:107-} catch (URISyntaxException e) {	0
com.google.javascript.jscomp.ProcessCommonJSModules:108-throw new RuntimeException(e);	0
com.google.javascript.jscomp.ProcessCommonJSModules:116-filename = filename.substring(filenamePrefix.length());	0
com.google.javascript.rhino.IR:92-Node block = new Node(Token.BLOCK);	0
com.google.javascript.rhino.IR:93-return block;	0
com.google.javascript.rhino.IR:97-Preconditions.checkState(mayBeStatement(stmt));	0
com.google.javascript.rhino.IR:231-Preconditions.checkState(tryBody.isBlock());	0
com.google.javascript.rhino.IR:232-Preconditions.checkState(catchNode.isCatch());	0
com.google.javascript.rhino.IR:233-Node catchBody = block(catchNode).copyInformationFrom(catchNode);	1
com.google.javascript.rhino.IR:246-Preconditions.checkState(expr.isName());	0
com.google.javascript.rhino.IR:247-Preconditions.checkState(body.isBlock());	0
com.google.javascript.rhino.IR:248-return new Node(Token.CATCH, expr, body);	0
com.google.javascript.rhino.IR:293-return Node.newString(Token.NAME, name);	0
com.google.javascript.rhino.IR:474-switch (n.getType()) {	0
com.google.javascript.rhino.IR:501-return false;	0
com.google.javascript.rhino.IR:224-Preconditions.checkState(tryBody.isLabelName());	1
com.google.javascript.rhino.IR:239-Preconditions.checkState(finallyBody.isBlock());	0
com.google.javascript.rhino.IR:240-Node tryNode = tryCatch(tryBody, catchNode);	0
com.google.javascript.rhino.IR:51-private IR() {}	0
com.google.javascript.rhino.IR:54-return new Node(Token.EMPTY);	0
com.google.javascript.rhino.IR:58-Preconditions.checkState(name.isName());	0
com.google.javascript.rhino.IR:59-Preconditions.checkState(params.isParamList());	0
com.google.javascript.rhino.IR:60-Preconditions.checkState(body.isBlock());	0
com.google.javascript.rhino.IR:61-return new Node(Token.FUNCTION, name, params, body);	0
com.google.javascript.rhino.IR:65-return new Node(Token.PARAM_LIST);	0
com.google.javascript.rhino.IR:69-Preconditions.checkState(param.isName());	0
com.google.javascript.rhino.IR:70-return new Node(Token.PARAM_LIST, param);	0
com.google.javascript.rhino.IR:74-Node paramList = paramList();	0
com.google.javascript.rhino.IR:75-for (Node param : params) {	0
com.google.javascript.rhino.IR:76-Preconditions.checkState(param.isName());	0
com.google.javascript.rhino.IR:77-paramList.addChildToBack(param);	0
com.google.javascript.rhino.IR:79-return paramList;	0
com.google.javascript.rhino.IR:83-Node paramList = paramList();	0
com.google.javascript.rhino.IR:84-for (Node param : params) {	0
com.google.javascript.rhino.IR:85-Preconditions.checkState(param.isName());	0
com.google.javascript.rhino.IR:86-paramList.addChildToBack(param);	0
com.google.javascript.rhino.IR:87-}	0
com.google.javascript.rhino.IR:88-return paramList;	0
com.google.javascript.rhino.IR:98-Node block = new Node(Token.BLOCK, stmt);	0
com.google.javascript.rhino.IR:99-return block;	0
com.google.javascript.rhino.IR:103-Node block = new Node(Token.BLOCK);	0
com.google.javascript.rhino.IR:104-for (Node stmt : stmts) {	0
com.google.javascript.rhino.IR:105-Preconditions.checkState(mayBeStatement(stmt));	0
com.google.javascript.rhino.IR:106-block.addChildToBack(stmt);	0
com.google.javascript.rhino.IR:108-return block;	0
com.google.javascript.rhino.IR:114-Node block = new Node(Token.SCRIPT);	0
com.google.javascript.rhino.IR:115-for (Node stmt : stmts) {	0
com.google.javascript.rhino.IR:116-Preconditions.checkState(mayBeStatement(stmt));	0
com.google.javascript.rhino.IR:117-block.addChildToBack(stmt);	0
com.google.javascript.rhino.IR:119-return block;	0
com.google.javascript.rhino.IR:123-Preconditions.checkState(name.isName() && !name.hasChildren());	0
com.google.javascript.rhino.IR:124-Preconditions.checkState(mayBeExpression(value));	0
com.google.javascript.rhino.IR:125-name.addChildToFront(value);	0
com.google.javascript.jscomp.InlineCostEstimator:39-return getCost(root, Integer.MAX_VALUE);	0
com.google.javascript.jscomp.InlineCostEstimator:46-CompiledSizeEstimator estimator = new CompiledSizeEstimator(costThreshhold);	0
com.google.javascript.jscomp.InlineCostEstimator:47-estimator.add(root);	0
com.google.javascript.jscomp.InlineCostEstimator:48-return estimator.getCost();	0
com.google.javascript.jscomp.InlineCostEstimator:30-static final int ESTIMATED_IDENTIFIER_COST = ESTIMATED_IDENTIFIER.length();	0
com.google.javascript.jscomp.InlineCostEstimator:32-private InlineCostEstimator() {	0
com.google.javascript.jscomp.InlineCostEstimator:33-}	0
com.google.javascript.jscomp.InlineObjectLiterals:58-Supplier<String> safeNameIdSupplier) {	0
com.google.javascript.jscomp.InlineObjectLiterals:59-this.compiler = compiler;	0
com.google.javascript.jscomp.InlineObjectLiterals:60-this.safeNameIdSupplier = safeNameIdSupplier;	0
com.google.javascript.jscomp.InlineObjectLiterals:61-}	0
com.google.javascript.jscomp.InlineObjectLiterals:65-ReferenceCollectingCallback callback = new ReferenceCollectingCallback(	0
com.google.javascript.jscomp.InlineObjectLiterals:67-callback.process(externs, root);	0
com.google.javascript.jscomp.InlineObjectLiterals:68-}	0
com.google.javascript.jscomp.MustBeReachingVariableDef:435-}	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:484-cur = cur.getNext()) {	0
com.google.javascript.jscomp.MustBeReachingVariableDef:432-if (s.scope != jsScope) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:485-if (predicate.apply(cur)) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:147-c.inlineVariable();	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:464-if (predicate.apply(cur)) {	0
com.google.javascript.jscomp.MustBeReachingVariableDef:342-def.reachingDef.put(other, null);	0
com.google.javascript.jscomp.MustBeReachingVariableDef:258-computeMustDef(n.getFirstChild(), cfgNode, output, conditional);	0
com.google.javascript.jscomp.MustBeReachingVariableDef:259-computeMustDef(n.getLastChild(), cfgNode, output, true);	0
com.google.javascript.jscomp.MustBeReachingVariableDef:260-return;	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:483-for (Node cur = p.getParent().getFirstChild(); cur != p;	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:490-return false;	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:469-return false;	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:482-for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:462-for (Node p = n; p != expressionRoot; p = p.getParent()) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:463-for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) {	0
com.google.javascript.jscomp.MustBeReachingVariableDef:333-return;	0
com.google.javascript.jscomp.MustBeReachingVariableDef:271-computeMustDef(c.getFirstChild(), cfgNode, output, conditional);	0
com.google.javascript.jscomp.MustBeReachingVariableDef:272-addToDefIfLocal(c.getString(), conditional ? null : cfgNode,	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:146-if (c.canInline()) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:149-}	0
com.google.javascript.jscomp.MustBeReachingVariableDef:436-return false;	0
com.google.javascript.jscomp.MustBeReachingVariableDef:421-return def.node;	0
com.google.javascript.jscomp.MustBeReachingVariableDef:426-Preconditions.checkArgument(getCfg().hasNode(useNode));	0
com.google.javascript.jscomp.MustBeReachingVariableDef:427-GraphNode<Node, Branch> n = getCfg().getNode(useNode);	0
com.google.javascript.jscomp.MustBeReachingVariableDef:428-FlowState<MustDef> state = n.getAnnotation();	0
com.google.javascript.jscomp.MustBeReachingVariableDef:429-Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));	0
com.google.javascript.jscomp.MustBeReachingVariableDef:431-for (Var s : def.depends) {	0
com.google.javascript.jscomp.MustBeReachingVariableDef:419-return null;	0
com.google.javascript.jscomp.MustBeReachingVariableDef:414-Preconditions.checkArgument(getCfg().hasNode(useNode));	0
com.google.javascript.jscomp.MustBeReachingVariableDef:415-GraphNode<Node, Branch> n = getCfg().getNode(useNode);	0
com.google.javascript.jscomp.MustBeReachingVariableDef:416-FlowState<MustDef> state = n.getAnnotation();	0
com.google.javascript.jscomp.MustBeReachingVariableDef:417-Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));	0
com.google.javascript.jscomp.MustBeReachingVariableDef:418-if (def == null) {	0
com.google.javascript.jscomp.MustBeReachingVariableDef:347-if (node == null) {	0
com.google.javascript.jscomp.MustBeReachingVariableDef:350-Definition definition = new Definition(node);	0
com.google.javascript.jscomp.MustBeReachingVariableDef:351-if (rValue != null) {	0
com.google.javascript.jscomp.MustBeReachingVariableDef:352-computeDependence(definition, rValue);	0
com.google.javascript.jscomp.MustBeReachingVariableDef:354-def.reachingDef.put(var, definition);	0
com.google.javascript.jscomp.MustBeReachingVariableDef:392-NodeTraversal.traverse(compiler, rValue,	0
com.google.javascript.jscomp.MustBeReachingVariableDef:402-}	0
com.google.javascript.jscomp.MustBeReachingVariableDef:269-for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {	0
com.google.javascript.jscomp.MustBeReachingVariableDef:270-if (c.hasChildren()) {	0
com.google.javascript.jscomp.MustBeReachingVariableDef:276-return;	0
com.google.javascript.jscomp.MustBeReachingVariableDef:314-computeMustDef(c, cfgNode, output, conditional);	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:111-public FlowSensitiveInlineVariables(AbstractCompiler compiler) {	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:112-this.compiler = compiler;	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:113-}	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:81-private static final Predicate<Node> SIDE_EFFECT_PREDICATE =	0
com.google.javascript.jscomp.FlowSensitiveInlineVariables:118-if (t.inGlobalScope()) {	0
com.google.javascript.jscomp.Compiler:80-static final DiagnosticType MODULE_DEPENDENCY_ERROR =	0
com.google.javascript.jscomp.Compiler:85-static final DiagnosticType MISSING_ENTRY_ERROR = DiagnosticType.error(	0
com.google.javascript.jscomp.Compiler:170-public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(	0
com.google.javascript.jscomp.Compiler:173-public static final DiagnosticType MOTION_ITERATIONS_ERROR =	0
com.google.javascript.jscomp.Compiler:185-private static final Logger logger =	0
com.google.javascript.jscomp.Compiler:397-private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =	0
com.google.javascript.jscomp.Compiler:401-private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =	0
com.google.javascript.jscomp.Compiler:472-static final DiagnosticType DUPLICATE_INPUT =	0
com.google.javascript.jscomp.Compiler:474-static final DiagnosticType DUPLICATE_EXTERN_INPUT =	0
com.google.javascript.jscomp.Compiler:198-this((PrintStream) null);	0
com.google.javascript.jscomp.Compiler:199-}	0
com.google.javascript.jscomp.Compiler:205-public Compiler(PrintStream stream) {	0
com.google.javascript.jscomp.Compiler:89-CompilerOptions options = null;	0
com.google.javascript.jscomp.Compiler:91-private PassConfig passes = null;	0
com.google.javascript.jscomp.Compiler:114-private final Map<String, Node> injectedLibraries = Maps.newLinkedHashMap();	0
com.google.javascript.jscomp.Compiler:127-private String externExports = null;	0
com.google.javascript.jscomp.Compiler:133-private int uniqueNameId = 0;	0
com.google.javascript.jscomp.Compiler:136-private boolean useThreads = true;	0
com.google.javascript.jscomp.Compiler:142-private boolean hasRegExpGlobalReferences = true;	0
com.google.javascript.jscomp.Compiler:148-private final StringBuilder debugLog = new StringBuilder();	0
com.google.javascript.jscomp.Compiler:151-CodingConvention defaultCodingConvention = new ClosureCodingConvention();	0
com.google.javascript.jscomp.Compiler:154-private Config parserConfig = null;	0
com.google.javascript.jscomp.Compiler:162-private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =	0
com.google.javascript.jscomp.Compiler:166-private final ErrorReporter defaultErrorReporter =	0
com.google.javascript.jscomp.Compiler:190-private GlobalVarReferenceMap globalRefMap = null;	0
com.google.javascript.jscomp.Compiler:192-private volatile double progress = 0.0;	0
com.google.javascript.jscomp.Compiler:809-private final PassFactory sanityCheck =	0
com.google.javascript.jscomp.Compiler:871-private Tracer currentTracer = null;	0
com.google.javascript.jscomp.Compiler:872-private String currentPassName = null;	0
com.google.javascript.jscomp.Compiler:1459-private int syntheticCodeId = 0;	0
com.google.javascript.jscomp.Compiler:1872-protected final CodeChangeHandler.RecentChange recentChange =	0
com.google.javascript.jscomp.Compiler:1874-private final List<CodeChangeHandler> codeChangeHandlers =	0
com.google.javascript.jscomp.Compiler:1880-private CompilerInput synthesizedExternsInput = null;	0
com.google.javascript.jscomp.Compiler:206-addChangeHandler(recentChange);	0
com.google.javascript.jscomp.Compiler:207-outStream = stream;	0
com.google.javascript.jscomp.Compiler:208-}	0
com.google.javascript.jscomp.Compiler:214-this();	0
com.google.javascript.jscomp.Compiler:215-setErrorManager(errorManager);	0
com.google.javascript.jscomp.Compiler:216-}	0
com.google.javascript.jscomp.Compiler:224-Preconditions.checkNotNull(	0
com.google.javascript.jscomp.Compiler:226-this.errorManager = errorManager;	0
com.google.javascript.jscomp.Compiler:227-}	0
com.google.javascript.jscomp.Compiler:234-boolean colorize = options.shouldColorizeErrorOutput();	0
com.google.javascript.jscomp.Compiler:235-return options.errorFormat.toFormatter(this, colorize);	0
com.google.javascript.jscomp.Compiler:243-this.options = options;	0
com.google.javascript.jscomp.Compiler:244-if (errorManager == null) {	0
com.google.javascript.jscomp.Compiler:245-if (outStream == null) {	0
com.google.javascript.jscomp.Compiler:246-setErrorManager(	0
com.google.javascript.jscomp.Compiler:249-PrintStreamErrorManager printer =	0
com.google.javascript.jscomp.Compiler:251-printer.setSummaryDetailLevel(options.summaryDetailLevel);	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:348-ExtractionInfo preserveInfo =	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:352-String preserve = preserveInfo.string;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:354-if (preserve.length() > 0) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:355-if (fileLevelJsDocBuilder != null) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:356-fileLevelJsDocBuilder.append(preserve);	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:360-token = preserveInfo.token;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:361-continue retry;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1378-builder.append("\n");	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1226-return stream.getString();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1414-if (builder.length() > 0) {	1
com.google.javascript.jscomp.parsing.JsDocInfoParser:1415-builder.append(' ');	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1417-builder.append(toString(token));	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1419-line = stream.getRemainingJSDocLine();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1421-if (option != WhitespaceOption.PRESERVE) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1425-builder.append(line);	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1426-token = next();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1428-} while (true);	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1173-switch (token) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1407-jsdocBuilder.markText(multilineText, startLineno, startCharno,	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1377-if (option != WhitespaceOption.SINGLE_LINE) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1381-ignoreStar = true;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1382-token = next();	1
com.google.javascript.jscomp.parsing.JsDocInfoParser:1383-continue;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1332-if (token == JsDocToken.EOC || token == JsDocToken.EOL ||	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1337-stream.update();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1338-int startLineno = stream.getLineno();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1339-int startCharno = stream.getCharno() + 1;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1342-String line = stream.getRemainingJSDocLine();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1343-if (option != WhitespaceOption.PRESERVE) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1347-StringBuilder builder = new StringBuilder();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1348-builder.append(line);	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1350-state = State.SEARCHING_ANNOTATION;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1351-token = next();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1353-boolean ignoreStar = false;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1360-switch (token) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1386-ignoreStar = false;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1387-state = State.SEARCHING_ANNOTATION;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1391-if (token == JsDocToken.EOC ||	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1397-String multilineText = builder.toString();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1399-if (option != WhitespaceOption.PRESERVE) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1403-int endLineno = stream.getLineno();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1404-int endCharno = stream.getCharno();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1406-if (multilineText.length() > 0) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1411-return new ExtractionInfo(multilineText, token);	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:108-this.fileLevelJsDocBuilder = fileLevelJsDocBuilder;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:109-}	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:2297-next();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1362-if (ignoreStar) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1373-token = next();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1374-continue;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:375-sb.append(", ");	0
com.google.javascript.rhino.jstype.PrototypeObjectType:374-if (i > 0) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:378-sb.append(property);	0
com.google.javascript.rhino.jstype.PrototypeObjectType:379-sb.append(": ");	0
com.google.javascript.rhino.jstype.PrototypeObjectType:380-sb.append(getPropertyType(property).toStringHelper(forAnnotations));	0
com.google.javascript.rhino.jstype.PrototypeObjectType:382-++i;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:383-if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:387-}	0
com.google.javascript.rhino.jstype.PrototypeObjectType:573-typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)	0
com.google.javascript.rhino.jstype.PrototypeObjectType:356-} else if (prettyPrint) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:358-prettyPrint = false;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:361-Set<String> propertyNames = Sets.newTreeSet();	0
com.google.javascript.rhino.jstype.PrototypeObjectType:362-for (ObjectType current = this;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:363-current != null && !current.isNativeObjectType() &&	0
com.google.javascript.rhino.jstype.PrototypeObjectType:366-propertyNames.addAll(current.getOwnPropertyNames());	0
com.google.javascript.rhino.jstype.PrototypeObjectType:365-current = current.getImplicitPrototype()) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:369-StringBuilder sb = new StringBuilder();	0
com.google.javascript.rhino.jstype.PrototypeObjectType:370-sb.append("{");	0
com.google.javascript.rhino.jstype.PrototypeObjectType:372-int i = 0;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:373-for (String property : propertyNames) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:389-sb.append("}");	0
com.google.javascript.rhino.jstype.PrototypeObjectType:391-prettyPrint = true;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:392-return sb.toString();	0
com.google.javascript.rhino.jstype.PrototypeObjectType:568-for (String prop : constraintObj.getOwnPropertyNames()) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:569-JSType propType = constraintObj.getPropertyType(prop);	0
com.google.javascript.rhino.jstype.PrototypeObjectType:570-if (!isPropertyTypeDeclared(prop)) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:571-JSType typeToInfer = propType;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:572-if (!hasProperty(prop)) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:576-defineInferredProperty(prop, typeToInfer, null);	0
com.google.javascript.rhino.jstype.PrototypeObjectType:578-}	0
com.google.javascript.rhino.jstype.PrototypeObjectType:245-newProp.setJSDocInfo(oldProp.getJSDocInfo());	0
com.google.javascript.rhino.jstype.PrototypeObjectType:458-return RecordType.isSubtype(this, that.toMaybeRecordType());	0
com.google.javascript.rhino.jstype.PrototypeObjectType:354-if (hasReferenceName()) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:179-return properties.keySet();	0
com.google.javascript.rhino.jstype.PrototypeObjectType:186-return false;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:567-if (constraintObj.isRecordType()) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:580-}	0
com.google.javascript.rhino.jstype.PrototypeObjectType:136-return prop;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:446-return true;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:188-return !slot.isTypeInferred();	0
com.google.javascript.rhino.jstype.PrototypeObjectType:275-return null;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:271-Property p = properties.get(propertyName);	0
com.google.javascript.rhino.jstype.PrototypeObjectType:272-if (p != null) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:273-return p.getJSDocInfo();	0
com.google.javascript.rhino.jstype.PrototypeObjectType:280-if (info != null) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:281-if (!properties.containsKey(propertyName)) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:291-Property property = properties.get(propertyName);	0
com.google.javascript.rhino.jstype.PrototypeObjectType:292-if (property != null) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:293-property.setJSDocInfo(info);	0
com.google.javascript.rhino.jstype.PrototypeObjectType:296-}	0
com.google.javascript.jscomp.CodeGenerator:98-Preconditions.checkState(	0
com.google.javascript.jscomp.CodeGenerator:102-int p = NodeUtil.precedence(type);	0
com.google.javascript.jscomp.CodeGenerator:106-Context rhsContext = getContextForNoInOperator(context);	0
com.google.javascript.jscomp.CodeGenerator:111-if (last.getType() == type &&	0
com.google.javascript.jscomp.CodeGenerator:116-} else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {	0
com.google.javascript.jscomp.CodeGenerator:122-addExpr(first, p, context);	1
com.google.javascript.jscomp.CodeGenerator:1176-return (context == Context.IN_FOR_INIT_CLAUSE	0
com.google.javascript.jscomp.CodeGenerator:884-if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||	0
com.google.javascript.jscomp.CodeGenerator:891-add(n, context);	0
com.google.javascript.jscomp.CodePrinter:691-Preconditions.checkState(sourceMapDetailLevel != null);	0
com.google.javascript.jscomp.CodePrinter:693-boolean createSourceMap = (sourceMap != null);	0
com.google.javascript.jscomp.CodePrinter:694-MappedCodePrinter mcp =	0
com.google.javascript.jscomp.CodePrinter:701-CodeGenerator cg =	0
com.google.javascript.jscomp.CodePrinter:706-if (tagAsStrict) {	0
com.google.javascript.jscomp.CodePrinter:710-cg.add(root);	0
com.google.javascript.jscomp.CodeGenerator:49-CodeConsumer consumer, Charset outputCharset) {	0
com.google.javascript.jscomp.CodeGenerator:38-private final Map<String, String> ESCAPED_JS_STRINGS = Maps.newHashMap();	0
com.google.javascript.jscomp.CodeGenerator:50-cc = consumer;	0
com.google.javascript.jscomp.CodeGenerator:51-if (outputCharset == null || outputCharset == Charsets.US_ASCII) {	0
com.google.javascript.jscomp.CodeGenerator:56-this.outputCharsetEncoder = null;	0
com.google.javascript.jscomp.CodeGenerator:60-}	0
com.google.javascript.jscomp.CodeGenerator:40-private static final char[] HEX_CHARS	0
com.google.javascript.jscomp.CodeGenerator:82-add(n, Context.OTHER);	0
com.google.javascript.jscomp.CodeGenerator:86-if (!cc.continueProcessing()) {	0
com.google.javascript.jscomp.CodeGenerator:90-int type = n.getType();	0
com.google.javascript.jscomp.CodeGenerator:91-String opstr = NodeUtil.opToStr(type);	0
com.google.javascript.jscomp.CodeGenerator:92-int childCount = n.getChildCount();	0
com.google.javascript.jscomp.CodeGenerator:93-Node first = n.getFirstChild();	0
com.google.javascript.jscomp.CodeGenerator:94-Node last = n.getLastChild();	0
com.google.javascript.jscomp.CodeGenerator:97-if (opstr != null && first != last) {	0
com.google.javascript.jscomp.CodePrinter:35-class CodePrinter {	0
com.google.javascript.jscomp.CodePrinter:675-enum Format {	0
com.google.javascript.jscomp.CodePrinter:707-cg.tagAsStrict();	0
com.google.javascript.jscomp.CodePrinter:711-mcp.endFile();	0
com.google.javascript.jscomp.CodePrinter:713-String code = mcp.getCode();	0
com.google.javascript.jscomp.CodePrinter:715-if (createSourceMap) {	0
com.google.javascript.jscomp.CodePrinter:716-mcp.generateSourceMap(sourceMap);	0
com.google.javascript.jscomp.CodePrinter:719-return code;	0
com.google.javascript.jscomp.CodeGenerator:58-this.outputCharsetEncoder = outputCharset.newEncoder();	0
com.google.javascript.jscomp.CodeGenerator:63-this(consumer, null);	0
com.google.javascript.jscomp.CodeGenerator:64-}	0
com.google.javascript.jscomp.CodeGenerator:70-add("'use strict';");	0
com.google.javascript.jscomp.CodeGenerator:71-}	0
com.google.javascript.jscomp.CodeGenerator:74-cc.add(str);	0
com.google.javascript.jscomp.CodeGenerator:75-}	0
com.google.javascript.jscomp.CodeGenerator:78-cc.addIdentifier(identifierEscape(identifier));	0
com.google.javascript.jscomp.CodeGenerator:79-}	0
com.google.javascript.jscomp.CodeGenerator:83-}	0
com.google.javascript.jscomp.CodeGenerator:87-return;	0
com.google.javascript.jscomp.CodeGenerator:113-addExpr(first, p, context);	0
com.google.javascript.jscomp.TypeInference:1122-ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());	0
com.google.javascript.jscomp.TypeInference:1123-if (objType != null) {	0
com.google.javascript.jscomp.TypeInference:692-var.setType(oldType == null ?	0
com.google.javascript.jscomp.TypeInference:688-String qKeyName = qObjName + "." + memberName;	0
com.google.javascript.jscomp.TypeInference:689-Var var = syntacticScope.getVar(qKeyName);	0
com.google.javascript.jscomp.TypeInference:690-JSType oldType = var == null ? null : var.getType();	0
com.google.javascript.jscomp.TypeInference:691-if (var != null && var.isTypeInferred()) {	0
com.google.javascript.jscomp.TypeInference:696-scope.inferQualifiedSlot(name, qKeyName,	0
com.google.javascript.jscomp.TypeInference:675-Node value = name.getFirstChild();	0
com.google.javascript.jscomp.TypeInference:676-String memberName = NodeUtil.getObjectLitKeyName(name);	0
com.google.javascript.jscomp.TypeInference:677-if (memberName != null) {	0
com.google.javascript.jscomp.TypeInference:678-JSType rawValueType =name.getFirstChild().getJSType();	0
com.google.javascript.jscomp.TypeInference:679-JSType valueType = NodeUtil.getObjectLitKeyTypeFromValueType(	0
com.google.javascript.jscomp.TypeInference:681-if (valueType == null) {	0
com.google.javascript.jscomp.TypeInference:684-objectType.defineInferredProperty(memberName, valueType, name);	0
com.google.javascript.jscomp.TypeInference:687-if (qObjName != null && name.isString()) {	0
com.google.javascript.jscomp.TypeInference:700-} else {	0
com.google.javascript.jscomp.TypeInference:674-name = name.getNext()) {	0
com.google.javascript.jscomp.TypeInference:233-conditionFlowScope =	0
com.google.javascript.jscomp.TypeInference:542-objectType.defineInferredProperty(	0
com.google.javascript.jscomp.TypeInference:232-if (conditionFlowScope == null) {	0
com.google.javascript.jscomp.TypeInference:236-newScope =	0
com.google.javascript.jscomp.TypeInference:202-if (condition.isAnd() ||	0
com.google.javascript.jscomp.TypeInference:538-if ("prototype".equals(propName)) {	0
com.google.javascript.jscomp.TypeInference:156-if (NodeUtil.isForIn(source)) {	0
com.google.javascript.jscomp.TypeInference:187-if (condition == null) {	0
com.google.javascript.jscomp.TypeInference:188-condition = NodeUtil.getConditionExpression(source);	0
com.google.javascript.jscomp.TypeInference:189-if (condition == null && source.isCase()) {	0
com.google.javascript.jscomp.TypeInference:201-if (condition != null) {	0
com.google.javascript.jscomp.TypeInference:651-scope = traverse(name.getFirstChild(), scope);	0
com.google.javascript.jscomp.TypeInference:536-if (objectType.hasProperty(propName) ||	0
com.google.javascript.jscomp.TypeInference:1181-ObjectType regType = ObjectType.cast(registry.getType(qualifiedName));	0
com.google.javascript.jscomp.TypeInference:1182-if (regType != null) {	0
com.google.javascript.jscomp.TypeInference:671-String qObjName = NodeUtil.getBestLValueName(	0
com.google.javascript.jscomp.TypeInference:673-for (Node name = n.getFirstChild(); name != null;	0
com.google.javascript.jscomp.TypeInference:704-return scope;	0
com.google.javascript.jscomp.TypeInference:489-JSType oldType = var.getType();	0
com.google.javascript.jscomp.TypeInference:490-var.setType(oldType == null ?	0
com.google.javascript.jscomp.TypeInference:492-}	0
com.google.javascript.jscomp.TypeInference:278-scope = traverseObjectLiteral(n, scope);	0
com.google.javascript.jscomp.TypeInference:279-break;	0
com.google.javascript.jscomp.TypeInference:647-JSType type = n.getJSType();	0
com.google.javascript.jscomp.TypeInference:648-Preconditions.checkNotNull(type);	0
com.google.javascript.jscomp.TypeInference:650-for (Node name = n.getFirstChild(); name != null; name = name.getNext()) {	0
com.google.javascript.jscomp.TypeInference:660-ObjectType objectType = ObjectType.cast(type);	0
com.google.javascript.jscomp.TypeInference:661-if (objectType == null) {	0
com.google.javascript.jscomp.TypeInference:665-boolean hasLendsName = n.getJSDocInfo() != null &&	0
com.google.javascript.jscomp.TypeInference:667-if (objectType.hasReferenceName() && !hasLendsName) {	0
com.google.javascript.jscomp.TypeInference:1175-propertyType = objType.findPropertyType(propName);	0
com.google.javascript.jscomp.TypeInference:1173-JSType propertyType = null;	0
com.google.javascript.jscomp.InlineVariables:92-return Predicates.<Var>alwaysTrue();	0
com.google.javascript.jscomp.InlineVariables:76-boolean inlineAllStrings) {	0
com.google.javascript.jscomp.InlineVariables:71-private final IdentifyConstants identifyConstants = new IdentifyConstants();	0
com.google.javascript.jscomp.InlineVariables:77-this.compiler = compiler;	0
com.google.javascript.jscomp.InlineVariables:78-this.mode = mode;	0
com.google.javascript.jscomp.InlineVariables:79-this.inlineAllStrings = inlineAllStrings;	0
com.google.javascript.jscomp.InlineVariables:80-}	0
com.google.javascript.jscomp.InlineVariables:84-ReferenceCollectingCallback callback = new ReferenceCollectingCallback(	0
com.google.javascript.jscomp.InlineVariables:86-callback.process(externs, root);	0
com.google.javascript.jscomp.InlineVariables:87-}	0
com.google.javascript.jscomp.InlineVariables:90-switch (mode) {	0
com.google.javascript.jscomp.InlineVariables:94-return new IdentifyLocals();	0
com.google.javascript.jscomp.InlineVariables:96-return new IdentifyConstants();	0
com.google.javascript.jscomp.InlineVariables:98-throw new IllegalStateException();	0
com.google.javascript.jscomp.NodeTraversal:279-} catch (Exception unexpectedException) {	0
com.google.javascript.jscomp.NodeTraversal:280-throwUnexpectedException(unexpectedException);	0
com.google.javascript.jscomp.NodeTraversal:244-String message = unexpectedException.getMessage();	0
com.google.javascript.jscomp.NodeTraversal:249-if (inputId != null) {	0
com.google.javascript.jscomp.NodeTraversal:257-compiler.throwInternalError(message, unexpectedException);	0
com.google.javascript.jscomp.parsing.IRFactory:361-node.setLength(source.getLength());	0
com.google.javascript.jscomp.parsing.IRFactory:371-return position - lineIndex - 1;	0
com.google.javascript.jscomp.parsing.IRFactory:1207-return Token.ASSIGN;	0
com.google.javascript.jscomp.NodeTraversal:530-traverseBranch(fnName, n);	0
com.google.javascript.jscomp.parsing.IRFactory:142-reservedKeywords = null;	0
com.google.javascript.jscomp.parsing.IRFactory:143-break;	0
com.google.javascript.jscomp.parsing.IRFactory:175-for (Comment comment : node.getComments()) {	0
com.google.javascript.jscomp.parsing.IRFactory:176-if (comment.getCommentType() == CommentType.JSDOC &&	0
com.google.javascript.jscomp.parsing.IRFactory:179-} else if (comment.getCommentType() == CommentType.BLOCK_COMMENT) {	0
com.google.javascript.jscomp.parsing.IRFactory:182-}	0
com.google.javascript.jscomp.parsing.IRFactory:246-if (jsDocParser.getFileOverviewJSDocInfo() != fileOverviewInfo) {	0
com.google.javascript.jscomp.parsing.IRFactory:250-return false;	0
com.google.javascript.jscomp.parsing.IRFactory:262-JsDocInfoParser jsDocParser = createJsDocInfoParser(comment, irNode);	0
com.google.javascript.jscomp.parsing.IRFactory:263-parsedComments.add(comment);	0
com.google.javascript.jscomp.parsing.IRFactory:264-if (!handlePossibleFileOverviewJsDoc(jsDocParser)) {	0
com.google.javascript.jscomp.parsing.IRFactory:265-return jsDocParser.retrieveAndResetParsedJSDocInfo();	0
com.google.javascript.jscomp.parsing.IRFactory:275-irNode.setJSDocInfo(jsDocInfo);	0
com.google.javascript.jscomp.parsing.IRFactory:282-Node irNode = transformDispatcher.processName(node, true);	0
com.google.javascript.jscomp.parsing.IRFactory:283-JSDocInfo jsDocInfo = handleJsDoc(node, irNode);	0
com.google.javascript.jscomp.parsing.IRFactory:284-if (jsDocInfo != null) {	0
com.google.javascript.jscomp.parsing.IRFactory:287-setSourceInfo(irNode, node);	0
com.google.javascript.jscomp.parsing.IRFactory:288-return irNode;	0
com.google.javascript.jscomp.parsing.IRFactory:337-String comment = node.getValue();	0
com.google.javascript.jscomp.parsing.IRFactory:338-int lineno = node.getLineno();	0
com.google.javascript.jscomp.parsing.IRFactory:339-int position = node.getAbsolutePosition();	0
com.google.javascript.jscomp.parsing.IRFactory:342-int numOpeningChars = 3;	0
com.google.javascript.jscomp.parsing.IRFactory:343-JsDocInfoParser jsdocParser =	0
com.google.javascript.jscomp.parsing.IRFactory:352-jsdocParser.setFileLevelJsDocBuilder(fileLevelJsDocBuilder);	0
com.google.javascript.jscomp.parsing.IRFactory:353-jsdocParser.setFileOverviewJSDocInfo(fileOverviewInfo);	0
com.google.javascript.jscomp.parsing.IRFactory:354-jsdocParser.parse();	0
com.google.javascript.jscomp.parsing.IRFactory:355-return jsdocParser;	0
com.google.javascript.jscomp.parsing.IRFactory:1112-switch (token) {	0
com.google.javascript.jscomp.parsing.IRFactory:1271-return Token.BLOCK;	0
com.google.javascript.jscomp.parsing.IRFactory:1276-return Token.EXPR_RESULT;	0
com.google.javascript.jscomp.parsing.IRFactory:1303-return new Node(type, child1, child2).clonePropsFrom(templateNode);	0
com.google.javascript.jscomp.NodeTraversal:489-traverseFunction(n, parent);	0
com.google.javascript.jscomp.NodeTraversal:490-break;	0
com.google.javascript.jscomp.NodeTraversal:511-Preconditions.checkState(n.getChildCount() == 3);	0
com.google.javascript.jscomp.NodeTraversal:512-Preconditions.checkState(n.isFunction());	0
com.google.javascript.jscomp.NodeTraversal:514-final Node fnName = n.getFirstChild();	0
com.google.javascript.jscomp.NodeTraversal:516-boolean isFunctionExpression = (parent != null)	0
com.google.javascript.jscomp.NodeTraversal:519-if (!isFunctionExpression) {	0
com.google.javascript.jscomp.NodeTraversal:521-traverseBranch(fnName, n);	0
com.google.javascript.jscomp.NodeTraversal:524-curNode = n;	0
com.google.javascript.jscomp.NodeTraversal:525-pushScope(n);	0
com.google.javascript.jscomp.CodeConsumer:265-add(String.valueOf(x));	0
com.google.javascript.jscomp.CodeConsumer:207-append(op);	0
com.google.javascript.jscomp.CodeConsumer:208-}	0
com.google.javascript.jscomp.CodeConsumer:243-char prev = getLastChar();	0
com.google.javascript.jscomp.CodeConsumer:244-boolean negativeZero = isNegativeZero(x);	0
com.google.javascript.jscomp.CodeConsumer:245-if (x < 0 && prev == '-') {	1
com.google.javascript.jscomp.CodeConsumer:249-if ((long) x == x && !negativeZero) {	0
com.google.javascript.jscomp.CodeConsumer:267-}	0
com.google.javascript.jscomp.CodeConsumer:270-return x == 0.0 && Math.copySign(1, x) == -1.0;	0
com.google.javascript.jscomp.CodeConsumer:299-void endFile() {}	0
com.google.javascript.jscomp.CodeConsumer:236-maybeCutLine();	0
com.google.javascript.jscomp.CodeConsumer:211-maybeEndStatement();	0
com.google.javascript.jscomp.CodeConsumer:213-char first = op.charAt(0);	0
com.google.javascript.jscomp.CodeConsumer:214-char prev = getLastChar();	0
com.google.javascript.jscomp.CodeConsumer:216-if ((first == '+' || first == '-') && prev == first) {	0
com.google.javascript.jscomp.CodeConsumer:220-} else if (Character.isLetter(first) &&	0
com.google.javascript.jscomp.CodeConsumer:224-} else if (prev == '-' && first == '>') {	0
com.google.javascript.jscomp.CodeConsumer:230-appendOp(op, binOp);	0
com.google.javascript.jscomp.CodeConsumer:235-if (binOp) {	0
com.google.javascript.jscomp.CodeConsumer:238-}	0
com.google.javascript.jscomp.CodeConsumer:62-add(identifier);	0
com.google.javascript.jscomp.CodeConsumer:63-}	0
com.google.javascript.jscomp.CodeConsumer:135-endStatement(false);	0
com.google.javascript.jscomp.CodeConsumer:136-}	0
com.google.javascript.jscomp.CodeConsumer:143-} else if (statementStarted) {	0
com.google.javascript.jscomp.CodeConsumer:144-statementNeedsEnded = true;	0
com.google.javascript.jscomp.CodeConsumer:139-if (needSemiColon) {	0
com.google.javascript.jscomp.CodeConsumer:146-}	0
com.google.javascript.jscomp.CodeConsumer:29-abstract class CodeConsumer {	0
com.google.javascript.jscomp.CodeConsumer:30-boolean statementNeedsEnded = false;	0
com.google.javascript.jscomp.CodeConsumer:31-boolean statementStarted = false;	0
com.google.javascript.jscomp.CodeConsumer:32-boolean sawFunction = false;	0
com.google.javascript.jscomp.CodeConsumer:53-return true;	0
com.google.javascript.jscomp.CodeConsumer:154-if (statementNeedsEnded) {	0
com.google.javascript.jscomp.CodeConsumer:160-statementStarted = true;	0
com.google.javascript.jscomp.CodeConsumer:161-}	0
com.google.javascript.jscomp.CodeConsumer:182-maybeEndStatement();	0
com.google.javascript.jscomp.CodeConsumer:184-if (newcode.length() == 0) {	0
com.google.javascript.jscomp.CodeConsumer:188-char c = newcode.charAt(0);	0
com.google.javascript.jscomp.CodeConsumer:189-if ((isWordChar(c) || c == '\\') &&	0
com.google.javascript.jscomp.CodeConsumer:194-} else if (c == '/' && getLastChar() == '/') {	0
com.google.javascript.jscomp.CodeConsumer:203-append(newcode);	0
com.google.javascript.jscomp.CodeConsumer:204-}	0
com.google.javascript.jscomp.CodeConsumer:274-return (ch == '_' ||	0
com.google.javascript.jscomp.CodeConsumer:39-}	0
com.google.javascript.jscomp.CodeConsumer:46-}	0
com.google.javascript.jscomp.CodeConsumer:77-append("{");	0
com.google.javascript.jscomp.CodeConsumer:78-}	0
com.google.javascript.jscomp.CodeConsumer:81-append("}");	0
com.google.javascript.jscomp.CodeConsumer:82-}	0
com.google.javascript.rhino.jstype.PrototypeObjectType:106-this(registry, className, implicitPrototype, false);	0
com.google.javascript.rhino.jstype.PrototypeObjectType:107-}	0
com.google.javascript.rhino.jstype.PrototypeObjectType:115-super(registry);	0
com.google.javascript.rhino.jstype.PrototypeObjectType:85-private FunctionType ownerFunction = null;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:89-private boolean prettyPrint = false;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:116-this.properties = Maps.newTreeMap();	0
com.google.javascript.rhino.jstype.PrototypeObjectType:117-this.className = className;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:118-this.nativeType = nativeType;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:119-if (nativeType || implicitPrototype != null) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:120-setImplicitPrototype(implicitPrototype);	0
com.google.javascript.rhino.jstype.PrototypeObjectType:122-setImplicitPrototype(	0
com.google.javascript.rhino.jstype.PrototypeObjectType:125-}	0
com.google.javascript.rhino.jstype.PrototypeObjectType:129-if (properties.containsKey(name)) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:130-return properties.get(name);	0
com.google.javascript.rhino.jstype.PrototypeObjectType:153-ObjectType implicitPrototype = getImplicitPrototype();	0
com.google.javascript.rhino.jstype.PrototypeObjectType:154-if (implicitPrototype == null) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:155-return this.properties.size();	0
com.google.javascript.rhino.jstype.PrototypeObjectType:157-int localCount = 0;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:158-for (String property : properties.keySet()) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:163-return implicitPrototype.getPropertiesCount() + localCount;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:174-return properties.get(propertyName) != null;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:179-return properties.keySet();	0
com.google.javascript.rhino.jstype.PrototypeObjectType:213-StaticSlot<JSType> slot = getSlot(property);	0
com.google.javascript.rhino.jstype.PrototypeObjectType:214-if (slot == null) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:217-return slot.getType();	0
com.google.javascript.rhino.jstype.PrototypeObjectType:236-if (hasOwnDeclaredProperty(name)) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:239-Property newProp = new Property(	0
com.google.javascript.rhino.jstype.PrototypeObjectType:241-Property oldProp = properties.get(name);	0
com.google.javascript.rhino.jstype.PrototypeObjectType:242-if (oldProp != null) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:247-properties.put(name, newProp);	0
com.google.javascript.rhino.jstype.PrototypeObjectType:248-return true;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:354-if (hasReferenceName()) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:356-} else if (prettyPrint) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:358-prettyPrint = false;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:361-Set<String> propertyNames = Sets.newTreeSet();	0
com.google.javascript.rhino.jstype.PrototypeObjectType:362-for (ObjectType current = this;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:363-current != null && !current.isNativeObjectType() &&	0
com.google.javascript.rhino.jstype.PrototypeObjectType:366-propertyNames.addAll(current.getOwnPropertyNames());	0
com.google.javascript.rhino.jstype.PrototypeObjectType:365-current = current.getImplicitPrototype()) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:369-StringBuilder sb = new StringBuilder();	0
com.google.javascript.rhino.jstype.PrototypeObjectType:370-sb.append("{");	0
com.google.javascript.rhino.jstype.PrototypeObjectType:372-int i = 0;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:373-for (String property : propertyNames) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:374-if (i > 0) {	0
com.google.javascript.rhino.jstype.PrototypeObjectType:375-sb.append(", ");	0
com.google.javascript.rhino.jstype.PrototypeObjectType:378-sb.append(property);	0
com.google.javascript.rhino.jstype.PrototypeObjectType:379-sb.append(": ");	0
com.google.javascript.rhino.jstype.PrototypeObjectType:380-sb.append(getPropertyType(property).toString());	1
com.google.javascript.rhino.jstype.PrototypeObjectType:382-++i;	0
com.google.javascript.rhino.jstype.PrototypeObjectType:383-if (i == MAX_PRETTY_PRINTED_PROPERTIES) {	0
com.google.javascript.jscomp.NameAnalyzer:1368-NameInformation nameInfo = new NameInformation();	0
com.google.javascript.jscomp.NameAnalyzer:1369-nameInfo.name = classes.subclassName;	0
com.google.javascript.jscomp.NameAnalyzer:1370-nameInfo.onlyAffectsClassDef = true;	0
com.google.javascript.jscomp.NameAnalyzer:1371-nameInfo.superclass = classes.superclassName;	0
com.google.javascript.jscomp.NameAnalyzer:1372-return nameInfo;	0
com.google.javascript.jscomp.NameAnalyzer:1770-return getRhsSubexpressions(n.getFirstChild());	0
com.google.javascript.jscomp.NameAnalyzer:1787-Node lhs = n.getFirstChild();	0
com.google.javascript.jscomp.NameAnalyzer:1788-Node rhs = lhs.getNext();	0
com.google.javascript.jscomp.NameAnalyzer:1789-return Lists.newArrayList(lhs, rhs);	0
com.google.javascript.jscomp.NameAnalyzer:1299-JsName parentJsName = getName(parentName, true);	0
com.google.javascript.jscomp.NameAnalyzer:1301-recordReference(curJsName.name, parentJsName.name, RefType.REGULAR);	0
com.google.javascript.jscomp.NameAnalyzer:1302-recordReference(parentJsName.name, curJsName.name, RefType.REGULAR);	0
com.google.javascript.jscomp.NameAnalyzer:1304-curJsName = parentJsName;	0
com.google.javascript.jscomp.NameAnalyzer:1779-return Lists.newArrayList(rhs);	0
com.google.javascript.jscomp.NameAnalyzer:1684-replacements.addAll(getSideEffectNodes(rhs));	0
com.google.javascript.jscomp.NameAnalyzer:1685-}	0
com.google.javascript.jscomp.NameAnalyzer:1296-String parentName = curName.substring(0, curName.lastIndexOf('.'));	0
com.google.javascript.jscomp.NameAnalyzer:1297-if (!globalNames.contains(parentName)) {	0
com.google.javascript.jscomp.NameAnalyzer:1306-curName = parentName;	0
com.google.javascript.jscomp.NameAnalyzer:1307-}	0
com.google.javascript.jscomp.NameAnalyzer:1598-List<Node> subexpressions = Lists.newArrayList();	0
com.google.javascript.jscomp.NameAnalyzer:1599-NodeTraversal.traverse(	0
com.google.javascript.jscomp.NameAnalyzer:1605-List<Node> replacements =	0
com.google.javascript.jscomp.NameAnalyzer:1607-for (Node subexpression : subexpressions) {	0
com.google.javascript.jscomp.NameAnalyzer:1610-return replacements;	0
com.google.javascript.jscomp.NameAnalyzer:1777-Node rhs = n.getFirstChild();	0
com.google.javascript.jscomp.NameAnalyzer:1778-if (rhs != null) {	0
com.google.javascript.jscomp.NameAnalyzer:1794-List<Node> nodes = Lists.newArrayList();	0
com.google.javascript.jscomp.NameAnalyzer:1795-for (Node child : n.children()) {	0
com.google.javascript.jscomp.NameAnalyzer:1796-nodes.addAll(getRhsSubexpressions(child));	0
com.google.javascript.jscomp.NameAnalyzer:1797-}	0
com.google.javascript.jscomp.NameAnalyzer:1798-return nodes;	0
com.google.javascript.jscomp.NameAnalyzer:1120-refNode.remove();	0
com.google.javascript.jscomp.NameAnalyzer:1621-if (valueConsumedByParent(n, parent)) {	0
com.google.javascript.jscomp.NameAnalyzer:1634-} else if (n.isAssign() && !parent.isFor()) {	0
com.google.javascript.jscomp.NameAnalyzer:1644-replaceTopLevelExpressionWithRhs(parent, n);	0
com.google.javascript.jscomp.NameAnalyzer:1646-}	0
com.google.javascript.jscomp.NameAnalyzer:1654-switch (parent.getType()) {	0
com.google.javascript.jscomp.NameAnalyzer:1659-break;	0
com.google.javascript.jscomp.NameAnalyzer:1666-switch (n.getType()) {	0
com.google.javascript.jscomp.NameAnalyzer:1670-break;	0
com.google.javascript.jscomp.NameAnalyzer:1682-List<Node> replacements = Lists.newArrayList();	0
com.google.javascript.jscomp.NameAnalyzer:1683-for (Node rhs : getRhsSubexpressions(n)) {	0
com.google.javascript.jscomp.NameAnalyzer:1687-if (parent.isFor()) {	0
com.google.javascript.jscomp.NameAnalyzer:1698-changeProxy.replaceWith(parent, n, replacements);	0
com.google.javascript.jscomp.NameAnalyzer:1699-}	0
com.google.javascript.jscomp.NameAnalyzer:1717-if (NodeUtil.isAssignmentOp(parent)) {	0
com.google.javascript.jscomp.NameAnalyzer:1721-switch (parent.getType()) {	0
com.google.javascript.jscomp.NameAnalyzer:1737-return false;	0
com.google.javascript.jscomp.NameAnalyzer:1767-switch (n.getType()) {	0
com.google.javascript.jscomp.FunctionTypeBuilder:327-JSType maybeBaseType =	0
com.google.javascript.jscomp.FunctionTypeBuilder:329-if (maybeBaseType != null &&	0
com.google.javascript.jscomp.FunctionTypeBuilder:331-baseType = (ObjectType) maybeBaseType;	0
com.google.javascript.jscomp.FunctionTypeBuilder:333-} else {	0
com.google.javascript.jscomp.FunctionTypeBuilder:634-fnType.setPrototypeBasedOn(baseType);	0
com.google.javascript.jscomp.FunctionTypeBuilder:326-if (isConstructor) {	0
com.google.javascript.jscomp.FunctionTypeBuilder:458-parameterType = oldParameterType.getJSType();	0
com.google.javascript.jscomp.FunctionTypeBuilder:459-isOptionalParam = oldParameterType.isOptionalArg();	0
com.google.javascript.jscomp.FunctionTypeBuilder:460-isVarArgs = oldParameterType.isVarArgs();	0
com.google.javascript.jscomp.FunctionTypeBuilder:584-returnType = typeRegistry.getNativeType(VOID_TYPE);	0
com.google.javascript.jscomp.FunctionTypeBuilder:585-returnTypeInferred = true;	0
com.google.javascript.jscomp.FunctionTypeBuilder:248-returnType = oldType.getReturnType();	0
com.google.javascript.jscomp.FunctionTypeBuilder:249-returnTypeInferred = oldType.isReturnTypeInferred();	0
com.google.javascript.jscomp.FunctionTypeBuilder:250-if (paramsParent == null) {	0
com.google.javascript.jscomp.FunctionTypeBuilder:259-FunctionParamBuilder paramBuilder =	0
com.google.javascript.jscomp.FunctionTypeBuilder:261-Iterator<Node> oldParams = oldType.getParameters().iterator();	0
com.google.javascript.jscomp.FunctionTypeBuilder:262-boolean warnedAboutArgList = false;	0
com.google.javascript.jscomp.FunctionTypeBuilder:263-boolean oldParamsListHitOptArgs = false;	0
com.google.javascript.jscomp.FunctionTypeBuilder:264-for (Node currentParam = paramsParent.getFirstChild();	0
com.google.javascript.jscomp.FunctionTypeBuilder:265-currentParam != null; currentParam = currentParam.getNext()) {	0
com.google.javascript.jscomp.FunctionTypeBuilder:266-if (oldParams.hasNext()) {	0
com.google.javascript.jscomp.FunctionTypeBuilder:267-Node oldParam = oldParams.next();	0
com.google.javascript.jscomp.FunctionTypeBuilder:268-Node newParam = paramBuilder.newParameterFromNode(oldParam);	0
com.google.javascript.jscomp.FunctionTypeBuilder:270-oldParamsListHitOptArgs = oldParamsListHitOptArgs ||	0
com.google.javascript.jscomp.FunctionTypeBuilder:276-if (currentParam.getNext() != null && newParam.isVarArgs()) {	0
com.google.javascript.jscomp.FunctionTypeBuilder:280-} else {	0
com.google.javascript.jscomp.FunctionTypeBuilder:293-parametersNode = paramBuilder.build();	0
com.google.javascript.jscomp.FunctionTypeBuilder:295-return this;	0
com.google.javascript.jscomp.FunctionTypeBuilder:434-oldParameterType = parametersNode.getFirstChild();	0
com.google.javascript.jscomp.FunctionTypeBuilder:478-oldParameterType = oldParameterType.getNext();	0
com.google.javascript.jscomp.FunctionTypeBuilder:502-return true;	0
com.google.javascript.jscomp.FunctionTypeBuilder:657-boolean isInstanceObject = existingType.isInstanceType();	0
com.google.javascript.jscomp.FunctionTypeBuilder:658-if (isInstanceObject || fnName.equals("Function")) {	0
com.google.javascript.jscomp.FunctionTypeBuilder:659-FunctionType existingFn =	0
com.google.javascript.jscomp.FunctionTypeBuilder:664-if (existingFn.getSource() == null) {	0
com.google.javascript.jscomp.FunctionTypeBuilder:665-existingFn.setSource(contents.getSourceNode());	0
com.google.javascript.jscomp.FunctionTypeBuilder:668-if (!existingFn.hasEqualCallType(fnType)) {	0
com.google.javascript.jscomp.FunctionTypeBuilder:673-return existingFn;	0
com.google.javascript.jscomp.FunctionTypeBuilder:517-return true;	0
com.google.javascript.jscomp.FunctionTypeBuilder:554-if (!builder.addOptionalParams(paramType) && !warnedAboutArgList) {	0
com.google.javascript.jscomp.FunctionTypeBuilder:559-if (!builder.addVarArgs(paramType) && !warnedAboutArgList) {	0
com.google.javascript.jscomp.FunctionTypeBuilder:374-inferThisType(info);	0
com.google.javascript.jscomp.FunctionTypeBuilder:376-if (thisType == null) {	0
com.google.javascript.jscomp.FunctionTypeBuilder:377-ObjectType objType = ObjectType.cast(type);	0
com.google.javascript.jscomp.FunctionTypeBuilder:378-if (objType != null && (info == null || !info.hasType())) {	0
com.google.javascript.jscomp.FunctionTypeBuilder:379-thisType = objType;	0
com.google.javascript.jscomp.FunctionTypeBuilder:383-return this;	0
com.google.javascript.jscomp.FunctionTypeBuilder:589-returnType = typeRegistry.getNativeType(UNKNOWN_TYPE);	0
com.google.javascript.jscomp.FunctionTypeBuilder:681-maybeSetBaseType(fnType);	0
com.google.javascript.jscomp.FunctionTypeBuilder:683-if (getScopeDeclaredIn().isGlobal() && !fnName.isEmpty()) {	0
com.google.javascript.jscomp.parsing.IRFactory:1112-return Token.EQ;	0
com.google.javascript.jscomp.parsing.IRFactory:1168-return Token.THIS;	0
com.google.javascript.jscomp.parsing.IRFactory:1297-return new Node(type, child1, child2, child3).clonePropsFrom(templateNode);	0
com.google.javascript.jscomp.parsing.IRFactory:211-Node irNode = transform(node);	0
com.google.javascript.jscomp.parsing.IRFactory:212-if (!irNode.isBlock()) {	0
com.google.javascript.jscomp.parsing.IRFactory:224-return irNode;	0
com.google.javascript.jscomp.parsing.IRFactory:1197-return Token.ASSIGN;	0
com.google.javascript.jscomp.parsing.IRFactory:371-return position - lineIndex - 1;	0
com.google.javascript.jscomp.parsing.IRFactory:282-Node irNode = transformDispatcher.processName(node, true);	0
com.google.javascript.jscomp.parsing.IRFactory:283-JSDocInfo jsDocInfo = handleJsDoc(node, irNode);	0
com.google.javascript.jscomp.parsing.IRFactory:284-if (jsDocInfo != null) {	0
com.google.javascript.jscomp.parsing.IRFactory:287-setSourceInfo(irNode, node);	0
com.google.javascript.jscomp.parsing.IRFactory:288-return irNode;	0
com.google.javascript.jscomp.parsing.IRFactory:1261-return Token.BLOCK;	0
com.google.javascript.jscomp.parsing.IRFactory:1266-return Token.EXPR_RESULT;	0
com.google.javascript.jscomp.parsing.IRFactory:1293-return new Node(type, child1, child2).clonePropsFrom(templateNode);	0
com.google.javascript.jscomp.parsing.IRFactory:1102-switch (token) {	0
com.google.javascript.jscomp.parsing.IRFactory:368-return position;	0
com.google.javascript.jscomp.parsing.IRFactory:142-reservedKeywords = null;	0
com.google.javascript.jscomp.parsing.IRFactory:143-break;	0
com.google.javascript.jscomp.parsing.IRFactory:1305-return Node.newString(type, value).clonePropsFrom(templateNode);	0
com.google.javascript.jscomp.parsing.IRFactory:126-ErrorReporter errorReporter) {	0
com.google.javascript.jscomp.parsing.IRFactory:94-private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet("use strict");	0
com.google.javascript.jscomp.parsing.IRFactory:108-private final Set<Comment> parsedComments = Sets.newHashSet();	0
com.google.javascript.jscomp.parsing.IRFactory:112-Node rootNodeJsDocHolder = new Node(Token.SCRIPT);	0
com.google.javascript.jscomp.parsing.IRFactory:113-Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =	0
com.google.javascript.jscomp.parsing.IRFactory:115-JSDocInfo fileOverviewInfo = null;	0
com.google.javascript.jscomp.parsing.IRFactory:127-this.sourceString = sourceString;	0
com.google.javascript.jscomp.parsing.IRFactory:128-this.sourceFile = sourceFile;	0
com.google.javascript.jscomp.parsing.IRFactory:131-this.sourceName = sourceFile == null ? null : sourceFile.getName();	0
com.google.javascript.jscomp.parsing.IRFactory:133-this.config = config;	0
com.google.javascript.jscomp.parsing.IRFactory:134-this.errorReporter = errorReporter;	0
com.google.javascript.jscomp.parsing.IRFactory:135-this.transformDispatcher = new TransformDispatcher();	0
com.google.javascript.jscomp.parsing.IRFactory:137-this.templateNode = createTemplateNode();	0
com.google.javascript.jscomp.parsing.IRFactory:139-switch (config.languageMode) {	0
com.google.javascript.jscomp.parsing.IRFactory:153-}	0
com.google.javascript.jscomp.parsing.IRFactory:96-private static final Set<String> ES5_RESERVED_KEYWORDS =	0
com.google.javascript.jscomp.parsing.IRFactory:100-private static final Set<String> ES5_STRICT_RESERVED_KEYWORDS =	0
com.google.javascript.jscomp.parsing.IRFactory:160-Node templateNode = new Node(Token.SCRIPT);	0
com.google.javascript.jscomp.parsing.IRFactory:161-templateNode.setStaticSourceFile(sourceFile);	0
com.google.javascript.jscomp.parsing.IRFactory:162-return templateNode;	0
com.google.javascript.jscomp.parsing.IRFactory:170-IRFactory irFactory = new IRFactory(sourceString, sourceFile,	0
com.google.javascript.jscomp.parsing.IRFactory:172-Node irNode = irFactory.transform(node);	0
com.google.javascript.jscomp.parsing.IRFactory:174-if (node.getComments() != null) {	0
com.google.javascript.jscomp.parsing.IRFactory:185-irFactory.setFileOverviewJsDoc(irNode);	0
com.google.javascript.jscomp.parsing.IRFactory:187-return irNode;	0
com.google.javascript.jscomp.parsing.IRFactory:194-JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();	0
com.google.javascript.jscomp.parsing.IRFactory:195-if (rootNodeJsDoc != null) {	0
com.google.javascript.jscomp.parsing.IRFactory:200-if (fileOverviewInfo != null) {	0
com.google.javascript.jscomp.parsing.IRFactory:208-}	0
com.google.javascript.jscomp.TypedScopeCreator:1946-return null;	0
com.google.javascript.jscomp.TypedScopeCreator:223-JSType type = functionNode.getJSType();	0
com.google.javascript.jscomp.TypedScopeCreator:224-if (type != null && type.isFunctionType()) {	0
com.google.javascript.jscomp.TypedScopeCreator:225-FunctionType fnType = type.toMaybeFunctionType();	0
com.google.javascript.jscomp.TypedScopeCreator:226-ObjectType fnThisType = fnType.getTypeOfThis();	0
com.google.javascript.jscomp.TypedScopeCreator:227-if (!fnThisType.isUnknownType()) {	0
com.google.javascript.jscomp.TypedScopeCreator:232-}	0
com.google.javascript.jscomp.TypedScopeCreator:210-newScope = new Scope(parent, root);	0
com.google.javascript.jscomp.TypedScopeCreator:211-LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);	0
com.google.javascript.jscomp.TypedScopeCreator:212-scopeBuilder = localScopeBuilder;	0
com.google.javascript.jscomp.TypedScopeCreator:213-localScopeBuilder.build();	0
com.google.javascript.jscomp.TypedScopeCreator:1951-return functionAnalysisResults.get(n);	0
com.google.javascript.jscomp.TypedScopeCreator:1945-if (n == null) {	0
com.google.javascript.jscomp.TypedScopeCreator:391-return typeRegistry.getNativeType(nativeType);	0
com.google.javascript.jscomp.TypedScopeCreator:175-this(compiler, compiler.getCodingConvention());	0
com.google.javascript.jscomp.TypedScopeCreator:176-}	0
com.google.javascript.jscomp.TypedScopeCreator:196-Scope newScope = null;	0
com.google.javascript.jscomp.TypedScopeCreator:197-AbstractScopeBuilder scopeBuilder = null;	0
com.google.javascript.jscomp.TypedScopeCreator:198-if (parent == null) {	0
com.google.javascript.jscomp.TypedScopeCreator:200-(new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults))	0
com.google.javascript.jscomp.TypedScopeCreator:204-newScope = createInitialScope(root);	0
com.google.javascript.jscomp.TypedScopeCreator:206-GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);	0
com.google.javascript.jscomp.TypedScopeCreator:207-scopeBuilder = globalScopeBuilder;	0
com.google.javascript.jscomp.TypedScopeCreator:208-NodeTraversal.traverse(compiler, root, scopeBuilder);	0
com.google.javascript.jscomp.TypedScopeCreator:209-} else {	0
com.google.javascript.jscomp.TypedScopeCreator:216-scopeBuilder.resolveStubDeclarations();	0
com.google.javascript.jscomp.TypedScopeCreator:217-scopeBuilder.resolveTypes();	0
com.google.javascript.jscomp.TypedScopeCreator:222-for (Node functionNode : scopeBuilder.nonExternFunctions) {	0
com.google.javascript.jscomp.TypedScopeCreator:234-if (parent == null) {	0
com.google.javascript.jscomp.TypedScopeCreator:235-codingConvention.defineDelegateProxyPrototypeProperties(	0
com.google.javascript.jscomp.TypedScopeCreator:239-return newScope;	0
com.google.javascript.jscomp.TypedScopeCreator:179-CodingConvention codingConvention) {	0
com.google.javascript.jscomp.TypedScopeCreator:142-private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();	0
com.google.javascript.jscomp.TypedScopeCreator:143-private final Map<String, String> delegateCallingConventions =	0
com.google.javascript.jscomp.TypedScopeCreator:147-private final Map<Node, AstFunctionContents> functionAnalysisResults =	0
com.google.javascript.jscomp.TypedScopeCreator:180-this.compiler = compiler;	0
com.google.javascript.jscomp.TypedScopeCreator:181-this.validator = compiler.getTypeValidator();	0
com.google.javascript.jscomp.TypedScopeCreator:182-this.codingConvention = codingConvention;	0
com.google.javascript.jscomp.TypedScopeCreator:183-this.typeRegistry = compiler.getTypeRegistry();	0
com.google.javascript.jscomp.TypedScopeCreator:184-this.typeParsingErrorReporter = typeRegistry.getErrorReporter();	0
com.google.javascript.jscomp.TypedScopeCreator:185-}	0
com.google.javascript.jscomp.TypedScopeCreator:99-static final String DELEGATE_PROXY_SUFFIX =	0
com.google.javascript.jscomp.TypedScopeCreator:102-static final DiagnosticType MALFORMED_TYPEDEF =	0
com.google.javascript.jscomp.TypedScopeCreator:107-static final DiagnosticType ENUM_INITIALIZER =	0
com.google.javascript.jscomp.TypedScopeCreator:112-static final DiagnosticType CTOR_INITIALIZER =	0
com.google.javascript.jscomp.TypedScopeCreator:117-static final DiagnosticType IFACE_INITIALIZER =	0
com.google.javascript.jscomp.TypedScopeCreator:122-static final DiagnosticType CONSTRUCTOR_EXPECTED =	0
com.google.javascript.jscomp.TypedScopeCreator:127-static final DiagnosticType UNKNOWN_LENDS =	0
com.google.javascript.jscomp.TypedScopeCreator:132-static final DiagnosticType LENDS_ON_NON_OBJECT =	0
com.google.javascript.jscomp.TypedScopeCreator:297-NodeTraversal.traverse(	0
com.google.javascript.jscomp.CodeConsumer:205-append(op);	0
com.google.javascript.jscomp.CodeConsumer:206-}	0
com.google.javascript.jscomp.CodeConsumer:296-void endFile() {}	0
com.google.javascript.jscomp.CodeConsumer:234-maybeCutLine();	0
com.google.javascript.jscomp.CodeConsumer:209-maybeEndStatement();	0
com.google.javascript.jscomp.CodeConsumer:211-char first = op.charAt(0);	0
com.google.javascript.jscomp.CodeConsumer:212-char prev = getLastChar();	0
com.google.javascript.jscomp.CodeConsumer:214-if ((first == '+' || first == '-') && prev == first) {	0
com.google.javascript.jscomp.CodeConsumer:218-} else if (Character.isLetter(first) &&	0
com.google.javascript.jscomp.CodeConsumer:222-} else if (prev == '-' && first == '>') {	0
com.google.javascript.jscomp.CodeConsumer:228-appendOp(op, binOp);	0
com.google.javascript.jscomp.CodeConsumer:233-if (binOp) {	0
com.google.javascript.jscomp.CodeConsumer:236-}	0
com.google.javascript.jscomp.CodeConsumer:62-add(identifier);	0
com.google.javascript.jscomp.CodeConsumer:63-}	0
com.google.javascript.jscomp.CodeConsumer:135-endStatement(false);	0
com.google.javascript.jscomp.CodeConsumer:136-}	0
com.google.javascript.jscomp.CodeConsumer:143-} else if (statementStarted) {	0
com.google.javascript.jscomp.CodeConsumer:144-statementNeedsEnded = true;	0
com.google.javascript.jscomp.CodeConsumer:139-if (needSemiColon) {	0
com.google.javascript.jscomp.CodeConsumer:146-}	0
com.google.javascript.jscomp.CodeConsumer:29-abstract class CodeConsumer {	0
com.google.javascript.jscomp.CodeConsumer:30-boolean statementNeedsEnded = false;	0
com.google.javascript.jscomp.CodeConsumer:31-boolean statementStarted = false;	0
com.google.javascript.jscomp.CodeConsumer:32-boolean sawFunction = false;	0
com.google.javascript.jscomp.CodeConsumer:53-return true;	0
com.google.javascript.jscomp.CodeConsumer:154-if (statementNeedsEnded) {	0
com.google.javascript.jscomp.CodeConsumer:160-statementStarted = true;	0
com.google.javascript.jscomp.CodeConsumer:161-}	0
com.google.javascript.jscomp.CodeConsumer:182-maybeEndStatement();	0
com.google.javascript.jscomp.CodeConsumer:184-if (newcode.length() == 0) {	0
com.google.javascript.jscomp.CodeConsumer:188-char c = newcode.charAt(0);	0
com.google.javascript.jscomp.CodeConsumer:189-if ((isWordChar(c) || c == '\\') &&	0
com.google.javascript.jscomp.CodeConsumer:201-append(newcode);	0
com.google.javascript.jscomp.CodeConsumer:202-}	0
com.google.javascript.jscomp.CodeConsumer:271-return (ch == '_' ||	0
com.google.javascript.jscomp.CodeConsumer:39-}	0
com.google.javascript.jscomp.CodeConsumer:46-}	0
com.google.javascript.jscomp.CodeConsumer:77-append("{");	0
com.google.javascript.jscomp.CodeConsumer:78-}	0
com.google.javascript.jscomp.CodeConsumer:81-append("}");	0
com.google.javascript.jscomp.CodeConsumer:82-}	0
com.google.javascript.jscomp.CodeConsumer:85-}	0
com.google.javascript.jscomp.CodeConsumer:88-maybeCutLine();	0
com.google.javascript.jscomp.CodeConsumer:89-}	0
com.google.javascript.jscomp.CodeConsumer:92-}	0
com.google.javascript.jscomp.CodeConsumer:95-}	0
com.google.javascript.jscomp.CodeConsumer:98-}	0
com.google.javascript.jscomp.CodeConsumer:101-if (statementNeedsEnded) {	0
com.google.javascript.jscomp.CodeConsumer:102-append(";");	0
com.google.javascript.jscomp.RemoveUnusedVars:301-return false;	0
com.google.javascript.jscomp.RemoveUnusedVars:735-} else if (!NodeUtil.isLiteralValue(	0
com.google.javascript.jscomp.RemoveUnusedVars:734-hasPropertyAssign = true;	0
com.google.javascript.jscomp.RemoveUnusedVars:264-} else {	0
com.google.javascript.jscomp.RemoveUnusedVars:756-assign.remove();	0
com.google.javascript.jscomp.RemoveUnusedVars:757-compiler.reportCodeChange();	0
com.google.javascript.jscomp.RemoveUnusedVars:758-}	0
com.google.javascript.jscomp.RemoveUnusedVars:206-traverseFunction(n, scope);	0
com.google.javascript.jscomp.RemoveUnusedVars:225-continuations.put(var, new Continuation(n, scope));	0
com.google.javascript.jscomp.RemoveUnusedVars:226-return;	0
com.google.javascript.jscomp.RemoveUnusedVars:200-var = scope.getVar(n.getFirstChild().getString());	0
com.google.javascript.jscomp.RemoveUnusedVars:733-if (assign.isPropertyAssign) {	0
com.google.javascript.jscomp.RemoveUnusedVars:739-}	1
com.google.javascript.jscomp.RemoveUnusedVars:773-return false;	0
com.google.javascript.jscomp.RemoveUnusedVars:723-Node value = var.getInitialValue();	0
com.google.javascript.jscomp.RemoveUnusedVars:724-assignedToUnknownValue = value != null &&	0
com.google.javascript.jscomp.RemoveUnusedVars:726-} else {	0
com.google.javascript.jscomp.RemoveUnusedVars:286-markReferencedVar(var);	0
com.google.javascript.jscomp.RemoveUnusedVars:835-} else if (toRemove.isVar() &&	0
com.google.javascript.jscomp.RemoveUnusedVars:841-} else if (parent != null) {	0
com.google.javascript.jscomp.RemoveUnusedVars:842-NodeUtil.removeChild(parent, toRemove);	0
com.google.javascript.jscomp.RemoveUnusedVars:843-compiler.reportCodeChange();	0
com.google.javascript.jscomp.RemoveUnusedVars:820-} else if (parent != null &&	0
com.google.javascript.jscomp.RemoveUnusedVars:824-} else if (toRemove.isVar() &&	0
com.google.javascript.jscomp.RemoveUnusedVars:377-while ((lastArg = argList.getLastChild()) != null) {	0
com.google.javascript.jscomp.RemoveUnusedVars:386-} else {	0
com.google.javascript.jscomp.RemoveUnusedVars:814-} else if (NodeUtil.isFunctionExpression(toRemove)) {	0
com.google.javascript.jscomp.RemoveUnusedVars:371-Node argList = getFunctionArgList(function);	0
com.google.javascript.jscomp.RemoveUnusedVars:372-boolean modifyCallers = modifyCallSites	0
com.google.javascript.jscomp.RemoveUnusedVars:374-if (!modifyCallers) {	0
com.google.javascript.jscomp.RemoveUnusedVars:389-}	0
com.google.javascript.jscomp.RemoveUnusedVars:396-return function.getFirstChild().getNext();	0
com.google.javascript.jscomp.RemoveUnusedVars:179-removeUnreferencedFunctionArgs(fnScope);	0
com.google.javascript.jscomp.RemoveUnusedVars:180-}	0
com.google.javascript.jscomp.RemoveUnusedVars:326-Preconditions.checkState(n.getChildCount() == 3);	0
com.google.javascript.jscomp.RemoveUnusedVars:327-Preconditions.checkState(n.isFunction());	0
com.google.javascript.jscomp.RemoveUnusedVars:329-final Node body = n.getLastChild();	0
com.google.javascript.jscomp.RemoveUnusedVars:330-Preconditions.checkState(body.getNext() == null &&	0
com.google.javascript.jscomp.RemoveUnusedVars:333-Scope fnScope =	0
com.google.javascript.jscomp.RemoveUnusedVars:335-traverseNode(body, n, fnScope);	0
com.google.javascript.jscomp.RemoveUnusedVars:337-collectMaybeUnreferencedVars(fnScope);	0
com.google.javascript.jscomp.RemoveUnusedVars:338-allFunctionScopes.add(fnScope);	0
com.google.javascript.jscomp.RemoveUnusedVars:339-}	0
com.google.javascript.jscomp.RemoveUnusedVars:363-Node function = fnScope.getRootNode();	0
com.google.javascript.jscomp.RemoveUnusedVars:365-Preconditions.checkState(function.isFunction());	0
com.google.javascript.jscomp.RemoveUnusedVars:366-if (NodeUtil.isGetOrSetKey(function.getParent())) {	0
com.google.javascript.jscomp.RemoveUnusedVars:211-Assign maybeAssign = Assign.maybeCreateAssign(n);	0
com.google.javascript.jscomp.RemoveUnusedVars:212-if (maybeAssign != null) {	0
com.google.javascript.jscomp.RemoveUnusedVars:215-var = scope.getVar(maybeAssign.nameNode.getString());	0
com.google.javascript.jscomp.RemoveUnusedVars:216-if (var != null) {	0
com.google.javascript.rhino.jstype.RecordType:145-RecordTypeBuilder builder = new RecordTypeBuilder(registry);	0
com.google.javascript.rhino.jstype.RecordType:146-for (String property : properties.keySet()) {	0
com.google.javascript.rhino.jstype.RecordType:147-if (that.toMaybeRecordType().hasProperty(property) &&	0
com.google.javascript.rhino.jstype.RecordType:153-}	0
com.google.javascript.rhino.jstype.RecordType:154-return builder.build();	0
com.google.javascript.rhino.jstype.RecordType:142-if (!that.isRecordType()) {	0
com.google.javascript.rhino.jstype.RecordType:110-return false;	0
com.google.javascript.rhino.jstype.RecordType:241-return RecordType.isSubtype(this, that.toMaybeRecordType());	0
com.google.javascript.rhino.jstype.RecordType:107-Set<String> keySet = properties.keySet();	0
com.google.javascript.rhino.jstype.RecordType:108-Map<String, JSType> otherProps = otherRecord.properties;	0
com.google.javascript.rhino.jstype.RecordType:109-if (!otherProps.keySet().equals(keySet)) {	0
com.google.javascript.rhino.jstype.RecordType:171-builder.addProperty(property, getPropertyType(property),	0
com.google.javascript.rhino.jstype.RecordType:173-}	0
com.google.javascript.rhino.jstype.RecordType:175-for (String property : thatRecord.properties.keySet()) {	0
com.google.javascript.rhino.jstype.RecordType:176-if (!hasProperty(property)) {	0
com.google.javascript.rhino.jstype.RecordType:177-builder.addProperty(property, thatRecord.getPropertyType(property),	0
com.google.javascript.rhino.jstype.RecordType:180-}	0
com.google.javascript.rhino.jstype.RecordType:182-return builder.build();	0
com.google.javascript.rhino.jstype.RecordType:150-builder.addProperty(property, getPropertyType(property),	0
com.google.javascript.rhino.jstype.RecordType:102-RecordType otherRecord = other.toMaybeRecordType();	0
com.google.javascript.rhino.jstype.RecordType:103-if (otherRecord == this) {	0
com.google.javascript.rhino.jstype.RecordType:158-RecordType thatRecord = that.toMaybeRecordType();	0
com.google.javascript.rhino.jstype.RecordType:159-RecordTypeBuilder builder = new RecordTypeBuilder(registry);	0
com.google.javascript.rhino.jstype.RecordType:164-for (String property : properties.keySet()) {	0
com.google.javascript.rhino.jstype.RecordType:165-if (thatRecord.hasProperty(property) &&	0
com.google.javascript.rhino.jstype.RecordType:265-return false;	0
com.google.javascript.rhino.jstype.RecordType:237-if (!that.isRecordType()) {	0
com.google.javascript.rhino.jstype.RecordType:263-for (String property : typeB.properties.keySet()) {	0
com.google.javascript.rhino.jstype.RecordType:264-if (!typeA.hasProperty(property)) {	0
com.google.javascript.rhino.jstype.RecordType:229-if (registry.getNativeObjectType(	0
com.google.javascript.rhino.jstype.RecordType:283-return true;	0
com.google.javascript.rhino.jstype.RecordType:219-return this;	0
com.google.javascript.rhino.jstype.RecordType:224-if (JSType.isSubtypeHelper(this, that)) {	0
com.google.javascript.rhino.jstype.RecordType:281-}	0
com.google.javascript.rhino.jstype.RecordType:97-if (!other.isRecordType()) {	0
com.google.javascript.rhino.jstype.RecordType:122-return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);	0
com.google.javascript.rhino.jstype.RecordType:271-if (typeA.isPropertyTypeDeclared(property)) {	0
com.google.javascript.rhino.jstype.RecordType:272-if (!propA.isEquivalentTo(propB)) {	0
com.google.javascript.rhino.jstype.RecordType:268-JSType propA = typeA.getPropertyType(property);	0
com.google.javascript.rhino.jstype.RecordType:269-JSType propB = typeB.getPropertyType(property);	0
com.google.javascript.rhino.jstype.RecordType:270-if (!propA.isUnknownType() && !propB.isUnknownType()) {	0
com.google.javascript.rhino.jstype.RecordType:157-if (that.isRecordType()) {	0
com.google.javascript.rhino.jstype.RecordType:116-}	0
com.google.javascript.rhino.jstype.RecordType:117-return true;	0
com.google.javascript.rhino.jstype.RecordType:112-for (String key : keySet) {	0
com.google.javascript.rhino.jstype.RecordType:113-if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {	0
com.google.javascript.rhino.jstype.RecordType:79-super(registry, null, null);	0
com.google.javascript.rhino.jstype.RecordType:67-private final SortedMap<String, JSType> properties = Maps.newTreeMap();	0
com.google.javascript.rhino.jstype.RecordType:68-private boolean isFrozen = false;	0
com.google.javascript.rhino.jstype.RecordType:80-setPrettyPrint(true);	0
com.google.javascript.jscomp.SourceMap:113-private SourceMap(SourceMapGenerator generator) {	0
com.google.javascript.jscomp.SourceMap:109-private List<LocationMapping> prefixMappings = Collections.emptyList();	0
com.google.javascript.jscomp.SourceMap:110-private final Map<String, String> sourceLocationFixupCache =	0
com.google.javascript.jscomp.SourceMap:114-this.generator = generator;	0
com.google.javascript.jscomp.SourceMap:115-}	0
com.google.javascript.jscomp.SourceMap:121-String sourceFile = node.getSourceFileName();	0
com.google.javascript.jscomp.SourceMap:126-if (sourceFile == null || node.getLineno() < 0) {	0
com.google.javascript.jscomp.SourceMap:130-sourceFile = fixupSourceLocation(sourceFile);	0
com.google.javascript.jscomp.SourceMap:132-String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);	0
com.google.javascript.jscomp.SourceMap:139-generator.addMapping(	0
com.google.javascript.jscomp.SourceMap:143-}	0
com.google.javascript.jscomp.SourceMap:150-if (prefixMappings.isEmpty()) {	0
com.google.javascript.jscomp.SourceMap:151-return sourceFile;	0
com.google.javascript.jscomp.SourceMap:178-generator.appendTo(out, name);	0
com.google.javascript.jscomp.SourceMap:179-}	0
com.google.javascript.jscomp.SourceMap:187-generator.setStartingPosition(offsetLine, offsetIndex);	0
com.google.javascript.jscomp.SourceMap:188-}	0
com.google.javascript.jscomp.SourceMap:195-generator.validate(validate);	0
com.google.javascript.jscomp.SourceMap:196-}	0
com.google.javascript.jscomp.SourceMap:202-this.prefixMappings = sourceMapLocationMappings;	0
com.google.javascript.jscomp.SourceMap:203-}	0
com.google.debugging.sourcemap.SourceMapConsumerV3:56-public SourceMapConsumerV3() {	0
com.google.debugging.sourcemap.SourceMapConsumerV3:51-private ArrayList<ArrayList<Entry>> lines = null;	0
com.google.debugging.sourcemap.SourceMapConsumerV3:58-}	0
com.google.debugging.sourcemap.SourceMapConsumerV3:102-int version = sourceMapRoot.getInt("version");	0
com.google.debugging.sourcemap.SourceMapConsumerV3:103-if (version != 3) {	0
com.google.debugging.sourcemap.SourceMapConsumerV3:107-String file = sourceMapRoot.getString("file");	0
com.google.debugging.sourcemap.SourceMapConsumerV3:108-if (file.isEmpty()) {	0
com.google.debugging.sourcemap.SourceMapConsumerV3:112-if (sourceMapRoot.has("sections")) {	0
com.google.debugging.sourcemap.SourceMapConsumerV3:118-lineCount = sourceMapRoot.getInt("lineCount");	0
com.google.debugging.sourcemap.SourceMapConsumerV3:119-String lineMap = sourceMapRoot.getString("mappings");	0
com.google.debugging.sourcemap.SourceMapConsumerV3:121-sources = getJavaStringArray(sourceMapRoot.getJSONArray("sources"));	0
com.google.debugging.sourcemap.SourceMapConsumerV3:122-names = getJavaStringArray(sourceMapRoot.getJSONArray("names"));	0
com.google.debugging.sourcemap.SourceMapConsumerV3:124-lines = Lists.newArrayListWithCapacity(lineCount);	0
com.google.debugging.sourcemap.SourceMapConsumerV3:126-new MappingBuilder(lineMap).build();	0
com.google.debugging.sourcemap.SourceMapConsumerV3:129-}	0
com.google.debugging.sourcemap.SourceMapConsumerV3:130-}	0
com.google.debugging.sourcemap.SourceMapConsumerV3:208-lineNumber--;	0
com.google.debugging.sourcemap.SourceMapConsumerV3:209-column--;	0
com.google.debugging.sourcemap.SourceMapConsumerV3:211-if (lineNumber < 0 || lineNumber >= lines.size()) {	0
com.google.debugging.sourcemap.SourceMapConsumerV3:215-Preconditions.checkState(lineNumber >= 0);	0
com.google.debugging.sourcemap.SourceMapConsumerV3:216-Preconditions.checkState(column >= 0);	0
com.google.debugging.sourcemap.SourceMapConsumerV3:220-if (lines.get(lineNumber) == null) {	0
com.google.debugging.sourcemap.SourceMapConsumerV3:224-ArrayList<Entry> entries = lines.get(lineNumber);	0
com.google.debugging.sourcemap.SourceMapConsumerV3:226-Preconditions.checkState(entries.size() > 0);	0
com.google.debugging.sourcemap.SourceMapConsumerV3:227-if (entries.get(0).getGeneratedColumn() > column) {	0
com.google.debugging.sourcemap.SourceMapConsumerV3:231-int index = search(entries, column, 0, entries.size() - 1);	0
com.google.debugging.sourcemap.SourceMapConsumerV3:232-Preconditions.checkState(index >= 0, "unexpected:%s", index);	0
com.google.debugging.sourcemap.SourceMapConsumerV3:233-return getOriginalMappingForEntry(entries.get(index));	0
com.google.debugging.sourcemap.SourceMapConsumerV3:270-int len = array.length();	0
com.google.javascript.jscomp.TypedScopeCreator:228-NodeTraversal.traverse(compiler, functionNode.getLastChild(),	0
com.google.javascript.jscomp.TypedScopeCreator:223-JSType type = functionNode.getJSType();	0
com.google.javascript.jscomp.TypedScopeCreator:224-if (type != null && type.isFunctionType()) {	0
com.google.javascript.jscomp.TypedScopeCreator:225-FunctionType fnType = type.toMaybeFunctionType();	0
com.google.javascript.jscomp.TypedScopeCreator:226-ObjectType fnThisType = fnType.getTypeOfThis();	0
com.google.javascript.jscomp.TypedScopeCreator:227-if (!fnThisType.isUnknownType()) {	0
com.google.javascript.jscomp.TypedScopeCreator:232-}	0
com.google.javascript.jscomp.TypedScopeCreator:210-newScope = new Scope(parent, root);	0
com.google.javascript.jscomp.TypedScopeCreator:211-LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);	0
com.google.javascript.jscomp.TypedScopeCreator:212-scopeBuilder = localScopeBuilder;	0
com.google.javascript.jscomp.TypedScopeCreator:213-localScopeBuilder.build();	0
com.google.javascript.jscomp.TypedScopeCreator:1916-return functionAnalysisResults.get(n);	0
com.google.javascript.jscomp.TypedScopeCreator:1910-if (n == null) {	0
com.google.javascript.jscomp.TypedScopeCreator:391-return typeRegistry.getNativeType(nativeType);	0
com.google.javascript.jscomp.TypedScopeCreator:175-this(compiler, compiler.getCodingConvention());	0
com.google.javascript.jscomp.TypedScopeCreator:176-}	0
com.google.javascript.jscomp.TypedScopeCreator:196-Scope newScope = null;	0
com.google.javascript.jscomp.TypedScopeCreator:197-AbstractScopeBuilder scopeBuilder = null;	0
com.google.javascript.jscomp.TypedScopeCreator:198-if (parent == null) {	0
com.google.javascript.jscomp.TypedScopeCreator:200-(new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults))	0
com.google.javascript.jscomp.TypedScopeCreator:204-newScope = createInitialScope(root);	0
com.google.javascript.jscomp.TypedScopeCreator:206-GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);	0
com.google.javascript.jscomp.TypedScopeCreator:207-scopeBuilder = globalScopeBuilder;	0
com.google.javascript.jscomp.TypedScopeCreator:208-NodeTraversal.traverse(compiler, root, scopeBuilder);	0
com.google.javascript.jscomp.TypedScopeCreator:209-} else {	0
com.google.javascript.jscomp.TypedScopeCreator:216-scopeBuilder.resolveStubDeclarations();	0
com.google.javascript.jscomp.TypedScopeCreator:217-scopeBuilder.resolveTypes();	0
com.google.javascript.jscomp.TypedScopeCreator:222-for (Node functionNode : scopeBuilder.nonExternFunctions) {	0
com.google.javascript.jscomp.TypedScopeCreator:234-if (parent == null) {	0
com.google.javascript.jscomp.TypedScopeCreator:235-codingConvention.defineDelegateProxyPrototypeProperties(	0
com.google.javascript.jscomp.TypedScopeCreator:239-return newScope;	0
com.google.javascript.jscomp.TypedScopeCreator:179-CodingConvention codingConvention) {	0
com.google.javascript.jscomp.TypedScopeCreator:142-private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();	0
com.google.javascript.jscomp.TypedScopeCreator:143-private final Map<String, String> delegateCallingConventions =	0
com.google.javascript.jscomp.TypedScopeCreator:147-private final Map<Node, AstFunctionContents> functionAnalysisResults =	0
com.google.javascript.jscomp.TypedScopeCreator:180-this.compiler = compiler;	0
com.google.javascript.jscomp.TypedScopeCreator:181-this.validator = compiler.getTypeValidator();	0
com.google.javascript.jscomp.TypedScopeCreator:182-this.codingConvention = codingConvention;	0
com.google.javascript.jscomp.TypedScopeCreator:183-this.typeRegistry = compiler.getTypeRegistry();	0
com.google.javascript.jscomp.TypedScopeCreator:184-this.typeParsingErrorReporter = typeRegistry.getErrorReporter();	0
com.google.javascript.jscomp.TypedScopeCreator:185-}	0
com.google.javascript.jscomp.TypedScopeCreator:99-static final String DELEGATE_PROXY_SUFFIX =	0
com.google.javascript.jscomp.TypedScopeCreator:102-static final DiagnosticType MALFORMED_TYPEDEF =	0
com.google.javascript.jscomp.TypedScopeCreator:107-static final DiagnosticType ENUM_INITIALIZER =	0
com.google.javascript.jscomp.TypedScopeCreator:112-static final DiagnosticType CTOR_INITIALIZER =	0
com.google.javascript.jscomp.TypedScopeCreator:117-static final DiagnosticType IFACE_INITIALIZER =	0
com.google.javascript.jscomp.TypedScopeCreator:122-static final DiagnosticType CONSTRUCTOR_EXPECTED =	0
com.google.javascript.jscomp.TypedScopeCreator:127-static final DiagnosticType UNKNOWN_LENDS =	0
com.google.javascript.jscomp.TypedScopeCreator:132-static final DiagnosticType LENDS_ON_NON_OBJECT =	0
com.google.javascript.jscomp.TypedScopeCreator:297-NodeTraversal.traverse(	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:161-Renamer renamer = nameStack.peek();	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:162-if (renamer.stripConstIfReplaced()) {	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:166-n.setString(newName);	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:167-t.getCompiler().reportCodeChange();	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:168-}	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:196-return newName;	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:213-renamer.addDeclaredName(n.getString());	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:93-String name = c.getString();	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:94-renamer.addDeclaredName(name);	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:88-renamer = nameStack.peek().forChildScope();	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:92-for (Node c = declarationRoot.getFirstChild().getNext().getFirstChild(); c != null; c = c.getNext()) {	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:96-Node functionBody = declarationRoot.getLastChild();	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:97-findDeclaredNames(functionBody, null, renamer);	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:98-}else	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:109-nameStack.pop();	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:121-Renamer renamer = nameStack.peek().forChildScope();	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:124-String name = n.getFirstChild().getString();	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:125-if (name != null && !name.isEmpty() && parent != null	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:136-nameStack.push(renamer);	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:138-break;	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:174-nameStack.pop();	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:175-break;	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:220-findDeclaredNames(c, n, renamer);	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:198-}	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:199-return null;	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:67-MakeDeclaredNamesUnique(Renamer renamer) {	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:60-private Deque<Renamer> nameStack = new ArrayDeque<Renamer>();	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:68-this.rootRenamer = renamer;	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:69-}	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:77-Node declarationRoot = t.getScopeRoot();	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:79-if (nameStack.isEmpty()) {	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:82-Preconditions.checkState(	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:85-Preconditions.checkState(t.inGlobalScope());	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:86-renamer = rootRenamer;	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:91-if (declarationRoot.getType() == Token.FUNCTION) {	1
com.google.javascript.jscomp.MakeDeclaredNamesUnique:103-nameStack.push(renamer);	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:104-}	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:108-if (!t.inGlobalScope()) {	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:111-}	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:116-switch (n.getType()) {	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:152-return true;	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:157-switch (n.getType()) {	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:159-String newName = getReplacementName(n.getString());	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:160-if (newName != null) {	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:186-}	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:193-for (Renamer names : nameStack) {	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:194-String newName = names.getReplacementName(oldName);	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:195-if (newName != null) {	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:209-if (parent == null	0
com.google.javascript.jscomp.MakeDeclaredNamesUnique:212-if (NodeUtil.isVarDeclaration(n)) {	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:435-Node emptyStringNode = Node.newString("");	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:436-n.getParent().replaceChild(n, emptyStringNode);	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:437-reportCodeChange();	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:438-return emptyStringNode;	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:408-Preconditions.checkNotNull(prev);	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:410-foldedSize += sb.length() + 2;	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:411-arrayFoldedChildren.add(	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:413-sb = null;	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:467-arrayNode.detachChildren();	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:468-for (Node node : arrayFoldedChildren) {	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:469-arrayNode.addChildToBack(node);	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:470-}	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:471-reportCodeChange();	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:475-return n;	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:391-String joinString = (right == null) ? "," : NodeUtil.getStringValue(right);	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:392-List<Node> arrayFoldedChildren = Lists.newLinkedList();	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:393-StringBuilder sb = null;	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:394-int foldedSize = 0;	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:395-Node prev = null;	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:396-Node elem = arrayNode.getFirstChild();	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:398-while (elem != null) {	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:422-if (sb != null) {	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:430-foldedSize += arrayFoldedChildren.size() - 1;	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:432-int originalSize = InlineCostEstimator.getCost(n);	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:433-switch (arrayFoldedChildren.size()) {	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:458-if (arrayFoldedChildren.size() == arrayNode.getChildCount()) {	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:459-return n;	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:461-int kJoinOverhead = "[].join()".length();	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:462-foldedSize += kJoinOverhead;	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:463-foldedSize += (right != null) ? InlineCostEstimator.getCost(right) : 0;	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:464-if (foldedSize > originalSize) {	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:376-if (!NodeUtil.isImmutableValue(right)) {	1
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:90-return subtree;	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:374-Node right = callTarget.getNext();	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:375-if (right != null) {	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:381-Node arrayNode = callTarget.getFirstChild();	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:382-Node functionName = arrayNode.getNext();	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:384-if ((arrayNode.getType() != Token.ARRAYLIT) ||	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:403-sb.append(joinString);	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:407-if (sb != null) {	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:415-foldedSize += InlineCostEstimator.getCost(elem);	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:416-arrayFoldedChildren.add(elem);	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:31-class PeepholeReplaceKnownMethods extends AbstractPeepholeOptimization{	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:34-private static final Locale ROOT_LOCALE = new Locale("");	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:38-if (NodeUtil.isCall(subtree) ){	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:39-return tryFoldKnownMethods(subtree);	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:41-return subtree;	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:49-subtree = tryFoldArrayJoin(subtree);	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:51-if (subtree.getType() == Token.CALL) {	0
com.google.javascript.jscomp.PeepholeReplaceKnownMethods:64-return subtree;	0
com.google.javascript.jscomp.CodeConsumer:200-append(op);	0
com.google.javascript.jscomp.CodeConsumer:201-}	0
com.google.javascript.jscomp.CodeConsumer:236-char prev = getLastChar();	0
com.google.javascript.jscomp.CodeConsumer:237-if (x < 0 && prev == '-') {	0
com.google.javascript.jscomp.CodeConsumer:241-if ((long) x == x) {	1
com.google.javascript.jscomp.CodeConsumer:242-long value = (long) x;	0
com.google.javascript.jscomp.CodeConsumer:243-long mantissa = value;	0
com.google.javascript.jscomp.CodeConsumer:244-int exp = 0;	0
com.google.javascript.jscomp.CodeConsumer:245-if (Math.abs(x) >= 100) {	0
com.google.javascript.jscomp.CodeConsumer:251-if (exp > 2) {	0
com.google.javascript.jscomp.CodeConsumer:254-add(Long.toString(value));	0
com.google.javascript.jscomp.CodeConsumer:256-} else {	0
com.google.javascript.jscomp.CodeConsumer:260-}	0
com.google.javascript.jscomp.CodeConsumer:288-void endFile() {}	0
com.google.javascript.jscomp.CodeConsumer:229-maybeCutLine();	0
com.google.javascript.jscomp.CodeConsumer:204-maybeEndStatement();	0
com.google.javascript.jscomp.CodeConsumer:206-char first = op.charAt(0);	0
com.google.javascript.jscomp.CodeConsumer:207-char prev = getLastChar();	0
com.google.javascript.jscomp.CodeConsumer:209-if ((first == '+' || first == '-') && prev == first) {	0
com.google.javascript.jscomp.CodeConsumer:213-} else if (Character.isLetter(first) &&	0
com.google.javascript.jscomp.CodeConsumer:217-} else if (prev == '-' && first == '>') {	0
com.google.javascript.jscomp.CodeConsumer:223-appendOp(op, binOp);	0
com.google.javascript.jscomp.CodeConsumer:228-if (binOp) {	0
com.google.javascript.jscomp.CodeConsumer:231-}	0
com.google.javascript.jscomp.CodeConsumer:62-add(identifier);	0
com.google.javascript.jscomp.CodeConsumer:63-}	0
com.google.javascript.jscomp.CodeConsumer:135-endStatement(false);	0
com.google.javascript.jscomp.CodeConsumer:136-}	0
com.google.javascript.jscomp.CodeConsumer:143-} else if (statementStarted) {	0
com.google.javascript.jscomp.CodeConsumer:144-statementNeedsEnded = true;	0
com.google.javascript.jscomp.CodeConsumer:139-if (needSemiColon) {	0
com.google.javascript.jscomp.CodeConsumer:146-}	0
com.google.javascript.jscomp.CodeConsumer:29-abstract class CodeConsumer {	0
com.google.javascript.jscomp.CodeConsumer:30-boolean statementNeedsEnded = false;	0
com.google.javascript.jscomp.CodeConsumer:31-boolean statementStarted = false;	0
com.google.javascript.jscomp.CodeConsumer:32-boolean sawFunction = false;	0
com.google.javascript.jscomp.CodeConsumer:53-return true;	0
com.google.javascript.jscomp.CodeConsumer:154-if (statementNeedsEnded) {	0
com.google.javascript.jscomp.CodeConsumer:160-statementStarted = true;	0
com.google.javascript.jscomp.CodeConsumer:161-}	0
com.google.javascript.jscomp.CodeConsumer:182-maybeEndStatement();	0
com.google.javascript.jscomp.CodeConsumer:184-if (newcode.length() == 0) {	0
com.google.javascript.jscomp.CodeConsumer:188-char c = newcode.charAt(0);	0
com.google.javascript.jscomp.CodeConsumer:189-if ((isWordChar(c) || c == '\\') &&	0
com.google.javascript.jscomp.CodeConsumer:196-append(newcode);	0
com.google.javascript.jscomp.CodeConsumer:197-}	0
com.google.javascript.jscomp.CodeConsumer:263-return (ch == '_' ||	0
com.google.javascript.jscomp.CodeConsumer:39-}	0
com.google.javascript.jscomp.CodeConsumer:46-}	0
com.google.javascript.jscomp.CodeConsumer:77-append("{");	0
com.google.javascript.jscomp.CodeGenerator:676-cc.addNumber(d);	0
com.google.javascript.jscomp.CodeGenerator:674-double d = getSimpleNumber(key);	0
com.google.javascript.jscomp.CodeGenerator:675-if (!Double.isNaN(d)) {	0
com.google.javascript.jscomp.CodeGenerator:752-if (l < NodeUtil.MAX_POSITIVE_INTEGER_NUMBER) {	0
com.google.javascript.jscomp.CodeGenerator:753-return l;	0
com.google.javascript.jscomp.CodeGenerator:661-Preconditions.checkState(c.getType() == Token.STRING);	0
com.google.javascript.jscomp.CodeGenerator:662-String key = c.getString();	0
com.google.javascript.jscomp.CodeGenerator:665-if (!c.isQuotedString() &&	0
com.google.javascript.jscomp.CodeGenerator:681-add(":");	0
com.google.javascript.jscomp.CodeGenerator:682-addExpr(c.getFirstChild(), 1);	0
com.google.javascript.jscomp.CodeGenerator:745-return len > 0;	1
com.google.javascript.jscomp.CodeGenerator:751-long l = Long.parseLong(s);	0
com.google.javascript.jscomp.CodeGenerator:738-int len = s.length();	0
com.google.javascript.jscomp.CodeGenerator:739-for (int index = 0; index < len; index++) {	0
com.google.javascript.jscomp.CodeGenerator:740-char c = s.charAt(index);	0
com.google.javascript.jscomp.CodeGenerator:741-if (c < '0' || c > '9') {	0
com.google.javascript.jscomp.CodeGenerator:749-if (isSimpleNumber(s)) {	0
com.google.javascript.jscomp.CodeGenerator:654-if (c != first) {	0
com.google.javascript.jscomp.CodeGenerator:658-if (c.getType() == Token.GET || c.getType() == Token.SET) {	0
com.google.javascript.jscomp.CodeGenerator:875-addExpr(n, minPrecedence, Context.OTHER);	0
com.google.javascript.jscomp.CodeGenerator:876-}	0
com.google.javascript.jscomp.CodeGenerator:648-boolean needsParens = (context == Context.START_OF_EXPR);	0
com.google.javascript.jscomp.CodeGenerator:649-if (needsParens) {	0
com.google.javascript.jscomp.CodeGenerator:652-add("{");	0
com.google.javascript.jscomp.CodeGenerator:653-for (Node c = first; c != null; c = c.getNext()) {	0
com.google.javascript.jscomp.CodeGenerator:685-add("}");	0
com.google.javascript.jscomp.CodeGenerator:686-if (needsParens) {	0
com.google.javascript.jscomp.CodeGenerator:226-Preconditions.checkState(childCount == 0);	0
com.google.javascript.jscomp.CodeGenerator:227-cc.addNumber(n.getDouble());	0
com.google.javascript.jscomp.CodeGenerator:228-break;	0
com.google.javascript.jscomp.CodeGenerator:195-Preconditions.checkState(childCount == 1);	0
com.google.javascript.jscomp.CodeGenerator:196-addIdentifier(n.getString());	0
com.google.javascript.jscomp.CodeGenerator:197-cc.addOp("=", true);	0
com.google.javascript.jscomp.CodeGenerator:198-if (first.getType() == Token.COMMA) {	0
com.google.javascript.jscomp.CodeGenerator:203-addExpr(first, 0, getContextForNoInOperator(context));	0
com.google.javascript.jscomp.CodeGenerator:206-break;	0
com.google.javascript.jscomp.CodeGenerator:180-if (first != null) {	0
com.google.javascript.jscomp.CodeGenerator:181-add("var ");	0
com.google.javascript.jscomp.CodeGenerator:182-addList(first, false, getContextForNoInOperator(context));	0
com.google.javascript.jscomp.CodeGenerator:385-cc.endStatement();	0
com.google.javascript.jscomp.CodeGenerator:1156-return (context == Context.IN_FOR_INIT_CLAUSE	0
com.google.javascript.jscomp.CodeGenerator:901-boolean isFirst = n == firstInList;	0
com.google.javascript.jscomp.CodeGenerator:902-if (isFirst) {	0
com.google.javascript.jscomp.CodeGenerator:903-addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);	0
com.google.javascript.jscomp.CodeGenerator:871-addExpr(n, minPrecedence, context);	0
com.google.javascript.jscomp.CodeGenerator:872-}	0
com.google.javascript.jscomp.CodeGenerator:900-for (Node n = firstInList; n != null; n = n.getNext()) {	0
com.google.javascript.jscomp.CodeGenerator:909-}	0
com.google.javascript.jscomp.CodeGenerator:879-if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||	0
com.google.javascript.jscomp.CodeGenerator:886-add(n, context);	0
com.google.javascript.jscomp.InlineObjectLiterals:57-Supplier<String> safeNameIdSupplier) {	0
com.google.javascript.jscomp.InlineObjectLiterals:58-this.compiler = compiler;	0
com.google.javascript.jscomp.InlineObjectLiterals:59-this.safeNameIdSupplier = safeNameIdSupplier;	0
com.google.javascript.jscomp.InlineObjectLiterals:60-}	0
com.google.javascript.jscomp.InlineObjectLiterals:64-ReferenceCollectingCallback callback = new ReferenceCollectingCallback(	0
com.google.javascript.jscomp.InlineObjectLiterals:66-callback.process(externs, root);	0
com.google.javascript.jscomp.InlineObjectLiterals:67-}	0
com.google.javascript.rhino.jstype.FunctionType:556-return true;	0
com.google.javascript.rhino.jstype.FunctionType:500-Node params = getParametersNode();	0
com.google.javascript.rhino.jstype.FunctionType:501-if (params == null) {	0
com.google.javascript.rhino.jstype.FunctionType:510-params = params.cloneTree();	0
com.google.javascript.rhino.jstype.FunctionType:511-Node thisTypeNode = Node.newString(Token.NAME, "thisType");	0
com.google.javascript.rhino.jstype.FunctionType:512-thisTypeNode.setJSType(	0
com.google.javascript.rhino.jstype.FunctionType:514-params.addChildToFront(thisTypeNode);	0
com.google.javascript.rhino.jstype.FunctionType:515-thisTypeNode.setOptionalArg(true);	0
com.google.javascript.rhino.jstype.FunctionType:517-defineDeclaredProperty(name,	0
com.google.javascript.rhino.jstype.FunctionType:558-this.setPrototypeBasedOn(objType);	0
com.google.javascript.rhino.jstype.FunctionType:559-return true;	0
com.google.javascript.rhino.jstype.FunctionType:553-ObjectType objType = type.toObjectType();	0
com.google.javascript.rhino.jstype.FunctionType:554-if (objType != null) {	0
com.google.javascript.rhino.jstype.FunctionType:555-if (objType.isEquivalentTo(prototype)) {	0
com.google.javascript.rhino.jstype.FunctionType:498-if ("call".equals(name)) {	0
com.google.javascript.rhino.jstype.FunctionType:524-} else if ("apply".equals(name)) {	0
com.google.javascript.rhino.jstype.FunctionType:497-if (!hasOwnProperty(name)) {	0
com.google.javascript.rhino.jstype.FunctionType:546-return super.getPropertyType(name);	0
com.google.javascript.rhino.jstype.FunctionType:552-if ("prototype".equals(name)) {	0
com.google.javascript.rhino.jstype.FunctionType:888-boolean treatThisTypesAsCovariant =	0
com.google.javascript.rhino.jstype.FunctionType:903-return treatThisTypesAsCovariant && this.call.isSubtype(other.call);	0
com.google.javascript.rhino.jstype.FunctionType:564-return super.defineProperty(name, type, inferred, propertyNode);	0
com.google.javascript.rhino.jstype.FunctionType:877-if (this.isInterface()) {	0
com.google.javascript.rhino.jstype.FunctionType:872-FunctionType other = that.toMaybeFunctionType();	0
com.google.javascript.rhino.jstype.FunctionType:873-if (other.isInterface()) {	0
com.google.javascript.rhino.jstype.FunctionType:282-return super.getSlot(name);	0
com.google.javascript.rhino.jstype.FunctionType:238-i++;	0
com.google.javascript.rhino.jstype.FunctionType:239-if (!n.isOptionalArg() && !n.isVarArgs()) {	0
com.google.javascript.rhino.jstype.FunctionType:242-}	0
com.google.javascript.rhino.jstype.FunctionType:201-return true;	0
com.google.javascript.rhino.jstype.FunctionType:1009-return templateTypeName;	0
com.google.javascript.rhino.jstype.FunctionType:191-return kind == Kind.ORDINARY;	0
com.google.javascript.jscomp.TypedScopeCreator:211-JSType type = functionNode.getJSType();	0
com.google.javascript.jscomp.TypedScopeCreator:212-if (type != null && type.isFunctionType()) {	0
com.google.javascript.jscomp.TypedScopeCreator:213-FunctionType fnType = type.toMaybeFunctionType();	0
com.google.javascript.jscomp.TypedScopeCreator:214-ObjectType fnThisType = fnType.getTypeOfThis();	0
com.google.javascript.jscomp.TypedScopeCreator:215-if (!fnThisType.isUnknownType()) {	0
com.google.javascript.jscomp.TypedScopeCreator:220-}	0
com.google.javascript.rhino.jstype.FunctionType:255-return params.getChildCount();	0
com.google.javascript.jscomp.TypedScopeCreator:216-NodeTraversal.traverse(compiler, functionNode.getLastChild(),	0
com.google.javascript.rhino.jstype.FunctionType:235-int i = 0;	0
com.google.javascript.rhino.jstype.FunctionType:236-int min = 0;	0
com.google.javascript.rhino.jstype.FunctionType:237-for (Node n : getParameters()) {	0
com.google.javascript.rhino.jstype.FunctionType:243-return min;	0
com.google.javascript.rhino.jstype.FunctionType:251-Node params = getParametersNode();	0
com.google.javascript.rhino.jstype.FunctionType:252-if (params != null) {	0
com.google.javascript.rhino.jstype.FunctionType:253-Node lastParam = params.getLastChild();	0
com.google.javascript.rhino.jstype.FunctionType:254-if (lastParam == null || !lastParam.isVarArgs()) {	0
com.google.javascript.rhino.jstype.FunctionType:279-getPrototype();	0
com.google.javascript.rhino.jstype.FunctionType:280-return prototypeSlot;	0
com.google.javascript.jscomp.FunctionRewriter:78-Node helperCode = parseHelperCode(reducer);	0
com.google.javascript.jscomp.FunctionRewriter:79-if (helperCode == null) {	0
com.google.javascript.jscomp.FunctionRewriter:83-int helperCodeCost = InlineCostEstimator.getCost(helperCode);	0
com.google.javascript.jscomp.FunctionRewriter:86-int savings = 0;	0
com.google.javascript.jscomp.FunctionRewriter:87-for (Reduction reduction : reductions) {	0
com.google.javascript.jscomp.FunctionRewriter:88-savings += reduction.estimateSavings();	0
com.google.javascript.jscomp.FunctionRewriter:89-}	0
com.google.javascript.jscomp.FunctionRewriter:93-if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {	0
com.google.javascript.jscomp.FunctionRewriter:94-for (Reduction reduction : reductions) {	0
com.google.javascript.jscomp.FunctionRewriter:95-reduction.apply();	0
com.google.javascript.jscomp.FunctionRewriter:96-}	0
com.google.javascript.jscomp.FunctionRewriter:98-Node addingRoot = compiler.getNodeForCodeInsertion(null);	0
com.google.javascript.jscomp.FunctionRewriter:99-addingRoot.addChildrenToFront(helperCode);	0
com.google.javascript.jscomp.FunctionRewriter:100-compiler.reportCodeChange();	0
com.google.javascript.jscomp.FunctionRewriter:102-}	0
com.google.javascript.jscomp.FunctionRewriter:111-Node root = compiler.parseSyntheticCode(	0
com.google.javascript.jscomp.FunctionRewriter:113-return (root != null) ? root.removeFirstChild() : null;	0
com.google.javascript.jscomp.FunctionRewriter:52-FunctionRewriter(AbstractCompiler compiler) {	0
com.google.javascript.jscomp.FunctionRewriter:53-this.compiler = compiler;	0
com.google.javascript.jscomp.FunctionRewriter:54-}	0
com.google.javascript.jscomp.FunctionRewriter:58-List<Reducer> reducers = ImmutableList.of(new ReturnConstantReducer(),	0
com.google.javascript.jscomp.FunctionRewriter:64-Multimap<Reducer, Reduction> reductionMap = HashMultimap.create();	0
com.google.javascript.jscomp.FunctionRewriter:68-NodeTraversal.traverse(compiler, root,	0
com.google.javascript.jscomp.FunctionRewriter:72-for (Reducer reducer : reducers) {	0
com.google.javascript.jscomp.FunctionRewriter:73-Collection<Reduction> reductions = reductionMap.get(reducer);	0
com.google.javascript.jscomp.FunctionRewriter:74-if (reductions.isEmpty()) {	0
com.google.javascript.jscomp.FunctionRewriter:75-continue;	0
com.google.javascript.jscomp.FunctionRewriter:103-}	0
com.google.javascript.jscomp.FunctionRewriter:117-return NodeUtil.isFunctionExpression(n);	1
com.google.javascript.jscomp.FunctionRewriter:80-continue;	0
com.google.javascript.jscomp.SourceFile:242-return null;	1
com.google.javascript.jscomp.SourceFile:206-String js = "";	0
com.google.javascript.jscomp.SourceFile:211-js = getCode();	0
com.google.javascript.jscomp.SourceFile:214-}	0
com.google.javascript.jscomp.SourceFile:216-int pos = 0;	0
com.google.javascript.jscomp.SourceFile:217-int startLine = 1;	0
com.google.javascript.jscomp.SourceFile:221-if (lineNumber >= lastLine) {	0
com.google.javascript.jscomp.SourceFile:222-pos = lastOffset;	0
com.google.javascript.jscomp.SourceFile:223-startLine = lastLine;	0
com.google.javascript.jscomp.SourceFile:226-for (int n = startLine; n < lineNumber; n++) {	0
com.google.javascript.jscomp.SourceFile:235-lastOffset = pos;	0
com.google.javascript.jscomp.SourceFile:236-lastLine = lineNumber;	0
com.google.javascript.jscomp.SourceFile:238-if (js.indexOf('\n', pos) == -1) {	0
com.google.javascript.jscomp.SourceFile:227-int nextpos = js.indexOf('\n', pos);	0
com.google.javascript.jscomp.SourceFile:228-if (nextpos == -1) {	0
com.google.javascript.jscomp.SourceFile:231-pos = nextpos + 1;	0
com.google.javascript.jscomp.SourceFile:140-return code;	0
com.google.javascript.jscomp.SourceFile:86-public SourceFile(String fileName) {	0
com.google.javascript.jscomp.SourceFile:59-private boolean isExternFile = false;	0
com.google.javascript.jscomp.SourceFile:66-private String originalPath = null;	0
com.google.javascript.jscomp.SourceFile:69-private int[] lineOffsets = null;	0
com.google.javascript.jscomp.SourceFile:77-private String code = null;	0
com.google.javascript.jscomp.SourceFile:87-if (fileName == null || fileName.isEmpty()) {	0
com.google.javascript.jscomp.SourceFile:90-this.fileName = fileName;	0
com.google.javascript.jscomp.SourceFile:92-this.lastOffset = 0;	0
com.google.javascript.jscomp.SourceFile:93-this.lastLine = 1;	0
com.google.javascript.jscomp.SourceFile:94-}	0
com.google.javascript.jscomp.SourceFile:156-code = sourceCode;	0
com.google.javascript.jscomp.SourceFile:157-}	0
com.google.javascript.jscomp.SourceFile:164-this.originalPath = originalPath;	0
com.google.javascript.jscomp.SourceFile:165-}	0
com.google.javascript.jscomp.SourceFile:183-return fileName;	0
com.google.javascript.jscomp.SourceFile:194-isExternFile = newVal;	0
com.google.javascript.jscomp.SourceFile:195-}	0
com.google.javascript.jscomp.SourceFile:321-return new Preloaded(fileName, code);	0
com.google.javascript.jscomp.SourceFile:244-return js.substring(pos, js.indexOf('\n', pos));	0
com.google.javascript.jscomp.SourceFile:88-throw new IllegalArgumentException("a source must have a name");	0
com.google.javascript.jscomp.SourceFile:98-if (lineOffsets == null) {	0
com.google.javascript.jscomp.SourceFile:99-findLineOffsets();	0
com.google.javascript.jscomp.SourceFile:101-if (lineno < 1 || lineno > lineOffsets.length) {	0
com.google.javascript.jscomp.SourceFile:102-throw new IllegalArgumentException(	0
com.google.javascript.jscomp.SourceFile:106-return lineOffsets[lineno - 1];	0
com.google.javascript.jscomp.SourceFile:111-if (lineOffsets == null) {	0
com.google.javascript.jscomp.SourceFile:112-findLineOffsets();	0
com.google.javascript.jscomp.SourceFile:114-return lineOffsets.length;	0
com.google.javascript.jscomp.SourceFile:119-String[] sourceLines = getCode().split("\n");	0
com.google.javascript.jscomp.SourceFile:120-lineOffsets = new int[sourceLines.length];	0
com.google.javascript.jscomp.SourceFile:121-for (int ii = 1; ii < sourceLines.length; ++ii) {	0
com.google.javascript.jscomp.SourceFile:122-lineOffsets[ii] =	0
com.google.javascript.jscomp.SourceFile:128-}	0
com.google.javascript.jscomp.ClosureCodingConvention:185-return extractClassNameIfGoog(node, parent, "goog.require");	0
com.google.javascript.jscomp.ClosureCodingConvention:190-String className = null;	0
com.google.javascript.jscomp.ClosureCodingConvention:191-if (NodeUtil.isExprCall(parent)) {	0
com.google.javascript.jscomp.ClosureCodingConvention:192-Node callee = node.getFirstChild();	0
com.google.javascript.jscomp.ClosureCodingConvention:193-if (callee != null && callee.getType() == Token.GETPROP) {	0
com.google.javascript.jscomp.ClosureCodingConvention:194-String qualifiedName = callee.getQualifiedName();	0
com.google.javascript.jscomp.ClosureCodingConvention:195-if (functionName.equals(qualifiedName)) {	0
com.google.javascript.jscomp.ClosureCodingConvention:196-Node target = callee.getNext();	0
com.google.javascript.jscomp.ClosureCodingConvention:197-if (target != null) {	1
com.google.javascript.jscomp.ClosureCodingConvention:198-className = target.getString();	0
com.google.javascript.jscomp.ClosureCodingConvention:203-return className;	0
com.google.javascript.jscomp.ClosureCodingConvention:38-public class ClosureCodingConvention extends DefaultCodingConvention {	0
com.google.javascript.jscomp.ClosureCodingConvention:278-private final Set<String> propertyTestFunctions = ImmutableSet.of(	0
com.google.javascript.jscomp.ClosureCodingConvention:42-static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning(	0
com.google.javascript.jscomp.ClosureCodingConvention:53-if (type == SubclassType.INHERITS) {	0
com.google.javascript.jscomp.ClosureCodingConvention:54-childCtor.defineDeclaredProperty("superClass_",	0
com.google.javascript.jscomp.ClosureCodingConvention:56-childCtor.getPrototype().defineDeclaredProperty("constructor",	0
com.google.javascript.jscomp.ClosureCodingConvention:59-}	0
com.google.javascript.jscomp.ClosureCodingConvention:69-Node callName = callNode.getFirstChild();	0
com.google.javascript.jscomp.ClosureCodingConvention:70-SubclassType type = typeofClassDefiningName(callName);	0
com.google.javascript.jscomp.ClosureCodingConvention:71-if (type != null) {	0
com.google.javascript.jscomp.ClosureCodingConvention:72-Node subclass = null;	0
com.google.javascript.jscomp.ClosureCodingConvention:73-Node superclass = callNode.getLastChild();	0
com.google.javascript.jscomp.ClosureCodingConvention:82-boolean isDeprecatedCall = callNode.getChildCount() == 2 &&	0
com.google.javascript.jscomp.ClosureCodingConvention:84-if (isDeprecatedCall) {	0
com.google.javascript.jscomp.ClosureCodingConvention:86-subclass = callName.getFirstChild();	0
com.google.javascript.jscomp.ClosureCodingConvention:87-} else if (callNode.getChildCount() == 3) {	0
com.google.javascript.jscomp.ClosureCodingConvention:89-subclass = callName.getNext();	0
com.google.javascript.jscomp.ClosureCodingConvention:91-return null;	0
com.google.javascript.jscomp.ClosureCodingConvention:94-if (type == SubclassType.MIXIN) {	0
com.google.javascript.jscomp.ClosureCodingConvention:97-if (!endsWithPrototype(superclass)) {	0
com.google.javascript.jscomp.ClosureCodingConvention:98-return null;	0
com.google.javascript.jscomp.ClosureCodingConvention:100-if (!isDeprecatedCall) {	0
com.google.javascript.jscomp.ClosureCodingConvention:101-if (!endsWithPrototype(subclass)) {	0
com.google.javascript.jscomp.ClosureCodingConvention:102-return null;	0
com.google.javascript.jscomp.ClosureCodingConvention:105-subclass = subclass.getFirstChild();	0
com.google.javascript.jscomp.ClosureCodingConvention:107-superclass = superclass.getFirstChild();	0
com.google.javascript.jscomp.ClosureCodingConvention:114-if (subclass != null &&	0
com.google.javascript.jscomp.ClosureCodingConvention:117-return new SubclassRelationship(type, subclass, superclass);	0
com.google.javascript.jscomp.ClosureCodingConvention:121-return null;	0
com.google.javascript.jscomp.ClosureCodingConvention:131-String methodName = null;	0
com.google.javascript.jscomp.ClosureCodingConvention:132-if (callName.getType() == Token.GETPROP) {	0
com.google.javascript.jscomp.ClosureCodingConvention:133-methodName = callName.getLastChild().getString();	0
com.google.javascript.jscomp.ClosureCodingConvention:134-} else if (callName.getType() == Token.NAME) {	0
com.google.javascript.jscomp.ClosureCodingConvention:135-String name = callName.getString();	0
com.google.javascript.jscomp.ClosureCodingConvention:136-int dollarIndex = name.lastIndexOf('$');	0
com.google.javascript.jscomp.ClosureCodingConvention:137-if (dollarIndex != -1) {	0
com.google.javascript.jscomp.ClosureCodingConvention:138-methodName = name.substring(dollarIndex + 1);	0
com.google.javascript.jscomp.ClosureCodingConvention:142-if (methodName != null) {	0
com.google.javascript.jscomp.ClosureCodingConvention:143-if (methodName.equals("inherits")) {	0
com.google.javascript.jscomp.LiveVariablesAnalysis:195-if (!NodeUtil.isForIn(n)) {	0
com.google.javascript.jscomp.LiveVariablesAnalysis:200-Node lhs = n.getFirstChild();	0
com.google.javascript.jscomp.LiveVariablesAnalysis:201-Node rhs = lhs.getNext();	0
com.google.javascript.jscomp.LiveVariablesAnalysis:202-if (NodeUtil.isVar(lhs)) {	0
com.google.javascript.jscomp.LiveVariablesAnalysis:206-addToSetIfLocal(lhs, kill);	1
com.google.javascript.jscomp.LiveVariablesAnalysis:117-super(cfg, new LiveVariableJoinOp());	0
com.google.javascript.jscomp.LiveVariablesAnalysis:118-this.jsScope = jsScope;	0
com.google.javascript.jscomp.LiveVariablesAnalysis:119-this.escaped = Sets.newHashSet();	0
com.google.javascript.jscomp.LiveVariablesAnalysis:120-computeEscaped(jsScope, escaped, compiler);	0
com.google.javascript.jscomp.LiveVariablesAnalysis:121-}	0
com.google.javascript.jscomp.LiveVariablesAnalysis:133-return false;	0
com.google.javascript.jscomp.LiveVariablesAnalysis:143-return new LiveVariableLattice(jsScope.getVarCount());	0
com.google.javascript.jscomp.LiveVariablesAnalysis:148-final BitSet gen = new BitSet(input.liveSet.size());	0
com.google.javascript.jscomp.LiveVariablesAnalysis:149-final BitSet kill = new BitSet(input.liveSet.size());	0
com.google.javascript.jscomp.LiveVariablesAnalysis:152-boolean conditional = false;	0
com.google.javascript.jscomp.LiveVariablesAnalysis:153-List<DiGraphEdge<Node, Branch>> edgeList = getCfg().getOutEdges(node);	0
com.google.javascript.jscomp.LiveVariablesAnalysis:154-for (DiGraphEdge<Node, Branch> edge : edgeList) {	0
com.google.javascript.jscomp.LiveVariablesAnalysis:155-if (Branch.ON_EX.equals(edge.getValue())) {	0
com.google.javascript.jscomp.LiveVariablesAnalysis:158-}	0
com.google.javascript.jscomp.LiveVariablesAnalysis:159-computeGenKill(node, gen, kill, conditional);	0
com.google.javascript.jscomp.LiveVariablesAnalysis:160-LiveVariableLattice result = new LiveVariableLattice(input);	0
com.google.javascript.jscomp.LiveVariablesAnalysis:162-result.liveSet.andNot(kill);	0
com.google.javascript.jscomp.LiveVariablesAnalysis:163-result.liveSet.or(gen);	0
com.google.javascript.jscomp.LiveVariablesAnalysis:164-return result;	0
com.google.javascript.jscomp.LiveVariablesAnalysis:181-switch (n.getType()) {	0
com.google.javascript.jscomp.LiveVariablesAnalysis:185-return;	0
com.google.javascript.jscomp.LiveVariablesAnalysis:266-Preconditions.checkState(NodeUtil.isName(node));	0
com.google.javascript.jscomp.LiveVariablesAnalysis:124-return escaped;	0
com.google.javascript.jscomp.LiveVariablesAnalysis:128-return jsScope.getVar(var).index;	0
com.google.javascript.jscomp.LiveVariablesAnalysis:138-return new LiveVariableLattice(jsScope.getVarCount());	0
com.google.javascript.jscomp.LiveVariablesAnalysis:156-conditional = true;	0
com.google.javascript.jscomp.LiveVariablesAnalysis:190-computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,	0
com.google.javascript.jscomp.LiveVariablesAnalysis:192-return;	0
com.google.javascript.jscomp.LiveVariablesAnalysis:196-computeGenKill(NodeUtil.getConditionExpression(n), gen, kill,	0
com.google.javascript.jscomp.LiveVariablesAnalysis:204-lhs = lhs.getLastChild();	0
com.google.javascript.jscomp.LiveVariablesAnalysis:207-addToSetIfLocal(lhs, gen);	0
com.google.javascript.jscomp.LiveVariablesAnalysis:208-computeGenKill(rhs, gen, kill, conditional);	0
com.google.javascript.jscomp.LiveVariablesAnalysis:210-return;	0
com.google.javascript.jscomp.LiveVariablesAnalysis:213-for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {	0
com.google.javascript.jscomp.LiveVariablesAnalysis:214-if (c.hasChildren()) {	0
com.google.javascript.jscomp.LiveVariablesAnalysis:215-computeGenKill(c.getFirstChild(), gen, kill, conditional);	0
com.google.javascript.jscomp.LiveVariablesAnalysis:216-if (!conditional) {	0
com.google.javascript.jscomp.LiveVariablesAnalysis:217-addToSetIfLocal(c, kill);	0
com.google.javascript.jscomp.LiveVariablesAnalysis:221-return;	0
com.google.javascript.jscomp.LiveVariablesAnalysis:225-computeGenKill(n.getFirstChild(), gen, kill, conditional);	0
com.google.javascript.jscomp.LiveVariablesAnalysis:227-computeGenKill(n.getLastChild(), gen, kill, true);	0
com.google.javascript.jscomp.LiveVariablesAnalysis:228-return;	0
com.google.javascript.jscomp.LiveVariablesAnalysis:231-computeGenKill(n.getFirstChild(), gen, kill, conditional);	0
com.google.javascript.jscomp.LiveVariablesAnalysis:233-computeGenKill(n.getFirstChild().getNext(), gen, kill, true);	0
com.google.javascript.jscomp.LiveVariablesAnalysis:234-computeGenKill(n.getLastChild(), gen, kill, true);	0
com.google.javascript.jscomp.Compiler:70-static final DiagnosticType MODULE_DEPENDENCY_ERROR =	0
com.google.javascript.jscomp.Compiler:75-static final DiagnosticType MISSING_ENTRY_ERROR = DiagnosticType.error(	0
com.google.javascript.jscomp.Compiler:156-public static final DiagnosticType OPTIMIZE_LOOP_ERROR = DiagnosticType.error(	0
com.google.javascript.jscomp.Compiler:159-public static final DiagnosticType MOTION_ITERATIONS_ERROR =	0
com.google.javascript.jscomp.Compiler:171-private static final Logger logger =	0
com.google.javascript.jscomp.Compiler:379-private static final DiagnosticType EMPTY_MODULE_LIST_ERROR =	0
com.google.javascript.jscomp.Compiler:383-private static final DiagnosticType EMPTY_ROOT_MODULE_ERROR =	0
com.google.javascript.jscomp.Compiler:445-static final DiagnosticType DUPLICATE_INPUT =	0
com.google.javascript.jscomp.Compiler:447-static final DiagnosticType DUPLICATE_EXTERN_INPUT =	0
com.google.javascript.jscomp.Compiler:182-this((PrintStream) null);	0
com.google.javascript.jscomp.Compiler:183-}	0
com.google.javascript.jscomp.Compiler:189-public Compiler(PrintStream stream) {	0
com.google.javascript.jscomp.Compiler:79-CompilerOptions options = null;	0
com.google.javascript.jscomp.Compiler:81-private PassConfig passes = null;	0
com.google.javascript.jscomp.Compiler:113-private String externExports = null;	0
com.google.javascript.jscomp.Compiler:119-private int uniqueNameId = 0;	0
com.google.javascript.jscomp.Compiler:122-private boolean useThreads = true;	0
com.google.javascript.jscomp.Compiler:128-private boolean hasRegExpGlobalReferences = true;	0
com.google.javascript.jscomp.Compiler:134-private final StringBuilder debugLog = new StringBuilder();	0
com.google.javascript.jscomp.Compiler:137-CodingConvention defaultCodingConvention = new ClosureCodingConvention();	0
com.google.javascript.jscomp.Compiler:140-private Config parserConfig = null;	0
com.google.javascript.jscomp.Compiler:148-private final com.google.javascript.rhino.ErrorReporter oldErrorReporter =	0
com.google.javascript.jscomp.Compiler:152-private final ErrorReporter defaultErrorReporter =	0
com.google.javascript.jscomp.Compiler:176-private GlobalVarReferenceMap globalRefMap = null;	0
com.google.javascript.jscomp.Compiler:773-private final PassFactory sanityCheck =	0
com.google.javascript.jscomp.Compiler:835-private Tracer currentTracer = null;	0
com.google.javascript.jscomp.Compiler:836-private String currentPassName = null;	0
com.google.javascript.jscomp.Compiler:1671-protected final CodeChangeHandler.RecentChange recentChange =	0
com.google.javascript.jscomp.Compiler:1673-private final List<CodeChangeHandler> codeChangeHandlers =	0
com.google.javascript.jscomp.Compiler:190-addChangeHandler(recentChange);	0
com.google.javascript.jscomp.Compiler:191-outStream = stream;	0
com.google.javascript.jscomp.Compiler:192-}	0
com.google.javascript.jscomp.Compiler:198-this();	0
com.google.javascript.jscomp.Compiler:199-setErrorManager(errorManager);	0
com.google.javascript.jscomp.Compiler:200-}	0
com.google.javascript.jscomp.Compiler:208-Preconditions.checkNotNull(	0
com.google.javascript.jscomp.Compiler:210-this.errorManager = errorManager;	0
com.google.javascript.jscomp.Compiler:211-}	0
com.google.javascript.jscomp.Compiler:218-boolean colorize = options.shouldColorizeErrorOutput();	0
com.google.javascript.jscomp.Compiler:219-return options.errorFormat.toFormatter(this, colorize);	0
com.google.javascript.jscomp.Compiler:227-this.options = options;	0
com.google.javascript.jscomp.Compiler:228-if (errorManager == null) {	0
com.google.javascript.jscomp.Compiler:229-if (outStream == null) {	0
com.google.javascript.jscomp.Compiler:230-setErrorManager(	0
com.google.javascript.jscomp.Compiler:233-PrintStreamErrorManager printer =	0
com.google.javascript.jscomp.Compiler:235-printer.setSummaryDetailLevel(options.summaryDetailLevel);	0
com.google.javascript.jscomp.Compiler:236-setErrorManager(printer);	0
com.google.javascript.jscomp.Compiler:241-if (options.enables(DiagnosticGroups.CHECK_TYPES)) {	0
com.google.javascript.jscomp.Compiler:242-options.checkTypes = true;	0
com.google.javascript.jscomp.Compiler:243-} else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {	0
com.google.javascript.jscomp.NodeUtil:156-if (!mayHaveSideEffects(n)) {	0
com.google.javascript.jscomp.NodeUtil:157-return TernaryValue.TRUE;	0
com.google.javascript.jscomp.NodeUtil:121-switch (n.getType()) {	0
com.google.javascript.jscomp.NodeUtil:123-return TernaryValue.forBoolean(n.getString().length() > 0);	0
com.google.javascript.jscomp.NodeUtil:126-return TernaryValue.forBoolean(n.getDouble() != 0);	0
com.google.javascript.jscomp.NodeUtil:133-return TernaryValue.FALSE;	0
com.google.javascript.jscomp.NodeUtil:136-return TernaryValue.FALSE;	1
com.google.javascript.jscomp.NodeUtil:139-String name = n.getString();	0
com.google.javascript.jscomp.NodeUtil:140-if ("undefined".equals(name)	0
com.google.javascript.jscomp.NodeUtil:144-return TernaryValue.FALSE;	0
com.google.javascript.jscomp.NodeUtil:152-return TernaryValue.TRUE;	0
com.google.javascript.jscomp.NodeUtil:760-for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {	0
com.google.javascript.jscomp.NodeUtil:766-return false;	0
com.google.javascript.jscomp.NodeUtil:757-if (checkForNewObjects) {	0
com.google.javascript.jscomp.NodeUtil:770-if (checkForNewObjects) {	0
com.google.javascript.jscomp.NodeUtil:714-return mayHaveSideEffects(n, null);	0
com.google.javascript.jscomp.NodeUtil:718-return checkForStateChangeHelper(n, false, compiler);	0
com.google.javascript.jscomp.NodeUtil:731-switch (n.getType()) {	0
com.google.javascript.jscomp.NodeUtil:863-for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {	0
com.google.javascript.jscomp.NodeUtil:869-return false;	0
com.google.javascript.jscomp.NodeUtil:1452-return n.getType() == Token.GETPROP	0
com.google.javascript.jscomp.NodeUtil:48-static final long MAX_POSITIVE_INTEGER_NUMBER = (long)Math.pow(2, 53);	0
com.google.javascript.jscomp.NodeUtil:56-private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =	0
com.google.javascript.jscomp.NodeUtil:904-private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =	0
com.google.javascript.jscomp.NodeUtil:907-private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =	0
com.google.javascript.jscomp.NodeUtil:909-private static final Set<String> REGEXP_METHODS =	0
com.google.javascript.jscomp.NodeUtil:911-private static final Set<String> STRING_REGEXP_METHODS =	0
com.google.javascript.jscomp.NodeUtil:1206-static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =	0
com.google.javascript.jscomp.NodeUtil:1258-static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =	0
com.google.javascript.jscomp.NodeUtil:1319-static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =	0
com.google.javascript.jscomp.NodeUtil:2633-static final Predicate<Node> MATCH_NOT_FUNCTION = new MatchNotFunction();	0
com.google.javascript.jscomp.NodeUtil:66-private NodeUtil() {}	0
com.google.javascript.jscomp.NodeUtil:75-switch (n.getType()) {	0
com.google.javascript.jscomp.NodeUtil:79-return getImpureBooleanValue(n.getLastChild());	0
com.google.javascript.jscomp.NodeUtil:81-TernaryValue value = getImpureBooleanValue(n.getLastChild());	0
com.google.javascript.jscomp.NodeUtil:82-return value.not();	0
com.google.javascript.jscomp.NodeUtil:84-TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());	0
com.google.javascript.jscomp.NodeUtil:85-TernaryValue rhs = getImpureBooleanValue(n.getLastChild());	0
com.google.javascript.jscomp.NodeUtil:86-return lhs.and(rhs);	0
com.google.javascript.jscomp.NodeUtil:89-TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());	0
com.google.javascript.jscomp.NodeUtil:90-TernaryValue rhs = getImpureBooleanValue(n.getLastChild());	0
com.google.javascript.jscomp.NodeUtil:91-return lhs.or(rhs);	0
com.google.javascript.jscomp.NodeUtil:94-TernaryValue trueValue = getImpureBooleanValue(	0
com.google.javascript.jscomp.NodeUtil:96-TernaryValue falseValue = getImpureBooleanValue(n.getLastChild());	0
com.google.javascript.jscomp.NodeUtil:97-if (trueValue.equals(falseValue)) {	0
com.google.javascript.jscomp.NodeUtil:98-return trueValue;	0
com.google.javascript.jscomp.NodeUtil:100-return TernaryValue.UNKNOWN;	0
com.google.javascript.jscomp.NodeUtil:106-return TernaryValue.TRUE;	0
com.google.javascript.jscomp.NodeUtil:110-return getPureBooleanValue(n);	0
com.google.javascript.jscomp.NodeUtil:129-return getPureBooleanValue(n.getLastChild()).not();	0
com.google.javascript.jscomp.NodeUtil:946-if (callNode.hasOneChild()	0
com.google.javascript.jscomp.NodeUtil:952-if (callNode.isOnlyModifiesThisCall()	0
com.google.javascript.jscomp.NodeUtil:959-if (compiler != null && !compiler.hasRegExpGlobalReferences()) {	0
com.google.javascript.jscomp.NodeUtil:799-if (!functionCallHasSideEffects(n, compiler)) {	0
com.google.javascript.jscomp.NodeUtil:804-return true;	0
com.google.javascript.jscomp.NodeUtil:928-if (callNode.getType() != Token.CALL) {	0
com.google.javascript.jscomp.NodeUtil:933-if (callNode.isNoSideEffectsCall()) {	0
com.google.javascript.jscomp.NodeUtil:937-Node nameNode = callNode.getFirstChild();	0
com.google.javascript.jscomp.NodeUtil:940-if (nameNode.getType() == Token.NAME) {	0
com.google.javascript.jscomp.NodeUtil:945-} else if (nameNode.getType() == Token.GETPROP) {	0
com.google.javascript.jscomp.NodeUtil:975-return true;	0
com.google.javascript.jscomp.NodeUtil:1017-return NodeUtil.functionCallHasSideEffects(n, compiler);	0
com.google.javascript.jscomp.NodeUtil:1441-return n.getType() == Token.GETPROP	0
com.google.javascript.jscomp.NodeUtil:860-if (checkForStateChangeHelper(c, checkForNewObjects, compiler)) {	0
com.google.javascript.jscomp.NodeUtil:861-return true;	0
com.google.javascript.jscomp.NodeUtil:746-break;	0
com.google.javascript.jscomp.NodeUtil:859-for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {	0
com.google.javascript.jscomp.NodeUtil:1010-switch(n.getType()) {	0
com.google.javascript.jscomp.NodeUtil:1095-switch (type) {	0
com.google.javascript.jscomp.NodeUtil:1160-return 15;	0
com.google.javascript.jscomp.NodeUtil:1002-return nodeTypeMayHaveSideEffects(n, null);	0
com.google.javascript.jscomp.NodeUtil:1006-if (isAssignmentOp(n)) {	0
com.google.javascript.jscomp.NodeUtil:2444-char LARGEST_BASIC_LATIN = 0x7f;	0
com.google.javascript.jscomp.NodeUtil:2445-int len = s.length();	0
com.google.javascript.jscomp.NodeUtil:2446-for (int index = 0; index < len; index++) {	0
com.google.javascript.jscomp.NodeUtil:2447-char c = s.charAt(index);	0
com.google.javascript.jscomp.NodeUtil:2448-if (c > LARGEST_BASIC_LATIN) {	0
com.google.javascript.jscomp.NodeUtil:2452-return true;	0
com.google.javascript.jscomp.NodeUtil:48-static final long MAX_POSITIVE_INTEGER_NUMBER = (long)Math.pow(2, 53);	0
com.google.javascript.jscomp.NodeUtil:56-private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =	0
com.google.javascript.jscomp.NodeUtil:900-private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =	0
com.google.javascript.jscomp.NodeUtil:903-private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =	0
com.google.javascript.jscomp.NodeUtil:905-private static final Set<String> REGEXP_METHODS =	0
com.google.javascript.jscomp.NodeUtil:907-private static final Set<String> STRING_REGEXP_METHODS =	0
com.google.javascript.jscomp.NodeUtil:1195-static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =	0
com.google.javascript.jscomp.NodeUtil:1247-static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =	0
com.google.javascript.jscomp.NodeUtil:1308-static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =	0
com.google.javascript.jscomp.NodeUtil:2622-static final Predicate<Node> MATCH_NOT_FUNCTION = new MatchNotFunction();	0
com.google.javascript.jscomp.NodeUtil:643-switch (type) {	0
com.google.javascript.jscomp.NodeUtil:676-return false;	0
com.google.javascript.jscomp.NodeUtil:714-return checkForStateChangeHelper(n, false, compiler);	0
com.google.javascript.jscomp.NodeUtil:727-switch (n.getType()) {	0
com.google.javascript.jscomp.NodeUtil:807-if (isSimpleOperatorType(n.getType())) {	0
com.google.javascript.jscomp.NodeUtil:811-if (isAssignmentOp(n)) {	0
com.google.javascript.jscomp.NodeUtil:856-return true;	0
com.google.javascript.jscomp.NodeUtil:1371-switch (n.getType()){	0
com.google.javascript.jscomp.NodeUtil:1386-return false;	0
com.google.javascript.jscomp.NodeUtil:1516-return n.getType() == Token.EXPR_RESULT	0
com.google.javascript.jscomp.NodeUtil:2142-switch (operator) {	0
com.google.javascript.jscomp.NodeUtil:2184-default: return null;	0
com.google.javascript.jscomp.LightweightMessageFormatter:44-this(source, LINE);	0
com.google.javascript.jscomp.LightweightMessageFormatter:45-}	0
com.google.javascript.jscomp.LightweightMessageFormatter:49-super(source);	0
com.google.javascript.jscomp.LightweightMessageFormatter:50-Preconditions.checkNotNull(source);	0
com.google.javascript.jscomp.LightweightMessageFormatter:51-this.excerpt = excerpt;	0
com.google.javascript.jscomp.LightweightMessageFormatter:52-}	0
com.google.javascript.jscomp.LightweightMessageFormatter:32-private static final ExcerptFormatter excerptFormatter =	0
com.google.javascript.jscomp.LightweightMessageFormatter:59-return format(error, false);	0
com.google.javascript.jscomp.LightweightMessageFormatter:68-SourceExcerptProvider source = getSource();	0
com.google.javascript.jscomp.LightweightMessageFormatter:69-String sourceExcerpt = source == null ? null :	0
com.google.javascript.jscomp.LightweightMessageFormatter:74-StringBuilder b = new StringBuilder();	0
com.google.javascript.jscomp.LightweightMessageFormatter:75-if (error.sourceName != null) {	0
com.google.javascript.jscomp.LightweightMessageFormatter:76-b.append(error.sourceName);	0
com.google.javascript.jscomp.LightweightMessageFormatter:77-if (error.lineNumber > 0) {	0
com.google.javascript.jscomp.LightweightMessageFormatter:78-b.append(':');	0
com.google.javascript.jscomp.LightweightMessageFormatter:79-b.append(error.lineNumber);	0
com.google.javascript.jscomp.LightweightMessageFormatter:81-b.append(": ");	0
com.google.javascript.jscomp.LightweightMessageFormatter:84-b.append(getLevelName(warning ? CheckLevel.WARNING : CheckLevel.ERROR));	0
com.google.javascript.jscomp.LightweightMessageFormatter:85-b.append(" - ");	0
com.google.javascript.jscomp.LightweightMessageFormatter:87-b.append(error.description);	0
com.google.javascript.jscomp.LightweightMessageFormatter:88-b.append('\n');	0
com.google.javascript.jscomp.LightweightMessageFormatter:89-if (sourceExcerpt != null) {	0
com.google.javascript.jscomp.LightweightMessageFormatter:90-b.append(sourceExcerpt);	0
com.google.javascript.jscomp.LightweightMessageFormatter:91-b.append('\n');	0
com.google.javascript.jscomp.LightweightMessageFormatter:92-int charno = error.getCharno();	0
com.google.javascript.jscomp.LightweightMessageFormatter:97-if (excerpt.equals(LINE)	0
com.google.javascript.jscomp.LightweightMessageFormatter:110-return b.toString();	0
com.google.javascript.jscomp.LightweightMessageFormatter:39-super(null);	0
com.google.javascript.jscomp.LightweightMessageFormatter:40-this.excerpt = LINE;	0
com.google.javascript.jscomp.LightweightMessageFormatter:41-}	0
com.google.javascript.jscomp.LightweightMessageFormatter:55-return new LightweightMessageFormatter();	0
com.google.javascript.jscomp.LightweightMessageFormatter:63-return format(warning, true);	0
com.google.javascript.jscomp.LightweightMessageFormatter:99-for (int i = 0; i < charno; i++) {	0
com.google.javascript.jscomp.LightweightMessageFormatter:100-char c = sourceExcerpt.charAt(i);	0
com.google.javascript.jscomp.LightweightMessageFormatter:101-if (Character.isWhitespace(c)) {	0
com.google.javascript.jscomp.LightweightMessageFormatter:102-b.append(c);	0
com.google.javascript.jscomp.LightweightMessageFormatter:104-b.append(' ');	0
com.google.javascript.jscomp.LightweightMessageFormatter:107-b.append("^\n");	0
com.google.javascript.jscomp.CodeGenerator:1015-case '\0': sb.append("\\0"); break;	1
com.google.javascript.jscomp.CodeGenerator:632-if (childCount !=	0
com.google.javascript.jscomp.CodeGenerator:638-addJsString(n.getString());	0
com.google.javascript.jscomp.CodeGenerator:639-break;	0
com.google.javascript.jscomp.CodeGenerator:961-switch (s.charAt(i)) {	0
com.google.javascript.jscomp.CodeGenerator:1013-char c = s.charAt(i);	0
com.google.javascript.jscomp.CodeGenerator:1014-switch (c) {	0
com.google.javascript.jscomp.CodeGenerator:948-String cached = ESCAPED_JS_STRINGS.get(s);	0
com.google.javascript.jscomp.CodeGenerator:949-if (cached == null) {	0
com.google.javascript.jscomp.CodeGenerator:950-cached = jsString(s);	0
com.google.javascript.jscomp.CodeGenerator:951-ESCAPED_JS_STRINGS.put(s, cached);	0
com.google.javascript.jscomp.CodeGenerator:953-add(cached);	0
com.google.javascript.jscomp.CodeGenerator:954-}	0
com.google.javascript.jscomp.CodeGenerator:957-int singleq = 0, doubleq = 0;	0
com.google.javascript.jscomp.CodeGenerator:960-for (int i = 0; i < s.length(); i++) {	0
com.google.javascript.jscomp.CodeGenerator:969-if (singleq < doubleq) {	0
com.google.javascript.jscomp.CodeGenerator:976-quote = '\"';	0
com.google.javascript.jscomp.CodeGenerator:977-doublequote = "\\\"";	0
com.google.javascript.jscomp.CodeGenerator:978-singlequote = "\'";	0
com.google.javascript.jscomp.CodeGenerator:981-return strEscape(s, quote, doublequote, singlequote, "\\\\",	0
com.google.javascript.jscomp.CodeGenerator:1010-StringBuilder sb = new StringBuilder(s.length() + 2);	0
com.google.javascript.jscomp.CodeGenerator:1011-sb.append(quote);	0
com.google.javascript.jscomp.CodeGenerator:1012-for (int i = 0; i < s.length(); i++) {	0
com.google.javascript.jscomp.CodeGenerator:1073-sb.append(quote);	0
com.google.javascript.jscomp.CodeGenerator:1074-return sb.toString();	0
com.google.javascript.jscomp.CodeGenerator:195-Preconditions.checkState(childCount == 1);	0
com.google.javascript.jscomp.CodeGenerator:196-addIdentifier(n.getString());	0
com.google.javascript.jscomp.CodeGenerator:197-cc.addOp("=", true);	0
com.google.javascript.jscomp.CodeGenerator:198-if (first.getType() == Token.COMMA) {	0
com.google.javascript.jscomp.CodeGenerator:203-addExpr(first, 0, getContextForNoInOperator(context));	0
com.google.javascript.jscomp.CodeGenerator:206-break;	0
com.google.javascript.jscomp.CodeGenerator:180-if (first != null) {	0
com.google.javascript.jscomp.CodeGenerator:181-add("var ");	0
com.google.javascript.jscomp.CodeGenerator:182-addList(first, false, getContextForNoInOperator(context));	0
com.google.javascript.jscomp.CodeGenerator:385-cc.endStatement();	0
com.google.javascript.jscomp.CodeGenerator:1156-return (context == Context.IN_FOR_INIT_CLAUSE	0
com.google.javascript.jscomp.CodeGenerator:901-boolean isFirst = n == firstInList;	0
com.google.javascript.jscomp.CodeGenerator:902-if (isFirst) {	0
com.google.javascript.jscomp.CodeGenerator:903-addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);	0
com.google.javascript.jscomp.CodeGenerator:871-addExpr(n, minPrecedence, context);	0
com.google.javascript.jscomp.CodeGenerator:872-}	0
com.google.javascript.jscomp.CodeGenerator:900-for (Node n = firstInList; n != null; n = n.getNext()) {	0
com.google.javascript.jscomp.CodeGenerator:909-}	0
com.google.javascript.jscomp.CodeGenerator:879-if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||	0
com.google.javascript.jscomp.CodeGenerator:886-add(n, context);	0
com.google.javascript.jscomp.CodeGenerator:888-}	0
com.google.javascript.jscomp.CodeGenerator:192-if (first == null || first.getType() == Token.EMPTY) {	0
com.google.javascript.jscomp.CodeGenerator:75-cc.add(str);	0
com.google.javascript.jscomp.CodeGenerator:76-}	0
com.google.javascript.jscomp.CodeGenerator:79-cc.addIdentifier(identifierEscape(identifier));	0
com.google.javascript.jscomp.TypeCheck:1913-int total = nullCount + unknownCount + typedCount;	0
com.google.javascript.jscomp.TypeCheck:1914-if (total == 0) {	0
com.google.javascript.jscomp.TypeCheck:1917-return (100.0 * typedCount) / total;	0
com.google.javascript.jscomp.TypeCheck:943-ensureTyped(t, assign, rightType);	0
com.google.javascript.jscomp.TypeCheck:938-JSType leftType = getJSType(lvalue);	0
com.google.javascript.jscomp.TypeCheck:939-Node rightChild = assign.getLastChild();	0
com.google.javascript.jscomp.TypeCheck:940-JSType rightType = getJSType(rightChild);	0
com.google.javascript.jscomp.TypeCheck:941-if (validator.expectCanAssignTo(	0
com.google.javascript.jscomp.TypeCheck:947-}	0
com.google.javascript.jscomp.TypeCheck:928-JSType rvalueType = getJSType(assign.getLastChild());	0
com.google.javascript.jscomp.TypeCheck:929-Var var = t.getScope().getVar(lvalue.getString());	0
com.google.javascript.jscomp.TypeCheck:930-if (var != null) {	0
com.google.javascript.jscomp.TypeCheck:926-} else if (lvalue.getType() == Token.NAME) {	0
com.google.javascript.jscomp.TypeCheck:822-nullCount++;	0
com.google.javascript.jscomp.TypeCheck:980-ensureTyped(t, key, rightType);	0
com.google.javascript.jscomp.TypeCheck:995-String property = NodeUtil.getObjectLitKeyName(key);	0
com.google.javascript.jscomp.TypeCheck:996-if (type.hasProperty(property) &&	0
com.google.javascript.jscomp.TypeCheck:1003-return;	0
com.google.javascript.jscomp.TypeCheck:794-visitObjLitKey(t, key, n);	0
com.google.javascript.jscomp.TypeCheck:964-Node rvalue = key.getFirstChild();	0
com.google.javascript.jscomp.TypeCheck:965-JSType rightType = NodeUtil.getObjectLitKeyTypeFromValueType(	0
com.google.javascript.jscomp.TypeCheck:967-if (rightType == null) {	0
com.google.javascript.jscomp.TypeCheck:971-Node owner = objlit;	0
com.google.javascript.jscomp.TypeCheck:975-JSType keyType = getJSType(key);	0
com.google.javascript.jscomp.TypeCheck:976-boolean valid = validator.expectCanAssignToPropertyOf(t, key,	0
com.google.javascript.jscomp.TypeCheck:979-if (valid) {	0
com.google.javascript.jscomp.TypeCheck:991-JSType objlitType = getJSType(objlit);	0
com.google.javascript.jscomp.TypeCheck:992-ObjectType type = ObjectType.cast(	0
com.google.javascript.jscomp.TypeCheck:994-if (type != null) {	0
com.google.javascript.jscomp.TypeCheck:1825-return getNativeType(UNKNOWN_TYPE);	0
com.google.javascript.jscomp.TypeCheck:793-for (Node key : n.children()) {	0
com.google.javascript.jscomp.TypeCheck:795-}	0
com.google.javascript.jscomp.TypeCheck:1904-n.setJSType(type);	0
com.google.javascript.jscomp.TypeCheck:999-validator.expectCanAssignToPropertyOf(	0
com.google.javascript.jscomp.TypeCheck:782-ensureTyped(t, n);	0
com.google.javascript.jscomp.TypeCheck:781-if (n.getJSType() != null) { // If we didn't run type inference.	0
com.google.javascript.jscomp.TypeCheck:792-if (n.getType() == Token.OBJECTLIT) {	0
com.google.javascript.jscomp.TypeCheck:509-ensureTyped(t, n, NUMBER_TYPE);	0
com.google.javascript.jscomp.TypeCheck:510-break;	0
com.google.javascript.jscomp.TypeCheck:694-visitAssign(t, n);	0
com.google.javascript.jscomp.TypeCheck:695-typeable = false;	0
com.google.javascript.jscomp.TypeCheck:696-break;	0
com.google.javascript.jscomp.TypeCheck:843-JSDocInfo info = assign.getJSDocInfo();	0
com.google.javascript.jscomp.TypeCheck:844-Node lvalue = assign.getFirstChild();	0
com.google.javascript.jscomp.TypeCheck:845-Node rvalue = assign.getLastChild();	0
com.google.javascript.jscomp.TypeCheck:847-if (lvalue.getType() == Token.GETPROP) {	0
com.google.javascript.jscomp.TypeCheck:1018-return false;	0
com.google.javascript.jscomp.TypeCheck:1012-for (; type != null; type = type.getImplicitPrototype()) {	0
com.google.javascript.jscomp.TypeCheck:1013-JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);	0
com.google.javascript.jscomp.TypeCheck:1014-if (docInfo != null && docInfo.isImplicitCast()) {	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:147-NodeTraversal.traverse(compiler, externRoot,	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:116-boolean anchorUnusedVars) {	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:55-private final SymbolType PROPERTY = SymbolType.PROPERTY;	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:56-private final SymbolType VAR = SymbolType.VAR;	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:84-private final LinkedDirectedGraph<NameInfo, JSModule> symbolGraph =	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:88-private final NameInfo globalNode = new NameInfo("[global]");	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:91-private final NameInfo externNode = new NameInfo("[extern]");	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:94-private final NameInfo anonymousNode = new NameInfo("[anonymous]");	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:98-private final Map<String, NameInfo> propertyNameInfo = Maps.newHashMap();	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:102-private final Map<String, NameInfo> varNameInfo = Maps.newHashMap();	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:117-this.compiler = compiler;	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:118-this.moduleGraph = moduleGraph;	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:119-this.canModifyExterns = canModifyExterns;	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:120-this.anchorUnusedVars = anchorUnusedVars;	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:122-if (moduleGraph != null) {	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:125-firstModule = null;	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:128-globalNode.markReference(null);	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:129-externNode.markReference(null);	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:130-symbolGraph.createNode(globalNode);	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:131-symbolGraph.createNode(externNode);	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:133-for (String property : IMPLICITLY_USED_PROPERTIES) {	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:134-NameInfo nameInfo = getNameInfoForName(property, PROPERTY);	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:135-if (moduleGraph == null) {	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:136-symbolGraph.connect(externNode, null, nameInfo);	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:142-}	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:143-}	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:65-private static final Set<String> IMPLICITLY_USED_PROPERTIES =	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:146-if (!canModifyExterns) {	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:151-NodeTraversal.traverse(compiler, root, new ProcessProperties());	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:153-FixedPointGraphTraversal<NameInfo, JSModule> t =	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:155-t.computeFixedPoint(symbolGraph,	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:157-}	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:163-List<NameInfo> result = Lists.newArrayList(propertyNameInfo.values());	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:164-result.addAll(varNameInfo.values());	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:165-return result;	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:176-Map<String, NameInfo> map = type == PROPERTY ?	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:178-if (map.containsKey(name)) {	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:179-return map.get(name);	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:181-NameInfo nameInfo = new NameInfo(name);	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:182-map.put(name, nameInfo);	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:183-symbolGraph.createNode(nameInfo);	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:184-return nameInfo;	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:123-firstModule = moduleGraph.getRootModule();	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:138-for (JSModule module : moduleGraph.getAllModules()) {	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:139-symbolGraph.connect(externNode, module, nameInfo);	0
com.google.javascript.jscomp.AnalyzePrototypeProperties:140-}	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:886-jsdocBuilder.build(null);	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:887-parser.addParserWarning("msg.unexpected.eof",	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1761-return reportTypeSyntaxWarning("msg.jsdoc.missing.lp");	1
com.google.javascript.jscomp.parsing.JsDocInfoParser:1513-return parseTypeExpression(token);	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:2158-parser.addTypeWarning(warning, stream.getLineno(), stream.getCharno());	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:2159-return null;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1700-skipEOLs();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1701-return parseFunctionType(next());	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1760-if (token != JsDocToken.LP) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:904-state = State.SEARCHING_NEWLINE;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:905-token = eatTokensUntilEOL();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:906-continue retry;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:900-if (token == JsDocToken.STAR && state == State.SEARCHING_ANNOTATION) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:796-skipEOLs();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:797-token = next();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:798-typeNode = parseAndRecordTypeNode(token, lineno, charno);	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1060-return parseAndRecordTypeNode(token, lineno, startCharno,	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:786-lineno = stream.getLineno();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:787-charno = stream.getCharno();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:789-Node typeNode = null;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:790-if (!lookAheadForTypeAnnotation() &&	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:801-if (annotation == Annotation.THIS) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:807-type = createJSTypeExpression(typeNode);	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:809-if (type == null) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:2288-boolean matchedLc = false;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:2291-c = stream.getChar();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:2292-if (c == ' ') {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:2293-continue;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:2294-} else if (c == '{') {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:2301-stream.ungetChar(c);	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:2302-return matchedLc;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1127-typeNode = parseTypeExpressionAnnotation(token);	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1499-if (token == JsDocToken.LC) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1122-Node typeNode = null;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1124-if (onlyParseSimpleNames) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1130-if (typeNode != null && !matchingLC) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1134-int endCharno = stream.getCharno();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1136-jsdocBuilder.markTypeNode(typeNode, lineno, startCharno, endCharno,	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1139-return typeNode;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1677-return basicTypeExpr;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1698-String string = stream.getString();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1699-if ("function".equals(string)) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1666-Node basicTypeExpr = parseBasicTypeExpression(token);	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1667-if (basicTypeExpr != null) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1694-} else if (token == JsDocToken.LP) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1697-} else if (token == JsDocToken.STRING) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1688-} else if (token == JsDocToken.LB) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1691-} else if (token == JsDocToken.LC) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:2171-return eatTokensUntilEOL(next());	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1663-} else if (token == JsDocToken.BANG) {	0
com.google.javascript.jscomp.TypeCheck:568-left = n.getFirstChild();	0
com.google.javascript.jscomp.TypeCheck:569-validator.expectNumber(	0
com.google.javascript.jscomp.TypeCheck:571-ensureTyped(t, n, NUMBER_TYPE);	0
com.google.javascript.jscomp.TypeCheck:572-break;	0
com.google.javascript.jscomp.TypeCheck:645-validator.expectNumber(	0
com.google.javascript.jscomp.TypeCheck:525-ensureTyped(t, n, ARRAY_TYPE);	0
com.google.javascript.jscomp.TypeCheck:526-break;	0
com.google.javascript.jscomp.TypeCheck:642-leftType = getJSType(n.getFirstChild());	0
com.google.javascript.jscomp.TypeCheck:643-rightType = getJSType(n.getLastChild());	0
com.google.javascript.jscomp.TypeCheck:644-if (rightType.isNumber()) {	0
com.google.javascript.jscomp.TypeCheck:666-ensureTyped(t, n, BOOLEAN_TYPE);	0
com.google.javascript.jscomp.TypeCheck:667-break;	0
com.google.javascript.jscomp.TypeCheck:1562-String sourceName = functionJSDocInfo.getSourceName();	0
com.google.javascript.jscomp.TypeCheck:1563-CompilerInput functionSource = compiler.getInput(sourceName);	0
com.google.javascript.jscomp.TypeCheck:1564-isExtern = functionSource.isExtern();	0
com.google.javascript.jscomp.TypeCheck:1051-ctorType.getAllImplementedInterfaces()) {	0
com.google.javascript.jscomp.TypeCheck:1076-return;	0
com.google.javascript.jscomp.TypeCheck:1557-FunctionType functionType = (FunctionType) childType;	0
com.google.javascript.jscomp.TypeCheck:1559-boolean isExtern = false;	0
com.google.javascript.jscomp.TypeCheck:1560-JSDocInfo functionJSDocInfo = functionType.getJSDocInfo();	0
com.google.javascript.jscomp.TypeCheck:1561-if(functionJSDocInfo != null) {	0
com.google.javascript.jscomp.TypeCheck:1570-if (functionType.isConstructor() &&	0
com.google.javascript.jscomp.TypeCheck:1581-visitParameterList(t, n, functionType);	0
com.google.javascript.jscomp.TypeCheck:1582-ensureTyped(t, n, functionType.getReturnType());	0
com.google.javascript.jscomp.TypeCheck:1583-} else {	0
com.google.javascript.jscomp.TypeCheck:539-visitGetElem(t, n);	0
com.google.javascript.jscomp.TypeCheck:543-typeable = false;	0
com.google.javascript.jscomp.TypeCheck:544-break;	0
com.google.javascript.jscomp.TypeCheck:1355-Node left = n.getFirstChild();	0
com.google.javascript.jscomp.TypeCheck:1356-Node right = n.getLastChild();	0
com.google.javascript.jscomp.TypeCheck:1357-validator.expectIndexMatch(t, n, getJSType(left), getJSType(right));	0
com.google.javascript.jscomp.TypeCheck:1358-ensureTyped(t, n);	0
com.google.javascript.jscomp.TypeCheck:1359-}	0
com.google.javascript.jscomp.TypeCheck:1153-Preconditions.checkState(ctor.isConstructor() || ctor.isInterface());	0
com.google.javascript.jscomp.TypeCheck:1154-}	0
com.google.javascript.jscomp.TypeCheck:1035-FunctionType superClass = ctorType.getSuperClassConstructor();	0
com.google.javascript.jscomp.TypeCheck:1036-boolean superClassHasProperty = superClass != null &&	0
com.google.javascript.jscomp.TypeCheck:1039-boolean superInterfacesHasProperty = false;	0
com.google.javascript.jscomp.TypeCheck:1040-if (ctorType.isInterface()) {	0
com.google.javascript.jscomp.TypeCheck:1046-boolean declaredOverride = info != null && info.isOverride();	0
com.google.javascript.jscomp.TypeCheck:1048-boolean foundInterfaceProperty = false;	0
com.google.javascript.jscomp.TypeCheck:1049-if (ctorType.isConstructor()) {	0
com.google.javascript.jscomp.TypeCheck:1073-if (!declaredOverride && !superClassHasProperty	0
com.google.javascript.jscomp.TypeCheck:1149-ctor = maybeSuperInstanceType.getConstructor();	0
com.google.javascript.jscomp.TypeCheck:1150-if (ctor == null) {	0
com.google.javascript.jscomp.TypeCheck:1151-return false;	0
com.google.javascript.jscomp.TypeCheck:902-checkDeclaredPropertyInheritance(	0
com.google.javascript.jscomp.TypeCheck:1031-if (hasUnknownOrEmptySupertype(ctorType)) {	0
com.google.javascript.jscomp.TypeCheck:1134-Preconditions.checkArgument(ctor.isConstructor() || ctor.isInterface());	0
com.google.javascript.jscomp.TypeCheck:1135-Preconditions.checkArgument(!ctor.isUnknownType());	0
com.google.javascript.jscomp.TypedScopeCreator:207-JSType type = functionNode.getJSType();	0
com.google.javascript.jscomp.TypedScopeCreator:208-if (type != null && type instanceof FunctionType) {	0
com.google.javascript.jscomp.TypedScopeCreator:209-FunctionType fnType = (FunctionType) type;	0
com.google.javascript.jscomp.TypedScopeCreator:210-ObjectType fnThisType = fnType.getTypeOfThis();	0
com.google.javascript.jscomp.TypedScopeCreator:211-if (!fnThisType.isUnknownType()) {	0
com.google.javascript.jscomp.TypedScopeCreator:216-}	0
com.google.javascript.jscomp.TypedScopeCreator:1783-return n.getFirstChild();	0
com.google.javascript.jscomp.TypedScopeCreator:194-newScope = new Scope(parent, root);	0
com.google.javascript.jscomp.TypedScopeCreator:195-LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);	0
com.google.javascript.jscomp.TypedScopeCreator:196-scopeBuilder = localScopeBuilder;	0
com.google.javascript.jscomp.TypedScopeCreator:197-localScopeBuilder.build();	0
com.google.javascript.jscomp.TypedScopeCreator:1759-JSDocInfo info = n.getJSDocInfo();	0
com.google.javascript.jscomp.TypedScopeCreator:1760-if (info == null) {	0
com.google.javascript.jscomp.TypedScopeCreator:1774-return info;	0
com.google.javascript.jscomp.TypedScopeCreator:1779-Node parent = n.getParent();	0
com.google.javascript.jscomp.TypedScopeCreator:1780-int parentType = parent.getType();	0
com.google.javascript.jscomp.TypedScopeCreator:1781-boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(n);	0
com.google.javascript.jscomp.TypedScopeCreator:1782-if (isFunctionDeclaration) {	0
com.google.javascript.jscomp.TypedScopeCreator:1796-if (lValue == null || lValue.getParent() == null) {	0
com.google.javascript.jscomp.TypedScopeCreator:1799-if (NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {	0
com.google.javascript.jscomp.TypedScopeCreator:1809-return lValue.getQualifiedName();	0
com.google.javascript.jscomp.TypedScopeCreator:355-return typeRegistry.getNativeType(nativeType);	0
com.google.javascript.jscomp.TypedScopeCreator:164-this(compiler, compiler.getCodingConvention());	0
com.google.javascript.jscomp.TypedScopeCreator:165-}	0
com.google.javascript.jscomp.TypedScopeCreator:184-Scope newScope = null;	0
com.google.javascript.jscomp.TypedScopeCreator:185-AbstractScopeBuilder scopeBuilder = null;	0
com.google.javascript.jscomp.TypedScopeCreator:186-if (parent == null) {	0
com.google.javascript.jscomp.TypedScopeCreator:188-newScope = createInitialScope(root);	0
com.google.javascript.jscomp.TypedScopeCreator:190-GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);	0
com.google.javascript.jscomp.TypedScopeCreator:191-scopeBuilder = globalScopeBuilder;	0
com.google.javascript.jscomp.TypedScopeCreator:192-NodeTraversal.traverse(compiler, root, scopeBuilder);	0
com.google.javascript.jscomp.TypedScopeCreator:193-} else {	0
com.google.javascript.jscomp.TypedScopeCreator:200-scopeBuilder.resolveStubDeclarations();	0
com.google.javascript.jscomp.TypedScopeCreator:201-scopeBuilder.resolveTypes();	0
com.google.javascript.jscomp.TypedScopeCreator:206-for (Node functionNode : scopeBuilder.nonExternFunctions) {	0
com.google.javascript.jscomp.TypedScopeCreator:218-if (parent == null) {	0
com.google.javascript.jscomp.TypedScopeCreator:219-codingConvention.defineDelegateProxyPrototypeProperties(	0
com.google.javascript.jscomp.TypedScopeCreator:222-return newScope;	0
com.google.javascript.jscomp.TypedScopeCreator:168-CodingConvention codingConvention) {	0
com.google.javascript.jscomp.TypedScopeCreator:137-private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();	0
com.google.javascript.jscomp.TypedScopeCreator:169-this.compiler = compiler;	0
com.google.javascript.jscomp.TypedScopeCreator:170-this.validator = compiler.getTypeValidator();	0
com.google.javascript.jscomp.TypedScopeCreator:171-this.codingConvention = codingConvention;	0
com.google.javascript.jscomp.TypedScopeCreator:172-this.typeRegistry = compiler.getTypeRegistry();	0
com.google.javascript.jscomp.TypedScopeCreator:173-this.typeParsingErrorReporter = typeRegistry.getErrorReporter();	0
com.google.javascript.jscomp.TypedScopeCreator:174-}	0
com.google.javascript.jscomp.TypedScopeCreator:92-static final String DELEGATE_PROXY_SUFFIX =	0
com.google.javascript.jscomp.TypedScopeCreator:97-static final DiagnosticType MALFORMED_TYPEDEF =	0
com.google.javascript.jscomp.TypedScopeCreator:102-static final DiagnosticType ENUM_INITIALIZER =	0
com.google.javascript.jscomp.TypedScopeCreator:107-static final DiagnosticType CTOR_INITIALIZER =	0
com.google.javascript.jscomp.CheckAccessControls:455-compiler.report(	0
com.google.javascript.jscomp.CheckAccessControls:447-JSDocInfo overridingInfo = parent.getJSDocInfo();	0
com.google.javascript.jscomp.CheckAccessControls:448-Visibility overridingVisibility = overridingInfo == null ?	0
com.google.javascript.jscomp.CheckAccessControls:454-if (visibility == Visibility.PRIVATE && !sameInput) {	0
com.google.javascript.jscomp.CheckAccessControls:465-} else {	0
com.google.javascript.jscomp.CheckAccessControls:431-break;	0
com.google.javascript.jscomp.CheckAccessControls:440-boolean sameInput =	0
com.google.javascript.jscomp.CheckAccessControls:442-Visibility visibility = docInfo.getVisibility();	0
com.google.javascript.jscomp.CheckAccessControls:443-JSType ownerType = normalizeClassType(objectType);	0
com.google.javascript.jscomp.CheckAccessControls:444-if (isOverride) {	0
com.google.javascript.jscomp.CheckAccessControls:388-ObjectType prototype = objectType.getImplicitPrototype();	0
com.google.javascript.jscomp.CheckAccessControls:389-if (prototype != null) {	0
com.google.javascript.jscomp.CheckAccessControls:390-JSDocInfo prototypeInfo	0
com.google.javascript.jscomp.CheckAccessControls:392-if (prototypeInfo != null && prototypeInfo.isConstant()	0
com.google.javascript.jscomp.CheckAccessControls:359-ObjectType objectType =	0
com.google.javascript.jscomp.CheckAccessControls:361-String propertyName = getprop.getLastChild().getString();	0
com.google.javascript.jscomp.CheckAccessControls:364-if (objectType != null) {	0
com.google.javascript.jscomp.CheckAccessControls:365-ObjectType oType = objectType;	0
com.google.javascript.jscomp.CheckAccessControls:366-while (oType != null) {	0
com.google.javascript.jscomp.CheckAccessControls:367-if (oType.hasReferenceName()) {	0
com.google.javascript.jscomp.CheckAccessControls:368-if (initializedConstantProperties.containsEntry(	0
com.google.javascript.jscomp.CheckAccessControls:376-oType = oType.getImplicitPrototype();	0
com.google.javascript.jscomp.CheckAccessControls:379-JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName);	0
com.google.javascript.jscomp.CheckAccessControls:380-if (info != null && info.isConstant()	0
com.google.javascript.jscomp.CheckAccessControls:387-if (objectType.isInstanceType()) {	0
com.google.javascript.jscomp.CheckAccessControls:400-}	0
com.google.javascript.jscomp.CheckAccessControls:201-} else if (type.isFunctionPrototypeType()) {	0
com.google.javascript.jscomp.CheckAccessControls:468-return;	0
com.google.javascript.jscomp.CheckAccessControls:200-return ((FunctionType) type).getInstanceType();	0
com.google.javascript.jscomp.CheckAccessControls:629-ObjectType implicitProto = type.getImplicitPrototype();	0
com.google.javascript.jscomp.CheckAccessControls:630-if (implicitProto != null) {	0
com.google.javascript.jscomp.CheckAccessControls:631-return getPropertyDeprecationInfo(implicitProto, prop);	0
com.google.javascript.jscomp.CheckAccessControls:633-return null;	0
com.google.javascript.jscomp.CheckAccessControls:221-checkPropertyDeprecation(t, n, parent);	0
com.google.javascript.jscomp.CheckAccessControls:222-checkPropertyVisibility(t, n, parent);	0
com.google.javascript.jscomp.CheckAccessControls:223-checkConstantProperty(t, n);	0
com.google.javascript.jscomp.CheckAccessControls:224-break;	0
com.google.javascript.jscomp.CheckAccessControls:289-if (parent.getType() == Token.NEW) {	0
com.google.javascript.jscomp.CheckAccessControls:293-ObjectType objectType =	0
com.google.javascript.jscomp.CheckAccessControls:295-String propertyName = n.getLastChild().getString();	0
com.google.javascript.jscomp.CheckAccessControls:297-if (objectType != null) {	0
com.google.javascript.jscomp.CheckAccessControls:298-String deprecationInfo	0
com.google.javascript.jscomp.CheckAccessControls:301-if (deprecationInfo != null &&	0
com.google.javascript.jscomp.CheckAccessControls:316-}	0
com.google.javascript.jscomp.CheckAccessControls:353-Node parent = getprop.getParent();	0
com.google.javascript.jscomp.CheckAccessControls:354-if (!(NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == getprop)	0
com.google.javascript.jscomp.CheckAccessControls:409-ObjectType objectType =	0
com.google.javascript.jscomp.CheckAccessControls:411-String propertyName = getprop.getLastChild().getString();	0
com.google.javascript.jscomp.CheckAccessControls:413-if (objectType != null) {	0
com.google.javascript.jscomp.CheckAccessControls:416-boolean isOverride = t.inGlobalScope() &&	1
com.google.javascript.jscomp.FunctionToBlockMutator:45-AbstractCompiler compiler, Supplier<String> safeNameIdSupplier) {	0
com.google.javascript.jscomp.FunctionToBlockMutator:46-this.compiler = compiler;	0
com.google.javascript.jscomp.FunctionToBlockMutator:47-this.safeNameIdSupplier = safeNameIdSupplier;	0
com.google.javascript.jscomp.FunctionToBlockMutator:48-}	0
com.google.javascript.jscomp.FunctionToBlockMutator:63-Node newFnNode = fnNode.cloneTree();	0
com.google.javascript.jscomp.FunctionToBlockMutator:67-makeLocalNamesUnique(newFnNode, isCallInLoop);	0
com.google.javascript.jscomp.FunctionToBlockMutator:71-Set<String> namesToAlias =	0
com.google.javascript.jscomp.FunctionToBlockMutator:73-LinkedHashMap<String, Node> args =	0
com.google.javascript.jscomp.FunctionToBlockMutator:76-boolean hasArgs = !args.isEmpty();	0
com.google.javascript.jscomp.FunctionToBlockMutator:77-if (hasArgs) {	0
com.google.javascript.jscomp.FunctionToBlockMutator:82-Node newBlock = NodeUtil.getFunctionBody(newFnNode);	0
com.google.javascript.jscomp.FunctionToBlockMutator:84-newBlock.detachFromParent();	0
com.google.javascript.jscomp.FunctionToBlockMutator:86-if (hasArgs) {	0
com.google.javascript.jscomp.FunctionToBlockMutator:97-if (isCallInLoop) {	0
com.google.javascript.jscomp.FunctionToBlockMutator:101-String labelName = getLabelNameForFunction(fnName);	0
com.google.javascript.jscomp.FunctionToBlockMutator:102-Node injectableBlock = replaceReturns(	0
com.google.javascript.jscomp.FunctionToBlockMutator:104-Preconditions.checkState(injectableBlock != null);	0
com.google.javascript.jscomp.FunctionToBlockMutator:106-return injectableBlock;	0
com.google.javascript.jscomp.FunctionToBlockMutator:143-Supplier<String> idSupplier = compiler.getUniqueNameIdSupplier();	0
com.google.javascript.jscomp.FunctionToBlockMutator:145-NodeTraversal.traverse(	0
com.google.javascript.jscomp.FunctionToBlockMutator:152-}	1
com.google.javascript.jscomp.FunctionToBlockMutator:171-String name = (fnName == null || fnName.isEmpty()) ? "anon" : fnName;	0
com.google.javascript.jscomp.FunctionToBlockMutator:172-return "JSCompiler_inline_label_" + name + "_" + safeNameIdSupplier.get();	0
com.google.javascript.jscomp.FunctionToBlockMutator:259-Preconditions.checkNotNull(block);	0
com.google.javascript.jscomp.FunctionToBlockMutator:260-Preconditions.checkNotNull(labelName);	0
com.google.javascript.jscomp.FunctionToBlockMutator:262-Node root = block;	0
com.google.javascript.jscomp.FunctionToBlockMutator:264-boolean hasReturnAtExit = false;	0
com.google.javascript.jscomp.FunctionToBlockMutator:265-int returnCount = NodeUtil.getNodeTypeReferenceCount(	0
com.google.javascript.jscomp.FunctionToBlockMutator:267-if (returnCount > 0) {	0
com.google.javascript.jscomp.FunctionToBlockMutator:300-if (resultMustBeSet && !hasReturnAtExit && resultName != null) {	0
com.google.javascript.jscomp.FunctionToBlockMutator:304-return root;	0
com.google.javascript.jscomp.FunctionToBlockMutator:78-FunctionArgumentInjector.maybeAddTempsForCallArguments(	0
com.google.javascript.jscomp.FunctionToBlockMutator:87-Node inlineResult = aliasAndInlineArguments(newBlock,	0
com.google.javascript.jscomp.FunctionToBlockMutator:89-Preconditions.checkState(newBlock == inlineResult);	0
com.google.javascript.jscomp.FunctionToBlockMutator:98-fixUnitializedVarDeclarations(newBlock);	0
com.google.javascript.jscomp.FunctionToBlockMutator:117-if (NodeUtil.isLoopStructure(n)) {	0
com.google.javascript.jscomp.FunctionToBlockMutator:118-return;	0
com.google.javascript.jscomp.FunctionToBlockMutator:122-if (NodeUtil.isVar(n)) {	0
com.google.javascript.jscomp.FunctionToBlockMutator:123-Node name = n.getFirstChild();	0
com.google.javascript.jscomp.FunctionToBlockMutator:125-if (!name.hasChildren()) {	0
com.google.javascript.jscomp.FunctionToBlockMutator:126-Node srcLocation = name;	0
com.google.javascript.jscomp.FunctionToBlockMutator:127-name.addChildToBack(NodeUtil.newUndefinedNode(srcLocation));	0
com.google.javascript.jscomp.FunctionToBlockMutator:129-return;	0
com.google.javascript.jscomp.FunctionToBlockMutator:132-for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {	0
com.google.javascript.jscomp.FunctionToBlockMutator:133-fixUnitializedVarDeclarations(c);	0
com.google.javascript.jscomp.FunctionToBlockMutator:135-}	0
com.google.javascript.jscomp.FunctionToBlockMutator:189-if (namesToAlias == null || namesToAlias.isEmpty()) {	0
com.google.javascript.jscomp.FunctionToBlockMutator:191-Node result = FunctionArgumentInjector.inject(	0
com.google.javascript.jscomp.FunctionToBlockMutator:193-Preconditions.checkState(result == fnTemplateRoot);	0
com.google.javascript.jscomp.FunctionToBlockMutator:194-return result;	0
com.google.javascript.jscomp.CodeGenerator:1051-appendHexJavaScriptRepresentation(sb, c);	0
com.google.javascript.jscomp.CodeGenerator:1160-appendHexJavaScriptRepresentation(c, sb);	0
com.google.javascript.jscomp.CodeGenerator:1164-}	0
com.google.javascript.jscomp.CodeGenerator:1165-}	0
com.google.javascript.jscomp.CodeGenerator:1177-if (Character.isSupplementaryCodePoint(codePoint)) {	0
com.google.javascript.jscomp.CodeGenerator:1187-out.append("\\u")	0
com.google.javascript.jscomp.CodeGenerator:1192-}	0
com.google.javascript.jscomp.CodeGenerator:1034-if (outputCharsetEncoder != null) {	0
com.google.javascript.jscomp.CodeGenerator:1045-if (c > 0x1f && c <= 0x7f) {	1
com.google.javascript.jscomp.CodeGenerator:1046-sb.append(c);	0
com.google.javascript.jscomp.CodeGenerator:628-if (childCount !=	0
com.google.javascript.jscomp.CodeGenerator:634-add(jsString(n.getString(), outputCharsetEncoder));	0
com.google.javascript.jscomp.CodeGenerator:635-break;	0
com.google.javascript.jscomp.CodeGenerator:944-switch (s.charAt(i)) {	0
com.google.javascript.jscomp.CodeGenerator:996-char c = s.charAt(i);	0
com.google.javascript.jscomp.CodeGenerator:997-switch (c) {	0
com.google.javascript.jscomp.CodeGenerator:940-int singleq = 0, doubleq = 0;	0
com.google.javascript.jscomp.CodeGenerator:943-for (int i = 0; i < s.length(); i++) {	0
com.google.javascript.jscomp.CodeGenerator:952-if (singleq < doubleq) {	0
com.google.javascript.jscomp.CodeGenerator:959-quote = '\"';	0
com.google.javascript.jscomp.CodeGenerator:960-doublequote = "\\\"";	0
com.google.javascript.jscomp.CodeGenerator:961-singlequote = "\'";	0
com.google.javascript.jscomp.CodeGenerator:964-return strEscape(s, quote, doublequote, singlequote, "\\\\",	0
com.google.javascript.jscomp.CodeGenerator:993-StringBuilder sb = new StringBuilder(s.length() + 2);	0
com.google.javascript.jscomp.CodeGenerator:994-sb.append(quote);	0
com.google.javascript.jscomp.CodeGenerator:995-for (int i = 0; i < s.length(); i++) {	0
com.google.javascript.jscomp.CodeGenerator:1056-sb.append(quote);	0
com.google.javascript.jscomp.CodeGenerator:1057-return sb.toString();	0
com.google.javascript.jscomp.CodeGenerator:191-Preconditions.checkState(childCount == 1);	0
com.google.javascript.jscomp.CodeGenerator:192-addIdentifier(n.getString());	0
com.google.javascript.jscomp.CodeGenerator:193-cc.addOp("=", true);	0
com.google.javascript.jscomp.CodeGenerator:194-if (first.getType() == Token.COMMA) {	0
com.google.javascript.jscomp.CodeGenerator:199-addExpr(first, 0, getContextForNoInOperator(context));	0
com.google.javascript.jscomp.CodeGenerator:202-break;	0
com.google.javascript.jscomp.CodeGenerator:176-if (first != null) {	0
com.google.javascript.jscomp.CodeGenerator:177-add("var ");	0
com.google.javascript.jscomp.CodeGenerator:178-addList(first, false, getContextForNoInOperator(context));	0
com.google.javascript.jscomp.CodeGenerator:381-cc.endStatement();	0
com.google.javascript.jscomp.CodeGenerator:1139-return (context == Context.IN_FOR_INIT_CLAUSE	0
com.google.javascript.jscomp.CodeGenerator:893-boolean isFirst = n == firstInList;	0
com.google.javascript.jscomp.CodeGenerator:894-if (isFirst) {	0
com.google.javascript.jscomp.CodeGenerator:895-addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);	0
com.google.javascript.jscomp.CodeGenerator:863-addExpr(n, minPrecedence, context);	0
com.google.javascript.jscomp.CodeGenerator:864-}	0
com.google.javascript.jscomp.CodeGenerator:892-for (Node n = firstInList; n != null; n = n.getNext()) {	0
com.google.javascript.jscomp.CodeGenerator:901-}	0
com.google.javascript.jscomp.CodeGenerator:871-if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||	0
com.google.javascript.jscomp.CodeGenerator:878-add(n, context);	0
com.google.javascript.jscomp.CodeGenerator:880-}	0
com.google.javascript.jscomp.CodeGenerator:188-if (first == null || first.getType() == Token.EMPTY) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:1061-return n;	0
com.google.javascript.jscomp.PeepholeFoldConstants:930-return n;	0
com.google.javascript.jscomp.PeepholeFoldConstants:940-result = lhType != rhType;	0
com.google.javascript.jscomp.PeepholeFoldConstants:941-break;	0
com.google.javascript.jscomp.PeepholeFoldConstants:346-return n;	0
com.google.javascript.jscomp.PeepholeFoldConstants:1133-return !equivalent;	0
com.google.javascript.jscomp.PeepholeFoldConstants:344-double numValue = left.getDouble();	0
com.google.javascript.jscomp.PeepholeFoldConstants:345-if (numValue == 0 || numValue == 1) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:911-if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:913-} else if (!rightLiteral) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:916-result = compareToUndefined(right, op);	0
com.google.javascript.jscomp.PeepholeFoldConstants:918-break;	0
com.google.javascript.jscomp.PeepholeFoldConstants:924-result = compareToUndefined(left, op);	0
com.google.javascript.jscomp.PeepholeFoldConstants:925-break;	0
com.google.javascript.jscomp.PeepholeFoldConstants:990-return n;// Only eval if they are the same type	0
com.google.javascript.jscomp.PeepholeFoldConstants:1026-result = compareToUndefined(left, op);	0
com.google.javascript.jscomp.PeepholeFoldConstants:1027-break;	0
com.google.javascript.jscomp.PeepholeFoldConstants:1039-return n;// Only eval if they are the same type	0
com.google.javascript.jscomp.PeepholeFoldConstants:1131-return equivalent;	0
com.google.javascript.jscomp.PeepholeFoldConstants:343-if (left.getType() == Token.NUMBER) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:927-if (rhType != Token.TRUE &&	0
com.google.javascript.jscomp.PeepholeFoldConstants:932-switch (op) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:935-result = lhType == rhType;	0
com.google.javascript.jscomp.PeepholeFoldConstants:936-break;	0
com.google.javascript.jscomp.PeepholeFoldConstants:958-break;	0
com.google.javascript.jscomp.PeepholeFoldConstants:1031-boolean undefinedLeft = (left.getString().equals("undefined"));	0
com.google.javascript.jscomp.PeepholeFoldConstants:1032-if (undefinedLeft) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:1033-result = compareToUndefined(right, op);	0
com.google.javascript.jscomp.PeepholeFoldConstants:1034-break;	0
com.google.javascript.jscomp.PeepholeFoldConstants:158-return tryFoldComparison(subtree, left, right);	0
com.google.javascript.jscomp.PeepholeFoldConstants:889-if (!NodeUtil.isLiteralValue(left, false) ||	0
com.google.javascript.jscomp.PeepholeFoldConstants:897-int op = n.getType();	0
com.google.javascript.jscomp.PeepholeFoldConstants:902-boolean rightLiteral = NodeUtil.isLiteralValue(right, false);	0
com.google.javascript.jscomp.PeepholeFoldConstants:903-boolean undefinedRight = ((Token.NAME == right.getType()	0
com.google.javascript.jscomp.PeepholeFoldConstants:907-int lhType = left.getType();	1
com.google.javascript.jscomp.PeepholeFoldConstants:908-int rhType = right.getType();	0
com.google.javascript.jscomp.PeepholeFoldConstants:909-switch (lhType) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:340-switch (n.getType()) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:1030-if (rightLiteral) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:1135-return valueUndefined;	0
com.google.javascript.jscomp.PeepholeFoldConstants:1137-return !valueUndefined;	0
com.google.javascript.jscomp.PeepholeFoldConstants:84-tryReduceOperandsForOp(subtree);	0
com.google.javascript.jscomp.PeepholeFoldConstants:85-return tryFoldUnaryOperator(subtree);	0
com.google.javascript.jscomp.PeepholeFoldConstants:326-Preconditions.checkState(n.hasOneChild());	0
com.google.javascript.jscomp.PeepholeFoldConstants:328-Node left = n.getFirstChild();	0
com.google.javascript.jscomp.PeepholeFoldConstants:329-Node parent = n.getParent();	0
com.google.javascript.jscomp.PeepholeFoldConstants:331-if (left == null) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:335-TernaryValue leftVal = NodeUtil.getPureBooleanValue(left);	0
com.google.javascript.jscomp.PeepholeFoldConstants:336-if (leftVal == TernaryValue.UNKNOWN) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:923-if (undefinedRight) {	0
com.google.javascript.jscomp.NodeUtil:364-start++;	0
com.google.javascript.jscomp.NodeUtil:375-return TernaryValue.TRUE;	1
com.google.javascript.jscomp.NodeUtil:301-return getStringNumberValue(n.getString());	0
com.google.javascript.jscomp.NodeUtil:315-String s = trimJsWhiteSpace(rawJsString);	0
com.google.javascript.jscomp.NodeUtil:317-if (s.length() == 0) {	0
com.google.javascript.jscomp.NodeUtil:321-if (s.length() > 2	0
com.google.javascript.jscomp.NodeUtil:332-if (s.length() > 3	0
com.google.javascript.jscomp.NodeUtil:342-if (s.equals("infinity")	0
com.google.javascript.jscomp.NodeUtil:349-return Double.parseDouble(s);	0
com.google.javascript.jscomp.NodeUtil:356-int start = 0;	0
com.google.javascript.jscomp.NodeUtil:357-int end = s.length();	0
com.google.javascript.jscomp.NodeUtil:359-&& isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {	0
com.google.javascript.jscomp.NodeUtil:363-&& isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {	0
com.google.javascript.jscomp.NodeUtil:366-return s.substring(start, end);	0
com.google.javascript.jscomp.NodeUtil:373-switch (c) {	0
com.google.javascript.jscomp.NodeUtil:387-return (Character.getType(c) == Character.SPACE_SEPARATOR)	0
com.google.javascript.jscomp.NodeUtil:2141-case Token.POS: return "+";	0
com.google.javascript.jscomp.NodeUtil:2124-case Token.NOT: return "!";	0
com.google.javascript.jscomp.NodeUtil:123-return TernaryValue.forBoolean(n.getDouble() != 0);	0
com.google.javascript.jscomp.NodeUtil:1227-return true;	0
com.google.javascript.jscomp.NodeUtil:2171-String res = opToStr(operator);	0
com.google.javascript.jscomp.NodeUtil:2172-if (res == null) {	0
com.google.javascript.jscomp.NodeUtil:2176-return res;	0
com.google.javascript.jscomp.NodeUtil:118-switch (n.getType()) {	0
com.google.javascript.jscomp.NodeUtil:1141-case Token.NEG:return 13;	0
com.google.javascript.jscomp.NodeUtil:1174-switch (n.getType()) {	0
com.google.javascript.jscomp.NodeUtil:1186-return p.apply(n);	0
com.google.javascript.jscomp.NodeUtil:1203-return valueCheck(n, NUMBERIC_RESULT_PREDICATE);	0
com.google.javascript.jscomp.NodeUtil:1207-switch (n.getType()) {	0
com.google.javascript.jscomp.NodeUtil:254-switch (n.getType()) {	0
com.google.javascript.jscomp.NodeUtil:1094-switch (type) {	0
com.google.javascript.jscomp.NodeUtil:1161-return 15;	0
com.google.javascript.jscomp.NodeUtil:54-private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =	0
com.google.javascript.jscomp.NodeUtil:893-private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =	0
com.google.javascript.jscomp.NodeUtil:896-private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =	0
com.google.javascript.jscomp.NodeUtil:898-private static final Set<String> REGEXP_METHODS =	0
com.google.javascript.jscomp.NodeUtil:900-private static final Set<String> STRING_REGEXP_METHODS =	0
com.google.javascript.jscomp.NodeUtil:1196-static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =	0
com.google.javascript.jscomp.NodeUtil:1248-static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =	0
com.google.javascript.jscomp.NodeUtil:1309-static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =	0
com.google.javascript.jscomp.NodeUtil:2116-switch (operator) {	0
com.google.javascript.jscomp.NodeUtil:2158-default: return null;	0
com.google.javascript.jscomp.NodeUtil:64-private NodeUtil() {}	0
com.google.javascript.jscomp.NodeUtil:73-switch (n.getType()) {	0
com.google.javascript.jscomp.NodeUtil:77-return getImpureBooleanValue(n.getLastChild());	0
com.google.javascript.jscomp.NodeUtil:79-TernaryValue value = getImpureBooleanValue(n.getLastChild());	0
com.google.javascript.jscomp.NodeUtil:80-return value.not();	0
com.google.javascript.jscomp.NodeUtil:82-TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());	0
com.google.javascript.jscomp.NodeUtil:83-TernaryValue rhs = getImpureBooleanValue(n.getLastChild());	0
com.google.javascript.jscomp.NodeUtil:84-return lhs.and(rhs);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:316-return false;	0
com.google.javascript.jscomp.DeadAssignmentsElimination:352-return VariableLiveness.KILL;	0
com.google.javascript.jscomp.DeadAssignmentsElimination:315-} else if (state == VariableLiveness.KILL) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:230-return;	0
com.google.javascript.jscomp.DeadAssignmentsElimination:314-return true;	0
com.google.javascript.jscomp.DeadAssignmentsElimination:342-if (NodeUtil.isLhs(n, n.getParent())) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:354-return VariableLiveness.READ;	0
com.google.javascript.jscomp.DeadAssignmentsElimination:309-if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {	1
com.google.javascript.jscomp.DeadAssignmentsElimination:310-state = isVariableReadBeforeKill(sibling, variable);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:313-if (state == VariableLiveness.READ) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:341-if (NodeUtil.isName(n) && variable.equals(n.getString())) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:343-Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:347-Node rhs = n.getNext();	0
com.google.javascript.jscomp.DeadAssignmentsElimination:348-VariableLiveness state = isVariableReadBeforeKill(rhs, variable);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:349-if (state == VariableLiveness.READ) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:358-switch (n.getType()) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:215-return; // Variable not dead.	0
com.google.javascript.jscomp.DeadAssignmentsElimination:293-VariableLiveness state = VariableLiveness.MAYBE_LIVE;	0
com.google.javascript.jscomp.DeadAssignmentsElimination:294-switch (n.getParent().getType()) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:307-for(Node sibling = n.getNext(); sibling != null;	0
com.google.javascript.jscomp.DeadAssignmentsElimination:372-if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION	1
com.google.javascript.jscomp.DeadAssignmentsElimination:373-VariableLiveness state = isVariableReadBeforeKill(child, variable);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:374-if (state != VariableLiveness.MAYBE_LIVE) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:375-return state;	0
com.google.javascript.jscomp.DeadAssignmentsElimination:381-return VariableLiveness.MAYBE_LIVE;	0
com.google.javascript.jscomp.DeadAssignmentsElimination:292-while (n != exprRoot) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:370-for (Node child = n.getFirstChild();	0
com.google.javascript.jscomp.DeadAssignmentsElimination:371-child != null; child = child.getNext()) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:143-if (n.hasChildren()) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:144-tryRemoveAssignment(t, n.getFirstChild(), state);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:365-return checkHookBranchReadBeforeKill(	0
com.google.javascript.jscomp.DeadAssignmentsElimination:386-VariableLiveness v1 = isVariableReadBeforeKill(	0
com.google.javascript.jscomp.DeadAssignmentsElimination:388-VariableLiveness v2 = isVariableReadBeforeKill(	0
com.google.javascript.jscomp.DeadAssignmentsElimination:393-if (v1 == VariableLiveness.READ || v2 == VariableLiveness.READ) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:394-return VariableLiveness.READ;	0
com.google.javascript.jscomp.DeadAssignmentsElimination:218-if (state.getIn().isLive(var) &&	0
com.google.javascript.jscomp.DeadAssignmentsElimination:321-n = n.getParent();	0
com.google.javascript.jscomp.DeadAssignmentsElimination:322-}	0
com.google.javascript.jscomp.DeadAssignmentsElimination:214-if (state.getOut().isLive(var)) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:195-Var var = scope.getVar(name);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:197-if (liveness.getEscapedLocals().contains(var)) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:204-if (rhs != null &&	0
com.google.javascript.jscomp.DeadAssignmentsElimination:183-tryRemoveAssignment(t, rhs, exprRoot, state);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:184-rhs = lhs.getNext();	0
com.google.javascript.jscomp.DeadAssignmentsElimination:95-ControlFlowGraph<Node> cfg = t.getControlFlowGraph();	0
com.google.javascript.jscomp.DeadAssignmentsElimination:96-liveness = new LiveVariablesAnalysis(cfg, scope, compiler);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:97-liveness.analyze();	0
com.google.javascript.jscomp.DeadAssignmentsElimination:98-tryRemoveDeadAssignments(t, cfg);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:99-}	0
com.google.javascript.jscomp.DeadAssignmentsElimination:119-Iterable<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes();	0
com.google.javascript.jscomp.CodeGenerator:1018-appendHexJavaScriptRepresentation(sb, c);	0
com.google.javascript.jscomp.CodeGenerator:1127-appendHexJavaScriptRepresentation(c, sb);	0
com.google.javascript.jscomp.CodeGenerator:1131-}	0
com.google.javascript.jscomp.CodeGenerator:1132-}	0
com.google.javascript.jscomp.CodeGenerator:1144-if (Character.isSupplementaryCodePoint(codePoint)) {	0
com.google.javascript.jscomp.CodeGenerator:1154-out.append("\\u")	0
com.google.javascript.jscomp.CodeGenerator:1159-}	0
com.google.javascript.jscomp.CodeGenerator:912-switch (s.charAt(i)) {	0
com.google.javascript.jscomp.CodeGenerator:964-char c = s.charAt(i);	0
com.google.javascript.jscomp.CodeGenerator:965-switch (c) {	0
com.google.javascript.jscomp.CodeGenerator:1001-if (outputCharsetEncoder != null) {	0
com.google.javascript.jscomp.CodeGenerator:1012-if (c > 0x1f && c <= 0x7f) {	0
com.google.javascript.jscomp.CodeGenerator:624-if (childCount !=	0
com.google.javascript.jscomp.CodeGenerator:630-add(jsString(n.getString(), outputCharsetEncoder));	0
com.google.javascript.jscomp.CodeGenerator:631-break;	0
com.google.javascript.jscomp.CodeGenerator:908-int singleq = 0, doubleq = 0;	0
com.google.javascript.jscomp.CodeGenerator:911-for (int i = 0; i < s.length(); i++) {	0
com.google.javascript.jscomp.CodeGenerator:920-if (singleq < doubleq) {	0
com.google.javascript.jscomp.CodeGenerator:927-quote = '\"';	0
com.google.javascript.jscomp.CodeGenerator:928-doublequote = "\\\"";	0
com.google.javascript.jscomp.CodeGenerator:929-singlequote = "\'";	0
com.google.javascript.jscomp.CodeGenerator:932-return strEscape(s, quote, doublequote, singlequote, "\\\\",	0
com.google.javascript.jscomp.CodeGenerator:961-StringBuilder sb = new StringBuilder(s.length() + 2);	0
com.google.javascript.jscomp.CodeGenerator:962-sb.append(quote);	0
com.google.javascript.jscomp.CodeGenerator:963-for (int i = 0; i < s.length(); i++) {	0
com.google.javascript.jscomp.CodeGenerator:1023-sb.append(quote);	0
com.google.javascript.jscomp.CodeGenerator:1024-return sb.toString();	0
com.google.javascript.jscomp.CodeGenerator:191-Preconditions.checkState(childCount == 1);	0
com.google.javascript.jscomp.CodeGenerator:192-addIdentifier(n.getString());	0
com.google.javascript.jscomp.CodeGenerator:193-cc.addOp("=", true);	0
com.google.javascript.jscomp.CodeGenerator:194-if (first.getType() == Token.COMMA) {	0
com.google.javascript.jscomp.CodeGenerator:199-addExpr(first, 0, getContextForNoInOperator(context));	0
com.google.javascript.jscomp.CodeGenerator:202-break;	0
com.google.javascript.jscomp.CodeGenerator:176-if (first != null) {	0
com.google.javascript.jscomp.CodeGenerator:177-add("var ");	0
com.google.javascript.jscomp.CodeGenerator:178-addList(first, false, getContextForNoInOperator(context));	0
com.google.javascript.jscomp.CodeGenerator:377-cc.endStatement();	0
com.google.javascript.jscomp.CodeGenerator:1106-return (context == Context.IN_FOR_INIT_CLAUSE	0
com.google.javascript.jscomp.CodeGenerator:861-boolean isFirst = n == firstInList;	0
com.google.javascript.jscomp.CodeGenerator:862-if (isFirst) {	0
com.google.javascript.jscomp.CodeGenerator:863-addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);	0
com.google.javascript.jscomp.CodeGenerator:831-addExpr(n, minPrecedence, context);	0
com.google.javascript.jscomp.CodeGenerator:832-}	0
com.google.javascript.jscomp.CodeGenerator:860-for (Node n = firstInList; n != null; n = n.getNext()) {	0
com.google.javascript.jscomp.CodeGenerator:869-}	0
com.google.javascript.jscomp.CodeGenerator:839-if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||	0
com.google.javascript.jscomp.CodeGenerator:846-add(n, context);	0
com.google.javascript.jscomp.CodeGenerator:848-}	0
com.google.javascript.jscomp.CodeGenerator:188-if (first == null || first.getType() == Token.EMPTY) {	0
com.google.javascript.jscomp.CodeGenerator:71-cc.add(str);	0
com.google.javascript.jscomp.NodeUtil:610-return isSimpleOperatorType(n.getType());	0
com.google.javascript.jscomp.NodeUtil:2870-return NodeUtil.isImmutableValue(value.getLastChild())	0
com.google.javascript.jscomp.NodeUtil:2884-if (value.getBooleanProp(Node.INCRDECR_PROP)) {	0
com.google.javascript.jscomp.NodeUtil:2885-return evaluatesToLocalValue(value.getFirstChild(), locals);	0
com.google.javascript.jscomp.NodeUtil:2887-return true;	0
com.google.javascript.jscomp.NodeUtil:2896-return locals.apply(value);	0
com.google.javascript.jscomp.NodeUtil:2912-return true;	0
com.google.javascript.jscomp.NodeUtil:2917-if (isAssignmentOp(value)	0
com.google.javascript.jscomp.NodeUtil:2920-return true;	0
com.google.javascript.jscomp.NodeUtil:2923-throw new IllegalStateException(	0
com.google.javascript.jscomp.NodeUtil:2969-return false;	0
com.google.javascript.jscomp.NodeUtil:466-return true;	0
com.google.javascript.jscomp.NodeUtil:964-Preconditions.checkState(n.getType() == Token.CALL);	0
com.google.javascript.jscomp.NodeUtil:965-return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;	0
com.google.javascript.jscomp.NodeUtil:1262-return true;	1
com.google.javascript.jscomp.NodeUtil:1488-return n.getType() == Token.STRING;	0
com.google.javascript.jscomp.NodeUtil:2874-return evaluatesToLocalValue(value.getLastChild(), locals);	0
com.google.javascript.jscomp.NodeUtil:2877-return evaluatesToLocalValue(value.getFirstChild(), locals)	0
com.google.javascript.jscomp.NodeUtil:2880-return evaluatesToLocalValue(value.getFirstChild().getNext(), locals)	0
com.google.javascript.jscomp.NodeUtil:2890-return locals.apply(value);	0
com.google.javascript.jscomp.NodeUtil:2898-return callHasLocalResult(value)	0
com.google.javascript.jscomp.NodeUtil:2909-return true;	0
com.google.javascript.jscomp.NodeUtil:2964-Node getNode = call.getFirstChild();	0
com.google.javascript.jscomp.NodeUtil:2965-if (isGet(getNode)) {	0
com.google.javascript.jscomp.NodeUtil:2966-Node propNode = getNode.getLastChild();	0
com.google.javascript.jscomp.NodeUtil:2967-return isString(propNode) && "toString".equals(propNode.getString());	0
com.google.javascript.jscomp.NodeUtil:481-return false;	0
com.google.javascript.jscomp.NodeUtil:652-return false;	0
com.google.javascript.jscomp.NodeUtil:972-Preconditions.checkState(n.getType() == Token.NEW);	0
com.google.javascript.jscomp.NodeUtil:973-return n.isOnlyModifiesThisCall();	0
com.google.javascript.jscomp.NodeUtil:1158-switch (n.getType()) {	0
com.google.javascript.jscomp.NodeUtil:1170-return p.apply(n);	0
com.google.javascript.jscomp.NodeUtil:1239-return valueCheck(n, BOOLEAN_RESULT_PREDICATE);	0
com.google.javascript.jscomp.NodeUtil:1243-switch (n.getType()) {	0
com.google.javascript.jscomp.NodeUtil:1264-return false;	0
com.google.javascript.jscomp.NodeUtil:1355-switch (n.getType()){	0
com.google.javascript.jscomp.NodeUtil:1368-return true;	0
com.google.javascript.jscomp.NodeUtil:1370-return false;	0
com.google.javascript.jscomp.NodeUtil:2892-return isImmutableValue(value) || locals.apply(value);	0
com.google.javascript.jscomp.NodeUtil:2902-return newHasLocalResult(value)	0
com.google.javascript.jscomp.NodeUtil:460-switch (n.getType()) {	0
com.google.javascript.jscomp.NodeUtil:473-String name = n.getString();	0
com.google.javascript.jscomp.NodeUtil:476-return "undefined".equals(name)	0
com.google.javascript.jscomp.NodeUtil:2856-return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());	0
com.google.javascript.jscomp.NodeUtil:2865-switch (value.getType()) {	0
com.google.javascript.jscomp.NodeUtil:619-switch (type) {	0
com.google.javascript.jscomp.NodeUtil:649-return true;	0
com.google.javascript.jscomp.NodeUtil:1424-return n.getType() == Token.GETPROP	0
com.google.javascript.jscomp.NodeUtil:54-private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =	0
com.google.javascript.jscomp.NodeUtil:876-private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =	0
com.google.javascript.jscomp.parsing.IRFactory:215-irNode.setLineno(irNode.getFirstChild().getLineno());	0
com.google.javascript.jscomp.parsing.IRFactory:216-irNode.setCharno(irNode.getFirstChild().getCharno());	0
com.google.javascript.jscomp.parsing.IRFactory:1196-return Token.BLOCK;	0
com.google.javascript.jscomp.parsing.IRFactory:942-switch (token) {	0
com.google.javascript.jscomp.parsing.IRFactory:266-return position;	0
com.google.javascript.jscomp.parsing.IRFactory:1276-return Node.newString(type, value).clonePropsFrom(templateNode);	0
com.google.javascript.jscomp.parsing.IRFactory:104-ErrorReporter errorReporter) {	0
com.google.javascript.jscomp.parsing.IRFactory:86-private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet("use strict");	0
com.google.javascript.jscomp.parsing.IRFactory:90-Node rootNodeJsDocHolder = new Node(Token.SCRIPT);	0
com.google.javascript.jscomp.parsing.IRFactory:91-Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =	0
com.google.javascript.jscomp.parsing.IRFactory:93-JSDocInfo fileOverviewInfo = null;	0
com.google.javascript.jscomp.parsing.IRFactory:105-this.sourceString = sourceString;	0
com.google.javascript.jscomp.parsing.IRFactory:106-this.sourceName = sourceName;	0
com.google.javascript.jscomp.parsing.IRFactory:107-this.config = config;	0
com.google.javascript.jscomp.parsing.IRFactory:108-this.errorReporter = errorReporter;	0
com.google.javascript.jscomp.parsing.IRFactory:109-this.transformDispatcher = new TransformDispatcher();	0
com.google.javascript.jscomp.parsing.IRFactory:111-this.templateNode = createTemplateNode();	0
com.google.javascript.jscomp.parsing.IRFactory:112-}	0
com.google.javascript.jscomp.parsing.IRFactory:119-Node templateNode = new Node(Token.SCRIPT);	0
com.google.javascript.jscomp.parsing.IRFactory:120-templateNode.putProp(Node.SOURCENAME_PROP, sourceName);	0
com.google.javascript.jscomp.parsing.IRFactory:121-return templateNode;	0
com.google.javascript.jscomp.parsing.IRFactory:128-IRFactory irFactory = new IRFactory(sourceString, node.getSourceName(),	0
com.google.javascript.jscomp.parsing.IRFactory:130-Node irNode = irFactory.transform(node);	0
com.google.javascript.jscomp.parsing.IRFactory:132-if (node.getComments() != null) {	0
com.google.javascript.jscomp.parsing.IRFactory:140-irFactory.setFileOverviewJsDoc(irNode);	0
com.google.javascript.jscomp.parsing.IRFactory:142-return irNode;	0
com.google.javascript.jscomp.parsing.IRFactory:149-irNode.setJSDocInfo(rootNodeJsDocHolder.getJSDocInfo());	0
com.google.javascript.jscomp.parsing.IRFactory:150-if (fileOverviewInfo != null) {	0
com.google.javascript.jscomp.parsing.IRFactory:157-}	0
com.google.javascript.jscomp.parsing.IRFactory:194-Comment comment = node.getJsDocNode();	0
com.google.javascript.jscomp.parsing.IRFactory:195-if (comment != null) {	0
com.google.javascript.jscomp.parsing.IRFactory:202-return null;	0
com.google.javascript.jscomp.parsing.IRFactory:206-JSDocInfo jsDocInfo = handleJsDoc(node);	0
com.google.javascript.jscomp.parsing.IRFactory:207-Node irNode = justTransform(node);	0
com.google.javascript.jscomp.parsing.IRFactory:208-if (jsDocInfo != null) {	0
com.google.javascript.jscomp.parsing.IRFactory:213-if (irNode.getType() == Token.FUNCTION &&	0
com.google.javascript.jscomp.parsing.IRFactory:218-if (irNode.getLineno() == -1) {	0
com.google.javascript.jscomp.parsing.IRFactory:222-int lineno = node.getLineno();	0
com.google.javascript.jscomp.parsing.IRFactory:223-irNode.setLineno(lineno);	0
com.google.javascript.jscomp.parsing.IRFactory:224-int charno = position2charno(node.getAbsolutePosition());	0
com.google.javascript.jscomp.parsing.IRFactory:225-irNode.setCharno(charno);	0
com.google.javascript.jscomp.parsing.IRFactory:228-return irNode;	0
com.google.javascript.jscomp.parsing.IRFactory:264-int lineIndex = sourceString.lastIndexOf('\n', position);	0
com.google.javascript.jscomp.parsing.IRFactory:265-if (lineIndex == -1) {	0
com.google.javascript.jscomp.parsing.IRFactory:274-return transformDispatcher.process(node);	0
com.google.javascript.jscomp.parsing.IRFactory:1256-return new Node(type).clonePropsFrom(templateNode);	0
com.google.javascript.jscomp.parsing.IRFactory:133-for (Comment comment : node.getComments()) {	0
com.google.javascript.jscomp.parsing.IRFactory:134-if (comment.getCommentType() == JSDOC && !comment.isParsed()) {	0
com.google.javascript.jscomp.parsing.IRFactory:135-irFactory.handlePossibleFileOverviewJsDoc(comment);	0
com.google.javascript.jscomp.parsing.IRFactory:137-}	0
com.google.javascript.rhino.jstype.JSType:418-return autoboxObjType.findPropertyType(propertyName);	0
com.google.javascript.rhino.jstype.JSType:646-return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);	0
com.google.javascript.rhino.jstype.JSType:416-ObjectType autoboxObjType = ObjectType.cast(autoboxesTo());	0
com.google.javascript.rhino.jstype.JSType:417-if (autoboxObjType != null) {	0
com.google.javascript.rhino.jstype.JSType:645-} else if (thisType.isObject() && thatType.isObject()) {	0
com.google.javascript.rhino.jstype.JSType:643-} else if (thatType.isUnionType()) {	0
com.google.javascript.rhino.jstype.JSType:641-} else if (thisType.isUnionType()) {	0
com.google.javascript.rhino.jstype.JSType:639-} else if (thatType.isSubtype(thisType)) {	0
com.google.javascript.rhino.jstype.JSType:637-} else if (thisType.isSubtype(thatType)) {	0
com.google.javascript.rhino.jstype.JSType:632-} else if (thisType.isUnknownType() || thatType.isUnknownType()) {	0
com.google.javascript.rhino.jstype.JSType:618-if (that.isRecordType()) {	0
com.google.javascript.rhino.jstype.JSType:622-return getGreatestSubtype(this, that);	0
com.google.javascript.rhino.jstype.JSType:630-if (thisType.isEquivalentTo(thatType)) {	0
com.google.javascript.rhino.jstype.JSType:270-return false;	0
com.google.javascript.rhino.jstype.JSType:102-JSType(JSTypeRegistry registry) {	0
com.google.javascript.rhino.jstype.JSType:70-private boolean resolved = false;	0
com.google.javascript.rhino.jstype.JSType:71-private JSType resolveResult = null;	0
com.google.javascript.rhino.jstype.JSType:103-this.registry = registry;	0
com.google.javascript.rhino.jstype.JSType:104-}	0
com.google.javascript.rhino.jstype.JSType:90-static final Comparator<JSType> ALPHA = new Comparator<JSType>() {	0
com.google.javascript.rhino.jstype.JSType:110-return registry.getNativeType(typeId);	0
com.google.javascript.rhino.jstype.JSType:151-return false;	0
com.google.javascript.rhino.jstype.JSType:155-return false;	0
com.google.javascript.rhino.jstype.JSType:159-return false;	0
com.google.javascript.rhino.jstype.JSType:163-return isNoType() || isNoObjectType() || isNoResolvedType();	1
com.google.javascript.rhino.jstype.JSType:238-return false;	0
com.google.javascript.rhino.jstype.JSType:242-return false;	0
com.google.javascript.rhino.jstype.JSType:298-return false;	0
com.google.javascript.rhino.jstype.JSType:328-if (jsType instanceof ProxyObjectType) {	0
com.google.javascript.rhino.jstype.JSType:335-return this == jsType;	0
com.google.javascript.rhino.jstype.JSType:351-return System.identityHashCode(this);	0
com.google.javascript.rhino.jstype.JSType:474-return this instanceof ObjectType ? (ObjectType) this : null;	0
com.google.javascript.rhino.jstype.JSType:895-if (thatType.isUnknownType()) {	0
com.google.javascript.rhino.jstype.JSType:899-if (thisType.isEquivalentTo(thatType)) {	0
com.google.javascript.rhino.jstype.JSType:900-return true;	0
com.google.javascript.rhino.jstype.JSType:903-if (thatType.isAllType()) {	0
com.google.javascript.rhino.jstype.JSType:907-if (thatType instanceof UnionType) {	0
com.google.javascript.rhino.jstype.JSType:916-if (thatType instanceof NamedType) {	0
com.google.javascript.rhino.jstype.JSType:919-return false;	0
com.google.javascript.rhino.jstype.JSType:660-if (type.isNoResolvedType()) {	0
com.google.javascript.rhino.jstype.JSType:664-} else if (type instanceof UnionType) {	0
com.google.javascript.rhino.jstype.JSType:684-return type;	0
com.google.javascript.rhino.jstype.JSType:591-return getLeastSupertype(this, that);	0
com.google.javascript.rhino.jstype.JSType:599-boolean areEquivalent = thisType.isEquivalentTo(thatType);	0
com.google.javascript.rhino.jstype.JSType:600-return areEquivalent ? thisType :	0
com.google.javascript.rhino.jstype.JSType:587-if (that.isUnionType()) {	0
com.google.javascript.rhino.jstype.JSType:290-return false;	0
com.google.javascript.rhino.jstype.JSType:313-return false;	0
com.google.javascript.rhino.jstype.JSType:254-return false;	0
com.google.javascript.rhino.jstype.JSType:305-return false;	0
com.google.javascript.jscomp.parsing.IRFactory:1052-return Token.ASSIGN;	0
com.google.javascript.jscomp.parsing.IRFactory:954-return Token.CALL;	0
com.google.javascript.jscomp.parsing.IRFactory:1194-return new Node(type, child1).clonePropsFrom(templateNode);	0
com.google.javascript.jscomp.parsing.IRFactory:1139-return Token.EXPR_RESULT;	0
com.google.javascript.jscomp.parsing.IRFactory:1198-return new Node(type, child1, child2).clonePropsFrom(templateNode);	0
com.google.javascript.jscomp.parsing.IRFactory:876-switch (token) {	0
com.google.javascript.jscomp.parsing.IRFactory:265-return position;	0
com.google.javascript.jscomp.parsing.IRFactory:1210-return Node.newString(type, value).clonePropsFrom(templateNode);	0
com.google.javascript.jscomp.parsing.IRFactory:103-ErrorReporter errorReporter) {	0
com.google.javascript.jscomp.parsing.IRFactory:85-private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet("use strict");	0
com.google.javascript.jscomp.parsing.IRFactory:89-Node rootNodeJsDocHolder = new Node(Token.SCRIPT);	0
com.google.javascript.jscomp.parsing.IRFactory:90-Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =	0
com.google.javascript.jscomp.parsing.IRFactory:92-JSDocInfo fileOverviewInfo = null;	0
com.google.javascript.jscomp.parsing.IRFactory:104-this.sourceString = sourceString;	0
com.google.javascript.jscomp.parsing.IRFactory:105-this.sourceName = sourceName;	0
com.google.javascript.jscomp.parsing.IRFactory:106-this.config = config;	0
com.google.javascript.jscomp.parsing.IRFactory:107-this.errorReporter = errorReporter;	0
com.google.javascript.jscomp.parsing.IRFactory:108-this.transformDispatcher = new TransformDispatcher();	0
com.google.javascript.jscomp.parsing.IRFactory:110-this.templateNode = createTemplateNode();	0
com.google.javascript.jscomp.parsing.IRFactory:111-}	0
com.google.javascript.jscomp.parsing.IRFactory:118-Node templateNode = new Node(Token.SCRIPT);	0
com.google.javascript.jscomp.parsing.IRFactory:119-templateNode.putProp(Node.SOURCENAME_PROP, sourceName);	0
com.google.javascript.jscomp.parsing.IRFactory:120-return templateNode;	0
com.google.javascript.jscomp.parsing.IRFactory:127-IRFactory irFactory = new IRFactory(sourceString, node.getSourceName(),	0
com.google.javascript.jscomp.parsing.IRFactory:129-Node irNode = irFactory.transform(node);	0
com.google.javascript.jscomp.parsing.IRFactory:131-if (node.getComments() != null) {	0
com.google.javascript.jscomp.parsing.IRFactory:139-irFactory.setFileOverviewJsDoc(irNode);	0
com.google.javascript.jscomp.parsing.IRFactory:141-return irNode;	0
com.google.javascript.jscomp.parsing.IRFactory:148-irNode.setJSDocInfo(rootNodeJsDocHolder.getJSDocInfo());	0
com.google.javascript.jscomp.parsing.IRFactory:149-if (fileOverviewInfo != null) {	0
com.google.javascript.jscomp.parsing.IRFactory:156-}	0
com.google.javascript.jscomp.parsing.IRFactory:193-Comment comment = node.getJsDocNode();	0
com.google.javascript.jscomp.parsing.IRFactory:194-if (comment != null) {	0
com.google.javascript.jscomp.parsing.IRFactory:201-return null;	0
com.google.javascript.jscomp.parsing.IRFactory:205-JSDocInfo jsDocInfo = handleJsDoc(node);	0
com.google.javascript.jscomp.parsing.IRFactory:206-Node irNode = justTransform(node);	0
com.google.javascript.jscomp.parsing.IRFactory:207-if (jsDocInfo != null) {	0
com.google.javascript.jscomp.parsing.IRFactory:212-if (irNode.getType() == Token.FUNCTION &&	0
com.google.javascript.jscomp.parsing.IRFactory:217-if (irNode.getLineno() == -1) {	0
com.google.javascript.jscomp.parsing.IRFactory:221-int lineno = node.getLineno();	0
com.google.javascript.jscomp.parsing.IRFactory:222-irNode.setLineno(lineno);	0
com.google.javascript.jscomp.parsing.IRFactory:223-int charno = position2charno(node.getAbsolutePosition());	0
com.google.javascript.jscomp.parsing.IRFactory:224-irNode.setCharno(charno);	0
com.google.javascript.jscomp.parsing.IRFactory:227-return irNode;	0
com.google.javascript.jscomp.parsing.IRFactory:263-int lineIndex = sourceString.lastIndexOf('\n', position);	0
com.google.javascript.jscomp.parsing.IRFactory:264-if (lineIndex == -1) {	0
com.google.javascript.jscomp.parsing.IRFactory:273-return transformDispatcher.process(node);	0
com.google.javascript.jscomp.parsing.IRFactory:1190-return new Node(type).clonePropsFrom(templateNode);	0
com.google.javascript.jscomp.parsing.IRFactory:132-for (Comment comment : node.getComments()) {	0
com.google.javascript.jscomp.parsing.IRFactory:133-if (comment.getCommentType() == JSDOC && !comment.isParsed()) {	0
com.google.javascript.jscomp.UnreachableCodeElimination:144-return n;	0
com.google.javascript.jscomp.UnreachableCodeElimination:186-removeDeadExprStatementSafely(n);	0
com.google.javascript.jscomp.UnreachableCodeElimination:187-return fallThrough;	0
com.google.javascript.jscomp.UnreachableCodeElimination:177-List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();	0
com.google.javascript.jscomp.UnreachableCodeElimination:178-if (outEdges.size() == 1 &&	0
com.google.javascript.jscomp.UnreachableCodeElimination:182-Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);	0
com.google.javascript.jscomp.UnreachableCodeElimination:183-Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));	1
com.google.javascript.jscomp.UnreachableCodeElimination:184-Node nextCfgNode = outEdges.get(0).getDestination().getValue();	0
com.google.javascript.jscomp.UnreachableCodeElimination:185-if (nextCfgNode == fallThrough) {	0
com.google.javascript.jscomp.UnreachableCodeElimination:195-Node next = ControlFlowAnalysis.computeFollowNode(n);	0
com.google.javascript.jscomp.UnreachableCodeElimination:196-return next;	1
com.google.javascript.jscomp.UnreachableCodeElimination:204-return;	0
com.google.javascript.jscomp.UnreachableCodeElimination:161-if (n.hasChildren()) {	0
com.google.javascript.jscomp.UnreachableCodeElimination:162-Node first = n.getFirstChild();	0
com.google.javascript.jscomp.UnreachableCodeElimination:163-return tryRemoveUnconditionalBranching(first);	0
com.google.javascript.jscomp.UnreachableCodeElimination:109-tryRemoveUnconditionalBranching(n);	0
com.google.javascript.jscomp.UnreachableCodeElimination:110-}	0
com.google.javascript.jscomp.UnreachableCodeElimination:143-if (n == null) {	0
com.google.javascript.jscomp.UnreachableCodeElimination:147-DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);	0
com.google.javascript.jscomp.UnreachableCodeElimination:149-if (gNode == null) {	0
com.google.javascript.jscomp.UnreachableCodeElimination:153-if (n.getParent() == null) {	1
com.google.javascript.jscomp.UnreachableCodeElimination:159-switch (n.getType()) {	0
com.google.javascript.jscomp.UnreachableCodeElimination:191-return n;	0
com.google.javascript.jscomp.UnreachableCodeElimination:105-removeDeadExprStatementSafely(n);	0
com.google.javascript.jscomp.UnreachableCodeElimination:106-return;	0
com.google.javascript.jscomp.UnreachableCodeElimination:200-Node parent = n.getParent();	0
com.google.javascript.jscomp.UnreachableCodeElimination:201-if (n.getType() == Token.EMPTY ||	0
com.google.javascript.jscomp.UnreachableCodeElimination:207-switch (n.getType()) {	0
com.google.javascript.jscomp.UnreachableCodeElimination:229-NodeUtil.redeclareVarsInsideBranch(n);	0
com.google.javascript.jscomp.UnreachableCodeElimination:230-compiler.reportCodeChange();	0
com.google.javascript.jscomp.UnreachableCodeElimination:231-if (logger.isLoggable(Level.FINE)) {	0
com.google.javascript.jscomp.UnreachableCodeElimination:234-NodeUtil.removeChild(n.getParent(), n);	0
com.google.javascript.jscomp.UnreachableCodeElimination:235-}	0
com.google.javascript.jscomp.UnreachableCodeElimination:99-DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);	0
com.google.javascript.jscomp.UnreachableCodeElimination:100-if (gNode == null) { // Not in CFG.	0
com.google.javascript.jscomp.UnreachableCodeElimination:101-return;	0
com.google.javascript.jscomp.UnreachableCodeElimination:103-if (gNode.getAnnotation() != GraphReachability.REACHABLE ||	0
com.google.javascript.jscomp.UnreachableCodeElimination:61-boolean removeNoOpStatements) {	0
com.google.javascript.jscomp.UnreachableCodeElimination:55-Deque<ControlFlowGraph<Node>> cfgStack =	0
com.google.javascript.jscomp.UnreachableCodeElimination:58-ControlFlowGraph<Node> curCfg = null;	0
com.google.javascript.jscomp.UnreachableCodeElimination:62-this.compiler = compiler;	0
com.google.javascript.jscomp.UnreachableCodeElimination:63-this.removeNoOpStatements = removeNoOpStatements;	0
com.google.javascript.jscomp.UnreachableCodeElimination:64-}	0
com.google.javascript.jscomp.UnreachableCodeElimination:49-private static final Logger logger =	0
com.google.javascript.jscomp.UnreachableCodeElimination:68-Scope scope = t.getScope();	0
com.google.javascript.jscomp.UnreachableCodeElimination:71-ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false);	0
com.google.javascript.jscomp.UnreachableCodeElimination:72-cfa.process(null, scope.getRootNode());	0
com.google.javascript.jscomp.UnreachableCodeElimination:73-cfgStack.push(curCfg);	0
com.google.javascript.jscomp.UnreachableCodeElimination:74-curCfg = cfa.getCfg();	0
com.google.javascript.jscomp.UnreachableCodeElimination:76-new GraphReachability<Node, ControlFlowGraph.Branch>(curCfg)	0
com.google.javascript.jscomp.NodeUtil:762-return false;	0
com.google.javascript.jscomp.NodeUtil:2465-return true;	1
com.google.javascript.jscomp.NodeUtil:2450-return locals.apply(value);	0
com.google.javascript.jscomp.NodeUtil:2416-return evaluatesToLocalValue(value, Predicates.<Node>alwaysFalse());	0
com.google.javascript.jscomp.NodeUtil:2425-switch (value.getType()) {	0
com.google.javascript.jscomp.NodeUtil:304-String name = n.getString();	0
com.google.javascript.jscomp.NodeUtil:307-return "undefined".equals(name)	0
com.google.javascript.jscomp.NodeUtil:825-return NodeUtil.constructorCallHasSideEffects(n, compiler);	0
com.google.javascript.jscomp.NodeUtil:1462-return node.getType() == Token.THIS;	0
com.google.javascript.jscomp.NodeUtil:681-return constructorCallHasSideEffects(callNode, null);	0
com.google.javascript.jscomp.NodeUtil:686-if (callNode.getType() != Token.NEW) {	0
com.google.javascript.jscomp.NodeUtil:691-if (callNode.isNoSideEffectsCall()) {	0
com.google.javascript.jscomp.NodeUtil:695-Node nameNode = callNode.getFirstChild();	0
com.google.javascript.jscomp.NodeUtil:696-if (nameNode.getType() == Token.NAME &&	0
com.google.javascript.jscomp.NodeUtil:701-return true;	0
com.google.javascript.jscomp.NodeUtil:1733-return has(node, new MatchNodeType(type), traverseChildrenPred);	0
com.google.javascript.jscomp.NodeUtil:2196-if (pred.apply(node)) {	0
com.google.javascript.jscomp.NodeUtil:2200-if (!traverseChildrenPred.apply(node)) {	0
com.google.javascript.jscomp.NodeUtil:2204-for (Node c = node.getFirstChild(); c != null; c = c.getNext()) {	0
com.google.javascript.jscomp.NodeUtil:2210-return false;	0
com.google.javascript.jscomp.NodeUtil:948-case Token.NEG:return 13;	0
com.google.javascript.jscomp.NodeUtil:692-return false;	0
com.google.javascript.jscomp.NodeUtil:796-Preconditions.checkState(n.getType() == Token.CALL);	0
com.google.javascript.jscomp.NodeUtil:797-return (n.getSideEffectFlags() & Node.FLAG_LOCAL_RESULTS) > 0;	0
com.google.javascript.jscomp.NodeUtil:914-case Token.ASSIGN: return 1;	0
com.google.javascript.jscomp.NodeUtil:1691-case Token.ASSIGN: return "=";	0
com.google.javascript.jscomp.NodeUtil:2452-return isImmutableValue(value) || locals.apply(value);	0
com.google.javascript.jscomp.NodeUtil:813-return true;	0
com.google.javascript.jscomp.NodeUtil:293-switch (n.getType()) {	0
com.google.javascript.jscomp.NodeUtil:1028-return true;	0
com.google.javascript.jscomp.NodeUtil:1084-return n.getType() == Token.GETPROP	0
com.google.javascript.jscomp.NodeUtil:724-return functionCallHasSideEffects(callNode, null);	0
com.google.javascript.jscomp.NodeUtil:823-return NodeUtil.functionCallHasSideEffects(n, compiler);	0
com.google.javascript.jscomp.NodeUtil:754-if (callNode.hasOneChild()	0
com.google.javascript.jscomp.NodeUtil:760-if (callNode.isOnlyModifiesThisCall()	0
com.google.javascript.jscomp.NodeUtil:766-if (nameNode.getFirstChild().getType() == Token.NAME) {	0
com.google.javascript.jscomp.NodeUtil:773-if (compiler != null && !compiler.hasRegExpGlobalReferences()) {	0
com.google.javascript.jscomp.NodeUtil:736-if (callNode.getType() != Token.CALL) {	0
com.google.javascript.jscomp.NodeUtil:741-if (callNode.isNoSideEffectsCall()) {	0
com.google.javascript.jscomp.NodeUtil:745-Node nameNode = callNode.getFirstChild();	0
com.google.javascript.jscomp.NodeUtil:748-if (nameNode.getType() == Token.NAME) {	0
com.google.javascript.jscomp.NodeUtil:753-} else if (nameNode.getType() == Token.GETPROP) {	0
com.google.javascript.jscomp.NodeUtil:789-return true;	0
com.google.javascript.jscomp.NodeUtil:1106-return n.getType() == Token.NEW;	0
com.google.javascript.jscomp.NodeUtil:1969-char c = s.charAt(index);	0
com.google.javascript.jscomp.NodeUtil:1970-if (c > LARGEST_BASIC_LATIN) {	0
com.google.javascript.jscomp.NodeUtil:901-switch (type) {	0
com.google.javascript.jscomp.NodeUtil:969-return 15;	0
com.google.javascript.jscomp.NodeUtil:1664-switch (operator) {	0
com.google.javascript.jscomp.NodeUtil:1706-default: return null;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:268-return n;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:309-n.removeChild(cond);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:310-Node and = new Node(Token.AND, cond, expr.removeFirstChild())	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:312-Node newExpr = NodeUtil.newExpr(and);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:313-parent.replaceChild(n, newExpr);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:314-reportCodeChange();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:316-return newExpr;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:276-Node expr = getBlockExpression(thenBranch);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:277-if (isPropertyAssignmentInExpression(expr)) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:283-if (cond.getType() == Token.NOT) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:302-if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) ||	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:630-Predicate<Node> isLowerPrecedencePredicate = new Predicate<Node>() {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:637-return NodeUtil.has(n, isLowerPrecedencePredicate,	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:645-Predicate<Node> isPropertyAssignmentInExpressionPredicate =	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:654-return NodeUtil.has(n, isPropertyAssignmentInExpressionPredicate,	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:820-parent.replaceChild(n, newNode);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:821-reportCodeChange();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:823-return newNode;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:749-return n;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:802-boolean result = nVal.toBoolean(true);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:803-int equivalentResult = result ? 1 : 0;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:804-return maybeReplaceChildWithNumber(n, parent, equivalentResult);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:818-Node newNode = Node.newNumber(num);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:819-if (!newNode.isEquivalentTo(n)) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:826-return n;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:544-Preconditions.checkState(isFoldableExpressBlock(n));	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:545-return n.getFirstChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:713-Node left = n.getFirstChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:714-Node right = n.getLastChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:718-left = tryMinimizeCondition(left);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:719-right = tryMinimizeCondition(right);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:727-TernaryValue rightVal = NodeUtil.getBooleanValue(right);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:728-if (NodeUtil.getBooleanValue(right) != TernaryValue.UNKNOWN) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:275-if (isFoldableExpressBlock(thenBranch)) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:522-Node maybeExpr = n.getFirstChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:533-return NodeUtil.isExpressionNode(maybeExpr);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:68-tryMinimizeCondition(node.getFirstChild());	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:69-return tryMinimizeIf(node);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:260-Node parent = n.getParent();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:262-Node cond = n.getFirstChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:267-if (NodeUtil.isLiteralValue(cond, true)) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:271-Node thenBranch = cond.getNext();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:272-Node elseBranch = thenBranch.getNext();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:274-if (elseBranch == null) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:520-if (n.getType() == Token.BLOCK) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:521-if (n.hasOneChild()) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:913-return n;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:72-tryMinimizeCondition(node.getFirstChild());	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:73-return node;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:98-return tryFoldLiteralConstructor(node);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:302-return false;	0
com.google.javascript.jscomp.DeadAssignmentsElimination:330-return VariableLiveness.KILL;	1
com.google.javascript.jscomp.DeadAssignmentsElimination:301-} else if (state == VariableLiveness.KILL) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:326-if (NodeUtil.isLhs(n, n.getParent())) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:339-if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION	0
com.google.javascript.jscomp.DeadAssignmentsElimination:340-VariableLiveness state = isVariableReadBeforeKill(child, variable);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:341-if (state != VariableLiveness.MAYBE_LIVE) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:342-return state;	0
com.google.javascript.jscomp.DeadAssignmentsElimination:295-if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:296-VariableLiveness state = isVariableReadBeforeKill(sibling, variable);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:299-if (state == VariableLiveness.READ) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:325-if (NodeUtil.isName(n) && variable.equals(n.getString())) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:337-for (Node child = n.getFirstChild();	0
com.google.javascript.jscomp.DeadAssignmentsElimination:338-child != null; child = child.getNext()) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:143-if (n.hasChildren()) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:144-tryRemoveAssignment(t, n.getFirstChild(), state);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:293-for(Node sibling = n.getNext(); sibling != null;	0
com.google.javascript.jscomp.DeadAssignmentsElimination:292-while (n != exprRoot) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:306-n = n.getParent();	0
com.google.javascript.jscomp.DeadAssignmentsElimination:234-n.removeChild(rhs);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:235-n.getParent().replaceChild(n, rhs);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:308-return false;	0
com.google.javascript.jscomp.DeadAssignmentsElimination:260-compiler.reportCodeChange();	0
com.google.javascript.jscomp.DeadAssignmentsElimination:261-return;	0
com.google.javascript.jscomp.DeadAssignmentsElimination:218-if (state.getIn().isLive(var) &&	0
com.google.javascript.jscomp.DeadAssignmentsElimination:233-if (NodeUtil.isAssign(n)) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:214-if (state.getOut().isLive(var)) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:195-Var var = scope.getVar(name);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:197-if (liveness.getEscapedLocals().contains(var)) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:204-if (rhs != null &&	0
com.google.javascript.jscomp.DeadAssignmentsElimination:183-tryRemoveAssignment(t, rhs, exprRoot, state);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:184-rhs = lhs.getNext();	0
com.google.javascript.jscomp.DeadAssignmentsElimination:95-ControlFlowGraph<Node> cfg = t.getControlFlowGraph();	0
com.google.javascript.jscomp.DeadAssignmentsElimination:96-liveness = new LiveVariablesAnalysis(cfg, scope, compiler);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:97-liveness.analyze();	0
com.google.javascript.jscomp.DeadAssignmentsElimination:98-tryRemoveDeadAssignments(t, cfg);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:99-}	0
com.google.javascript.jscomp.DeadAssignmentsElimination:119-Iterable<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes();	0
com.google.javascript.jscomp.DeadAssignmentsElimination:121-for (DiGraphNode<Node, Branch> cfgNode : nodes) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:122-FlowState<LiveVariableLattice> state =	0
com.google.javascript.jscomp.DeadAssignmentsElimination:124-Node n = cfgNode.getValue();	0
com.google.javascript.jscomp.DeadAssignmentsElimination:125-if (n == null) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:126-continue;	0
com.google.javascript.jscomp.DeadAssignmentsElimination:128-switch (n.getType()) {	0
com.google.javascript.jscomp.DeadAssignmentsElimination:150-tryRemoveAssignment(t, n, state);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:151-}	0
com.google.javascript.jscomp.DeadAssignmentsElimination:152-}	0
com.google.javascript.jscomp.DeadAssignmentsElimination:156-tryRemoveAssignment(t, n, n, state);	0
com.google.javascript.jscomp.DeadAssignmentsElimination:157-}	0
com.google.javascript.jscomp.DeadAssignmentsElimination:172-Node parent = n.getParent();	0
com.google.javascript.jscomp.CollapseProperties:823-String propAlias = appendPropForAlias(alias, p.name);	0
com.google.javascript.jscomp.CollapseProperties:824-Node nameNode = Node.newString(Token.NAME, propAlias);	0
com.google.javascript.jscomp.CollapseProperties:825-Node newVar = new Node(Token.VAR, nameNode)	0
com.google.javascript.jscomp.CollapseProperties:827-parent.addChildAfter(newVar, addAfter);	0
com.google.javascript.jscomp.CollapseProperties:828-addAfter = newVar;	0
com.google.javascript.jscomp.CollapseProperties:829-numStubs++;	0
com.google.javascript.jscomp.CollapseProperties:830-compiler.reportCodeChange();	0
com.google.javascript.jscomp.CollapseProperties:834-if (p.refs.get(0).node.getLastChild().getBooleanProp(	0
com.google.javascript.jscomp.CollapseProperties:168-List<Ref> refs = Lists.newArrayList(name.refs);	0
com.google.javascript.jscomp.CollapseProperties:169-for (Ref ref : refs) {	0
com.google.javascript.jscomp.CollapseProperties:170-if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {	0
com.google.javascript.jscomp.CollapseProperties:176-}	0
com.google.javascript.jscomp.CollapseProperties:329-flattenNameRef(alias, r.node, rParent, originalName);	0
com.google.javascript.jscomp.CollapseProperties:426-Node ref = NodeUtil.newName(	0
com.google.javascript.jscomp.CollapseProperties:428-NodeUtil.copyNameAnnotations(n.getLastChild(), ref);	0
com.google.javascript.jscomp.CollapseProperties:429-parent.replaceChild(n, ref);	0
com.google.javascript.jscomp.CollapseProperties:430-compiler.reportCodeChange();	0
com.google.javascript.jscomp.CollapseProperties:431-}	0
com.google.javascript.jscomp.CollapseProperties:318-String originalName = n.fullName();	0
com.google.javascript.jscomp.CollapseProperties:319-for (Ref r : n.refs) {	0
com.google.javascript.jscomp.CollapseProperties:320-Node rParent = r.node.getParent();	0
com.google.javascript.jscomp.CollapseProperties:327-if (!NodeUtil.isObjectLitKey(r.node, rParent) &&	0
com.google.javascript.jscomp.CollapseProperties:331-}	0
com.google.javascript.jscomp.CollapseProperties:821-for (Name p : n.props) {	0
com.google.javascript.jscomp.CollapseProperties:822-if (p.needsToBeStubbed()) {	0
com.google.javascript.jscomp.CollapseProperties:839-}	0
com.google.javascript.jscomp.CollapseProperties:302-flattenReferencesTo(p, propAlias);	0
com.google.javascript.jscomp.CollapseProperties:317-if (n.refs != null) {	0
com.google.javascript.jscomp.CollapseProperties:337-if (n.props != null) {	0
com.google.javascript.jscomp.CollapseProperties:342-}	0
com.google.javascript.jscomp.CollapseProperties:446-updateObjLitOrFunctionDeclaration(n, alias);	0
com.google.javascript.jscomp.CollapseProperties:553-switch (n.declaration.node.getParent().getType()) {	0
com.google.javascript.jscomp.CollapseProperties:564-}	0
com.google.javascript.jscomp.CollapseProperties:817-Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));	0
com.google.javascript.jscomp.CollapseProperties:818-Preconditions.checkNotNull(addAfter);	0
com.google.javascript.jscomp.CollapseProperties:819-int numStubs = 0;	0
com.google.javascript.jscomp.CollapseProperties:820-if (n.props != null) {	0
com.google.javascript.jscomp.CollapseProperties:841-return numStubs;	0
com.google.javascript.jscomp.CollapseProperties:298-for (Name p : n.props) {	0
com.google.javascript.jscomp.CollapseProperties:299-String propAlias = appendPropForAlias(alias, p.name);	0
com.google.javascript.jscomp.CollapseProperties:301-if (p.canCollapse()) {	0
com.google.javascript.jscomp.CollapseProperties:305-flattenReferencesToCollapsibleDescendantNames(p, propAlias);	0
com.google.javascript.jscomp.CollapseProperties:306-}	0
com.google.javascript.jscomp.CollapseProperties:307-}	0
com.google.javascript.jscomp.CollapseProperties:450-for (Name p : n.props) {	0
com.google.javascript.jscomp.CollapseProperties:452-collapseDeclarationOfNameAndDescendants(	0
com.google.javascript.jscomp.CollapseProperties:455-if (!p.inExterns && canCollapseChildNames && p.declaration != null &&	0
com.google.javascript.jscomp.CollapseProperties:462-}	0
com.google.javascript.jscomp.CollapseProperties:845-if (prop.indexOf('$') != -1) {	0
com.google.javascript.jscomp.CollapseProperties:851-return root + '$' + prop;	0
com.google.javascript.jscomp.FunctionTypeBuilder:412-maybeThisType = ObjectType.cast(	0
com.google.javascript.jscomp.FunctionTypeBuilder:416-thisType = maybeThisType;	0
com.google.javascript.jscomp.FunctionTypeBuilder:417-thisType.setValidator(new ThisTypeValidator());	0
com.google.javascript.jscomp.FunctionTypeBuilder:710-compiler.report(JSError.make(sourceName, errorRoot, warning, args));	0
com.google.javascript.jscomp.FunctionTypeBuilder:711-}	0
com.google.javascript.rhino.jstype.FunctionType:219-min = i;	0
com.google.javascript.jscomp.FunctionTypeBuilder:721-return info.getParameterCount() > 0 ||	0
com.google.javascript.jscomp.FunctionTypeBuilder:326-worklist.add(child);	0
com.google.javascript.rhino.jstype.FunctionType:217-i++;	0
com.google.javascript.rhino.jstype.FunctionType:218-if (!n.isOptionalArg() && !n.isVarArgs()) {	0
com.google.javascript.rhino.jstype.FunctionType:221-}	0
com.google.javascript.rhino.jstype.FunctionType:858-return templateTypeName;	0
com.google.javascript.rhino.jstype.FunctionType:192-return true;	0
com.google.javascript.rhino.jstype.FunctionType:234-return params.getChildCount();	0
com.google.javascript.rhino.jstype.FunctionType:214-int i = 0;	0
com.google.javascript.rhino.jstype.FunctionType:215-int min = 0;	0
com.google.javascript.rhino.jstype.FunctionType:216-for (Node n : getParameters()) {	0
com.google.javascript.rhino.jstype.FunctionType:222-return min;	0
com.google.javascript.rhino.jstype.FunctionType:230-Node params = getParametersNode();	0
com.google.javascript.rhino.jstype.FunctionType:231-if (params != null) {	0
com.google.javascript.rhino.jstype.FunctionType:232-Node lastParam = params.getLastChild();	0
com.google.javascript.rhino.jstype.FunctionType:233-if (lastParam == null || !lastParam.isVarArgs()) {	0
com.google.javascript.rhino.jstype.FunctionType:196-Node n = getParametersNode();	0
com.google.javascript.rhino.jstype.FunctionType:197-if (n != null) {	0
com.google.javascript.rhino.jstype.FunctionType:198-return n.children();	0
com.google.javascript.jscomp.FunctionTypeBuilder:381-} else if (info.getImplementedInterfaceCount() > 0) {	0
com.google.javascript.rhino.jstype.FunctionType:242-return call.returnType;	0
com.google.javascript.jscomp.FunctionTypeBuilder:332-returnType = typeRegistry.getNativeType(VOID_TYPE);	0
com.google.javascript.jscomp.FunctionTypeBuilder:333-returnTypeInferred = true;	0
com.google.javascript.jscomp.FunctionTypeBuilder:313-boolean hasNonEmptyReturns = false;	0
com.google.javascript.jscomp.FunctionTypeBuilder:314-List<Node> worklist = Lists.newArrayList(functionBlock);	0
com.google.javascript.jscomp.FunctionTypeBuilder:315-while (!worklist.isEmpty()) {	0
com.google.javascript.jscomp.FunctionTypeBuilder:316-Node current = worklist.remove(worklist.size() - 1);	0
com.google.javascript.jscomp.FunctionTypeBuilder:317-int cType = current.getType();	0
com.google.javascript.jscomp.FunctionTypeBuilder:318-if (cType == Token.RETURN && current.getFirstChild() != null ||	0
com.google.javascript.jscomp.FunctionTypeBuilder:322-} else if (NodeUtil.isStatementBlock(current) ||	0
com.google.javascript.jscomp.FunctionTypeBuilder:324-for (Node child = current.getFirstChild();	0
com.google.javascript.jscomp.FunctionTypeBuilder:325-child != null; child = child.getNext()) {	0
com.google.javascript.jscomp.FunctionTypeBuilder:329-}	0
com.google.javascript.jscomp.FunctionTypeBuilder:331-if (!hasNonEmptyReturns) {	0
com.google.javascript.jscomp.FunctionTypeBuilder:632-fnType = new FunctionBuilder(typeRegistry)	0
com.google.javascript.jscomp.FunctionTypeBuilder:640-maybeSetBaseType(fnType);	0
com.google.javascript.jscomp.FunctionTypeBuilder:625-} else if (isInterface) {	0
com.google.javascript.jscomp.FunctionTypeBuilder:311-Preconditions.checkArgument(functionBlock.getType() == Token.BLOCK);	0
com.google.javascript.jscomp.FunctionTypeBuilder:312-if (returnType == null) {	0
com.google.javascript.jscomp.FunctionTypeBuilder:336-return this;	0
com.google.javascript.jscomp.FunctionTypeBuilder:533-return true;	0
com.google.javascript.jscomp.FunctionTypeBuilder:548-return true;	0
com.google.javascript.jscomp.FunctionTypeBuilder:585-if (!builder.addOptionalParams(paramType) && !warnedAboutArgList) {	0
com.google.javascript.jscomp.FunctionTypeBuilder:590-if (!builder.addVarArgs(paramType) && !warnedAboutArgList) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:888-Node assign = n.getFirstChild();	0
com.google.javascript.jscomp.ProcessClosurePrimitives:889-value = assign.getLastChild();	0
com.google.javascript.jscomp.ProcessClosurePrimitives:643-providedNames.get(prefixNs).addProvide(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:646-providedNames.put(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:891-Node name = n.getFirstChild();	0
com.google.javascript.jscomp.ProcessClosurePrimitives:892-value = name.getFirstChild();	0
com.google.javascript.jscomp.ProcessClosurePrimitives:640-String prefixNs = ns.substring(0, pos);	0
com.google.javascript.jscomp.ProcessClosurePrimitives:641-pos = ns.indexOf('.', pos + 1);	0
com.google.javascript.jscomp.ProcessClosurePrimitives:642-if (providedNames.containsKey(prefixNs)) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:650-}	0
com.google.javascript.jscomp.ProcessClosurePrimitives:882-if (!n.getBooleanProp(Node.IS_NAMESPACE)) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:886-Node value = null;	0
com.google.javascript.jscomp.ProcessClosurePrimitives:887-if (n.getType() == Token.EXPR_RESULT) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:890-} else if (n.getType() == Token.VAR) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:895-return value != null	0
com.google.javascript.jscomp.ProcessClosurePrimitives:280-String ns = arg.getString();	0
com.google.javascript.jscomp.ProcessClosurePrimitives:281-if (providedNames.containsKey(ns)) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:290-registerAnyProvidedPrefixes(ns, parent, t.getModule());	0
com.google.javascript.jscomp.ProcessClosurePrimitives:291-providedNames.put(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:589-return true;	0
com.google.javascript.jscomp.ProcessClosurePrimitives:638-int pos = ns.indexOf('.');	0
com.google.javascript.jscomp.ProcessClosurePrimitives:639-while (pos != -1) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:651-}	0
com.google.javascript.jscomp.ProcessClosurePrimitives:166-processProvideCall(t, n, parent);	0
com.google.javascript.jscomp.ProcessClosurePrimitives:277-Node left = n.getFirstChild();	0
com.google.javascript.jscomp.ProcessClosurePrimitives:278-Node arg = left.getNext();	0
com.google.javascript.jscomp.ProcessClosurePrimitives:279-if (verifyProvide(t, left, arg)) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:295-}	0
com.google.javascript.jscomp.ProcessClosurePrimitives:579-if (!verifyArgument(t, methodName, arg)) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:583-for (String part : arg.getString().split("\\.")) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:584-if (!NodeUtil.isValidPropertyName(part)) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:599-return verifyArgument(t, methodName, arg, Token.STRING);	0
com.google.javascript.jscomp.ProcessClosurePrimitives:615-} else if (arg.getNext() != null) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:624-return true;	0
com.google.javascript.jscomp.ProcessClosurePrimitives:610-DiagnosticType diagnostic = null;	0
com.google.javascript.jscomp.ProcessClosurePrimitives:611-if (arg == null) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:613-} else if (arg.getType() != desiredType) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:618-if (diagnostic != null) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:165-} else if ("provide".equals(methodName)) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:163-} else if ("require".equals(methodName)) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:160-} else if (!isExpr) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:157-String methodName = name.getNext().getString();	0
com.google.javascript.jscomp.ProcessClosurePrimitives:158-if ("base".equals(methodName)) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:195-}	0
com.google.javascript.jscomp.ProcessClosurePrimitives:306-} else if (n.getType() == Token.ASSIGN &&	0
com.google.javascript.jscomp.ProcessClosurePrimitives:104-boolean rewriteNewDateGoogNow) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:93-private final Map<String, ProvidedName> providedNames =	0
com.google.javascript.jscomp.ProcessClosurePrimitives:96-private final List<UnrecognizedRequire> unrecognizedRequires =	0
com.google.javascript.jscomp.ProcessClosurePrimitives:98-private final Set<String> exportedVariables = Sets.newHashSet();	0
com.google.javascript.jscomp.ProcessClosurePrimitives:105-this.compiler = compiler;	0
com.google.javascript.jscomp.PeepholeFoldConstants:698-result = lvalInt >>> rvalInt;	1
com.google.javascript.jscomp.PeepholeFoldConstants:699-break;	0
com.google.javascript.jscomp.PeepholeFoldConstants:123-return tryFoldShift(subtree, left, right);	0
com.google.javascript.jscomp.PeepholeFoldConstants:653-if (left.getType() == Token.NUMBER &&	0
com.google.javascript.jscomp.PeepholeFoldConstants:657-double lval = left.getDouble();	0
com.google.javascript.jscomp.PeepholeFoldConstants:658-double rval = right.getDouble();	0
com.google.javascript.jscomp.PeepholeFoldConstants:662-if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:669-if (!(rval >= 0 && rval < 32)) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:675-int lvalInt = (int) lval;	0
com.google.javascript.jscomp.PeepholeFoldConstants:676-if (lvalInt != lval) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:681-int rvalInt = (int) rval;	0
com.google.javascript.jscomp.PeepholeFoldConstants:682-if (rvalInt != rval) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:687-switch (n.getType()) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:689-result = lvalInt << rvalInt;	0
com.google.javascript.jscomp.PeepholeFoldConstants:690-break;	0
com.google.javascript.jscomp.PeepholeFoldConstants:692-result = lvalInt >> rvalInt;	0
com.google.javascript.jscomp.PeepholeFoldConstants:693-break;	0
com.google.javascript.jscomp.PeepholeFoldConstants:705-Node newNumber = Node.newNumber(result);	0
com.google.javascript.jscomp.PeepholeFoldConstants:706-n.getParent().replaceChild(n, newNumber);	0
com.google.javascript.jscomp.PeepholeFoldConstants:707-reportCodeChange();	0
com.google.javascript.jscomp.PeepholeFoldConstants:709-return newNumber;	0
com.google.javascript.jscomp.PeepholeFoldConstants:335-return n;	0
com.google.javascript.jscomp.PeepholeFoldConstants:126-return tryFoldAssign(subtree, left, right);	0
com.google.javascript.jscomp.PeepholeFoldConstants:329-Preconditions.checkArgument(n.getType() == Token.ASSIGN);	0
com.google.javascript.jscomp.PeepholeFoldConstants:332-if (!right.hasChildren() ||	0
com.google.javascript.jscomp.PeepholeFoldConstants:33-public class PeepholeFoldConstants extends AbstractPeepholeOptimization {	0
com.google.javascript.jscomp.PeepholeFoldConstants:35-static final DiagnosticType DIVIDE_BY_0_ERROR = DiagnosticType.error(	0
com.google.javascript.jscomp.PeepholeFoldConstants:39-static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =	0
com.google.javascript.jscomp.PeepholeFoldConstants:44-static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =	0
com.google.javascript.jscomp.PeepholeFoldConstants:49-static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =	0
com.google.javascript.jscomp.PeepholeFoldConstants:54-static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =	0
com.google.javascript.jscomp.PeepholeFoldConstants:59-static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(	0
com.google.javascript.jscomp.PeepholeFoldConstants:63-static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(	0
com.google.javascript.jscomp.PeepholeFoldConstants:67-private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);	0
com.google.javascript.jscomp.PeepholeFoldConstants:71-switch(subtree.getType()) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:84-return tryFoldBinaryOperator(subtree);	0
com.google.javascript.jscomp.PeepholeFoldConstants:89-Node left = subtree.getFirstChild();	0
com.google.javascript.jscomp.PeepholeFoldConstants:91-if (left == null) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:92-return subtree;	0
com.google.javascript.jscomp.PeepholeFoldConstants:95-Node right = left.getNext();	0
com.google.javascript.jscomp.PeepholeFoldConstants:97-if (right == null) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:98-return subtree;	0
com.google.javascript.jscomp.PeepholeFoldConstants:102-switch(subtree.getType()) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:73-return tryFoldKnownMethods(subtree);	0
com.google.javascript.jscomp.PeepholeFoldConstants:76-return tryFoldTypeof(subtree);	0
com.google.javascript.jscomp.PeepholeFoldConstants:81-return tryFoldUnaryOperator(subtree);	0
com.google.javascript.jscomp.PeepholeFoldConstants:104-return tryFoldGetProp(subtree, left, right);	0
com.google.javascript.jscomp.PeepholeFoldConstants:107-return tryFoldGetElem(subtree, left, right);	0
com.google.javascript.jscomp.PeepholeFoldConstants:110-return tryFoldInstanceof(subtree, left, right);	0
com.google.javascript.jscomp.PeepholeFoldConstants:114-return tryFoldAndOr(subtree, left, right);	0
com.google.javascript.jscomp.CheckGlobalThis:102-int pType = parent.getType();	0
com.google.javascript.jscomp.CheckGlobalThis:103-if (!(pType == Token.BLOCK ||	0
com.google.javascript.jscomp.CheckGlobalThis:140-compiler.report(t.makeError(n, level, GLOBAL_THIS));	0
com.google.javascript.jscomp.CheckGlobalThis:89-JSDocInfo jsDoc = getFunctionJsDocInfo(n);	0
com.google.javascript.jscomp.CheckGlobalThis:90-if (jsDoc != null &&	0
com.google.javascript.jscomp.CheckGlobalThis:168-JSDocInfo jsDoc = n.getJSDocInfo();	0
com.google.javascript.jscomp.CheckGlobalThis:169-Node parent = n.getParent();	0
com.google.javascript.jscomp.CheckGlobalThis:170-if (jsDoc == null) {	0
com.google.javascript.jscomp.CheckGlobalThis:182-return jsDoc;	0
com.google.javascript.jscomp.CheckGlobalThis:75-CheckGlobalThis(AbstractCompiler compiler, CheckLevel level) {	0
com.google.javascript.jscomp.CheckGlobalThis:73-private Node assignLhsChild = null;	0
com.google.javascript.jscomp.CheckGlobalThis:76-this.compiler = compiler;	0
com.google.javascript.jscomp.CheckGlobalThis:77-this.level = level;	0
com.google.javascript.jscomp.CheckGlobalThis:78-}	0
com.google.javascript.jscomp.CheckGlobalThis:61-static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning(	0
com.google.javascript.jscomp.CheckGlobalThis:86-if (n.getType() == Token.FUNCTION) {	0
com.google.javascript.jscomp.CheckGlobalThis:111-if (parent != null && parent.getType() == Token.ASSIGN) {	0
com.google.javascript.jscomp.CheckGlobalThis:135-return true;	0
com.google.javascript.jscomp.CheckGlobalThis:139-if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {	0
com.google.javascript.jscomp.CheckGlobalThis:142-if (n == assignLhsChild) {	0
com.google.javascript.jscomp.CheckGlobalThis:145-}	0
com.google.javascript.jscomp.CheckGlobalThis:148-if (assignLhsChild != null) {	0
com.google.javascript.jscomp.CheckGlobalThis:125-if (lhs.getType() == Token.GETPROP &&	1
com.google.javascript.jscomp.CheckGlobalThis:129-if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {	1
com.google.javascript.jscomp.CheckGlobalThis:112-Node lhs = parent.getFirstChild();	0
com.google.javascript.jscomp.CheckGlobalThis:113-Node rhs = lhs.getNext();	0
com.google.javascript.jscomp.CheckGlobalThis:115-if (n == lhs) {	0
com.google.javascript.jscomp.CheckGlobalThis:119-if (assignLhsChild == null) {	0
com.google.javascript.jscomp.CheckGlobalThis:120-assignLhsChild = lhs;	0
com.google.javascript.jscomp.CheckGlobalThis:143-assignLhsChild = null;	0
com.google.javascript.jscomp.CheckGlobalThis:173-jsDoc = parent.getJSDocInfo();	0
com.google.javascript.jscomp.CheckGlobalThis:174-if (jsDoc == null && parentType == Token.NAME) {	0
com.google.javascript.jscomp.CheckGlobalThis:130-return false;	0
com.google.javascript.jscomp.CheckGlobalThis:171-int parentType = parent.getType();	0
com.google.javascript.jscomp.CheckGlobalThis:172-if (parentType == Token.NAME || parentType == Token.ASSIGN) {	0
com.google.javascript.jscomp.CheckGlobalThis:150-return true;	0
com.google.javascript.jscomp.CheckGlobalThis:154-return parent != null && NodeUtil.isGet(parent);	0
com.google.javascript.jscomp.CheckGlobalThis:94-return false;	0
com.google.javascript.jscomp.CheckGlobalThis:107-return false;	0
com.google.javascript.jscomp.CheckGlobalThis:127-return false;	0
com.google.javascript.jscomp.CheckGlobalThis:175-Node gramps = parent.getParent();	0
com.google.javascript.jscomp.CheckGlobalThis:176-if (gramps.getType() == Token.VAR) {	0
com.google.javascript.jscomp.CheckGlobalThis:177-jsDoc = gramps.getJSDocInfo();	0
com.google.javascript.jscomp.CheckGlobalThis:140-if (assignLhsChild != null) {	0
com.google.javascript.jscomp.CheckGlobalThis:163-int parentType = parent.getType();	0
com.google.javascript.jscomp.CheckGlobalThis:164-if (parentType == Token.NAME || parentType == Token.ASSIGN) {	0
com.google.javascript.jscomp.CheckGlobalThis:146-return false;	1
com.google.javascript.jscomp.CheckGlobalThis:75-CheckGlobalThis(AbstractCompiler compiler, CheckLevel level) {	0
com.google.javascript.jscomp.CheckGlobalThis:73-private Node assignLhsChild = null;	0
com.google.javascript.jscomp.CheckGlobalThis:76-this.compiler = compiler;	0
com.google.javascript.jscomp.CheckGlobalThis:77-this.level = level;	0
com.google.javascript.jscomp.CheckGlobalThis:78-}	0
com.google.javascript.jscomp.CheckGlobalThis:61-static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning(	0
com.google.javascript.jscomp.CheckGlobalThis:86-if (n.getType() == Token.FUNCTION) {	0
com.google.javascript.jscomp.CheckGlobalThis:101-if (parent != null && parent.getType() == Token.ASSIGN) {	0
com.google.javascript.jscomp.CheckGlobalThis:127-return true;	0
com.google.javascript.jscomp.CheckGlobalThis:131-if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {	0
com.google.javascript.jscomp.CheckGlobalThis:134-if (n == assignLhsChild) {	0
com.google.javascript.jscomp.CheckGlobalThis:137-}	0
com.google.javascript.jscomp.CheckGlobalThis:89-JSDocInfo jsDoc = getFunctionJsDocInfo(n);	0
com.google.javascript.jscomp.CheckGlobalThis:90-if (jsDoc != null && (jsDoc.isConstructor() || jsDoc.hasThisType())) {	0
com.google.javascript.jscomp.CheckGlobalThis:160-JSDocInfo jsDoc = n.getJSDocInfo();	0
com.google.javascript.jscomp.CheckGlobalThis:161-Node parent = n.getParent();	0
com.google.javascript.jscomp.CheckGlobalThis:162-if (jsDoc == null) {	0
com.google.javascript.jscomp.CheckGlobalThis:174-return jsDoc;	0
com.google.javascript.jscomp.CheckGlobalThis:165-jsDoc = parent.getJSDocInfo();	0
com.google.javascript.jscomp.CheckGlobalThis:166-if (jsDoc == null && parentType == Token.NAME) {	0
com.google.javascript.jscomp.CheckGlobalThis:132-compiler.report(t.makeError(n, level, GLOBAL_THIS));	0
com.google.javascript.jscomp.CheckGlobalThis:142-return true;	0
com.google.javascript.jscomp.CheckGlobalThis:115-if (lhs.getType() == Token.GETPROP) {	0
com.google.javascript.jscomp.CheckGlobalThis:167-Node gramps = parent.getParent();	0
com.google.javascript.jscomp.CheckGlobalThis:168-if (gramps.getType() == Token.VAR) {	0
com.google.javascript.jscomp.CheckGlobalThis:169-jsDoc = gramps.getJSDocInfo();	0
com.google.javascript.jscomp.CheckGlobalThis:102-Node lhs = parent.getFirstChild();	0
com.google.javascript.jscomp.CheckGlobalThis:103-Node rhs = lhs.getNext();	0
com.google.javascript.jscomp.CheckGlobalThis:105-if (n == lhs) {	0
com.google.javascript.jscomp.CheckGlobalThis:109-if (assignLhsChild == null) {	0
com.google.javascript.jscomp.CheckGlobalThis:110-assignLhsChild = lhs;	0
com.google.javascript.jscomp.CheckGlobalThis:135-assignLhsChild = null;	0
com.google.javascript.jscomp.CheckGlobalThis:116-if (lhs.getLastChild().getString().equals("prototype")) {	0
com.google.javascript.jscomp.CheckGlobalThis:119-String leftName = lhs.getQualifiedName();	0
com.google.javascript.jscomp.CheckGlobalThis:120-if (leftName != null && leftName.contains(".prototype.")) {	0
com.google.javascript.jscomp.CheckGlobalThis:91-return false;	0
com.google.javascript.jscomp.CheckGlobalThis:117-return false;	0
com.google.javascript.jscomp.CheckGlobalThis:121-return false;	0
com.google.javascript.jscomp.CommandLineRunner:364-Matcher matcher = argPattern.matcher(arg);	0
com.google.javascript.jscomp.CommandLineRunner:365-if (matcher.matches()) {	0
com.google.javascript.jscomp.CommandLineRunner:366-processedArgs.add(matcher.group(1));	0
com.google.javascript.jscomp.CommandLineRunner:368-String value = matcher.group(2);	0
com.google.javascript.jscomp.CommandLineRunner:369-Matcher quotesMatcher = quotesPattern.matcher(value);	0
com.google.javascript.jscomp.CommandLineRunner:370-if (quotesMatcher.matches()) {	0
com.google.javascript.jscomp.CommandLineRunner:373-processedArgs.add(value);	0
com.google.javascript.jscomp.CommandLineRunner:375-} else {	0
com.google.javascript.jscomp.CommandLineRunner:344-super();	0
com.google.javascript.jscomp.CommandLineRunner:335-private final Flags flags = new Flags();	0
com.google.javascript.jscomp.CommandLineRunner:345-initConfigFromFlags(args, System.err);	0
com.google.javascript.jscomp.CommandLineRunner:346-}	0
com.google.javascript.jscomp.CommandLineRunner:360-Pattern argPattern = Pattern.compile("(--[a-zA-Z_]+)=(.*)");	0
com.google.javascript.jscomp.CommandLineRunner:361-Pattern quotesPattern = Pattern.compile("^['\"](.*)['\"]$");	0
com.google.javascript.jscomp.CommandLineRunner:362-List<String> processedArgs = Lists.newArrayList();	0
com.google.javascript.jscomp.CommandLineRunner:363-for (String arg : args) {	0
com.google.javascript.jscomp.CommandLineRunner:380-CmdLineParser parser = new CmdLineParser(flags);	0
com.google.javascript.jscomp.CommandLineRunner:382-parser.parseArgument(processedArgs.toArray(new String[] {}));	0
com.google.javascript.jscomp.CommandLineRunner:387-}	0
com.google.javascript.jscomp.CommandLineRunner:388-getCommandLineConfig()	0
com.google.javascript.jscomp.CommandLineRunner:416-}	0
com.google.javascript.jscomp.CommandLineRunner:420-CompilerOptions options = new CompilerOptions();	0
com.google.javascript.jscomp.CommandLineRunner:421-options.setCodingConvention(new ClosureCodingConvention());	0
com.google.javascript.jscomp.CommandLineRunner:422-CompilationLevel level = flags.compilation_level;	0
com.google.javascript.jscomp.CommandLineRunner:423-level.setOptionsForCompilationLevel(options);	0
com.google.javascript.jscomp.CommandLineRunner:424-if (flags.debug) {	0
com.google.javascript.jscomp.CommandLineRunner:428-WarningLevel wLevel = flags.warning_level;	0
com.google.javascript.jscomp.CommandLineRunner:429-wLevel.setOptionsForWarningLevel(options);	0
com.google.javascript.jscomp.CommandLineRunner:430-for (FormattingOption formattingOption : flags.formatting) {	0
com.google.javascript.jscomp.CommandLineRunner:433-if (flags.process_closure_primitives) {	1
com.google.javascript.jscomp.CommandLineRunner:434-options.closurePass = true;	0
com.google.javascript.jscomp.CommandLineRunner:437-initOptionsFromFlags(options);	0
com.google.javascript.jscomp.CommandLineRunner:438-return options;	0
com.google.javascript.jscomp.CommandLineRunner:443-return new Compiler(getErrorPrintStream());	0
com.google.javascript.jscomp.CommandLineRunner:350-super(out, err);	0
com.google.javascript.jscomp.CommandLineRunner:335-private final Flags flags = new Flags();	0
com.google.javascript.jscomp.CommandLineRunner:351-initConfigFromFlags(args, err);	0
com.google.javascript.jscomp.CommandLineRunner:352-}	0
com.google.javascript.jscomp.CommandLineRunner:371-processedArgs.add(quotesMatcher.group(1));	0
com.google.javascript.jscomp.CommandLineRunner:376-processedArgs.add(arg);	0
com.google.javascript.jscomp.CommandLineRunner:383-} catch (CmdLineException e) {	0
com.google.javascript.jscomp.CommandLineRunner:384-err.println(e.getMessage());	0
com.google.javascript.jscomp.CommandLineRunner:385-parser.printUsage(err);	0
com.google.javascript.jscomp.CommandLineRunner:386-throw e;	0
com.google.javascript.jscomp.CommandLineRunner:425-level.setDebugOptionsForCompilationLevel(options);	0
com.google.javascript.jscomp.CommandLineRunner:431-formattingOption.applyToOptions(options);	0
com.google.javascript.jscomp.CommandLineRunner:432-}	0
com.google.javascript.jscomp.CommandLineRunner:449-List<JSSourceFile> externs = super.createExterns();	0
com.google.javascript.jscomp.CommandLineRunner:450-if (!flags.use_only_custom_externs) {	0
com.google.javascript.jscomp.CommandLineRunner:451-List<JSSourceFile> defaultExterns = getDefaultExterns();	0
com.google.javascript.jscomp.Normalize:358-if (assertOnChange && !c.hasChildren()) {	0
com.google.javascript.jscomp.Normalize:362-while (c.getFirstChild() != c.getLastChild()) {	0
com.google.javascript.jscomp.Normalize:393-Node next = current.getNext();	0
com.google.javascript.jscomp.Normalize:394-if (NodeUtil.isFunctionDeclaration(current)) {	0
com.google.javascript.jscomp.Normalize:405-previous = current;	0
com.google.javascript.jscomp.Normalize:407-current = next;	0
com.google.javascript.jscomp.Normalize:408-}	0
com.google.javascript.jscomp.Normalize:269-moveNamedFunctions(n.getLastChild());	0
com.google.javascript.jscomp.Normalize:378-Preconditions.checkState(	0
com.google.javascript.jscomp.Normalize:380-Node previous = null;	0
com.google.javascript.jscomp.Normalize:381-Node current = functionBody.getFirstChild();	0
com.google.javascript.jscomp.Normalize:384-while (current != null && NodeUtil.isFunctionDeclaration(current)) {	0
com.google.javascript.jscomp.Normalize:390-Node insertAfter = previous;	0
com.google.javascript.jscomp.Normalize:391-while (current != null) {	0
com.google.javascript.jscomp.Normalize:409-}	0
com.google.javascript.jscomp.Normalize:73-Normalize(AbstractCompiler compiler, boolean assertOnChange) {	0
com.google.javascript.jscomp.Normalize:74-this.compiler = compiler;	0
com.google.javascript.jscomp.Normalize:75-this.assertOnChange = assertOnChange;	0
com.google.javascript.jscomp.Normalize:76-}	0
com.google.javascript.jscomp.Normalize:88-NodeTraversal.traverse(compiler, root, this);	0
com.google.javascript.jscomp.Normalize:90-MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();	0
com.google.javascript.jscomp.Normalize:91-NodeTraversal t = new NodeTraversal(compiler, renamer);	0
com.google.javascript.jscomp.Normalize:92-t.traverseRoots(externs, root);	0
com.google.javascript.jscomp.Normalize:94-removeDuplicateDeclarations(root);	1
com.google.javascript.jscomp.Normalize:95-new PropogateConstantAnnotations(compiler, assertOnChange)	0
com.google.javascript.jscomp.Normalize:97-}	0
com.google.javascript.jscomp.Normalize:101-doStatementNormalizations(t, n, parent);	0
com.google.javascript.jscomp.Normalize:103-return true;	0
com.google.javascript.jscomp.Normalize:235-switch (n.getType()) {	0
com.google.javascript.jscomp.Normalize:246-}	0
com.google.javascript.jscomp.Normalize:252-if (n.getType() == Token.LABEL) {	0
com.google.javascript.jscomp.Normalize:258-if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) {	0
com.google.javascript.jscomp.Normalize:259-extractForInitializer(n, null, null);	0
com.google.javascript.jscomp.Normalize:264-if (NodeUtil.isStatementBlock(n)) {	0
com.google.javascript.jscomp.Normalize:265-splitVarDeclarations(n);	0
com.google.javascript.jscomp.Normalize:268-if (n.getType() == Token.FUNCTION) {	0
com.google.javascript.jscomp.Normalize:271-}	0
com.google.javascript.jscomp.Normalize:314-for (Node next, c = n.getFirstChild(); c != null; c = next) {	0
com.google.javascript.jscomp.Normalize:315-next = c.getNext();	0
com.google.javascript.jscomp.Normalize:316-Node insertBefore = (before == null) ? c : before;	0
com.google.javascript.jscomp.Normalize:317-Node insertBeforeParent = (before == null) ? n : beforeParent;	0
com.google.javascript.jscomp.Normalize:318-switch (c.getType()) {	0
com.google.javascript.jscomp.Normalize:343-}	0
com.google.javascript.jscomp.Normalize:355-for (Node next, c = n.getFirstChild(); c != null; c = next) {	0
com.google.javascript.jscomp.Normalize:356-next = c.getNext();	0
com.google.javascript.jscomp.Normalize:357-if (c.getType() == Token.VAR) {	0
com.google.javascript.jscomp.Normalize:371-}	0
com.google.javascript.jscomp.Normalize:429-Callback tickler = new ScopeTicklingCallback();	0
com.google.javascript.jscomp.Normalize:430-ScopeCreator scopeCreator =new SyntacticScopeCreator(	0
com.google.javascript.jscomp.Normalize:432-NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator);	0
com.google.javascript.jscomp.ControlFlowAnalysis:730-return computeFollowNode(fromNode, parent);	0
com.google.javascript.jscomp.ControlFlowAnalysis:737-return computeFollowNode(fromNode, parent);	0
com.google.javascript.jscomp.ControlFlowAnalysis:734-if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.	0
com.google.javascript.jscomp.ControlFlowAnalysis:331-handleCatch(n);	0
com.google.javascript.jscomp.ControlFlowAnalysis:332-return;	0
com.google.javascript.jscomp.ControlFlowAnalysis:545-createEdge(node, Branch.UNCOND, node.getLastChild());	0
com.google.javascript.jscomp.ControlFlowAnalysis:546-}	0
com.google.javascript.jscomp.ControlFlowAnalysis:727-if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.	0
com.google.javascript.jscomp.ControlFlowAnalysis:628-if (NodeUtil.hasFinally(curHandler)) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:637-}	0
com.google.javascript.jscomp.ControlFlowAnalysis:733-} else if (NodeUtil.getCatchBlock(parent) == node){	0
com.google.javascript.jscomp.ControlFlowAnalysis:226-exceptionHandler.push(n);	0
com.google.javascript.jscomp.ControlFlowAnalysis:227-return true;	0
com.google.javascript.jscomp.ControlFlowAnalysis:281-if (n == parent.getFirstChild().getNext()) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:282-Preconditions.checkState(exceptionHandler.peek() == parent);	0
com.google.javascript.jscomp.ControlFlowAnalysis:283-exceptionHandler.pop();	0
com.google.javascript.jscomp.ControlFlowAnalysis:328-handleTry(n);	0
com.google.javascript.jscomp.ControlFlowAnalysis:329-return;	0
com.google.javascript.jscomp.ControlFlowAnalysis:541-createEdge(node, Branch.UNCOND, node.getFirstChild());	0
com.google.javascript.jscomp.ControlFlowAnalysis:542-}	0
com.google.javascript.jscomp.ControlFlowAnalysis:726-if (parent.getFirstChild() == node) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:180-nodePriorities.put(candidate, ++priorityCounter);	0
com.google.javascript.jscomp.ControlFlowAnalysis:264-return n != parent.getFirstChild();	0
com.google.javascript.jscomp.ControlFlowAnalysis:509-break;	0
com.google.javascript.jscomp.ControlFlowAnalysis:640-connectToPossibleExceptionHandler(node, node.getFirstChild());	0
com.google.javascript.jscomp.ControlFlowAnalysis:500-createEdge(node, Branch.UNCOND, computeFollowNode(node));	0
com.google.javascript.jscomp.ControlFlowAnalysis:359-createEdge(node, Branch.ON_FALSE,	0
com.google.javascript.jscomp.ControlFlowAnalysis:899-if (!ControlFlowGraph.isEnteringNewCfgNode(c) && mayThrowException(c)) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:273-return false;	0
com.google.javascript.jscomp.ControlFlowAnalysis:511-if (node.getType() == Token.BLOCK && node.isSyntheticBlock()) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:831-}	0
com.google.javascript.jscomp.ControlFlowAnalysis:898-for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:505-switch (parent.getType()) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:750-Node nextSibling = node.getNext();	0
com.google.javascript.jscomp.ControlFlowAnalysis:753-while (nextSibling != null && nextSibling.getType() == Token.FUNCTION) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:757-if (nextSibling != null) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:761-return computeFollowNode(fromNode, parent);	0
com.google.javascript.jscomp.ControlFlowAnalysis:805-if (mayThrowException(target) && !exceptionHandler.isEmpty()) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:885-switch (n.getType()) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:695-switch (parent.getType()) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:136-boolean shouldTraverseFunctions) {	0
com.google.javascript.jscomp.ControlFlowAnalysis:71-private final Comparator<DiGraphNode<Node, Branch>> priorityComparator =	0
com.google.javascript.jscomp.ControlFlowAnalysis:95-private final Deque<Node> exceptionHandler = new ArrayDeque<Node>();	0
com.google.javascript.jscomp.ControlFlowAnalysis:126-private final Multimap<Node, Node> finallyMap = HashMultimap.create();	0
com.google.javascript.jscomp.ControlFlowAnalysis:137-this.compiler = compiler;	0
com.google.javascript.jscomp.ControlFlowAnalysis:138-this.shouldTraverseFunctions = shouldTraverseFunctions;	0
com.google.javascript.jscomp.ControlFlowAnalysis:139-}	0
com.google.javascript.jscomp.ControlFlowAnalysis:142-return cfg;	0
com.google.javascript.jscomp.ControlFlowAnalysis:147-this.root = root;	0
com.google.javascript.jscomp.ControlFlowAnalysis:148-astPositionCounter = 0;	0
com.google.javascript.rhino.jstype.UnionType:287-} else if (that.isSubtype(this)) {	0
com.google.javascript.rhino.jstype.UnionType:274-UnionTypeBuilder builder = new UnionTypeBuilder(registry);	0
com.google.javascript.rhino.jstype.UnionType:275-for (JSType alternate : alternates) {	0
com.google.javascript.rhino.jstype.UnionType:276-if (alternate.isSubtype(that)) {	0
com.google.javascript.rhino.jstype.UnionType:279-}	0
com.google.javascript.rhino.jstype.UnionType:281-if (that instanceof UnionType) {	0
com.google.javascript.rhino.jstype.UnionType:290-JSType result = builder.build();	0
com.google.javascript.rhino.jstype.UnionType:291-if (result != null) {	1
com.google.javascript.rhino.jstype.UnionType:292-return result;	0
com.google.javascript.rhino.jstype.UnionType:321-return true;	0
com.google.javascript.rhino.jstype.UnionType:394-return false;	0
com.google.javascript.rhino.jstype.UnionType:252-for (JSType t : alternates) {	0
com.google.javascript.rhino.jstype.UnionType:253-if (t.isUnknownType()) {	0
com.google.javascript.rhino.jstype.UnionType:256-}	0
com.google.javascript.rhino.jstype.UnionType:257-return false;	0
com.google.javascript.rhino.jstype.UnionType:392-for (JSType element : alternates) {	0
com.google.javascript.rhino.jstype.UnionType:393-if (!element.isSubtype(that)) {	0
com.google.javascript.rhino.jstype.UnionType:76-super(registry);	0
com.google.javascript.rhino.jstype.UnionType:77-this.alternates = alternates;	0
com.google.javascript.rhino.jstype.UnionType:78-}	0
com.google.javascript.rhino.jstype.UnionType:86-return alternates;	0
com.google.javascript.rhino.jstype.UnionType:91-for (JSType type : getAlternates()) {	0
com.google.javascript.rhino.jstype.UnionType:92-type.forgiveUnknownNames();	0
com.google.javascript.rhino.jstype.UnionType:93-}	0
com.google.javascript.rhino.jstype.UnionType:94-}	0
com.google.javascript.rhino.jstype.UnionType:105-for (JSType t : alternates) {	0
com.google.javascript.rhino.jstype.UnionType:106-if (t.matchesNumberContext()) {	0
com.google.javascript.rhino.jstype.UnionType:107-return true;	0
com.google.javascript.rhino.jstype.UnionType:109-}	0
com.google.javascript.rhino.jstype.UnionType:110-return false;	0
com.google.javascript.rhino.jstype.UnionType:127-for (JSType t : alternates) {	0
com.google.javascript.rhino.jstype.UnionType:128-if (t.matchesStringContext()) {	0
com.google.javascript.rhino.jstype.UnionType:129-return true;	0
com.google.javascript.rhino.jstype.UnionType:131-}	0
com.google.javascript.rhino.jstype.UnionType:132-return false;	0
com.google.javascript.rhino.jstype.UnionType:154-for (JSType t : alternates) {	0
com.google.javascript.rhino.jstype.UnionType:155-if (t.matchesObjectContext()) {	0
com.google.javascript.rhino.jstype.UnionType:156-return true;	0
com.google.javascript.rhino.jstype.UnionType:158-}	0
com.google.javascript.rhino.jstype.UnionType:159-return false;	0
com.google.javascript.rhino.jstype.UnionType:164-JSType propertyType = null;	0
com.google.javascript.rhino.jstype.UnionType:166-for (JSType alternate : getAlternates()) {	0
com.google.javascript.rhino.jstype.UnionType:168-if (alternate.isNullType() || alternate.isVoidType()) {	0
com.google.javascript.rhino.jstype.UnionType:169-continue;	0
com.google.javascript.rhino.jstype.UnionType:172-JSType altPropertyType = alternate.findPropertyType(propertyName);	0
com.google.javascript.rhino.jstype.UnionType:173-if (altPropertyType == null) {	0
com.google.javascript.rhino.jstype.UnionType:174-continue;	0
com.google.javascript.rhino.jstype.UnionType:177-if (propertyType == null) {	0
com.google.javascript.rhino.jstype.UnionType:178-propertyType = altPropertyType;	0
com.google.javascript.rhino.jstype.UnionType:180-propertyType = propertyType.getLeastSupertype(altPropertyType);	0
com.google.javascript.jscomp.CommandLineRunner:861-options.messageBundle = new EmptyMessageBundle();	0
com.google.javascript.jscomp.CommandLineRunner:668-processedArgs.add(matcher.group(1));	0
com.google.javascript.jscomp.CommandLineRunner:670-String value = matcher.group(2);	0
com.google.javascript.jscomp.CommandLineRunner:671-Matcher quotesMatcher = quotesPattern.matcher(value);	0
com.google.javascript.jscomp.CommandLineRunner:672-if (quotesMatcher.matches()) {	0
com.google.javascript.jscomp.CommandLineRunner:675-processedArgs.add(value);	0
com.google.javascript.jscomp.CommandLineRunner:677-} else {	0
com.google.javascript.jscomp.CommandLineRunner:678-processedArgs.add(arg);	0
com.google.javascript.jscomp.CommandLineRunner:985-return this.isConfigValid;	0
com.google.javascript.jscomp.CommandLineRunner:756-if (flags.thirdParty) {	0
com.google.javascript.jscomp.CommandLineRunner:758-} else if (flags.processJqueryPrimitives) {	0
com.google.javascript.jscomp.CommandLineRunner:761-conv = new ClosureCodingConvention();	0
com.google.javascript.jscomp.CommandLineRunner:764-getCommandLineConfig()	0
com.google.javascript.jscomp.CommandLineRunner:807-CompilerOptions options = new CompilerOptions();	0
com.google.javascript.jscomp.CommandLineRunner:808-if (flags.processJqueryPrimitives) {	0
com.google.javascript.jscomp.CommandLineRunner:811-options.setCodingConvention(new ClosureCodingConvention());	0
com.google.javascript.jscomp.CommandLineRunner:814-options.setExtraAnnotationNames(flags.extraAnnotationName);	0
com.google.javascript.jscomp.CommandLineRunner:816-CompilationLevel level = flags.compilationLevel;	0
com.google.javascript.jscomp.CommandLineRunner:817-level.setOptionsForCompilationLevel(options);	0
com.google.javascript.jscomp.CommandLineRunner:819-if (flags.debug) {	0
com.google.javascript.jscomp.CommandLineRunner:823-if (flags.useTypesForOptimization) {	0
com.google.javascript.jscomp.CommandLineRunner:827-if (flags.generateExports) {	0
com.google.javascript.jscomp.CommandLineRunner:831-WarningLevel wLevel = flags.warningLevel;	0
com.google.javascript.jscomp.CommandLineRunner:832-wLevel.setOptionsForWarningLevel(options);	0
com.google.javascript.jscomp.CommandLineRunner:833-for (FormattingOption formattingOption : flags.formatting) {	0
com.google.javascript.jscomp.CommandLineRunner:837-options.closurePass = flags.processClosurePrimitives;	0
com.google.javascript.jscomp.CommandLineRunner:839-options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&	0
com.google.javascript.jscomp.CommandLineRunner:842-options.angularPass = flags.angularPass;	0
com.google.javascript.jscomp.CommandLineRunner:844-if (!flags.translationsFile.isEmpty()) {	0
com.google.javascript.jscomp.CommandLineRunner:852-} else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {	0
com.google.javascript.jscomp.CommandLineRunner:864-return options;	0
com.google.javascript.jscomp.CommandLineRunner:869-return new Compiler(getErrorPrintStream());	0
com.google.javascript.jscomp.CommandLineRunner:875-List<SourceFile> externs = super.createExterns();	0
com.google.javascript.jscomp.CommandLineRunner:876-if (flags.useOnlyCustomExterns || isInTestMode()) {	0
com.google.javascript.jscomp.CommandLineRunner:877-return externs;	0
com.google.javascript.jscomp.CommandLineRunner:629-super(out, err);	0
com.google.javascript.jscomp.CommandLineRunner:614-private final Flags flags = new Flags();	0
com.google.javascript.jscomp.CommandLineRunner:616-private boolean isConfigValid = false;	0
com.google.javascript.jscomp.CommandLineRunner:630-initConfigFromFlags(args, err);	0
com.google.javascript.jscomp.CommandLineRunner:631-}	0
com.google.javascript.jscomp.CommandLineRunner:886-private static final List<String> DEFAULT_EXTERNS_NAMES = ImmutableList.of(	0
com.google.javascript.jscomp.CommandLineRunner:661-Pattern argPattern = Pattern.compile("(--[a-zA-Z_]+)=(.*)");	0
com.google.javascript.jscomp.CommandLineRunner:662-Pattern quotesPattern = Pattern.compile("^['\"](.*)['\"]$");	0
com.google.javascript.jscomp.CommandLineRunner:663-List<String> processedArgs = Lists.newArrayList();	0
com.google.javascript.jscomp.CommandLineRunner:665-for (String arg : args) {	0
com.google.javascript.jscomp.CommandLineRunner:666-Matcher matcher = argPattern.matcher(arg);	0
com.google.javascript.jscomp.CommandLineRunner:667-if (matcher.matches()) {	0
com.google.javascript.jscomp.CommandLineRunner:682-return processedArgs;	0
com.google.javascript.jscomp.CommandLineRunner:712-List<String> processedArgs = processArgs(args);	0
com.google.javascript.jscomp.CommandLineRunner:714-CmdLineParser parser = new CmdLineParser(flags);	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:128-super(convention, typeRegistry);	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:50-private final Visitor<JSType> restrictToArrayVisitor =	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:67-private final Visitor<JSType> restrictToNotArrayVisitor =	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:79-private final Visitor<JSType> restrictToObjectVisitor =	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:100-private final Visitor<JSType> restrictToNotObjectVisitor =	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:129-this.restricters =	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:214-}	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:219-if (condition.isCall() && condition.getChildCount() == 2) {	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:220-Node callee = condition.getFirstChild();	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:221-Node param = condition.getLastChild();	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:222-if (callee.isGetProp() && param.isQualifiedName()) {	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:223-JSType paramType =getTypeIfRefinable(param, blindScope);	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:224-Node left = callee.getFirstChild();	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:225-Node right = callee.getLastChild();	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:226-if (left.isName() && "goog".equals(left.getString()) &&	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:228-Function<TypeRestriction, JSType> restricter =	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:230-if (restricter != null) {	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:231-return restrictParameter(param, paramType, blindScope, restricter,	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:245-type = restriction.apply(new TypeRestriction(type, outcome));	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:248-if (type != null) {	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:249-FlowScope informed = blindScope.createChildFlowScope();	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:250-declareNameInScope(informed, parameter, type);	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:251-return informed;	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:237-return nextPreciserScopeKnowingConditionOutcome(	0
com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter:253-return blindScope;	0
com.google.javascript.jscomp.ProcessClosurePrimitives:134-CheckLevel requiresLevel) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:122-private final Map<String, ProvidedName> providedNames =	0
com.google.javascript.jscomp.ProcessClosurePrimitives:125-private final List<UnrecognizedRequire> unrecognizedRequires =	0
com.google.javascript.jscomp.ProcessClosurePrimitives:127-private final Set<String> exportedVariables = Sets.newHashSet();	0
com.google.javascript.jscomp.ProcessClosurePrimitives:130-private final List<Node> defineCalls = Lists.newArrayList();	0
com.google.javascript.jscomp.ProcessClosurePrimitives:135-this.compiler = compiler;	0
com.google.javascript.jscomp.ProcessClosurePrimitives:136-this.preprocessorSymbolTable = preprocessorSymbolTable;	0
com.google.javascript.jscomp.ProcessClosurePrimitives:137-this.moduleGraph = compiler.getModuleGraph();	0
com.google.javascript.jscomp.ProcessClosurePrimitives:138-this.requiresLevel = requiresLevel;	0
com.google.javascript.jscomp.ProcessClosurePrimitives:141-providedNames.put(GOOG,	0
com.google.javascript.jscomp.ProcessClosurePrimitives:143-}	0
com.google.javascript.jscomp.ProcessClosurePrimitives:45-static final DiagnosticType NULL_ARGUMENT_ERROR = DiagnosticType.error(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:49-static final DiagnosticType EXPECTED_OBJECTLIT_ERROR = DiagnosticType.error(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:53-static final DiagnosticType EXPECTED_STRING_ERROR = DiagnosticType.error(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:57-static final DiagnosticType INVALID_ARGUMENT_ERROR = DiagnosticType.error(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:61-static final DiagnosticType INVALID_STYLE_ERROR = DiagnosticType.error(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:65-static final DiagnosticType TOO_MANY_ARGUMENTS_ERROR = DiagnosticType.error(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:69-static final DiagnosticType DUPLICATE_NAMESPACE_ERROR = DiagnosticType.error(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:73-static final DiagnosticType FUNCTION_NAMESPACE_ERROR = DiagnosticType.error(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:77-static final DiagnosticType MISSING_PROVIDE_ERROR = DiagnosticType.error(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:81-static final DiagnosticType LATE_PROVIDE_ERROR = DiagnosticType.error(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:85-static final DiagnosticType INVALID_PROVIDE_ERROR = DiagnosticType.error(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:89-static final DiagnosticType INVALID_DEFINE_NAME_ERROR = DiagnosticType.error(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:93-static final DiagnosticType MISSING_DEFINE_ANNOTATION = DiagnosticType.error(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:97-static final DiagnosticType XMODULE_REQUIRE_ERROR = DiagnosticType.warning(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:102-static final DiagnosticType NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR =	0
com.google.javascript.jscomp.ProcessClosurePrimitives:107-static final DiagnosticType INVALID_CSS_RENAMING_MAP = DiagnosticType.warning(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:111-static final DiagnosticType BASE_CLASS_ERROR = DiagnosticType.error(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:151-new NodeTraversal(compiler, this).traverse(root);	0
com.google.javascript.jscomp.ProcessClosurePrimitives:153-for (Node n : defineCalls) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:157-for (ProvidedName pn : providedNames.values()) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:158-pn.replace();	0
com.google.javascript.jscomp.ProcessClosurePrimitives:159-}	0
com.google.javascript.jscomp.ProcessClosurePrimitives:161-if (requiresLevel.isOn()) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:162-for (UnrecognizedRequire r : unrecognizedRequires) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:164-ProvidedName expectedName = providedNames.get(r.namespace);	0
com.google.javascript.jscomp.ProcessClosurePrimitives:165-if (expectedName != null && expectedName.firstNode != null) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:169-error = MISSING_PROVIDE_ERROR;	0
com.google.javascript.jscomp.ProcessClosurePrimitives:172-compiler.report(JSError.make(	0
com.google.javascript.jscomp.ProcessClosurePrimitives:174-}	0
com.google.javascript.jscomp.ProcessClosurePrimitives:176-}	0
com.google.javascript.jscomp.ProcessClosurePrimitives:203-switch (n.getType()) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:205-boolean isExpr = parent.isExprResult();	0
com.google.javascript.jscomp.ProcessClosurePrimitives:206-Node left = n.getFirstChild();	0
com.google.javascript.jscomp.ProcessClosurePrimitives:207-if (left.isGetProp()) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:208-Node name = left.getFirstChild();	0
com.google.javascript.jscomp.ProcessClosurePrimitives:209-if (name.isName() &&	0
com.google.javascript.jscomp.ProcessClosurePrimitives:214-String methodName = name.getNext().getString();	0
com.google.javascript.jscomp.ProcessClosurePrimitives:215-if ("base".equals(methodName)) {	0
com.google.javascript.jscomp.ProcessClosurePrimitives:217-} else if (!isExpr) {	0
com.google.javascript.jscomp.NameAnalyzer:1722-Node replacement = n.getLastChild();	0
com.google.javascript.jscomp.NameAnalyzer:1723-replacement.detachFromParent();	0
com.google.javascript.jscomp.NameAnalyzer:1724-changeProxy.replaceWith(parent, n, replacement);	0
com.google.javascript.jscomp.NameAnalyzer:1725-} else {	0
com.google.javascript.jscomp.NameAnalyzer:1611-return scopes.get(parent);	0
com.google.javascript.jscomp.NameAnalyzer:1864-return Collections.emptyList();	0
com.google.javascript.jscomp.NameAnalyzer:1610-if (parent.isAssign()) {	0
com.google.javascript.jscomp.NameAnalyzer:1498-return null;	0
com.google.javascript.jscomp.NameAnalyzer:1598-Node parent = function.getParent();	0
com.google.javascript.jscomp.NameAnalyzer:1599-if (parent != null) {	0
com.google.javascript.jscomp.NameAnalyzer:1602-while (parent.isHook()) {	0
com.google.javascript.jscomp.NameAnalyzer:1606-if (parent.isName()) {	0
com.google.javascript.jscomp.NameAnalyzer:1591-List<NameInformation> refs = scopes.get(function);	0
com.google.javascript.jscomp.NameAnalyzer:1592-if (!refs.isEmpty()) {	0
com.google.javascript.jscomp.NameAnalyzer:1554-return false;	0
com.google.javascript.jscomp.NameAnalyzer:1455-String singletonGetterClass =	0
com.google.javascript.jscomp.NameAnalyzer:1457-if (singletonGetterClass != null) {	0
com.google.javascript.jscomp.NameAnalyzer:1860-Node rhs = n.getFirstChild();	0
com.google.javascript.jscomp.NameAnalyzer:1861-if (rhs != null) {	0
com.google.javascript.jscomp.NameAnalyzer:1877-List<Node> nodes = Lists.newArrayList();	0
com.google.javascript.jscomp.NameAnalyzer:1878-for (Node child : n.children()) {	0
com.google.javascript.jscomp.NameAnalyzer:1879-nodes.addAll(getRhsSubexpressions(child));	0
com.google.javascript.jscomp.NameAnalyzer:1880-}	0
com.google.javascript.jscomp.NameAnalyzer:1881-return nodes;	0
com.google.javascript.jscomp.NameAnalyzer:1445-CodingConvention convention = compiler.getCodingConvention();	0
com.google.javascript.jscomp.NameAnalyzer:1446-SubclassRelationship classes = convention.getClassesDefinedByCall(parent);	0
com.google.javascript.jscomp.NameAnalyzer:1447-if (classes != null) {	0
com.google.javascript.jscomp.NameAnalyzer:1202-refNode.remove();	0
com.google.javascript.jscomp.NameAnalyzer:1703-if (valueConsumedByParent(n, parent)) {	0
com.google.javascript.jscomp.NameAnalyzer:1716-} else if (n.isAssign() && !parent.isFor()) {	0
com.google.javascript.jscomp.NameAnalyzer:1726-replaceTopLevelExpressionWithRhs(parent, n);	0
com.google.javascript.jscomp.NameAnalyzer:1728-}	0
com.google.javascript.jscomp.NameAnalyzer:1736-switch (parent.getType()) {	0
com.google.javascript.jscomp.NameAnalyzer:1741-break;	0
com.google.javascript.jscomp.NameAnalyzer:1748-switch (n.getType()) {	0
com.google.javascript.jscomp.NameAnalyzer:1752-break;	0
com.google.javascript.jscomp.NameAnalyzer:1765-List<Node> replacements = Lists.newArrayList();	0
com.google.javascript.jscomp.NameAnalyzer:1766-for (Node rhs : getRhsSubexpressions(n)) {	0
com.google.javascript.jscomp.NameAnalyzer:1770-if (parent.isFor()) {	0
com.google.javascript.jscomp.NameAnalyzer:1781-changeProxy.replaceWith(parent, n, replacements);	0
com.google.javascript.jscomp.NameAnalyzer:1782-}	0
com.google.javascript.jscomp.NameAnalyzer:1800-if (NodeUtil.isAssignmentOp(parent)) {	0
com.google.javascript.jscomp.NameAnalyzer:1804-switch (parent.getType()) {	0
com.google.javascript.jscomp.NameAnalyzer:1820-return false;	0
com.google.javascript.jscomp.NameAnalyzer:1850-switch (n.getType()) {	0
com.google.javascript.jscomp.NameAnalyzer:1586-Node function = t.getEnclosingFunction();	0
com.google.javascript.jscomp.NameAnalyzer:1587-if (function == null) {	0
com.google.javascript.jscomp.NameAnalyzer:1521-return null;	0
com.google.javascript.jscomp.NameAnalyzer:1180-return;	0
com.google.javascript.jscomp.NameAnalyzer:1571-return refs;	0
com.google.javascript.jscomp.FunctionInjector:744-cArg = cArg.getNext();	0
com.google.javascript.jscomp.FunctionInjector:735-fnParam = fnParam.getNext();	0
com.google.javascript.jscomp.FunctionInjector:727-if (NodeUtil.mayEffectMutableState(cArg, compiler)	0
com.google.javascript.jscomp.FunctionInjector:722-if (cArg != null) {	0
com.google.javascript.jscomp.FunctionInjector:741-if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {	0
com.google.javascript.jscomp.FunctionInjector:740-if (cArg != null) {	0
com.google.javascript.jscomp.FunctionInjector:721-if (fnParam != null) {	0
com.google.javascript.jscomp.FunctionInjector:748-return CanInlineResult.YES;	0
com.google.javascript.jscomp.FunctionInjector:718-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();	0
com.google.javascript.jscomp.FunctionInjector:719-while (cArg != null || fnParam != null) {	0
com.google.javascript.jscomp.FunctionInjector:796-return true;	0
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	0
com.google.javascript.jscomp.FunctionInjector:699-Node cArg = callNode.getFirstChild().getNext();	0
com.google.javascript.jscomp.FunctionInjector:704-if (!callNode.getFirstChild().isName()) {	0
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	0
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	0
com.google.javascript.jscomp.FunctionInjector:555-return true;	0
com.google.javascript.jscomp.FunctionInjector:274-Node returnNode = block.getFirstChild();	0
com.google.javascript.jscomp.FunctionInjector:275-Preconditions.checkArgument(returnNode.isReturn());	0
com.google.javascript.jscomp.FunctionInjector:278-Node safeReturnNode = returnNode.cloneTree();	0
com.google.javascript.jscomp.FunctionInjector:279-Node inlineResult = FunctionArgumentInjector.inject(	0
com.google.javascript.jscomp.FunctionInjector:281-Preconditions.checkArgument(safeReturnNode == inlineResult);	0
com.google.javascript.jscomp.FunctionInjector:282-newExpression = safeReturnNode.removeFirstChild();	0
com.google.javascript.jscomp.FunctionInjector:245-return inlineReturnValue(callNode, fnNode);	0
com.google.javascript.jscomp.FunctionInjector:257-Node block = fnNode.getLastChild();	0
com.google.javascript.jscomp.FunctionInjector:258-Node callParentNode = callNode.getParent();	0
com.google.javascript.jscomp.FunctionInjector:265-Map<String, Node> argMap =	0
com.google.javascript.jscomp.FunctionInjector:270-if (!block.hasChildren()) {	0
com.google.javascript.jscomp.FunctionInjector:285-callParentNode.replaceChild(callNode, newExpression);	0
com.google.javascript.jscomp.FunctionInjector:286-return newExpression;	0
com.google.javascript.jscomp.FunctionInjector:553-if (block.getFirstChild().isReturn()	0
com.google.javascript.jscomp.FunctionInjector:551-} else if (block.hasOneChild()) {	0
com.google.javascript.jscomp.FunctionInjector:544-Node block = NodeUtil.getFunctionBody(fnNode);	0
com.google.javascript.jscomp.FunctionInjector:548-if (!block.hasChildren()) {	0
com.google.javascript.jscomp.FunctionInjector:207-if (mode == InliningMode.DIRECT) {	0
com.google.javascript.jscomp.FunctionInjector:201-if (referencesThis && !NodeUtil.isFunctionObjectCall(callNode)) {	0
com.google.javascript.jscomp.FunctionInjector:188-if (containsFunctions) {	0
com.google.javascript.jscomp.FunctionInjector:234-return true;	0
com.google.javascript.jscomp.FunctionInjector:775-if (ref.module != fnModule &&	0
com.google.javascript.jscomp.FunctionInjector:180-if (!isSupportedCallType(callNode)) {	0
com.google.javascript.jscomp.FunctionInjector:221-if (!callNode.getFirstChild().isName()) {	0
com.google.javascript.jscomp.FunctionInjector:758-int referenceCount = refs.size();	0
com.google.javascript.jscomp.FunctionInjector:759-if (referenceCount == 0) {	0
com.google.javascript.jscomp.FunctionInjector:763-int referencesUsingBlockInlining = 0;	0
com.google.javascript.jscomp.FunctionInjector:765-boolean checkModules = isRemovable && fnModule != null;	0
com.google.javascript.jscomp.FunctionInjector:766-JSModuleGraph moduleGraph = compiler.getModuleGraph();	0
com.google.javascript.jscomp.FunctionInjector:768-for (Reference ref : refs) {	0
com.google.javascript.jscomp.FunctionInjector:769-if (ref.mode == InliningMode.BLOCK) {	0
com.google.javascript.jscomp.FunctionInjector:774-if (checkModules && ref.module != null) {	0
com.google.javascript.jscomp.FunctionInjector:783-}	0
com.google.javascript.jscomp.DisambiguateProperties:609-++propsSkipped;	0
com.google.javascript.jscomp.DisambiguateProperties:608-if (prop.skipRenaming) {	0
com.google.javascript.jscomp.DisambiguateProperties:303-TypeSystem<T> typeSystem, Map<String, CheckLevel> propertiesToErrorFor) {	0
com.google.javascript.jscomp.DisambiguateProperties:281-private Map<String, Property> properties = Maps.newHashMap();	0
com.google.javascript.jscomp.DisambiguateProperties:304-this.compiler = compiler;	0
com.google.javascript.jscomp.DisambiguateProperties:305-this.typeSystem = typeSystem;	0
com.google.javascript.jscomp.DisambiguateProperties:306-this.propertiesToErrorFor = propertiesToErrorFor;	0
com.google.javascript.jscomp.DisambiguateProperties:307-if (!this.propertiesToErrorFor.isEmpty()) {	0
com.google.javascript.jscomp.DisambiguateProperties:308-this.invalidationMap = LinkedHashMultimap.create();	0
com.google.javascript.jscomp.DisambiguateProperties:312-}	0
com.google.javascript.jscomp.DisambiguateProperties:83-private static final Logger logger = Logger.getLogger(	0
com.google.javascript.jscomp.DisambiguateProperties:286-return new DisambiguateProperties<JSType>(	0
com.google.javascript.jscomp.DisambiguateProperties:316-Preconditions.checkState(	0
com.google.javascript.jscomp.DisambiguateProperties:318-for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) {	0
com.google.javascript.jscomp.DisambiguateProperties:323-NodeTraversal.traverse(compiler, externs, new FindExternProperties());	0
com.google.javascript.jscomp.DisambiguateProperties:324-NodeTraversal.traverse(compiler, root, new FindRenameableProperties());	0
com.google.javascript.jscomp.DisambiguateProperties:325-renameProperties();	0
com.google.javascript.jscomp.DisambiguateProperties:326-}	0
com.google.javascript.jscomp.DisambiguateProperties:363-if (!properties.containsKey(name)) {	0
com.google.javascript.jscomp.DisambiguateProperties:364-properties.put(name, new Property(name));	0
com.google.javascript.jscomp.DisambiguateProperties:366-return properties.get(name);	0
com.google.javascript.jscomp.DisambiguateProperties:574-int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0,	0
com.google.javascript.jscomp.DisambiguateProperties:575-instancesSkipped = 0, singleTypeProps = 0;	0
com.google.javascript.jscomp.DisambiguateProperties:577-Set<String> reported = Sets.newHashSet();	0
com.google.javascript.jscomp.DisambiguateProperties:578-for (Property prop : properties.values()) {	0
com.google.javascript.jscomp.DisambiguateProperties:579-if (prop.shouldRename()) {	0
com.google.javascript.jscomp.DisambiguateProperties:614-}	0
com.google.javascript.jscomp.DisambiguateProperties:615-logger.fine("Renamed " + instancesRenamed + " instances of "	0
com.google.javascript.jscomp.DisambiguateProperties:617-logger.fine("Skipped renaming " + instancesSkipped + " invalidated "	0
com.google.javascript.jscomp.DisambiguateProperties:621-}	0
com.google.javascript.jscomp.DisambiguateProperties:611-++singleTypeProps;	0
com.google.javascript.jscomp.DisambiguateProperties:587-String newName = propNames.get(rootType);	0
com.google.javascript.jscomp.DisambiguateProperties:588-node.setString(newName);	0
com.google.javascript.jscomp.DisambiguateProperties:589-compiler.reportCodeChange();	0
com.google.javascript.jscomp.DisambiguateProperties:590-++instancesRenamed;	0
com.google.javascript.jscomp.DisambiguateProperties:591-} else {	0
com.google.javascript.jscomp.DisambiguateProperties:580-Map<T, String> propNames = buildPropNames(prop.getTypes(), prop.name);	0
com.google.javascript.jscomp.DisambiguateProperties:582-++propsRenamed;	0
com.google.javascript.jscomp.DisambiguateProperties:583-prop.expandTypesToSkip();	0
com.google.javascript.jscomp.DisambiguateProperties:584-for (Node node : prop.renameNodes) {	0
com.google.javascript.jscomp.DisambiguateProperties:585-T rootType = prop.rootTypes.get(node);	0
com.google.javascript.jscomp.DisambiguateProperties:586-if (prop.shouldRename(rootType)) {	0
com.google.javascript.jscomp.DisambiguateProperties:606-}	0
com.google.javascript.jscomp.DisambiguateProperties:607-} else {	0
com.google.javascript.jscomp.DisambiguateProperties:628-Map<T, String> names = Maps.newHashMap();	0
com.google.javascript.jscomp.DisambiguateProperties:629-for (Set<T> set : types.allEquivalenceClasses()) {	0
com.google.javascript.jscomp.DisambiguateProperties:630-checkState(!set.isEmpty());	0
com.google.javascript.jscomp.DisambiguateProperties:632-String typeName = null;	0
com.google.javascript.jscomp.DisambiguateProperties:633-for (T type : set) {	0
com.google.javascript.jscomp.DisambiguateProperties:634-if (typeName == null || type.toString().compareTo(typeName) < 0) {	0
com.google.javascript.jscomp.GlobalNamespace:264-v = externsScope.getVar(name);	0
com.google.javascript.jscomp.GlobalNamespace:97-GlobalNamespace(AbstractCompiler compiler, Node externsRoot, Node root) {	0
com.google.javascript.jscomp.GlobalNamespace:61-private boolean generated = false;	0
com.google.javascript.jscomp.GlobalNamespace:68-private int currentPreOrderIndex = 0;	0
com.google.javascript.jscomp.GlobalNamespace:71-private List<Name> globalNames = new ArrayList<Name>();	0
com.google.javascript.jscomp.GlobalNamespace:74-private Map<String, Name> nameMap = new HashMap<String, Name>();	0
com.google.javascript.jscomp.GlobalNamespace:98-this.compiler = compiler;	0
com.google.javascript.jscomp.GlobalNamespace:99-this.externsRoot = externsRoot;	0
com.google.javascript.jscomp.GlobalNamespace:100-this.root = root;	0
com.google.javascript.jscomp.GlobalNamespace:101-}	0
com.google.javascript.jscomp.GlobalNamespace:104-return externsRoot != null;	0
com.google.javascript.jscomp.GlobalNamespace:119-return getOwnSlot(name);	0
com.google.javascript.jscomp.GlobalNamespace:124-ensureGenerated();	0
com.google.javascript.jscomp.GlobalNamespace:125-return nameMap.get(name);	0
com.google.javascript.jscomp.GlobalNamespace:151-if (!generated) {	0
com.google.javascript.jscomp.GlobalNamespace:152-process();	0
com.google.javascript.jscomp.GlobalNamespace:154-}	0
com.google.javascript.jscomp.GlobalNamespace:161-ensureGenerated();	0
com.google.javascript.jscomp.GlobalNamespace:162-return globalNames;	0
com.google.javascript.jscomp.GlobalNamespace:219-if (externsRoot != null) {	0
com.google.javascript.jscomp.GlobalNamespace:220-inExterns = true;	0
com.google.javascript.jscomp.GlobalNamespace:221-NodeTraversal.traverse(compiler, externsRoot, new BuildGlobalNamespace());	0
com.google.javascript.jscomp.GlobalNamespace:223-inExterns = false;	0
com.google.javascript.jscomp.GlobalNamespace:225-NodeTraversal.traverse(compiler, root, new BuildGlobalNamespace());	0
com.google.javascript.jscomp.GlobalNamespace:226-generated = true;	0
com.google.javascript.jscomp.GlobalNamespace:227-}	0
com.google.javascript.jscomp.GlobalNamespace:238-String topVarName = getTopVarName(name);	0
com.google.javascript.jscomp.GlobalNamespace:239-return isGlobalVarReference(topVarName, s);	0
com.google.javascript.jscomp.GlobalNamespace:249-int firstDotIndex = name.indexOf('.');	0
com.google.javascript.jscomp.GlobalNamespace:250-return firstDotIndex == -1 ? name : name.substring(0, firstDotIndex);	0
com.google.javascript.jscomp.GlobalNamespace:262-Scope.Var v = s.getVar(name);	0
com.google.javascript.jscomp.GlobalNamespace:263-if (v == null && externsScope != null) {	0
com.google.javascript.jscomp.GlobalNamespace:266-return v != null && !v.isLocal();	0
com.google.javascript.jscomp.GlobalNamespace:276-return s.getParent() == null;	0
com.google.javascript.jscomp.GlobalNamespace:83-this(compiler, null, root);	0
com.google.javascript.jscomp.GlobalNamespace:84-}	0
com.google.javascript.jscomp.GlobalNamespace:109-return root.getParent();	0
com.google.javascript.jscomp.GlobalNamespace:114-return null;	0
com.google.javascript.jscomp.GlobalNamespace:130-return compiler.getTypeRegistry().getNativeObjectType(GLOBAL_THIS);	0
com.google.javascript.jscomp.GlobalNamespace:135-ensureGenerated();	0
com.google.javascript.jscomp.GlobalNamespace:136-return Collections.unmodifiableList(slot.getRefs());	0
com.google.javascript.jscomp.GlobalNamespace:141-return this;	0
com.google.javascript.jscomp.GlobalNamespace:146-ensureGenerated();	0
com.google.javascript.jscomp.GlobalNamespace:147-return Collections.unmodifiableCollection(getNameIndex().values());	0
com.google.javascript.jscomp.GlobalNamespace:170-ensureGenerated();	0
com.google.javascript.jscomp.GlobalNamespace:171-return nameMap;	0
com.google.javascript.jscomp.GlobalNamespace:196-BuildGlobalNamespace builder = new BuildGlobalNamespace();	0
com.google.javascript.jscomp.GlobalNamespace:198-for (AstChange info : newNodes) {	0
com.google.javascript.jscomp.GlobalNamespace:199-if (!info.node.isQualifiedName() && !NodeUtil.isObjectLitKey(info.node)) {	0
com.google.javascript.jscomp.GlobalNamespace:200-continue;	0
com.google.javascript.jscomp.ReferenceCollectingCallback:187-behavior.afterExitScope(t, new ReferenceMapWrapper(referenceMap));	0
com.google.javascript.jscomp.ReferenceCollectingCallback:98-Predicate<Var> varFilter) {	0
com.google.javascript.jscomp.ReferenceCollectingCallback:61-private final Map<Var, ReferenceCollection> referenceMap =	0
com.google.javascript.jscomp.ReferenceCollectingCallback:67-private final Deque<BasicBlock> blockStack = new ArrayDeque<BasicBlock>();	0
com.google.javascript.jscomp.ReferenceCollectingCallback:99-this.compiler = compiler;	0
com.google.javascript.jscomp.ReferenceCollectingCallback:100-this.behavior = behavior;	0
com.google.javascript.jscomp.ReferenceCollectingCallback:101-this.varFilter = varFilter;	0
com.google.javascript.jscomp.ReferenceCollectingCallback:102-}	0
com.google.javascript.jscomp.ReferenceCollectingCallback:279-static final Behavior DO_NOTHING_BEHAVIOR = new Behavior() {	0
com.google.javascript.jscomp.ReferenceCollectingCallback:110-NodeTraversal.traverseRoots(	0
com.google.javascript.jscomp.ReferenceCollectingCallback:112-}	0
com.google.javascript.jscomp.ReferenceCollectingCallback:149-if (n.isName()) {	0
com.google.javascript.jscomp.ReferenceCollectingCallback:151-if (n.getString().equals("arguments")) {	0
com.google.javascript.jscomp.ReferenceCollectingCallback:154-v = t.getScope().getVar(n.getString());	0
com.google.javascript.jscomp.ReferenceCollectingCallback:156-if (v != null && varFilter.apply(v)) {	0
com.google.javascript.jscomp.ReferenceCollectingCallback:157-addReference(v, new Reference(n, t, blockStack.peek()));	0
com.google.javascript.jscomp.ReferenceCollectingCallback:161-if (isBlockBoundary(n, parent)) {	0
com.google.javascript.jscomp.ReferenceCollectingCallback:164-}	0
com.google.javascript.jscomp.ReferenceCollectingCallback:171-Node n = t.getScope().getRootNode();	0
com.google.javascript.jscomp.ReferenceCollectingCallback:172-BasicBlock parent = blockStack.isEmpty() ? null : blockStack.peek();	0
com.google.javascript.jscomp.ReferenceCollectingCallback:173-blockStack.push(new BasicBlock(parent, n));	0
com.google.javascript.jscomp.ReferenceCollectingCallback:174-}	0
com.google.javascript.jscomp.ReferenceCollectingCallback:181-blockStack.pop();	0
com.google.javascript.jscomp.ReferenceCollectingCallback:182-if (t.getScope().isGlobal()) {	0
com.google.javascript.jscomp.ReferenceCollectingCallback:184-compiler.updateGlobalVarReferences(referenceMap, t.getScopeRoot());	0
com.google.javascript.jscomp.ReferenceCollectingCallback:185-behavior.afterExitScope(t, compiler.getGlobalVarReferences());	0
com.google.javascript.jscomp.ReferenceCollectingCallback:189-}	0
com.google.javascript.jscomp.ReferenceCollectingCallback:198-if (isBlockBoundary(n, parent)) {	0
com.google.javascript.jscomp.ReferenceCollectingCallback:201-return true;	0
com.google.javascript.jscomp.ReferenceCollectingCallback:208-if (parent != null) {	0
com.google.javascript.jscomp.ReferenceCollectingCallback:209-switch (parent.getType()) {	0
com.google.javascript.jscomp.ReferenceCollectingCallback:236-return n.isCase();	0
com.google.javascript.jscomp.ReferenceCollectingCallback:241-ReferenceCollection referenceInfo = referenceMap.get(v);	0
com.google.javascript.jscomp.ReferenceCollectingCallback:242-if (referenceInfo == null) {	0
com.google.javascript.jscomp.ReferenceCollectingCallback:243-referenceInfo = new ReferenceCollection();	0
com.google.javascript.jscomp.ReferenceCollectingCallback:244-referenceMap.put(v, referenceInfo);	0
com.google.javascript.jscomp.ReferenceCollectingCallback:248-referenceInfo.add(reference);	0
com.google.javascript.jscomp.ReferenceCollectingCallback:249-}	0
com.google.javascript.jscomp.ReferenceCollectingCallback:88-this(compiler, behavior, Predicates.<Var>alwaysTrue());	0
com.google.javascript.jscomp.ReferenceCollectingCallback:89-}	0
com.google.javascript.jscomp.ReferenceCollectingCallback:119-NodeTraversal.traverse(compiler, scriptRoot, this);	0
com.google.javascript.jscomp.ReferenceCollectingCallback:120-}	0
com.google.javascript.jscomp.ReferenceCollectingCallback:127-return referenceMap.keySet();	0
com.google.javascript.jscomp.ReferenceCollectingCallback:132-return var.scope;	0
com.google.javascript.jscomp.ReferenceCollectingCallback:140-return referenceMap.get(v);	0
com.google.javascript.jscomp.ReferenceCollectingCallback:152-v = t.getScope().getArgumentsVar();	0
com.google.javascript.jscomp.ReferenceCollectingCallback:162-blockStack.pop();	0
com.google.javascript.jscomp.ReferenceCollectingCallback:199-blockStack.push(new BasicBlock(blockStack.peek(), n));	0
com.google.javascript.jscomp.ReferenceCollectingCallback:224-return true;	0
com.google.javascript.jscomp.ReferenceCollectingCallback:231-return n != parent.getFirstChild();	0
com.google.javascript.jscomp.CodeGenerator:135-addExpr(first, p, context);	0
com.google.javascript.jscomp.CodeGenerator:136-cc.addOp(opstr, true);	0
com.google.javascript.jscomp.CodeGenerator:137-addExpr(last, p, rhsContext);	0
com.google.javascript.jscomp.CodeGenerator:422-add(first, Context.IN_FOR_INIT_CLAUSE);	0
com.google.javascript.jscomp.CodeGenerator:267-Preconditions.checkState(childCount == 1);	0
com.google.javascript.jscomp.CodeGenerator:272-if (n.getFirstChild().isNumber()) {	0
com.google.javascript.jscomp.CodeGenerator:275-cc.addOp(NodeUtil.opToStrNoFail(type), false);	0
com.google.javascript.jscomp.CodeGenerator:276-addExpr(first, NodeUtil.precedence(type), Context.OTHER);	0
com.google.javascript.jscomp.CodeGenerator:279-break;	0
com.google.javascript.jscomp.CodeGenerator:858-cc.endStatement(true);	0
com.google.javascript.jscomp.CodeGenerator:854-if (cc.shouldPreserveExtraBlocks()) {	0
com.google.javascript.jscomp.CodeGenerator:860-return;	0
com.google.javascript.jscomp.CodeGenerator:951-cc.listSeparator();	0
com.google.javascript.jscomp.CodeGenerator:952-addExpr(n, isArrayOrFunctionArgument ? 1 : 0,	0
com.google.javascript.jscomp.CodeGenerator:283-Preconditions.checkState(childCount == 3);	0
com.google.javascript.jscomp.CodeGenerator:284-int p = NodeUtil.precedence(type);	0
com.google.javascript.jscomp.CodeGenerator:285-Context rhsContext = Context.OTHER;	1
com.google.javascript.jscomp.CodeGenerator:286-addExpr(first, p + 1, context);	0
com.google.javascript.jscomp.CodeGenerator:287-cc.addOp("?", true);	0
com.google.javascript.jscomp.CodeGenerator:288-addExpr(first.getNext(), 1, rhsContext);	0
com.google.javascript.jscomp.CodeGenerator:289-cc.addOp(":", true);	0
com.google.javascript.jscomp.CodeGenerator:290-addExpr(last, 1, rhsContext);	0
com.google.javascript.jscomp.CodeGenerator:291-break;	0
com.google.javascript.jscomp.CodeGenerator:419-if (childCount == 4) {	0
com.google.javascript.jscomp.CodeGenerator:420-add("for(");	0
com.google.javascript.jscomp.CodeGenerator:421-if (first.isVar()) {	0
com.google.javascript.jscomp.CodeGenerator:424-addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);	0
com.google.javascript.jscomp.CodeGenerator:426-add(";");	0
com.google.javascript.jscomp.CodeGenerator:427-add(first.getNext());	0
com.google.javascript.jscomp.CodeGenerator:428-add(";");	0
com.google.javascript.jscomp.CodeGenerator:429-add(first.getNext().getNext());	0
com.google.javascript.jscomp.CodeGenerator:430-add(")");	0
com.google.javascript.jscomp.CodeGenerator:431-addNonEmptyStatement(	0
com.google.javascript.jscomp.CodeGenerator:877-nodeToProcess = firstAndOnlyChild;	0
com.google.javascript.jscomp.CodeGenerator:904-if (n.isLabel()) {	0
com.google.javascript.jscomp.CodeGenerator:921-return (n.isFunction() || n.isDo());	0
com.google.javascript.jscomp.CodeGenerator:928-add("(");	0
com.google.javascript.jscomp.CodeGenerator:929-add(n, Context.OTHER);	0
com.google.javascript.jscomp.CodeGenerator:930-add(")");	0
com.google.javascript.jscomp.CodeGenerator:193-add("return");	0
com.google.javascript.jscomp.CodeGenerator:194-if (childCount == 1) {	0
com.google.javascript.jscomp.CodeGenerator:195-add(first);	0
com.google.javascript.jscomp.CodeGenerator:199-cc.endStatement();	0
com.google.javascript.jscomp.CodeGenerator:200-break;	0
com.google.javascript.jscomp.CodeGenerator:244-Preconditions.checkState(childCount == 2);	0
com.google.javascript.jscomp.CodeGenerator:245-unrollBinaryOperator(n, Token.COMMA, ",", context,	0
com.google.javascript.jscomp.CodeGenerator:247-break;	0
com.google.javascript.jscomp.CodeGenerator:465-Preconditions.checkState(childCount == 0);	0
com.google.javascript.jscomp.CodeGenerator:466-break;	0
com.google.javascript.jscomp.CodeGenerator:881-if (count > 1) {	0
com.google.javascript.jscomp.ExploitAssigns:136-if (next.isQualifiedName()) {	0
com.google.javascript.jscomp.ExploitAssigns:137-String nextName = next.getQualifiedName();	0
com.google.javascript.jscomp.ExploitAssigns:138-if (value.isQualifiedName() &&	0
com.google.javascript.jscomp.ExploitAssigns:145-if (!isSafeReplacement(next, assign)) {	0
com.google.javascript.jscomp.ExploitAssigns:149-exprParent.removeChild(expr);	0
com.google.javascript.jscomp.ExploitAssigns:150-expr.removeChild(assign);	0
com.google.javascript.jscomp.ExploitAssigns:151-parent.replaceChild(next, assign);	0
com.google.javascript.jscomp.ExploitAssigns:152-return true;	0
com.google.javascript.jscomp.ExploitAssigns:155-return false;	0
com.google.javascript.jscomp.ExploitAssigns:208-if (node.isName()) {	0
com.google.javascript.jscomp.ExploitAssigns:211-Preconditions.checkArgument(node.isGetProp());	0
com.google.javascript.jscomp.ExploitAssigns:213-node = node.getFirstChild();	1
com.google.javascript.jscomp.ExploitAssigns:214-if (node.isName()	0
com.google.javascript.jscomp.ExploitAssigns:219-return true;	0
com.google.javascript.jscomp.ExploitAssigns:86-return true;	0
com.google.javascript.jscomp.ExploitAssigns:55-reportCodeChange();	0
com.google.javascript.jscomp.ExploitAssigns:58-collapseAssign(rightValue, expr, exprParent);	0
com.google.javascript.jscomp.ExploitAssigns:83-return !isLValue || value.getFirstChild().isThis();	0
com.google.javascript.jscomp.ExploitAssigns:170-Node leftSide = next.getFirstChild();	0
com.google.javascript.jscomp.ExploitAssigns:171-if (leftSide.isName() ||	0
com.google.javascript.jscomp.ExploitAssigns:175-parent = next;	0
com.google.javascript.jscomp.ExploitAssigns:176-next = leftSide.getNext();	0
com.google.javascript.jscomp.ExploitAssigns:177-break;	0
com.google.javascript.jscomp.ExploitAssigns:198-return false;	0
com.google.javascript.jscomp.ExploitAssigns:29-class ExploitAssigns extends AbstractPeepholeOptimization {	0
com.google.javascript.jscomp.ExploitAssigns:33-for (Node child = subtree.getFirstChild(); child != null;) {	0
com.google.javascript.jscomp.ExploitAssigns:34-Node next = child.getNext();	0
com.google.javascript.jscomp.ExploitAssigns:35-if (NodeUtil.isExprAssign(child)) {	0
com.google.javascript.jscomp.ExploitAssigns:36-collapseAssign(child.getFirstChild(), child, subtree);	0
com.google.javascript.jscomp.ExploitAssigns:38-child = next;	0
com.google.javascript.jscomp.ExploitAssigns:39-}	0
com.google.javascript.jscomp.ExploitAssigns:40-return subtree;	0
com.google.javascript.jscomp.ExploitAssigns:48-Node leftValue = assign.getFirstChild();	0
com.google.javascript.jscomp.ExploitAssigns:49-Node rightValue = leftValue.getNext();	0
com.google.javascript.jscomp.ExploitAssigns:50-if (isCollapsibleValue(leftValue, true) &&	0
com.google.javascript.jscomp.ExploitAssigns:53-} else if (isCollapsibleValue(rightValue, false) &&	0
com.google.javascript.jscomp.ExploitAssigns:56-} else if (rightValue.isAssign()) {	0
com.google.javascript.jscomp.ExploitAssigns:60-}	0
com.google.javascript.jscomp.ExploitAssigns:77-switch (value.getType()) {	0
com.google.javascript.jscomp.ExploitAssigns:89-return NodeUtil.isImmutableValue(value);	0
com.google.javascript.jscomp.ExploitAssigns:110-Node assign = expr.getFirstChild();	0
com.google.javascript.jscomp.ExploitAssigns:111-Node parent = exprParent;	0
com.google.javascript.jscomp.ExploitAssigns:112-Node next = expr.getNext();	0
com.google.javascript.jscomp.ExploitAssigns:113-while (next != null) {	0
com.google.javascript.jscomp.ExploitAssigns:114-switch (next.getType()) {	0
com.google.javascript.jscomp.ExploitAssigns:122-parent = next;	0
com.google.javascript.jscomp.ExploitAssigns:123-next = next.getFirstChild();	0
com.google.javascript.jscomp.ExploitAssigns:124-break;	0
com.google.javascript.jscomp.ExploitAssigns:52-reportCodeChange();	0
com.google.javascript.jscomp.ExploitAssigns:127-if (next.getFirstChild().hasChildren()) {	0
com.google.javascript.jscomp.TypeCheck:678-if (!leftTypeRestricted.canTestForShallowEqualityWith(	0
com.google.javascript.jscomp.TypeCheck:651-} else if (right.isTypeOf() && left.isString()) {	0
com.google.javascript.jscomp.TypeCheck:644-left = n.getFirstChild();	0
com.google.javascript.jscomp.TypeCheck:645-right = n.getLastChild();	0
com.google.javascript.jscomp.TypeCheck:647-if (left.isTypeOf()) {	0
com.google.javascript.jscomp.TypeCheck:655-leftType = getJSType(left);	0
com.google.javascript.jscomp.TypeCheck:656-rightType = getJSType(right);	0
com.google.javascript.jscomp.TypeCheck:667-JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();	0
com.google.javascript.jscomp.TypeCheck:668-JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();	0
com.google.javascript.jscomp.TypeCheck:670-TernaryValue result = TernaryValue.UNKNOWN;	0
com.google.javascript.jscomp.TypeCheck:671-if (n.getType() == Token.EQ || n.getType() == Token.NE) {	0
com.google.javascript.jscomp.TypeCheck:685-if (result != TernaryValue.UNKNOWN) {	0
com.google.javascript.jscomp.TypeCheck:689-ensureTyped(t, n, BOOLEAN_TYPE);	0
com.google.javascript.jscomp.TypeCheck:690-break;	0
com.google.javascript.jscomp.TypeCheck:1769-for (ObjectType extInterface : functionType.getExtendedInterfaces()) {	0
com.google.javascript.jscomp.TypeCheck:1779-if (functionType.getExtendedInterfacesCount() > 1) {	0
com.google.javascript.jscomp.TypeCheck:1662-visitParameterList(t, n, fnType);	0
com.google.javascript.jscomp.TypeCheck:1663-ensureTyped(t, n, fnType.getInstanceType());	0
com.google.javascript.jscomp.TypeCheck:1660-FunctionType fnType = type.toMaybeFunctionType();	0
com.google.javascript.jscomp.TypeCheck:1661-if (fnType != null) {	1
com.google.javascript.jscomp.TypeCheck:591-visitNew(t, n);	0
com.google.javascript.jscomp.TypeCheck:1657-Node constructor = n.getFirstChild();	0
com.google.javascript.jscomp.TypeCheck:1658-JSType type = getJSType(constructor).restrictByNotNullOrUndefined();	0
com.google.javascript.jscomp.TypeCheck:1659-if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {	0
com.google.javascript.jscomp.TypeCheck:1646-validator.expectCanAssignTo(	0
com.google.javascript.jscomp.TypeCheck:1862-Iterator<Node> arguments = call.children().iterator();	0
com.google.javascript.jscomp.TypeCheck:1863-arguments.next(); // skip the function name	0
com.google.javascript.jscomp.TypeCheck:1865-Iterator<Node> parameters = functionType.getParameters().iterator();	0
com.google.javascript.jscomp.TypeCheck:1866-int ordinal = 0;	0
com.google.javascript.jscomp.TypeCheck:1867-Node parameter = null;	0
com.google.javascript.jscomp.TypeCheck:1868-Node argument = null;	0
com.google.javascript.jscomp.TypeCheck:1869-while (arguments.hasNext() &&	0
com.google.javascript.jscomp.TypeCheck:1884-int numArgs = call.getChildCount() - 1;	0
com.google.javascript.jscomp.TypeCheck:1885-int minArgs = functionType.getMinArguments();	0
com.google.javascript.jscomp.TypeCheck:1886-int maxArgs = functionType.getMaxArguments();	0
com.google.javascript.jscomp.TypeCheck:1887-if (minArgs > numArgs || maxArgs < numArgs) {	0
com.google.javascript.jscomp.TypeCheck:1894-}	0
com.google.javascript.jscomp.TypeCheck:1639-info = varInfo;	0
com.google.javascript.jscomp.TypeCheck:1633-JSType valueType = getJSType(value);	0
com.google.javascript.jscomp.TypeCheck:1634-JSType nameType = var.getType();	0
com.google.javascript.jscomp.TypeCheck:1635-nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;	0
com.google.javascript.jscomp.TypeCheck:1637-JSDocInfo info = name.getJSDocInfo();	0
com.google.javascript.jscomp.TypeCheck:1638-if (info == null) {	0
com.google.javascript.jscomp.TypeCheck:1642-checkEnumAlias(t, info, value);	0
com.google.javascript.jscomp.TypeCheck:1643-if (var.isTypeInferred()) {	0
com.google.javascript.jscomp.TypeCheck:1228-ctorType.getAllImplementedInterfaces()) {	0
com.google.javascript.jscomp.TypeCheck:391-check(externsRoot, true);	0
com.google.javascript.jscomp.TypeCheck:424-inferJSDocInfo.process(node, null);	0
com.google.javascript.jscomp.TypeCheck:1257-return;	0
com.google.javascript.jscomp.TypeCheck:1342-ctor = maybeSuperInstanceType.getConstructor();	0
com.google.javascript.jscomp.MinimizeExitPoints:142-Node finallyBlock = n.getLastChild();	0
com.google.javascript.jscomp.MinimizeExitPoints:143-tryMinimizeExits(finallyBlock, exitType, labelName);	0
com.google.javascript.jscomp.MinimizeExitPoints:73-tryMinimizeExits(n.getLastChild(), Token.RETURN, null);	0
com.google.javascript.jscomp.MinimizeExitPoints:280-return !n.hasChildren();	0
com.google.javascript.jscomp.MinimizeExitPoints:128-Node tryBlock = n.getFirstChild();	0
com.google.javascript.jscomp.MinimizeExitPoints:129-tryMinimizeExits(tryBlock, exitType, labelName);	0
com.google.javascript.jscomp.MinimizeExitPoints:130-Node allCatchNodes = NodeUtil.getCatchBlock(n);	0
com.google.javascript.jscomp.MinimizeExitPoints:131-if (NodeUtil.hasCatchHandler(allCatchNodes)) {	0
com.google.javascript.jscomp.MinimizeExitPoints:141-if (NodeUtil.hasFinally(n)) {	1
com.google.javascript.jscomp.MinimizeExitPoints:38-MinimizeExitPoints(AbstractCompiler compiler) {	0
com.google.javascript.jscomp.MinimizeExitPoints:39-this.compiler = compiler;	0
com.google.javascript.jscomp.MinimizeExitPoints:40-}	0
com.google.javascript.jscomp.MinimizeExitPoints:49-switch (n.getType()) {	0
com.google.javascript.jscomp.MinimizeExitPoints:76-}	0
com.google.javascript.jscomp.MinimizeExitPoints:109-if (matchingExitNode(n, exitType, labelName)) {	0
com.google.javascript.jscomp.MinimizeExitPoints:110-NodeUtil.removeChild(n.getParent(), n);	0
com.google.javascript.jscomp.MinimizeExitPoints:111-compiler.reportCodeChange();	0
com.google.javascript.jscomp.MinimizeExitPoints:112-return;	0
com.google.javascript.jscomp.MinimizeExitPoints:116-if (n.isIf()) {	0
com.google.javascript.jscomp.MinimizeExitPoints:127-if (n.isTry()) {	0
com.google.javascript.jscomp.MinimizeExitPoints:148-if (n.isLabel()) {	0
com.google.javascript.jscomp.MinimizeExitPoints:156-if (!n.isBlock() || n.getLastChild() == null) {	0
com.google.javascript.jscomp.MinimizeExitPoints:157-return;	0
com.google.javascript.jscomp.MinimizeExitPoints:164-for (Node c : n.children()) {	0
com.google.javascript.jscomp.MinimizeExitPoints:167-if (c.isIf()) {	0
com.google.javascript.jscomp.MinimizeExitPoints:187-if (c == n.getLastChild()) {	0
com.google.javascript.jscomp.MinimizeExitPoints:188-break;	0
com.google.javascript.jscomp.MinimizeExitPoints:190-}	0
com.google.javascript.jscomp.MinimizeExitPoints:194-for (Node c = n.getLastChild(); c != null; c = n.getLastChild()) {	0
com.google.javascript.jscomp.MinimizeExitPoints:195-tryMinimizeExits(c, exitType, labelName);	0
com.google.javascript.jscomp.MinimizeExitPoints:197-if (c == n.getLastChild()) {	0
com.google.javascript.jscomp.MinimizeExitPoints:198-break;	0
com.google.javascript.jscomp.MinimizeExitPoints:201-}	0
com.google.javascript.jscomp.MinimizeExitPoints:277-if (n.getType() == type) {	0
com.google.javascript.jscomp.MinimizeExitPoints:278-if (type == Token.RETURN) {	0
com.google.javascript.jscomp.MinimizeExitPoints:290-return false;	0
com.google.javascript.jscomp.MinimizeExitPoints:285-return n.hasChildren()	0
com.google.javascript.jscomp.MinimizeExitPoints:51-tryMinimizeExits(	0
com.google.javascript.jscomp.MinimizeExitPoints:53-break;	0
com.google.javascript.jscomp.MinimizeExitPoints:57-tryMinimizeExits(NodeUtil.getLoopCodeBlock(n), Token.CONTINUE, null);	0
com.google.javascript.jscomp.MinimizeExitPoints:58-break;	0
com.google.javascript.jscomp.MinimizeExitPoints:132-Preconditions.checkState(allCatchNodes.hasOneChild());	0
com.google.javascript.jscomp.MinimizeExitPoints:133-Node catchNode = allCatchNodes.getFirstChild();	0
com.google.javascript.jscomp.MinimizeExitPoints:134-Node catchCodeBlock = catchNode.getLastChild();	0
com.google.javascript.jscomp.MinimizeExitPoints:135-tryMinimizeExits(catchCodeBlock, exitType, labelName);	0
com.google.javascript.jscomp.MinimizeExitPoints:224-return;	0
com.google.javascript.jscomp.MinimizeExitPoints:246-ifNode.addChildToBack(newDestBlock);	0
com.google.javascript.jscomp.MinimizeExitPoints:247-} else if (destBlock.isEmpty()) {	0
com.google.javascript.jscomp.MinimizeExitPoints:250-} else if (destBlock.isBlock()) {	0
com.google.javascript.jscomp.MinimizeExitPoints:252-newDestBlock = destBlock;	0
com.google.javascript.jscomp.PrepareAst:40-this(compiler, false);	0
com.google.javascript.jscomp.PrepareAst:41-}	0
com.google.javascript.jscomp.PrepareAst:43-PrepareAst(AbstractCompiler compiler, boolean checkOnly) {	0
com.google.javascript.jscomp.PrepareAst:44-this.compiler = compiler;	0
com.google.javascript.jscomp.PrepareAst:45-this.checkOnly = checkOnly;	0
com.google.javascript.jscomp.PrepareAst:46-}	0
com.google.javascript.jscomp.PrepareAst:56-if (checkOnly) {	0
com.google.javascript.jscomp.PrepareAst:63-if (externs != null) {	0
com.google.javascript.jscomp.PrepareAst:67-if (root != null) {	0
com.google.javascript.jscomp.PrepareAst:68-NodeTraversal.traverse(	0
com.google.javascript.jscomp.PrepareAst:72-}	0
com.google.javascript.jscomp.PrepareAst:49-if (checkOnly) {	0
com.google.javascript.jscomp.PrepareAst:50-Preconditions.checkState(false, "normalizeNodeType constraints violated");	0
com.google.javascript.jscomp.PrepareAst:52-}	0
com.google.javascript.jscomp.PrepareAst:57-normalizeNodeTypes(root);	0
com.google.javascript.jscomp.PrepareAst:64-NodeTraversal.traverse(	0
com.google.javascript.jscomp.PrepareAst:78-normalizeBlocks(n);	0
com.google.javascript.jscomp.PrepareAst:80-for (Node child = n.getFirstChild();	0
com.google.javascript.jscomp.PrepareAst:81-child != null; child = child.getNext()) {	0
com.google.javascript.jscomp.PrepareAst:84-Preconditions.checkState(child.getParent() == n);	0
com.google.javascript.jscomp.PrepareAst:86-normalizeNodeTypes(child);	0
com.google.javascript.jscomp.PrepareAst:88-}	0
com.google.javascript.jscomp.PrepareAst:94-if (NodeUtil.isControlStructure(n)	0
com.google.javascript.jscomp.PrepareAst:97-for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {	0
com.google.javascript.jscomp.PrepareAst:98-if (NodeUtil.isControlStructureCodeBlock(n,c) &&	0
com.google.javascript.jscomp.PrepareAst:100-Node newBlock = IR.block().srcref(n);	0
com.google.javascript.jscomp.PrepareAst:101-n.replaceChild(c, newBlock);	0
com.google.javascript.jscomp.PrepareAst:102-if (!c.isEmpty()) {	0
com.google.javascript.jscomp.PrepareAst:103-newBlock.addChildrenToFront(c);	0
com.google.javascript.jscomp.PrepareAst:105-newBlock.setWasEmptyNode(true);	0
com.google.javascript.jscomp.PrepareAst:107-c = newBlock;	0
com.google.javascript.jscomp.PrepareAst:108-reportChange();	0
com.google.javascript.jscomp.PrepareAst:112-}	0
com.google.javascript.jscomp.CollapseProperties:122-namespace = new GlobalNamespace(compiler, externs, root);	0
com.google.javascript.jscomp.CollapseProperties:223-ReferenceCollectingCallback.Reference aliasRef =	0
com.google.javascript.jscomp.CollapseProperties:226-Node newNode = alias.node.cloneTree();	0
com.google.javascript.jscomp.CollapseProperties:227-aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);	0
com.google.javascript.jscomp.CollapseProperties:228-newNodes.add(newNode);	0
com.google.javascript.jscomp.CollapseProperties:181-name.removeRef(ref);	0
com.google.javascript.jscomp.CollapseProperties:220-int size = aliasRefs.references.size();	0
com.google.javascript.jscomp.CollapseProperties:221-Set<Node> newNodes = Sets.newHashSetWithExpectedSize(size - 1);	0
com.google.javascript.jscomp.CollapseProperties:222-for (int i = 1; i < size; i++) {	0
com.google.javascript.jscomp.CollapseProperties:232-aliasParent.replaceChild(alias.node, IR.nullNode());	0
com.google.javascript.jscomp.CollapseProperties:233-compiler.reportCodeChange();	0
com.google.javascript.jscomp.CollapseProperties:237-namespace.scanNewNodes(alias.scope, newNodes);	0
com.google.javascript.jscomp.CollapseProperties:238-return true;	0
com.google.javascript.jscomp.CollapseProperties:207-Scope scope = alias.scope;	0
com.google.javascript.jscomp.CollapseProperties:208-Var aliasVar = scope.getVar(aliasParent.getString());	0
com.google.javascript.jscomp.CollapseProperties:209-ReferenceCollectingCallback collector =	0
com.google.javascript.jscomp.CollapseProperties:213-(new NodeTraversal(compiler, collector)).traverseAtScope(scope);	0
com.google.javascript.jscomp.CollapseProperties:215-ReferenceCollection aliasRefs = collector.getReferences(aliasVar);	0
com.google.javascript.jscomp.CollapseProperties:216-if (aliasRefs.isWellDefined()	0
com.google.javascript.jscomp.CollapseProperties:180-if (inlineAliasIfPossible(ref, namespace)) {	0
com.google.javascript.jscomp.CollapseProperties:204-Node aliasParent = alias.node.getParent();	0
com.google.javascript.jscomp.CollapseProperties:205-if (aliasParent.isName()) {	0
com.google.javascript.jscomp.CollapseProperties:810-Ref ref = n.getDeclaration();	0
com.google.javascript.jscomp.CollapseProperties:811-String fnName = ref.node.getString();	0
com.google.javascript.jscomp.CollapseProperties:812-addStubsForUndeclaredProperties(	0
com.google.javascript.jscomp.CollapseProperties:814-}	0
com.google.javascript.jscomp.CollapseProperties:645-updateFunctionDeclarationAtFunctionNode(n, canCollapseChildNames);	0
com.google.javascript.jscomp.CollapseProperties:806-if (!canCollapseChildNames) {	0
com.google.javascript.jscomp.CollapseProperties:176-List<Ref> refs = Lists.newArrayList(name.getRefs());	0
com.google.javascript.jscomp.CollapseProperties:177-for (Ref ref : refs) {	0
com.google.javascript.jscomp.CollapseProperties:178-if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {	0
com.google.javascript.jscomp.CollapseProperties:184-}	0
com.google.javascript.jscomp.CollapseProperties:932-Preconditions.checkState(n.canCollapseUnannotatedChildNames());	0
com.google.javascript.jscomp.CollapseProperties:933-Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));	0
com.google.javascript.jscomp.CollapseProperties:934-Preconditions.checkNotNull(addAfter);	0
com.google.javascript.jscomp.CollapseProperties:935-int numStubs = 0;	0
com.google.javascript.jscomp.CollapseProperties:936-if (n.props != null) {	0
com.google.javascript.jscomp.CollapseProperties:957-return numStubs;	0
com.google.javascript.jscomp.CollapseProperties:502-updateObjLitOrFunctionDeclaration(n, alias, canCollapseChildNames);	0
com.google.javascript.jscomp.CollapseProperties:623-Ref decl = n.getDeclaration();	0
com.google.javascript.jscomp.CollapseProperties:624-if (decl == null) {	0
com.google.javascript.jscomp.CollapseProperties:630-if (decl.getTwin() != null) {	0
com.google.javascript.jscomp.CollapseProperties:636-switch (decl.node.getParent().getType()) {	0
com.google.javascript.jscomp.CollapseProperties:648-}	0
com.google.javascript.jscomp.CollapseProperties:135-flattenReferencesToCollapsibleDescendantNames(n, n.getBaseName());	0
com.google.javascript.jscomp.CollapseProperties:136-}	0
com.google.javascript.jscomp.CollapseProperties:142-collapseDeclarationOfNameAndDescendants(n, n.getBaseName());	0
com.google.javascript.jscomp.CollapseProperties:143-}	0
com.google.javascript.jscomp.CollapseProperties:165-Name name = workList.pop();	0
com.google.javascript.jscomp.CollapseProperties:168-if (name.type == Name.Type.GET || name.type == Name.Type.SET) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:776-Node lhs = thenOp.getFirstChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:777-if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:784-n.removeChild(cond);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:785-Node assignName = thenOp.removeFirstChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:786-Node thenExpr = thenOp.removeFirstChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:787-Node elseExpr = elseOp.getLastChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:788-elseOp.removeChild(elseExpr);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:790-Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:791-Node assign = new Node(thenOp.getType(), assignName, hookNode)	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:793-Node expr = NodeUtil.newExpr(assign);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:794-parent.replaceChild(n, expr);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:795-reportCodeChange();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:797-return expr;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:775-if (NodeUtil.isAssignmentOp(thenOp)) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:771-Node thenOp = getBlockExpression(thenBranch).getFirstChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:772-Node elseOp = getBlockExpression(elseBranch).getFirstChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:773-if (thenOp.getType() == elseOp.getType()) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:963-Preconditions.checkState(isFoldableExpressBlock(n));	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:964-return n.getFirstChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:736-tryRemoveRepeatedStatements(n);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:740-if (cond.isNot() && !consumesDanglingElse(elseBranch)) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:749-if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:767-boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:768-boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:770-if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:893-Preconditions.checkState(n.isIf());	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:895-Node parent = n.getParent();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:896-if (!NodeUtil.isStatementBlock(parent)) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:902-Node cond = n.getFirstChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:903-Node trueBranch = cond.getNext();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:904-Node falseBranch = trueBranch.getNext();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:905-Preconditions.checkNotNull(trueBranch);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:906-Preconditions.checkNotNull(falseBranch);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:909-Node lastTrue = trueBranch.getLastChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:910-Node lastFalse = falseBranch.getLastChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:911-if (lastTrue == null || lastFalse == null	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:913-break;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:920-}	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:987-if (n.isBlock()) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:988-if (n.hasOneChild()) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:989-Node first = n.getFirstChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:990-if (first.isReturn()) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:996-return false;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:937-if (maybeExpr.getFirstChild().isCall()) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:950-return true;	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:929-Node maybeExpr = n.getFirstChild();	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:930-if (maybeExpr.isExprResult()) {	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:110-tryMinimizeCondition(node.getFirstChild());	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:111-return tryMinimizeIf(node);	0
com.google.javascript.jscomp.PeepholeSubstituteAlternateSyntax:638-Node parent = n.getParent();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:947-type = createJSTypeExpression(newNode(Token.QMARK));	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:958-ExtractionInfo returnDescriptionInfo =	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1838-restoreLookAhead(token);	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1839-return reportGenericTypeSyntaxWarning();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:2303-return reportTypeSyntaxWarning("msg.jsdoc.type.syntax");	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:957-if (jsdocBuilder.shouldParseDocumentation()) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:946-if (type == null) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:950-if (!jsdocBuilder.recordReturnType(type)) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:2341-unreadToken = token;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:2342-}	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1483-builder.append(' ');	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1475-if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1481-} else if (builder.length() > 0) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:2298-parser.addTypeWarning(warning, stream.getLineno(), stream.getCharno());	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:2299-return null;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1503-jsdocBuilder.markText(multilineText, startLineno, startCharno,	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1379-return extractMultilineTextualBlock(token, WhitespaceOption.SINGLE_LINE);	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1425-line = line.trim();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1496-multilineText = multilineText.trim();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:209-ExtractionInfo blockInfo = extractBlockComment(token);	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:210-token = blockInfo.token;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:211-if (!blockInfo.string.isEmpty()) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:214-} else {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1413-if (token == JsDocToken.EOC || token == JsDocToken.EOL ||	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1418-stream.update();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1419-int startLineno = stream.getLineno();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1420-int startCharno = stream.getCharno() + 1;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1423-String line = getRemainingJSDocLine();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1424-if (option != WhitespaceOption.PRESERVE) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1428-StringBuilder builder = new StringBuilder();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1429-builder.append(line);	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1431-state = State.SEARCHING_ANNOTATION;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1432-token = next();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1434-boolean ignoreStar = false;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1439-int lineStartChar = -1;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1442-switch (token) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1470-ignoreStar = false;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1471-state = State.SEARCHING_ANNOTATION;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1473-boolean isEOC = token == JsDocToken.EOC;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1474-if (!isEOC) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1487-if (token == JsDocToken.EOC ||	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1493-String multilineText = builder.toString();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1495-if (option != WhitespaceOption.PRESERVE) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1499-int endLineno = stream.getLineno();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1500-int endCharno = stream.getCharno();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1502-if (multilineText.length() > 0) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1537-StringBuilder builder = new StringBuilder();	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1539-boolean ignoreStar = true;	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1542-switch (token) {	0
com.google.javascript.jscomp.parsing.JsDocInfoParser:1546-return new ExtractionInfo(builder.toString().trim(), token);	0
com.google.javascript.rhino.jstype.JSType:234-return false;	0
com.google.javascript.rhino.jstype.JSType:489-if (that.isAllType() || that.isNoType() || that.isUnknownType()) {	0
com.google.javascript.rhino.jstype.JSType:492-if (that.isEnumElementType()) {	0
com.google.javascript.rhino.jstype.JSType:495-if (that instanceof UnionType) {	0
com.google.javascript.rhino.jstype.JSType:507-return null;	0
com.google.javascript.rhino.jstype.JSType:665-if (that instanceof UnionType) {	0
com.google.javascript.rhino.jstype.JSType:671-switch (this.testForEquality(that)) {	0
com.google.javascript.rhino.jstype.JSType:677-return new TypePair(this, that);	0
com.google.javascript.rhino.jstype.JSType:698-if (that instanceof UnionType) {	0
com.google.javascript.rhino.jstype.JSType:704-switch (this.testForEquality(that)) {	0
com.google.javascript.rhino.jstype.JSType:706-return new TypePair(null, null);	1
com.google.javascript.rhino.jstype.JSType:822-return true;	0
com.google.javascript.rhino.jstype.JSType:103-JSType(JSTypeRegistry registry) {	0
com.google.javascript.rhino.jstype.JSType:71-private boolean resolved = false;	0
com.google.javascript.rhino.jstype.JSType:72-private JSType resolveResult = null;	0
com.google.javascript.rhino.jstype.JSType:104-this.registry = registry;	0
com.google.javascript.rhino.jstype.JSType:105-}	0
com.google.javascript.rhino.jstype.JSType:91-static final Comparator<JSType> ALPHA = new Comparator<JSType>() {	0
com.google.javascript.rhino.jstype.JSType:111-return registry.getNativeType(typeId);	0
com.google.javascript.rhino.jstype.JSType:131-return false;	0
com.google.javascript.rhino.jstype.JSType:135-return false;	0
com.google.javascript.rhino.jstype.JSType:139-return isNoType() || isNoObjectType();	0
com.google.javascript.rhino.jstype.JSType:214-return false;	0
com.google.javascript.rhino.jstype.JSType:218-return false;	0
com.google.javascript.rhino.jstype.JSType:304-if (jsType instanceof ProxyObjectType) {	0
com.google.javascript.rhino.jstype.JSType:311-return this == jsType;	0
com.google.javascript.rhino.jstype.JSType:321-return (jsType instanceof JSType) ?	0
com.google.javascript.rhino.jstype.JSType:327-return System.identityHashCode(this);	0
com.google.javascript.rhino.jstype.JSType:450-return this instanceof ObjectType ? (ObjectType) this : null;	0
com.google.javascript.rhino.jstype.JSType:817-if (thatType.isUnknownType()) {	0
com.google.javascript.rhino.jstype.JSType:821-if (thisType.isEquivalentTo(thatType)) {	0
com.google.javascript.rhino.jstype.JSType:825-if (thatType.isAllType()) {	0
com.google.javascript.rhino.jstype.JSType:829-if (thatType instanceof UnionType) {	0
com.google.javascript.rhino.jstype.JSType:838-if (thatType instanceof NamedType) {	0
com.google.javascript.rhino.jstype.JSType:841-return false;	0
com.google.javascript.rhino.jstype.JSType:120-return null;	0
com.google.javascript.rhino.jstype.JSType:128-void forgiveUnknownNames() {}	0
com.google.javascript.rhino.jstype.JSType:143-return false;	0
com.google.javascript.rhino.jstype.JSType:147-return false;	0
com.google.javascript.rhino.jstype.JSType:152-return false;	0
com.google.javascript.rhino.jstype.JSType:156-return false;	0
com.google.javascript.rhino.jstype.JSType:160-return false;	0
com.google.javascript.rhino.jstype.JSType:164-return false;	0
com.google.javascript.rhino.jstype.JSType:172-return this.isSubtype(	0
com.google.javascript.rhino.jstype.JSType:181-return this.isSubtype(	0
com.google.javascript.rhino.jstype.JSType:186-return false;	0
com.google.javascript.rhino.jstype.JSType:190-return false;	0
com.google.javascript.rhino.jstype.JSType:194-return false;	0
com.google.javascript.rhino.jstype.JSType:198-return false;	0
com.google.javascript.rhino.jstype.JSType:202-return false;	0
com.google.javascript.jscomp.PeepholeFoldConstants:1220-return tryFoldArrayAccess(n, left, right);	0
com.google.javascript.jscomp.PeepholeFoldConstants:1279-Node parent = n.getParent();	0
com.google.javascript.jscomp.PeepholeFoldConstants:1284-if (right.getType() != Token.NUMBER) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:1290-double index = right.getDouble();	0
com.google.javascript.jscomp.PeepholeFoldConstants:1291-int intIndex = (int) index;	0
com.google.javascript.jscomp.PeepholeFoldConstants:1292-if (intIndex != index) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:1297-if (intIndex < 0) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:1302-Node elem = left.getFirstChild();	0
com.google.javascript.jscomp.PeepholeFoldConstants:1303-for (int i = 0; elem != null && i < intIndex; i++) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:1307-if (elem == null) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:1308-error(INDEX_OUT_OF_BOUNDS_ERROR, right);	0
com.google.javascript.jscomp.PeepholeFoldConstants:1309-return n;	0
com.google.javascript.jscomp.PeepholeFoldConstants:1219-if (left.getType() == Token.ARRAYLIT) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:105-return tryFoldGetElem(subtree, left, right);	0
com.google.javascript.jscomp.PeepholeFoldConstants:1213-Preconditions.checkArgument(n.getType() == Token.GETELEM);	0
com.google.javascript.jscomp.PeepholeFoldConstants:1215-if (left.getType() == Token.OBJECTLIT) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:447-return n;	0
com.google.javascript.jscomp.PeepholeFoldConstants:120-return tryFoldAssign(subtree, left, right);	0
com.google.javascript.jscomp.PeepholeFoldConstants:441-Preconditions.checkArgument(n.getType() == Token.ASSIGN);	0
com.google.javascript.jscomp.PeepholeFoldConstants:444-if (!right.hasChildren() ||	0
com.google.javascript.jscomp.PeepholeFoldConstants:100-switch(subtree.getType()) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:29-class PeepholeFoldConstants extends AbstractPeepholeOptimization {	0
com.google.javascript.jscomp.PeepholeFoldConstants:1072-return Token.FALSE;	0
com.google.javascript.jscomp.PeepholeFoldConstants:31-static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =	0
com.google.javascript.jscomp.PeepholeFoldConstants:36-static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =	0
com.google.javascript.jscomp.PeepholeFoldConstants:41-static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =	0
com.google.javascript.jscomp.PeepholeFoldConstants:46-static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =	0
com.google.javascript.jscomp.PeepholeFoldConstants:51-static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(	0
com.google.javascript.jscomp.PeepholeFoldConstants:55-static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(	0
com.google.javascript.jscomp.PeepholeFoldConstants:59-private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);	0
com.google.javascript.jscomp.PeepholeFoldConstants:63-switch(subtree.getType()) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:81-tryReduceOperandsForOp(subtree);	0
com.google.javascript.jscomp.PeepholeFoldConstants:82-return tryFoldBinaryOperator(subtree);	0
com.google.javascript.jscomp.PeepholeFoldConstants:87-Node left = subtree.getFirstChild();	0
com.google.javascript.jscomp.PeepholeFoldConstants:89-if (left == null) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:90-return subtree;	0
com.google.javascript.jscomp.PeepholeFoldConstants:93-Node right = left.getNext();	0
com.google.javascript.jscomp.PeepholeFoldConstants:95-if (right == null) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:96-return subtree;	0
com.google.javascript.jscomp.PeepholeFoldConstants:167-switch (n.getType()) {	0
com.google.javascript.jscomp.PeepholeFoldConstants:204-}	0
com.google.javascript.jscomp.PeepholeFoldConstants:65-return tryFoldCtorCall(subtree);	0
com.google.javascript.jscomp.PeepholeFoldConstants:68-return tryFoldTypeof(subtree);	0
com.google.javascript.jscomp.PeepholeFoldConstants:74-tryReduceOperandsForOp(subtree);	0
com.google.javascript.jscomp.PeepholeFoldConstants:75-return tryFoldUnaryOperator(subtree);	0
com.google.javascript.jscomp.PeepholeFoldConstants:78-return tryReduceVoid(subtree);	0
com.google.javascript.jscomp.PeepholeFoldConstants:102-return tryFoldGetProp(subtree, left, right);	0
com.google.javascript.jscomp.PeepholeFoldConstants:108-return tryFoldInstanceof(subtree, left, right);	0
com.google.javascript.jscomp.PeepholeFoldConstants:112-return tryFoldAndOr(subtree, left, right);	0
com.google.javascript.jscomp.PeepholeFoldConstants:117-return tryFoldShift(subtree, left, right);	0
com.google.javascript.jscomp.TypedScopeCreator:229-NodeTraversal.traverse(compiler, functionNode.getLastChild(),	0
com.google.javascript.jscomp.TypedScopeCreator:224-JSType type = functionNode.getJSType();	0
com.google.javascript.jscomp.TypedScopeCreator:225-if (type != null && type.isFunctionType()) {	0
com.google.javascript.jscomp.TypedScopeCreator:226-FunctionType fnType = type.toMaybeFunctionType();	0
com.google.javascript.jscomp.TypedScopeCreator:227-ObjectType fnThisType = fnType.getTypeOfThis();	0
com.google.javascript.jscomp.TypedScopeCreator:228-if (!fnThisType.isUnknownType()) {	0
com.google.javascript.jscomp.TypedScopeCreator:233-}	0
com.google.javascript.jscomp.TypedScopeCreator:211-newScope = new Scope(parent, root);	0
com.google.javascript.jscomp.TypedScopeCreator:212-LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);	0
com.google.javascript.jscomp.TypedScopeCreator:213-scopeBuilder = localScopeBuilder;	0
com.google.javascript.jscomp.TypedScopeCreator:214-localScopeBuilder.build();	0
com.google.javascript.jscomp.TypedScopeCreator:2048-return functionAnalysisResults.get(n);	0
com.google.javascript.jscomp.TypedScopeCreator:2042-if (n == null) {	0
com.google.javascript.jscomp.TypedScopeCreator:392-return typeRegistry.getNativeType(nativeType);	0
com.google.javascript.jscomp.TypedScopeCreator:176-this(compiler, compiler.getCodingConvention());	0
com.google.javascript.jscomp.TypedScopeCreator:177-}	0
com.google.javascript.jscomp.TypedScopeCreator:197-Scope newScope = null;	0
com.google.javascript.jscomp.TypedScopeCreator:198-AbstractScopeBuilder scopeBuilder = null;	0
com.google.javascript.jscomp.TypedScopeCreator:199-if (parent == null) {	0
com.google.javascript.jscomp.TypedScopeCreator:201-(new FirstOrderFunctionAnalyzer(compiler, functionAnalysisResults))	0
com.google.javascript.jscomp.TypedScopeCreator:205-newScope = createInitialScope(root);	0
com.google.javascript.jscomp.TypedScopeCreator:207-GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);	0
com.google.javascript.jscomp.TypedScopeCreator:208-scopeBuilder = globalScopeBuilder;	0
com.google.javascript.jscomp.TypedScopeCreator:209-NodeTraversal.traverse(compiler, root, scopeBuilder);	0
com.google.javascript.jscomp.TypedScopeCreator:210-} else {	0
com.google.javascript.jscomp.TypedScopeCreator:217-scopeBuilder.resolveStubDeclarations();	0
com.google.javascript.jscomp.TypedScopeCreator:218-scopeBuilder.resolveTypes();	0
com.google.javascript.jscomp.TypedScopeCreator:223-for (Node functionNode : scopeBuilder.nonExternFunctions) {	0
com.google.javascript.jscomp.TypedScopeCreator:235-if (parent == null) {	0
com.google.javascript.jscomp.TypedScopeCreator:236-codingConvention.defineDelegateProxyPrototypeProperties(	0
com.google.javascript.jscomp.TypedScopeCreator:240-return newScope;	0
com.google.javascript.jscomp.TypedScopeCreator:180-CodingConvention codingConvention) {	0
com.google.javascript.jscomp.TypedScopeCreator:143-private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();	0
com.google.javascript.jscomp.TypedScopeCreator:144-private final Map<String, String> delegateCallingConventions =	0
com.google.javascript.jscomp.TypedScopeCreator:148-private final Map<Node, AstFunctionContents> functionAnalysisResults =	0
com.google.javascript.jscomp.TypedScopeCreator:181-this.compiler = compiler;	0
com.google.javascript.jscomp.TypedScopeCreator:182-this.validator = compiler.getTypeValidator();	0
com.google.javascript.jscomp.TypedScopeCreator:183-this.codingConvention = codingConvention;	0
com.google.javascript.jscomp.TypedScopeCreator:184-this.typeRegistry = compiler.getTypeRegistry();	0
com.google.javascript.jscomp.TypedScopeCreator:185-this.typeParsingErrorReporter = typeRegistry.getErrorReporter();	0
com.google.javascript.jscomp.TypedScopeCreator:186-}	0
com.google.javascript.jscomp.TypedScopeCreator:100-static final String DELEGATE_PROXY_SUFFIX =	0
com.google.javascript.jscomp.TypedScopeCreator:103-static final DiagnosticType MALFORMED_TYPEDEF =	0
com.google.javascript.jscomp.TypedScopeCreator:108-static final DiagnosticType ENUM_INITIALIZER =	0
com.google.javascript.jscomp.TypedScopeCreator:113-static final DiagnosticType CTOR_INITIALIZER =	0
com.google.javascript.jscomp.TypedScopeCreator:118-static final DiagnosticType IFACE_INITIALIZER =	0
com.google.javascript.jscomp.TypedScopeCreator:123-static final DiagnosticType CONSTRUCTOR_EXPECTED =	0
com.google.javascript.jscomp.TypedScopeCreator:128-static final DiagnosticType UNKNOWN_LENDS =	0
com.google.javascript.jscomp.TypedScopeCreator:133-static final DiagnosticType LENDS_ON_NON_OBJECT =	0
com.google.javascript.jscomp.TypedScopeCreator:298-NodeTraversal.traverse(	0
com.google.javascript.jscomp.TypeInference:955-redeclareSimpleVar(scope, node, narrowed);	0
com.google.javascript.jscomp.TypeInference:945-if (node.isThis()) {	0
com.google.javascript.jscomp.TypeInference:950-scope = scope.createChildFlowScope();	0
com.google.javascript.jscomp.TypeInference:951-if (node.isGetProp()) {	0
com.google.javascript.jscomp.TypeInference:957-return scope;	0
com.google.javascript.jscomp.TypeInference:1369-scope = narrowScope(scope, n, narrowed);	0
com.google.javascript.jscomp.TypeInference:1030-JSType iParameterType = getJSType(iParameter);	0
com.google.javascript.jscomp.TypeInference:1031-Node iArgument = n.getChildAtIndex(i + 1);	0
com.google.javascript.jscomp.TypeInference:1032-JSType iArgumentType = getJSType(iArgument);	0
com.google.javascript.jscomp.TypeInference:1033-inferPropertyTypesToMatchConstraint(iArgumentType, iParameterType);	0
com.google.javascript.jscomp.TypeInference:1038-JSType restrictedParameter = iParameterType	0
com.google.javascript.jscomp.TypeInference:1041-if (restrictedParameter != null) {	0
com.google.javascript.jscomp.TypeInference:1048-i++;	0
com.google.javascript.jscomp.TypeInference:1049-}	0
com.google.javascript.jscomp.TypeInference:1025-if (i + 1 >= childCount) {	0
com.google.javascript.jscomp.TypeInference:894-FunctionType fnType = functionType.toMaybeFunctionType();	0
com.google.javascript.jscomp.TypeInference:895-n.setJSType(fnType.getReturnType());	0
com.google.javascript.jscomp.TypeInference:896-backwardsInferenceFromCallSite(n, fnType);	0
com.google.javascript.jscomp.TypeInference:342-scope = traverseCall(n, scope);	0
com.google.javascript.jscomp.TypeInference:343-break;	0
com.google.javascript.jscomp.TypeInference:889-scope = traverseChildren(n, scope);	0
com.google.javascript.jscomp.TypeInference:891-Node left = n.getFirstChild();	0
com.google.javascript.jscomp.TypeInference:892-JSType functionType = getJSType(left).restrictByNotNullOrUndefined();	0
com.google.javascript.jscomp.TypeInference:893-if (functionType.isFunctionType()) {	0
com.google.javascript.jscomp.TypeInference:897-} else if (functionType.isEquivalentTo(	0
com.google.javascript.jscomp.TypeInference:902-scope = tightenTypesAfterAssertions(scope, n);	0
com.google.javascript.jscomp.TypeInference:903-return scope;	0
com.google.javascript.jscomp.TypeInference:908-Node left = callNode.getFirstChild();	0
com.google.javascript.jscomp.TypeInference:909-Node firstParam = left.getNext();	0
com.google.javascript.jscomp.TypeInference:910-AssertionFunctionSpec assertionFunctionSpec =	0
com.google.javascript.jscomp.TypeInference:912-if (assertionFunctionSpec == null || firstParam == null) {	0
com.google.javascript.jscomp.TypeInference:913-return scope;	0
com.google.javascript.jscomp.TypeInference:1624-Preconditions.checkState(nameNode.isName());	0
com.google.javascript.jscomp.TypeInference:1625-String varName = nameNode.getString();	0
com.google.javascript.jscomp.TypeInference:1626-if (varType == null) {	0
com.google.javascript.jscomp.TypeInference:1629-if (isUnflowable(syntacticScope.getVar(varName))) {	0
com.google.javascript.jscomp.TypeInference:1632-scope.inferSlotType(varName, varType);	0
com.google.javascript.jscomp.TypeInference:1633-}	0
com.google.javascript.jscomp.TypeInference:1050-}	0
com.google.javascript.jscomp.TypeInference:1237-return false;	0
com.google.javascript.jscomp.TypeInference:1002-return;	0
com.google.javascript.jscomp.TypeInference:986-boolean updatedFnType = inferTemplatedTypesForCall(n, fnType);	0
com.google.javascript.jscomp.TypeInference:987-if (updatedFnType) {	0
com.google.javascript.jscomp.TypeInference:990-updateTypeOfParameters(n, fnType);	0
com.google.javascript.jscomp.TypeInference:991-updateBind(n);	0
com.google.javascript.jscomp.TypeInference:992-}	0
com.google.javascript.jscomp.TypeInference:999-CodingConvention.Bind bind =	0
com.google.javascript.jscomp.TypeInference:1001-if (bind == null) {	0
com.google.javascript.jscomp.TypeInference:1022-int i = 0;	0
com.google.javascript.jscomp.TypeInference:1023-int childCount = n.getChildCount();	0
org.apache.commons.codec.binary.Base64:423-resizeBuf();	0
org.apache.commons.codec.binary.Base64:262-this(lineLength, lineSeparator, false);	0
org.apache.commons.codec.binary.Base64:263-}	0
org.apache.commons.codec.binary.Base64:287-public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {	0
org.apache.commons.codec.binary.Base64:288-this.lineLength = lineLength;	0
org.apache.commons.codec.binary.Base64:289-this.lineSeparator = new byte[lineSeparator.length];	0
org.apache.commons.codec.binary.Base64:290-System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);	0
org.apache.commons.codec.binary.Base64:291-if (lineLength > 0) {	0
org.apache.commons.codec.binary.Base64:292-this.encodeSize = 4 + lineSeparator.length;	0
org.apache.commons.codec.binary.Base64:296-this.decodeSize = this.encodeSize - 1;	0
org.apache.commons.codec.binary.Base64:297-if (containsBase64Byte(lineSeparator)) {	0
org.apache.commons.codec.binary.Base64:306-this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;	0
org.apache.commons.codec.binary.Base64:307-}	0
org.apache.commons.codec.binary.Base64:59-static final byte[] CHUNK_SEPARATOR = {'\r','\n'};	0
org.apache.commons.codec.binary.Base64:69-private static final byte[] STANDARD_ENCODE_TABLE = {	0
org.apache.commons.codec.binary.Base64:82-private static final byte[] URL_SAFE_ENCODE_TABLE = {	0
org.apache.commons.codec.binary.Base64:109-private static final byte[] DECODE_TABLE = {	0
org.apache.commons.codec.binary.Base64:333-return buf != null ? pos - readPos : 0;	0
org.apache.commons.codec.binary.Base64:338-if (buf == null) {	0
org.apache.commons.codec.binary.Base64:339-buf = new byte[8192];	0
org.apache.commons.codec.binary.Base64:340-pos = 0;	0
org.apache.commons.codec.binary.Base64:341-readPos = 0;	0
org.apache.commons.codec.binary.Base64:347-}	0
org.apache.commons.codec.binary.Base64:362-if (buf != null) {	0
org.apache.commons.codec.binary.Base64:363-int len = Math.min(avail(), bAvail);	0
org.apache.commons.codec.binary.Base64:364-if (buf != b) {	0
org.apache.commons.codec.binary.Base64:365-System.arraycopy(buf, readPos, b, bPos, len);	0
org.apache.commons.codec.binary.Base64:366-readPos += len;	0
org.apache.commons.codec.binary.Base64:367-if (readPos >= pos) {	0
org.apache.commons.codec.binary.Base64:375-return len;	0
org.apache.commons.codec.binary.Base64:415-if (eof) {	0
org.apache.commons.codec.binary.Base64:420-if (inAvail < 0) {	0
org.apache.commons.codec.binary.Base64:421-eof = true;	0
org.apache.commons.codec.binary.Base64:422-if (buf == null || buf.length - pos < encodeSize) {	0
org.apache.commons.codec.binary.Base64:425-switch (modulus) {	0
org.apache.commons.codec.binary.Base64:446-if (lineLength > 0) {	1
org.apache.commons.codec.binary.Base64:447-System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);	0
org.apache.commons.codec.binary.Base64:448-pos += lineSeparator.length;	0
org.apache.commons.codec.binary.Base64:473-}	0
org.apache.commons.codec.binary.Base64:554-return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);	0
org.apache.commons.codec.binary.Base64:583-for (int i = 0; i < arrayOctet.length; i++) {	0
org.apache.commons.codec.binary.Base64:584-if (isBase64(arrayOctet[i])) {	0
org.apache.commons.codec.binary.Base64:588-return false;	0
org.apache.commons.codec.binary.Base64:324-return this.buf != null;	0
org.apache.commons.codec.binary.Base64:368-buf = null;	0
org.apache.commons.codec.binary.Base64:211-this(false);	0
org.apache.commons.codec.binary.Base64:212-}	0
org.apache.commons.codec.binary.Base64:224-this(CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);	0
org.apache.commons.codec.binary.Base64:225-}	0
org.apache.commons.codec.binary.Base64:241-this(lineLength, CHUNK_SEPARATOR);	0
org.apache.commons.codec.language.DoubleMetaphone:65-super();	0
org.apache.commons.codec.language.DoubleMetaphone:59-protected int maxCodeLen = 4;	0
org.apache.commons.codec.language.DoubleMetaphone:66-}	0
org.apache.commons.codec.language.DoubleMetaphone:47-private static final String[] SILENT_START =	0
org.apache.commons.codec.language.DoubleMetaphone:49-private static final String[] L_R_N_M_B_H_F_V_W_SPACE =	0
org.apache.commons.codec.language.DoubleMetaphone:51-private static final String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER =	0
org.apache.commons.codec.language.DoubleMetaphone:53-private static final String[] L_T_K_S_N_M_B_Z =	0
org.apache.commons.codec.language.DoubleMetaphone:87-value = cleanInput(value);	0
org.apache.commons.codec.language.DoubleMetaphone:88-if (value == null) {	0
org.apache.commons.codec.language.DoubleMetaphone:92-boolean slavoGermanic = isSlavoGermanic(value);	0
org.apache.commons.codec.language.DoubleMetaphone:93-int index = isSilentStart(value) ? 1 : 0;	0
org.apache.commons.codec.language.DoubleMetaphone:95-DoubleMetaphoneResult result = new DoubleMetaphoneResult(this.getMaxCodeLen());	0
org.apache.commons.codec.language.DoubleMetaphone:97-while (!result.isComplete() && index <= value.length() - 1) {	0
org.apache.commons.codec.language.DoubleMetaphone:98-switch (value.charAt(index)) {	0
org.apache.commons.codec.language.DoubleMetaphone:105-index = handleAEIOUY(value, result, index);	0
org.apache.commons.codec.language.DoubleMetaphone:106-break;	0
org.apache.commons.codec.language.DoubleMetaphone:108-result.append('P');	0
org.apache.commons.codec.language.DoubleMetaphone:109-index = charAt(value, index + 1) == 'B' ? index + 2 : index + 1;	0
org.apache.commons.codec.language.DoubleMetaphone:110-break;	0
org.apache.commons.codec.language.DoubleMetaphone:117-index = handleC(value, result, index);	0
org.apache.commons.codec.language.DoubleMetaphone:118-break;	0
org.apache.commons.codec.language.DoubleMetaphone:120-index = handleD(value, result, index);	0
org.apache.commons.codec.language.DoubleMetaphone:121-break;	0
org.apache.commons.codec.language.DoubleMetaphone:127-index = handleG(value, result, index, slavoGermanic);	0
org.apache.commons.codec.language.DoubleMetaphone:128-break;	0
org.apache.commons.codec.language.DoubleMetaphone:130-index = handleH(value, result, index);	0
org.apache.commons.codec.language.DoubleMetaphone:131-break;	0
org.apache.commons.codec.language.DoubleMetaphone:136-result.append('K');	0
org.apache.commons.codec.language.DoubleMetaphone:137-index = charAt(value, index + 1) == 'K' ? index + 2 : index + 1;	0
org.apache.commons.codec.language.DoubleMetaphone:138-break;	0
org.apache.commons.codec.language.DoubleMetaphone:140-index = handleL(value, result, index);	0
org.apache.commons.codec.language.DoubleMetaphone:141-break;	0
org.apache.commons.codec.language.DoubleMetaphone:143-result.append('M');	0
org.apache.commons.codec.language.DoubleMetaphone:144-index = conditionM0(value, index) ? index + 2 : index + 1;	0
org.apache.commons.codec.language.DoubleMetaphone:145-break;	0
org.apache.commons.codec.language.DoubleMetaphone:147-result.append('N');	0
org.apache.commons.codec.language.DoubleMetaphone:148-index = charAt(value, index + 1) == 'N' ? index + 2 : index + 1;	0
org.apache.commons.codec.language.DoubleMetaphone:149-break;	0
org.apache.commons.codec.language.DoubleMetaphone:156-index = handleP(value, result, index);	0
org.apache.commons.codec.language.DoubleMetaphone:157-break;	0
org.apache.commons.codec.language.DoubleMetaphone:163-index = handleR(value, result, index, slavoGermanic);	0
org.apache.commons.codec.language.DoubleMetaphone:164-break;	0
org.apache.commons.codec.language.DoubleMetaphone:166-index = handleS(value, result, index, slavoGermanic);	0
org.apache.commons.codec.language.DoubleMetaphone:167-break;	0
org.apache.commons.codec.language.DoubleMetaphone:169-index = handleT(value, result, index);	0
org.apache.commons.codec.language.DoubleMetaphone:170-break;	0
org.apache.commons.codec.language.DoubleMetaphone:172-result.append('F');	0
org.apache.commons.codec.language.DoubleMetaphone:173-index = charAt(value, index + 1) == 'V' ? index + 2 : index + 1;	0
org.apache.commons.codec.language.DoubleMetaphone:174-break;	0
org.apache.commons.codec.language.DoubleMetaphone:176-index = handleW(value, result, index);	0
org.apache.commons.codec.binary.Base64:931-return pArray;	0
org.apache.commons.codec.binary.Base64:485-System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);	0
org.apache.commons.codec.binary.Base64:486-pos += lineSeparator.length;	0
org.apache.commons.codec.binary.Base64:348-return this.encodeTable == URL_SAFE_ENCODE_TABLE;	0
org.apache.commons.codec.binary.Base64:453-if (eof) {	0
org.apache.commons.codec.binary.Base64:458-if (inAvail < 0) {	0
org.apache.commons.codec.binary.Base64:459-eof = true;	0
org.apache.commons.codec.binary.Base64:460-if (buffer == null || buffer.length - pos < encodeSize) {	0
org.apache.commons.codec.binary.Base64:463-switch (modulus) {	0
org.apache.commons.codec.binary.Base64:465-buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];	0
org.apache.commons.codec.binary.Base64:466-buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];	0
org.apache.commons.codec.binary.Base64:468-if (encodeTable == STANDARD_ENCODE_TABLE) {	0
org.apache.commons.codec.binary.Base64:469-buffer[pos++] = PAD;	0
org.apache.commons.codec.binary.Base64:470-buffer[pos++] = PAD;	0
org.apache.commons.codec.binary.Base64:484-if (lineLength > 0 && pos > 0) {	0
org.apache.commons.codec.binary.Base64:489-for (int i = 0; i < inAvail; i++) {	0
org.apache.commons.codec.binary.Base64:490-if (buffer == null || buffer.length - pos < encodeSize) {	0
org.apache.commons.codec.binary.Base64:493-modulus = (++modulus) % 3;	0
org.apache.commons.codec.binary.Base64:494-int b = in[inPos++];	0
org.apache.commons.codec.binary.Base64:495-if (b < 0) {	0
org.apache.commons.codec.binary.Base64:496-b += 256;	0
org.apache.commons.codec.binary.Base64:498-x = (x << 8) + b;	0
org.apache.commons.codec.binary.Base64:499-if (0 == modulus) {	0
org.apache.commons.codec.binary.Base64:513-}	0
org.apache.commons.codec.binary.Base64:903-if (!(pObject instanceof byte[])) {	0
org.apache.commons.codec.binary.Base64:906-return encode((byte[]) pObject);	0
org.apache.commons.codec.binary.Base64:929-reset();	0
org.apache.commons.codec.binary.Base64:930-if (pArray == null || pArray.length == 0) {	0
org.apache.commons.codec.binary.Base64:933-long len = getEncodeLength(pArray, lineLength, lineSeparator);	0
org.apache.commons.codec.binary.Base64:934-byte[] buf = new byte[(int) len];	0
org.apache.commons.codec.binary.Base64:935-setInitialBuffer(buf, 0, buf.length);	0
org.apache.commons.codec.binary.Base64:936-encode(pArray, 0, pArray.length);	0
org.apache.commons.codec.binary.Base64:937-encode(pArray, 0, -1); // Notify encoder of EOF.	0
org.apache.commons.codec.binary.Base64:939-if (buffer != buf) {	0
org.apache.commons.codec.binary.Base64:944-if (isUrlSafe() && pos < buf.length) {	0
org.apache.commons.codec.binary.Base64:949-return buf;	0
org.apache.commons.codec.binary.Base64:965-chunkSize = (chunkSize / 4) * 4;	0
org.apache.commons.codec.binary.Base64:967-long len = (pArray.length * 4) / 3;	0
org.apache.commons.codec.binary.Base64:968-long mod = len % 4;	0
org.apache.commons.codec.binary.Base64:969-if (mod != 0) {	0
org.apache.commons.codec.binary.Base64:970-len += 4 - mod;	0
org.apache.commons.codec.binary.Base64:972-if (chunkSize > 0) {	0
org.apache.commons.codec.binary.Base64:973-boolean lenChunksPerfectly = len % chunkSize == 0;	0
org.apache.commons.codec.binary.Base64:974-len += (len / chunkSize) * chunkSeparator.length;	0
org.apache.commons.codec.binary.Base64:975-if (!lenChunksPerfectly) {	0
org.apache.commons.codec.binary.Base64:976-len += chunkSeparator.length;	0
org.apache.commons.codec.binary.Base64:979-return len;	0
org.apache.commons.codec.binary.Base64:225-this(false);	1
org.apache.commons.codec.binary.Base64:226-}	0
org.apache.commons.codec.binary.Base64:244-this(CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);	0
org.apache.commons.codec.binary.Base64:558-if (buffer == null || buffer.length - pos < decodeSize) {	0
org.apache.commons.codec.binary.Base64:561-byte b = in[inPos++];	0
org.apache.commons.codec.binary.Base64:562-if (b == PAD) {	0
org.apache.commons.codec.binary.Base64:567-if (b >= 0 && b < DECODE_TABLE.length) {	0
org.apache.commons.codec.binary.Base64:568-int result = DECODE_TABLE[b];	0
org.apache.commons.codec.binary.Base64:569-if (result >= 0) {	0
org.apache.commons.codec.binary.Base64:570-modulus = (++modulus) % 4;	0
org.apache.commons.codec.binary.Base64:571-x = (x << 6) + result;	0
org.apache.commons.codec.binary.Base64:572-if (modulus == 0) {	0
org.apache.commons.codec.binary.Base64:573-buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);	0
org.apache.commons.codec.binary.Base64:574-buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);	0
org.apache.commons.codec.binary.Base64:575-buffer[pos++] = (byte) (x & MASK_8BITS);	0
org.apache.commons.codec.binary.Base64:587-x = x << 6;	0
org.apache.commons.codec.binary.Base64:588-switch (modulus) {	0
org.apache.commons.codec.binary.Base64:594-buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);	0
org.apache.commons.codec.binary.Base64:407-if (buffer != null) {	0
org.apache.commons.codec.binary.Base64:408-int len = Math.min(avail(), bAvail);	0
org.apache.commons.codec.binary.Base64:409-if (buffer != b) {	0
org.apache.commons.codec.binary.Base64:420-return len;	0
org.apache.commons.codec.binary.Base64:378-return buffer != null ? pos - readPos : 0;	0
org.apache.commons.codec.binary.Base64:551-if (eof) {	0
org.apache.commons.codec.binary.Base64:554-if (inAvail < 0) {	0
org.apache.commons.codec.binary.Base64:555-eof = true;	0
org.apache.commons.codec.binary.Base64:557-for (int i = 0; i < inAvail; i++) {	0
org.apache.commons.codec.binary.Base64:585-if (eof && modulus != 0) {	0
org.apache.commons.codec.binary.Base64:599-}	0
org.apache.commons.codec.binary.Base64:256-this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);	0
org.apache.commons.codec.binary.Base64:257-}	0
org.apache.commons.codec.binary.Base64:418-buffer = null;	0
org.apache.commons.codec.binary.Base64:332-public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {	0
org.apache.commons.codec.binary.Base64:333-if (lineSeparator == null) {	0
org.apache.commons.codec.binary.Base64:337-this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;	0
org.apache.commons.codec.binary.Base64:338-this.lineSeparator = new byte[lineSeparator.length];	0
org.apache.commons.codec.binary.Base64:339-System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);	0
org.apache.commons.codec.binary.Base64:340-if (lineLength > 0) {	0
org.apache.commons.codec.binary.Base64:341-this.encodeSize = 4 + lineSeparator.length;	0
org.apache.commons.codec.binary.Base64:345-this.decodeSize = this.encodeSize - 1;	0
org.apache.commons.codec.binary.Base64:346-if (containsBase64Byte(lineSeparator)) {	0
org.apache.commons.codec.binary.Base64:350-this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;	0
org.apache.commons.codec.binary.Base64:351-}	0
org.apache.commons.codec.binary.Base64:91-static final byte[] CHUNK_SEPARATOR = {'\r', '\n'};	0
org.apache.commons.codec.binary.Base64:100-private static final byte[] STANDARD_ENCODE_TABLE = {	0
org.apache.commons.codec.binary.Base64:113-private static final byte[] URL_SAFE_ENCODE_TABLE = {	0
org.apache.commons.codec.binary.Base64:137-private static final byte[] DECODE_TABLE = {	0
org.apache.commons.codec.binary.Base64:610-return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);	0
org.apache.commons.codec.binary.Base64:639-for (int i = 0; i < arrayOctet.length; i++) {	0
org.apache.commons.codec.binary.Base64:640-if (isBase64(arrayOctet[i])) {	0
org.apache.commons.codec.binary.Base64:644-return false;	0
org.apache.commons.codec.binary.Base64:369-return this.buffer != null;	0
org.apache.commons.codec.binary.Base64:439-if (out != null && out.length == outAvail) {	0
org.apache.commons.codec.binary.Base64InputStream:170-base64.setInitialBuffer(b, offset, len);	0
org.apache.commons.codec.binary.Base64InputStream:61-this(in, false);	0
org.apache.commons.codec.binary.Base64InputStream:62-}	0
org.apache.commons.codec.binary.Base64InputStream:74-super(in);	0
org.apache.commons.codec.binary.Base64InputStream:52-private final byte[] singleByte = new byte[1];	0
org.apache.commons.codec.binary.Base64InputStream:75-this.doEncode = doEncode;	0
org.apache.commons.codec.binary.Base64InputStream:76-this.base64 = new Base64(false);	0
org.apache.commons.codec.binary.Base64InputStream:77-}	0
org.apache.commons.codec.binary.Base64InputStream:164-if (!base64.hasData()) {	1
org.apache.commons.codec.binary.Base64InputStream:165-byte[] buf = new byte[doEncode ? 4096 : 8192];	0
org.apache.commons.codec.binary.Base64InputStream:166-int c = in.read(buf);	0
org.apache.commons.codec.binary.Base64InputStream:169-if (c > 0 && b.length == len) {	0
org.apache.commons.codec.binary.Base64InputStream:172-if (doEncode) {	0
org.apache.commons.codec.binary.Base64InputStream:175-base64.decode(buf, 0, c);	0
org.apache.commons.codec.binary.Base64InputStream:178-return base64.readResults(b, offset, len);	1
org.apache.commons.codec.binary.Base64InputStream:145-} else if (len == 0) {	0
org.apache.commons.codec.binary.Base64InputStream:141-} else if (offset < 0 || len < 0) {	0
org.apache.commons.codec.binary.Base64InputStream:143-} else if (offset > b.length || offset + len > b.length) {	0
org.apache.commons.codec.binary.Base64InputStream:139-if (b == null) {	0
org.apache.commons.codec.binary.Base64InputStream:96-super(in);	0
org.apache.commons.codec.binary.Base64InputStream:52-private final byte[] singleByte = new byte[1];	0
org.apache.commons.codec.binary.Base64InputStream:97-this.doEncode = doEncode;	0
org.apache.commons.codec.binary.Base64InputStream:98-this.base64 = new Base64(lineLength, lineSeparator);	0
org.apache.commons.codec.binary.Base64InputStream:99-}	0
org.apache.commons.codec.binary.Base64InputStream:109-int r = read(singleByte, 0, 1);	0
org.apache.commons.codec.binary.Base64InputStream:110-while (r == 0) {	0
org.apache.commons.codec.binary.Base64InputStream:111-r = read(singleByte, 0, 1);	0
org.apache.commons.codec.binary.Base64InputStream:113-if (r > 0) {	0
org.apache.commons.codec.binary.Base64InputStream:114-return singleByte[0] < 0 ? 256 + singleByte[0] : singleByte[0];	0
org.apache.commons.codec.binary.Base64InputStream:116-return -1;	0
org.apache.commons.codec.binary.Base64InputStream:140-throw new NullPointerException();	0
org.apache.commons.codec.binary.Base64InputStream:142-throw new IndexOutOfBoundsException();	0
org.apache.commons.codec.binary.Base64InputStream:144-throw new IndexOutOfBoundsException();	0
org.apache.commons.codec.binary.Base64InputStream:146-return 0;	0
org.apache.commons.codec.binary.Base64InputStream:173-base64.encode(buf, 0, c);	0
org.apache.commons.codec.binary.Base64InputStream:188-return false; // not an easy job to support marks	0
org.apache.commons.codec.binary.Base64:670-return StringUtils.newStringUtf8(encodeBase64(binaryData, true));	1
org.apache.commons.codec.binary.Base64:934-return StringUtils.newStringUtf8(encode(pArray));	0
org.apache.commons.codec.binary.Base64:256-this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);	0
org.apache.commons.codec.binary.Base64:257-}	0
org.apache.commons.codec.binary.Base64:497-System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);	0
org.apache.commons.codec.binary.Base64:498-pos += lineSeparator.length;	0
org.apache.commons.codec.binary.Base64:341-this.encodeSize = 4 + lineSeparator.length;	0
org.apache.commons.codec.binary.Base64:986-len += 4 - mod;	0
org.apache.commons.codec.binary.Base64:833-Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);	0
org.apache.commons.codec.binary.Base64:834-return b64.encode(binaryData);	0
org.apache.commons.codec.binary.Base64:783-return encodeBase64(binaryData, isChunked, false);	0
org.apache.commons.codec.binary.Base64:825-long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);	0
org.apache.commons.codec.binary.Base64:826-if (len > maxResultSize) {	0
org.apache.commons.codec.binary.Base64:992-len += chunkSeparator.length;	0
org.apache.commons.codec.binary.Base64:801-return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE);	0
org.apache.commons.codec.binary.Base64:822-return binaryData;	0
org.apache.commons.codec.binary.Base64:821-if (binaryData == null || binaryData.length == 0) {	0
org.apache.commons.codec.binary.Base64:989-boolean lenChunksPerfectly = len % chunkSize == 0;	0
org.apache.commons.codec.binary.Base64:990-len += (len / chunkSize) * chunkSeparator.length;	0
org.apache.commons.codec.binary.Base64:991-if (!lenChunksPerfectly) {	0
org.apache.commons.codec.binary.Base64:465-if (eof) {	0
org.apache.commons.codec.binary.Base64:470-if (inAvail < 0) {	0
org.apache.commons.codec.binary.Base64:471-eof = true;	0
org.apache.commons.codec.binary.Base64:472-if (buffer == null || buffer.length - pos < encodeSize) {	0
org.apache.commons.codec.binary.Base64:475-switch (modulus) {	0
org.apache.commons.codec.binary.Base64:496-if (lineLength > 0 && pos > 0) {	0
org.apache.commons.codec.binary.Base64:501-for (int i = 0; i < inAvail; i++) {	0
org.apache.commons.codec.binary.Base64:502-if (buffer == null || buffer.length - pos < encodeSize) {	0
org.apache.commons.codec.binary.Base64:505-modulus = (++modulus) % 3;	0
org.apache.commons.codec.binary.Base64:506-int b = in[inPos++];	0
org.apache.commons.codec.binary.Base64:507-if (b < 0) {	0
org.apache.commons.codec.binary.Base64:510-x = (x << 8) + b;	0
org.apache.commons.codec.binary.Base64:511-if (0 == modulus) {	0
org.apache.commons.codec.binary.Base64:525-}	0
org.apache.commons.codec.binary.Base64:945-reset();	0
org.apache.commons.codec.binary.Base64:946-if (pArray == null || pArray.length == 0) {	0
org.apache.commons.codec.binary.Base64:949-long len = getEncodeLength(pArray, lineLength, lineSeparator);	0
org.apache.commons.codec.binary.Base64:950-byte[] buf = new byte[(int) len];	0
org.apache.commons.codec.binary.Base64:951-setInitialBuffer(buf, 0, buf.length);	0
org.apache.commons.codec.binary.Base64:952-encode(pArray, 0, pArray.length);	0
org.apache.commons.codec.binary.Base64:953-encode(pArray, 0, -1); // Notify encoder of EOF.	0
org.apache.commons.codec.binary.Base64:955-if (buffer != buf) {	0
org.apache.commons.codec.binary.Base64:960-if (isUrlSafe() && pos < buf.length) {	0
org.apache.commons.codec.binary.Base64:965-return buf;	0
org.apache.commons.codec.binary.Base64:360-return this.encodeTable == URL_SAFE_ENCODE_TABLE;	0
org.apache.commons.codec.binary.Base64:981-chunkSize = (chunkSize / 4) * 4;	0
org.apache.commons.codec.binary.Base64:983-long len = (pArray.length * 4) / 3;	0
org.apache.commons.codec.binary.Base64:984-long mod = len % 4;	0
org.apache.commons.codec.binary.Base64:985-if (mod != 0) {	0
org.apache.commons.codec.binary.Base64:988-if (chunkSize > 0) {	0
org.apache.commons.codec.binary.Base64:334-lineLength = 0;// disable chunk-separating	0
org.apache.commons.codec.binary.Base64:335-lineSeparator = CHUNK_SEPARATOR;// this just gets ignored	0
org.apache.commons.codec.binary.Base64:343-this.encodeSize = 4;	0
org.apache.commons.codec.binary.Base64:388-byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];	0
org.apache.commons.codec.binary.Base64:389-System.arraycopy(buffer, 0, b, 0, buffer.length);	0
org.apache.commons.codec.binary.Base64:390-buffer = b;	0
org.apache.commons.codec.binary.Base64:484-for (int i = 0; i < inAvail; i++) {	0
org.apache.commons.codec.binary.Base64:485-if (buffer == null || buffer.length - pos < encodeSize) {	0
org.apache.commons.codec.binary.Base64:486-resizeBuffer();	0
org.apache.commons.codec.binary.Base64:488-modulus = (++modulus) % 3;	0
org.apache.commons.codec.binary.Base64:489-int b = in[inPos++];	0
org.apache.commons.codec.binary.Base64:490-if (b < 0) {	0
org.apache.commons.codec.binary.Base64:493-x = (x << 8) + b;	0
org.apache.commons.codec.binary.Base64:494-if (0 == modulus) {	0
org.apache.commons.codec.binary.Base64:495-buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];	0
org.apache.commons.codec.binary.Base64:496-buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];	0
org.apache.commons.codec.binary.Base64:497-buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];	0
org.apache.commons.codec.binary.Base64InputStream:109-int r = read(singleByte, 0, 1);	0
org.apache.commons.codec.binary.Base64InputStream:173-base64.encode(buf, 0, c);	0
org.apache.commons.codec.binary.Base64:445-if (eof) {	0
org.apache.commons.codec.binary.Base64:450-if (inAvail < 0) {	0
org.apache.commons.codec.binary.Base64:508-}	0
org.apache.commons.codec.binary.Base64InputStream:170-base64.setInitialBuffer(b, offset, len);	0
org.apache.commons.codec.binary.Base64:420-if (out != null && out.length == outAvail) {	0
org.apache.commons.codec.binary.Base64:421-buffer = out;	0
org.apache.commons.codec.binary.Base64:422-pos = outPos;	0
org.apache.commons.codec.binary.Base64:423-readPos = outPos;	0
org.apache.commons.codec.binary.Base64:425-}	0
org.apache.commons.codec.binary.Base64InputStream:148-int readLen = 0;	0
org.apache.commons.codec.binary.Base64InputStream:165-while (readLen == 0) {	0
org.apache.commons.codec.binary.Base64InputStream:166-if (!base64.hasData()) {	0
org.apache.commons.codec.binary.Base64InputStream:167-byte[] buf = new byte[doEncode ? 4096 : 8192];	0
org.apache.commons.codec.binary.Base64InputStream:168-int c = in.read(buf);	0
org.apache.commons.codec.binary.Base64InputStream:169-if (c > 0 && b.length == len) {	1
org.apache.commons.codec.binary.Base64InputStream:172-if (doEncode) {	0
org.apache.commons.codec.binary.Base64InputStream:178-readLen = base64.readResults(b, offset, len);	0
org.apache.commons.codec.binary.Base64:369-return this.buffer != null;	0
org.apache.commons.codec.binary.Base64:378-return buffer != null ? pos - readPos : 0;	0
org.apache.commons.codec.binary.Base64:383-if (buffer == null) {	0
org.apache.commons.codec.binary.Base64:392-}	0
org.apache.commons.codec.binary.Base64:407-if (buffer != null) {	0
org.apache.commons.codec.binary.Base64:408-int len = Math.min(avail(), bAvail);	0
org.apache.commons.codec.binary.Base64:409-System.arraycopy(buffer, readPos, b, bPos, len);	0
org.apache.commons.codec.binary.Base64:410-readPos += len;	0
org.apache.commons.codec.binary.Base64:411-if (readPos >= pos) {	0
org.apache.commons.codec.binary.Base64:412-buffer = null;	0
org.apache.commons.codec.binary.Base64:414-return len;	0
org.apache.commons.codec.binary.Base64InputStream:96-super(in);	0
org.apache.commons.codec.binary.Base64InputStream:52-private final byte[] singleByte = new byte[1];	0
org.apache.commons.codec.binary.Base64InputStream:97-this.doEncode = doEncode;	0
org.apache.commons.codec.binary.Base64:829-throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +	0
org.apache.commons.codec.binary.Base64:454-buffer[pos++] = PAD;	0
org.apache.commons.codec.binary.Base64:455-buffer[pos++] = PAD;	0
org.apache.commons.codec.binary.Base64:450-buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];	0
org.apache.commons.codec.binary.Base64:451-buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];	0
org.apache.commons.codec.binary.Base64:453-if (encodeTable == STANDARD_ENCODE_TABLE) {	0
org.apache.commons.codec.binary.Base64:667-return encodeBase64(binaryData, false);	0
org.apache.commons.codec.binary.Base64:976-len += 4 - mod;	0
org.apache.commons.codec.binary.Base64:982-len += chunkSeparator.length;	0
org.apache.commons.codec.binary.Base64:835-Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);	0
org.apache.commons.codec.binary.Base64:836-return b64.encode(binaryData);	0
org.apache.commons.codec.binary.Base64:785-return encodeBase64(binaryData, isChunked, false);	0
org.apache.commons.codec.binary.Base64:827-long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);	1
org.apache.commons.codec.binary.Base64:828-if (len > maxResultSize) {	0
org.apache.commons.codec.binary.Base64:971-chunkSize = (chunkSize / 4) * 4;	0
org.apache.commons.codec.binary.Base64:973-long len = (pArray.length * 4) / 3;	0
org.apache.commons.codec.binary.Base64:974-long mod = len % 4;	0
org.apache.commons.codec.binary.Base64:975-if (mod != 0) {	0
org.apache.commons.codec.binary.Base64:978-if (chunkSize > 0) {	0
org.apache.commons.codec.binary.Base64:979-boolean lenChunksPerfectly = len % chunkSize == 0;	0
org.apache.commons.codec.binary.Base64:980-len += (len / chunkSize) * chunkSeparator.length;	0
org.apache.commons.codec.binary.Base64:981-if (!lenChunksPerfectly) {	0
org.apache.commons.codec.binary.Base64:985-return len;	0
org.apache.commons.codec.binary.Base64:803-return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE);	0
org.apache.commons.codec.binary.Base64:823-if (binaryData == null || binaryData.length == 0) {	0
org.apache.commons.codec.binary.Base64:438-if (eof) {	0
org.apache.commons.codec.binary.Base64:443-if (inAvail < 0) {	0
org.apache.commons.codec.binary.Base64:444-eof = true;	0
org.apache.commons.codec.binary.Base64:445-if (buffer == null || buffer.length - pos < encodeSize) {	0
org.apache.commons.codec.binary.Base64:448-switch (modulus) {	0
org.apache.commons.codec.binary.Base64:471-byte b = lineSeparator[lineSeparator.length - 1];	0
org.apache.commons.codec.binary.Base64:472-if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {	0
org.apache.commons.codec.binary.Base64:476-} else {	0
org.apache.commons.codec.binary.Base64:477-for (int i = 0; i < inAvail; i++) {	0
org.apache.commons.codec.binary.Base64:478-if (buffer == null || buffer.length - pos < encodeSize) {	0
org.apache.commons.codec.binary.Base64:479-resizeBuffer();	0
org.apache.commons.codec.binary.Base64:481-modulus = (++modulus) % 3;	0
org.apache.commons.codec.binary.Base64:482-int b = in[inPos++];	0
org.apache.commons.codec.binary.Base64:483-if (b < 0) {	0
org.apache.commons.codec.binary.Base64:486-x = (x << 8) + b;	0
org.apache.commons.codec.binary.Base64:487-if (0 == modulus) {	0
org.apache.commons.codec.binary.Base64:501-}	0
org.apache.commons.codec.binary.Base64:947-reset();	0
org.apache.commons.codec.binary.Base64:948-if (pArray == null || pArray.length == 0) {	0
org.apache.commons.codec.binary.Base64:951-encode(pArray, 0, pArray.length);	0
org.apache.commons.codec.binary.Base64:952-encode(pArray, 0, -1); // Notify encoder of EOF.	0
org.apache.commons.codec.binary.Base64:953-byte[] buf = new byte[pos - readPos];	0
org.apache.commons.codec.binary.Base64:954-readResults(buf, 0, buf.length);	0
org.apache.commons.codec.binary.Base64:955-return buf;	0
org.apache.commons.codec.binary.Base64:343-this.encodeSize = 4;	0
org.apache.commons.codec.language.Caverphone:170-return caverphone(pString);	0
org.apache.commons.codec.language.Caverphone:59-txt = txt.toLowerCase(java.util.Locale.ENGLISH);	0
org.apache.commons.codec.language.Caverphone:62-txt = txt.replaceAll("[^a-z]", "");	0
org.apache.commons.codec.language.Caverphone:65-txt = txt.replaceAll("e$", ""); // 2.0 only	0
org.apache.commons.codec.language.Caverphone:68-txt = txt.replaceAll("^cough", "cou2f");	0
org.apache.commons.codec.language.Caverphone:69-txt = txt.replaceAll("^rough", "rou2f");	0
org.apache.commons.codec.language.Caverphone:70-txt = txt.replaceAll("^tough", "tou2f");	0
org.apache.commons.codec.language.Caverphone:71-txt = txt.replaceAll("^enough", "enou2f");// 2.0 only	0
org.apache.commons.codec.language.Caverphone:72-txt = txt.replaceAll("^trough", "trou2f");// 2.0 only - note the spec says ^enough here again, c+p error I assume	0
org.apache.commons.codec.language.Caverphone:73-txt = txt.replaceAll("^gn", "2n");	0
org.apache.commons.codec.language.Caverphone:76-txt = txt.replaceAll("^mb", "m2");	1
org.apache.commons.codec.language.Caverphone:79-txt = txt.replaceAll("cq", "2q");	0
org.apache.commons.codec.language.Caverphone:80-txt = txt.replaceAll("ci", "si");	0
org.apache.commons.codec.language.Caverphone:81-txt = txt.replaceAll("ce", "se");	0
org.apache.commons.codec.language.Caverphone:82-txt = txt.replaceAll("cy", "sy");	0
org.apache.commons.codec.language.Caverphone:83-txt = txt.replaceAll("tch", "2ch");	0
org.apache.commons.codec.language.Caverphone:84-txt = txt.replaceAll("c", "k");	0
org.apache.commons.codec.language.Caverphone:85-txt = txt.replaceAll("q", "k");	0
org.apache.commons.codec.language.Caverphone:86-txt = txt.replaceAll("x", "k");	0
org.apache.commons.codec.language.Caverphone:87-txt = txt.replaceAll("v", "f");	0
org.apache.commons.codec.language.Caverphone:88-txt = txt.replaceAll("dg", "2g");	0
org.apache.commons.codec.language.Caverphone:89-txt = txt.replaceAll("tio", "sio");	0
org.apache.commons.codec.language.Caverphone:90-txt = txt.replaceAll("tia", "sia");	0
org.apache.commons.codec.language.Caverphone:91-txt = txt.replaceAll("d", "t");	0
org.apache.commons.codec.language.Caverphone:92-txt = txt.replaceAll("ph", "fh");	0
org.apache.commons.codec.language.Caverphone:93-txt = txt.replaceAll("b", "p");	0
org.apache.commons.codec.language.Caverphone:94-txt = txt.replaceAll("sh", "s2");	0
org.apache.commons.codec.language.Caverphone:95-txt = txt.replaceAll("z", "s");	0
org.apache.commons.codec.language.Caverphone:96-txt = txt.replaceAll("^[aeiou]", "A");	0
org.apache.commons.codec.language.Caverphone:97-txt = txt.replaceAll("[aeiou]", "3");	0
org.apache.commons.codec.language.Caverphone:98-txt = txt.replaceAll("j", "y");// 2.0 only	0
org.apache.commons.codec.language.Caverphone:99-txt = txt.replaceAll("^y3", "Y3"); // 2.0 only	0
org.apache.commons.codec.language.Caverphone:100-txt = txt.replaceAll("^y", "A"); // 2.0 only	0
org.apache.commons.codec.language.Caverphone:101-txt = txt.replaceAll("y", "3");// 2.0 only	0
org.apache.commons.codec.language.Caverphone:102-txt = txt.replaceAll("3gh3", "3kh3");	0
org.apache.commons.codec.language.Caverphone:103-txt = txt.replaceAll("gh", "22");	0
org.apache.commons.codec.language.Caverphone:104-txt = txt.replaceAll("g", "k");	0
org.apache.commons.codec.language.Caverphone:105-txt = txt.replaceAll("s+", "S");	0
org.apache.commons.codec.language.Caverphone:106-txt = txt.replaceAll("t+", "T");	0
org.apache.commons.codec.language.Caverphone:107-txt = txt.replaceAll("p+", "P");	0
org.apache.commons.codec.language.Caverphone:108-txt = txt.replaceAll("k+", "K");	0
org.apache.commons.codec.language.Caverphone:109-txt = txt.replaceAll("f+", "F");	0
org.apache.commons.codec.language.Caverphone:110-txt = txt.replaceAll("m+", "M");	0
org.apache.commons.codec.language.Caverphone:111-txt = txt.replaceAll("n+", "N");	0
org.apache.commons.codec.language.Caverphone:112-txt = txt.replaceAll("w3", "W3");	0
org.apache.commons.codec.language.Caverphone:114-txt = txt.replaceAll("wh3", "Wh3");	0
org.apache.commons.codec.language.Caverphone:115-txt = txt.replaceAll("w$", "3"); // 2.0 only	0
org.apache.commons.codec.language.Caverphone:117-txt = txt.replaceAll("w", "2");	0
org.apache.commons.codec.language.Caverphone:118-txt = txt.replaceAll("^h", "A");	0
org.apache.commons.codec.language.Caverphone:119-txt = txt.replaceAll("h", "2");	0
org.apache.commons.codec.net.QuotedPrintableCodec:405-return this.charset;	0
org.apache.commons.codec.net.QuotedPrintableCodec:91-this(CharEncoding.UTF_8);	0
org.apache.commons.codec.net.QuotedPrintableCodec:92-}	0
org.apache.commons.codec.net.QuotedPrintableCodec:101-super();	0
org.apache.commons.codec.net.QuotedPrintableCodec:102-this.charset = charset;	0
org.apache.commons.codec.net.QuotedPrintableCodec:103-}	0
org.apache.commons.codec.net.QuotedPrintableCodec:62-private static final BitSet PRINTABLE_CHARS = new BitSet(256);	0
org.apache.commons.codec.net.QuotedPrintableCodec:77-for (int i = 33; i <= 60; i++) {	0
org.apache.commons.codec.net.QuotedPrintableCodec:78-PRINTABLE_CHARS.set(i);	0
org.apache.commons.codec.net.QuotedPrintableCodec:80-for (int i = 62; i <= 126; i++) {	0
org.apache.commons.codec.net.QuotedPrintableCodec:81-PRINTABLE_CHARS.set(i);	0
org.apache.commons.codec.net.QuotedPrintableCodec:83-PRINTABLE_CHARS.set(TAB);	0
org.apache.commons.codec.net.QuotedPrintableCodec:84-PRINTABLE_CHARS.set(SPACE);	0
org.apache.commons.codec.net.QuotedPrintableCodec:85-}	0
org.apache.commons.codec.net.QuotedPrintableCodec:184-buffer.write(b);	0
org.apache.commons.codec.net.QuotedPrintableCodec:300-return encode(pString, getDefaultCharset());	0
org.apache.commons.codec.net.QuotedPrintableCodec:171-if (printable == null) {	0
org.apache.commons.codec.net.QuotedPrintableCodec:174-ByteArrayOutputStream buffer = new ByteArrayOutputStream();	0
org.apache.commons.codec.net.QuotedPrintableCodec:178-for (byte c : bytes) {	0
org.apache.commons.codec.net.QuotedPrintableCodec:179-int b = c;	0
org.apache.commons.codec.net.QuotedPrintableCodec:180-if (b < 0) {	0
org.apache.commons.codec.net.QuotedPrintableCodec:183-if (printable.get(b)) {	0
org.apache.commons.codec.net.QuotedPrintableCodec:201-return buffer.toByteArray();	0
org.apache.commons.codec.net.QuotedPrintableCodec:256-return encodeQuotedPrintable(PRINTABLE_CHARS, bytes);	0
org.apache.commons.codec.net.QuotedPrintableCodec:296-if (pString == null) {	0
org.apache.commons.codec.net.QuotedPrintableCodec:429-return StringUtils.newStringUsAscii(encode(pString.getBytes(charset)));	0
org.apache.commons.codec.net.QuotedPrintableCodec:168-if (bytes == null) {	0
org.apache.commons.codec.net.QuotedPrintableCodec:426-if (pString == null) {	0
org.apache.commons.codec.net.QuotedPrintableCodec:231-buffer.write((char) ((u << 4) + l));	0
org.apache.commons.codec.net.QuotedPrintableCodec:234-}	0
org.apache.commons.codec.net.QuotedPrintableCodec:229-int u = Utils.digit16(bytes[++i]);	1
org.apache.commons.codec.net.QuotedPrintableCodec:230-int l = Utils.digit16(bytes[++i]);	0
org.apache.commons.codec.net.QuotedPrintableCodec:237-buffer.write(b);	0
org.apache.commons.codec.net.QuotedPrintableCodec:115-buffer.write(ESCAPE_CHAR);	0
org.apache.commons.codec.net.QuotedPrintableCodec:116-char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16));	0
org.apache.commons.codec.net.QuotedPrintableCodec:117-char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16));	0
org.apache.commons.codec.net.QuotedPrintableCodec:118-buffer.write(hex1);	0
org.apache.commons.codec.net.QuotedPrintableCodec:119-buffer.write(hex2);	0
org.apache.commons.codec.net.QuotedPrintableCodec:120-}	1
org.apache.commons.codec.net.QuotedPrintableCodec:189-encodeQuotedPrintable(b, buffer);	0
org.apache.commons.codec.net.QuotedPrintableCodec:344-return decode(pString, getDefaultCharset());	0
org.apache.commons.codec.net.QuotedPrintableCodec:223-ByteArrayOutputStream buffer = new ByteArrayOutputStream();	0
org.apache.commons.codec.net.QuotedPrintableCodec:224-for (int i = 0; i < bytes.length; i++) {	0
org.apache.commons.codec.net.QuotedPrintableCodec:225-final int b = bytes[i];	0
org.apache.commons.codec.net.QuotedPrintableCodec:226-if (b == ESCAPE_CHAR) {	0
org.apache.commons.codec.net.QuotedPrintableCodec:275-return decodeQuotedPrintable(bytes);	0
org.apache.commons.codec.net.QuotedPrintableCodec:324-return new String(decode(StringUtils.getBytesUsAscii(pString)), charset);	0
org.apache.commons.codec.net.QuotedPrintableCodec:340-if (pString == null) {	0
org.apache.commons.codec.net.QuotedPrintableCodec:220-if (bytes == null) {	0
org.apache.commons.codec.net.QuotedPrintableCodec:321-if (pString == null) {	0
org.apache.commons.codec.binary.BaseNCodecInputStream:40-super(in);	0
org.apache.commons.codec.binary.BaseNCodecInputStream:37-private final byte[] singleByte = new byte[1];	0
org.apache.commons.codec.binary.BaseNCodecInputStream:41-this.doEncode = doEncode;	0
org.apache.commons.codec.binary.BaseNCodecInputStream:42-this.baseNCodec = baseNCodec;	0
org.apache.commons.codec.binary.BaseNCodecInputStream:43-}	0
org.apache.commons.codec.binary.BaseNCodecInputStream:119-baseNCodec.decode(buf, 0, c);	0
org.apache.commons.codec.binary.BaseNCodecInputStream:95-int readLen = 0;	0
org.apache.commons.codec.binary.BaseNCodecInputStream:112-while (readLen == 0) {	0
org.apache.commons.codec.binary.BaseNCodecInputStream:113-if (!baseNCodec.hasData()) {	0
org.apache.commons.codec.binary.BaseNCodecInputStream:114-byte[] buf = new byte[doEncode ? 4096 : 8192];	0
org.apache.commons.codec.binary.BaseNCodecInputStream:115-int c = in.read(buf);	0
org.apache.commons.codec.binary.BaseNCodecInputStream:116-if (doEncode) {	0
org.apache.commons.codec.binary.BaseNCodecInputStream:122-readLen = baseNCodec.readResults(b, offset, len);	0
org.apache.commons.codec.binary.BaseNCodecInputStream:124-return readLen;	0
org.apache.commons.codec.binary.BaseNCodecInputStream:92-} else if (len == 0) {	0
org.apache.commons.codec.binary.BaseNCodecInputStream:88-} else if (offset < 0 || len < 0) {	0
org.apache.commons.codec.binary.BaseNCodecInputStream:90-} else if (offset > b.length || offset + len > b.length) {	0
org.apache.commons.codec.binary.BaseNCodecInputStream:59-final byte b = singleByte[0];	0
org.apache.commons.codec.binary.BaseNCodecInputStream:60-return b < 0 ? 256 + b : b;	0
org.apache.commons.codec.binary.BaseNCodecInputStream:86-if (b == null) {	0
org.apache.commons.codec.binary.BaseNCodecInputStream:54-int r = read(singleByte, 0, 1);	0
org.apache.commons.codec.binary.BaseNCodecInputStream:55-while (r == 0) {	0
org.apache.commons.codec.binary.BaseNCodecInputStream:58-if (r > 0) {	0
org.apache.commons.codec.binary.BaseNCodecInputStream:56-r = read(singleByte, 0, 1);	0
org.apache.commons.codec.binary.BaseNCodecInputStream:62-return EOF;	0
org.apache.commons.codec.binary.BaseNCodecInputStream:87-throw new NullPointerException();	0
org.apache.commons.codec.binary.BaseNCodecInputStream:89-throw new IndexOutOfBoundsException();	0
org.apache.commons.codec.binary.BaseNCodecInputStream:91-throw new IndexOutOfBoundsException();	0
org.apache.commons.codec.binary.BaseNCodecInputStream:93-return 0;	0
org.apache.commons.codec.binary.BaseNCodecInputStream:117-baseNCodec.encode(buf, 0, c);	0
org.apache.commons.codec.binary.BaseNCodecInputStream:134-return false; // not an easy job to support marks	0
org.apache.commons.codec.language.DoubleMetaphone:893-return null;	0
org.apache.commons.codec.language.DoubleMetaphone:88-return null;	0
org.apache.commons.codec.language.DoubleMetaphone:244-return doubleMetaphone(value1, alternate).equals(doubleMetaphone(value2, alternate));	1
org.apache.commons.codec.language.DoubleMetaphone:891-input = input.trim();	0
org.apache.commons.codec.language.DoubleMetaphone:892-if (input.length() == 0) {	0
org.apache.commons.codec.language.DoubleMetaphone:86-value = cleanInput(value);	0
org.apache.commons.codec.language.DoubleMetaphone:87-if (value == null) {	0
org.apache.commons.codec.language.DoubleMetaphone:888-if (input == null) {	0
org.apache.commons.codec.language.DoubleMetaphone:65-super();	0
org.apache.commons.codec.language.DoubleMetaphone:59-private int maxCodeLen = 4;	0
org.apache.commons.codec.language.DoubleMetaphone:66-}	0
org.apache.commons.codec.language.DoubleMetaphone:47-private static final String[] SILENT_START =	0
org.apache.commons.codec.language.DoubleMetaphone:49-private static final String[] L_R_N_M_B_H_F_V_W_SPACE =	0
org.apache.commons.codec.language.DoubleMetaphone:51-private static final String[] ES_EP_EB_EL_EY_IB_IL_IN_IE_EI_ER =	0
org.apache.commons.codec.language.DoubleMetaphone:53-private static final String[] L_T_K_S_N_M_B_Z =	0
org.apache.commons.codec.language.DoubleMetaphone:75-return doubleMetaphone(value, false);	0
org.apache.commons.codec.language.DoubleMetaphone:91-final boolean slavoGermanic = isSlavoGermanic(value);	0
org.apache.commons.codec.language.DoubleMetaphone:92-int index = isSilentStart(value) ? 1 : 0;	0
org.apache.commons.codec.language.DoubleMetaphone:94-final DoubleMetaphoneResult result = new DoubleMetaphoneResult(this.getMaxCodeLen());	0
org.apache.commons.codec.language.DoubleMetaphone:96-while (!result.isComplete() && index <= value.length() - 1) {	0
org.apache.commons.codec.language.DoubleMetaphone:97-switch (value.charAt(index)) {	0
org.apache.commons.codec.language.DoubleMetaphone:104-index = handleAEIOUY(result, index);	0
org.apache.commons.codec.language.DoubleMetaphone:105-break;	0
org.apache.commons.codec.language.DoubleMetaphone:107-result.append('P');	0
org.apache.commons.codec.language.DoubleMetaphone:108-index = charAt(value, index + 1) == 'B' ? index + 2 : index + 1;	0
org.apache.commons.codec.language.DoubleMetaphone:109-break;	0
org.apache.commons.codec.language.DoubleMetaphone:112-result.append('S');	0
org.apache.commons.codec.language.DoubleMetaphone:113-index++;	0
org.apache.commons.codec.language.DoubleMetaphone:114-break;	0
org.apache.commons.codec.language.DoubleMetaphone:116-index = handleC(value, result, index);	0
org.apache.commons.codec.language.DoubleMetaphone:117-break;	0
org.apache.commons.codec.language.DoubleMetaphone:119-index = handleD(value, result, index);	0
org.apache.commons.codec.language.DoubleMetaphone:120-break;	0
org.apache.commons.codec.language.DoubleMetaphone:122-result.append('F');	0
org.apache.commons.codec.language.DoubleMetaphone:123-index = charAt(value, index + 1) == 'F' ? index + 2 : index + 1;	0
org.apache.commons.codec.language.DoubleMetaphone:124-break;	0
org.apache.commons.codec.language.DoubleMetaphone:126-index = handleG(value, result, index, slavoGermanic);	0
org.apache.commons.codec.language.DoubleMetaphone:127-break;	0
org.apache.commons.codec.language.DoubleMetaphone:129-index = handleH(value, result, index);	0
org.apache.commons.codec.language.DoubleMetaphone:130-break;	0
org.apache.commons.codec.language.DoubleMetaphone:132-index = handleJ(value, result, index, slavoGermanic);	0
org.apache.commons.codec.language.DoubleMetaphone:133-break;	0
org.apache.commons.codec.language.DoubleMetaphone:135-result.append('K');	0
org.apache.commons.codec.language.DoubleMetaphone:136-index = charAt(value, index + 1) == 'K' ? index + 2 : index + 1;	0
org.apache.commons.codec.language.DoubleMetaphone:137-break;	0
org.apache.commons.codec.language.DoubleMetaphone:139-index = handleL(value, result, index);	0
org.apache.commons.codec.language.DoubleMetaphone:140-break;	0
org.apache.commons.codec.language.DoubleMetaphone:142-result.append('M');	0
org.apache.commons.codec.language.DoubleMetaphone:143-index = conditionM0(value, index) ? index + 2 : index + 1;	0
org.apache.commons.codec.language.DoubleMetaphone:144-break;	0
org.apache.commons.codec.language.bm.PhoneticEngine:293-this(nameType, ruleType, concat, DEFAULT_MAX_PHONEMES);	0
org.apache.commons.codec.language.bm.PhoneticEngine:310-final int maxPhonemes) {	0
org.apache.commons.codec.language.bm.PhoneticEngine:311-if (ruleType == RuleType.RULES) {	0
org.apache.commons.codec.language.bm.PhoneticEngine:314-this.nameType = nameType;	0
org.apache.commons.codec.language.bm.PhoneticEngine:315-this.ruleType = ruleType;	0
org.apache.commons.codec.language.bm.PhoneticEngine:316-this.concat = concat;	0
org.apache.commons.codec.language.bm.PhoneticEngine:317-this.lang = Lang.instance(nameType);	0
org.apache.commons.codec.language.bm.PhoneticEngine:235-private static final Map<NameType, Set<String>> NAME_PREFIXES = new EnumMap<NameType, Set<String>>(NameType.class);	0
org.apache.commons.codec.language.bm.PhoneticEngine:238-NAME_PREFIXES.put(NameType.ASHKENAZI,	0
org.apache.commons.codec.language.bm.PhoneticEngine:241-NAME_PREFIXES.put(NameType.SEPHARDIC,	0
org.apache.commons.codec.language.bm.PhoneticEngine:245-NAME_PREFIXES.put(NameType.GENERIC,	0
org.apache.commons.codec.language.bm.PhoneticEngine:249-}	0
org.apache.commons.codec.language.bm.Lang:96-private static final Map<NameType, Lang> Langs = new EnumMap<NameType, Lang>(NameType.class);	0
org.apache.commons.codec.language.bm.Lang:101-for (final NameType s : NameType.values()) {	0
org.apache.commons.codec.language.bm.Lang:102-Langs.put(s, loadFromResource(LANGUAGE_RULES_RN, Languages.getInstance(s)));	1
org.apache.commons.codec.language.bm.PhoneticEngine:294-}	0
org.apache.commons.codec.language.bm.PhoneticEngine:312-throw new IllegalArgumentException("ruleType must not be " + RuleType.RULES);	0
org.apache.commons.codec.language.bm.PhoneticEngine:318-this.maxPhonemes = maxPhonemes;	0
org.apache.commons.codec.language.bm.PhoneticEngine:319-}	0
org.apache.commons.codec.language.bm.PhoneticEngine:258-final StringBuilder sb = new StringBuilder();	0
org.apache.commons.codec.language.bm.PhoneticEngine:259-final Iterator<String> si = strings.iterator();	0
org.apache.commons.codec.language.bm.PhoneticEngine:260-if (si.hasNext()) {	0
org.apache.commons.codec.language.bm.PhoneticEngine:261-sb.append(si.next());	0
org.apache.commons.codec.language.bm.PhoneticEngine:263-while (si.hasNext()) {	0
org.apache.commons.codec.language.bm.PhoneticEngine:264-sb.append(sep).append(si.next());	0
org.apache.commons.codec.language.bm.PhoneticEngine:267-return sb.toString();	0
org.apache.commons.codec.language.bm.PhoneticEngine:331-if (finalRules == null) {	0
org.apache.commons.codec.language.bm.PhoneticEngine:332-throw new NullPointerException("finalRules can not be null");	0
org.apache.commons.codec.language.bm.PhoneticEngine:334-if (finalRules.isEmpty()) {	0
org.apache.commons.codec.language.bm.PhoneticEngine:335-return phonemeBuilder;	0
org.apache.commons.codec.language.bm.PhoneticEngine:338-final Set<Rule.Phoneme> phonemes = new TreeSet<Rule.Phoneme>(Rule.Phoneme.COMPARATOR);	1
org.apache.commons.codec.language.bm.PhoneticEngine:340-for (final Rule.Phoneme phoneme : phonemeBuilder.getPhonemes()) {	0
org.apache.commons.codec.language.bm.PhoneticEngine:341-PhonemeBuilder subBuilder = PhonemeBuilder.empty(phoneme.getLanguages());	0
org.apache.commons.codec.language.bm.PhoneticEngine:342-final String phonemeText = phoneme.getPhonemeText().toString();	0
org.apache.commons.codec.language.bm.PhoneticEngine:344-for (int i = 0; i < phonemeText.length();) {	0
org.apache.commons.codec.language.bm.PhoneticEngine:345-final RulesApplication rulesApplication =	0
org.apache.commons.codec.language.bm.PhoneticEngine:347-final boolean found = rulesApplication.isFound();	0
org.apache.commons.codec.language.bm.PhoneticEngine:348-subBuilder = rulesApplication.getPhonemeBuilder();	0
org.apache.commons.codec.language.bm.PhoneticEngine:350-if (!found) {	0
org.apache.commons.codec.language.bm.PhoneticEngine:352-subBuilder.append(phonemeText.subSequence(i, i + 1));	0
org.apache.commons.codec.language.bm.PhoneticEngine:355-i = rulesApplication.getI();	0
org.apache.commons.codec.language.bm.PhoneticEngine:356-}	0
org.apache.commons.codec.language.bm.PhoneticEngine:361-phonemes.addAll(subBuilder.getPhonemes());	1
org.apache.commons.codec.language.bm.PhoneticEngine:362-}	0
org.apache.commons.codec.language.bm.PhoneticEngine:364-return new PhonemeBuilder(phonemes);	0
org.apache.commons.codec.language.bm.PhoneticEngine:375-final Languages.LanguageSet languageSet = this.lang.guessLanguages(input);	0
org.apache.commons.codec.language.bm.PhoneticEngine:376-return encode(input, languageSet);	0
org.apache.commons.codec.language.bm.PhoneticEngine:389-final Map<String, List<Rule>> rules = Rule.getInstanceMap(this.nameType, RuleType.RULES, languageSet);	0
org.apache.commons.codec.language.bm.PhoneticEngine:391-final Map<String, List<Rule>> finalRules1 = Rule.getInstanceMap(this.nameType, this.ruleType, "common");	0
org.apache.commons.codec.language.bm.PhoneticEngine:393-final Map<String, List<Rule>> finalRules2 = Rule.getInstanceMap(this.nameType, this.ruleType, languageSet);	0
org.apache.commons.codec.language.Soundex:193-return 0;	0
org.apache.commons.codec.language.Soundex:190-final char preHWChar = str.charAt(index - 2);	0
org.apache.commons.codec.language.Soundex:191-final char firstCode = this.map(preHWChar);	0
org.apache.commons.codec.language.Soundex:192-if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {	0
org.apache.commons.codec.language.Soundex:167-return soundex(str);	0
org.apache.commons.codec.language.Soundex:188-final char hwChar = str.charAt(index - 1);	1
org.apache.commons.codec.language.Soundex:189-if ('H' == hwChar || 'W' == hwChar) {	0
org.apache.commons.codec.language.Soundex:273-mapped = getMappingCode(str, incount++);	0
org.apache.commons.codec.language.Soundex:274-if (mapped != 0) {	0
org.apache.commons.codec.language.Soundex:275-if (mapped != '0' && mapped != last) {	0
org.apache.commons.codec.language.Soundex:276-out[count++] = mapped;	0
org.apache.commons.codec.language.Soundex:278-last = mapped;	0
org.apache.commons.codec.language.Soundex:185-final char mappedChar = this.map(str.charAt(index));	0
org.apache.commons.codec.language.Soundex:187-if (index > 1 && mappedChar != '0') {	0
org.apache.commons.codec.language.Soundex:197-return mappedChar;	0
org.apache.commons.codec.language.Soundex:217-return this.soundexMapping;	0
org.apache.commons.codec.language.Soundex:230-final int index = ch - 'A';	0
org.apache.commons.codec.language.Soundex:231-if (index < 0 || index >= this.getSoundexMapping().length) {	0
org.apache.commons.codec.language.Soundex:234-return this.getSoundexMapping()[index];	0
org.apache.commons.codec.language.Soundex:266-final char out[] = {'0', '0', '0', '0'};	0
org.apache.commons.codec.language.Soundex:268-int incount = 1, count = 1;	0
org.apache.commons.codec.language.Soundex:269-out[0] = str.charAt(0);	0
org.apache.commons.codec.language.Soundex:271-last = getMappingCode(str, 0);	0
org.apache.commons.codec.language.Soundex:272-while (incount < str.length() && count < out.length) {	0
org.apache.commons.codec.language.Soundex:281-return new String(out);	0
org.apache.commons.codec.language.Soundex:262-str = SoundexUtils.clean(str);	0
org.apache.commons.codec.language.Soundex:263-if (str.length() == 0) {	0
org.apache.commons.codec.language.Soundex:259-if (str == null) {	0
org.apache.commons.codec.language.Soundex:81-public Soundex() {	0
org.apache.commons.codec.language.Soundex:66-@Deprecated	0
org.apache.commons.codec.language.Soundex:82-this.soundexMapping = US_ENGLISH_MAPPING;	0
org.apache.commons.codec.language.Soundex:83-}	0
org.apache.commons.codec.language.Soundex:52-private static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();	0
org.apache.commons.codec.language.Soundex:59-public static final Soundex US_ENGLISH = new Soundex();	0
org.apache.commons.codec.language.Soundex:95-public Soundex(final char[] mapping) {	0
org.apache.commons.codec.language.Soundex:66-@Deprecated	0
org.apache.commons.codec.language.Soundex:96-this.soundexMapping = new char[mapping.length];	0
org.apache.commons.codec.language.Soundex:97-System.arraycopy(mapping, 0, this.soundexMapping, 0, mapping.length);	0
org.apache.commons.codec.language.Soundex:98-}	0
org.apache.commons.codec.language.Soundex:108-public Soundex(final String mapping) {	0
org.apache.commons.codec.language.Soundex:66-@Deprecated	0
org.apache.commons.codec.language.Soundex:109-this.soundexMapping = mapping.toCharArray();	0
org.apache.commons.codec.language.Soundex:110-}	0
org.apache.commons.codec.language.Soundex:132-return SoundexUtils.difference(this, s1, s2);	0
org.apache.commons.codec.language.Soundex:150-if (!(obj instanceof String)) {	0
org.apache.commons.codec.language.Soundex:151-throw new EncoderException("Parameter supplied to Soundex encode is not of type java.lang.String");	0
org.apache.commons.codec.language.Soundex:153-return soundex((String) obj);	0
org.apache.commons.codec.language.Soundex:208-return this.maxLength;	0
org.apache.commons.codec.language.Soundex:232-throw new IllegalArgumentException("The character is not mapped: " + ch);	0
org.apache.commons.codec.language.Soundex:246-this.maxLength = maxLength;	0
org.apache.commons.codec.binary.Base32:309-throw new IllegalArgumentException("pad must not be in alphabet or whitespace");	0
org.apache.commons.codec.binary.Base32:193-this(0, null, useHex, pad);	0
org.apache.commons.codec.binary.Base32:284-this.encodeTable = HEX_ENCODE_TABLE;	0
org.apache.commons.codec.binary.Base32:285-this.decodeTable = HEX_DECODE_TABLE;	0
org.apache.commons.codec.binary.Base32:303-this.encodeSize = BYTES_PER_ENCODED_BLOCK;	0
org.apache.commons.codec.binary.Base32:304-this.lineSeparator = null;	0
org.apache.commons.codec.binary.Base32:281-super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength,	0
org.apache.commons.codec.binary.Base32:283-if (useHex) {	0
org.apache.commons.codec.binary.Base32:290-if (lineLength > 0) {	0
org.apache.commons.codec.binary.Base32:306-this.decodeSize = this.encodeSize - 1;	0
org.apache.commons.codec.binary.Base32:308-if (isInAlphabet(pad) || isWhiteSpace(pad)) {	0
org.apache.commons.codec.binary.Base32:60-private static final byte[] CHUNK_SEPARATOR = {'\r', '\n'};	0
org.apache.commons.codec.binary.Base32:67-private static final byte[] DECODE_TABLE = {	0
org.apache.commons.codec.binary.Base32:81-private static final byte[] ENCODE_TABLE = {	0
org.apache.commons.codec.binary.Base32:92-private static final byte[] HEX_DECODE_TABLE = {	0
org.apache.commons.codec.binary.Base32:106-private static final byte[] HEX_ENCODE_TABLE = {	0
org.apache.commons.codec.binary.Base32:537-return octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1;	0
org.apache.commons.codec.binary.Base32:159-this(false);	0
org.apache.commons.codec.binary.Base32:160-}	0
org.apache.commons.codec.binary.Base32:170-this(false, pad);	0
org.apache.commons.codec.binary.Base32:171-}	0
org.apache.commons.codec.binary.Base32:181-this(0, null, useHex, PAD_DEFAULT);	0
org.apache.commons.codec.binary.Base32:182-}	0
org.apache.commons.codec.binary.Base32:194-}	0
org.apache.commons.codec.binary.Base32:208-this(lineLength, CHUNK_SEPARATOR);	0
org.apache.commons.codec.binary.Base32:209-}	0
org.apache.commons.codec.binary.Base32:230-this(lineLength, lineSeparator, false, PAD_DEFAULT);	0
org.apache.commons.codec.binary.Base32:231-}	0
org.apache.commons.codec.binary.Base32:255-this(lineLength, lineSeparator, useHex, PAD_DEFAULT);	0
org.apache.commons.codec.binary.Base32:256-}	0
org.apache.commons.codec.binary.Base32:287-this.encodeTable = ENCODE_TABLE;	0
org.apache.commons.codec.binary.Base32:288-this.decodeTable = DECODE_TABLE;	0
org.apache.commons.codec.binary.Base32:291-if (lineSeparator == null) {	0
org.apache.commons.codec.binary.Base32:292-throw new IllegalArgumentException("lineLength " + lineLength + " > 0, but lineSeparator is null");	0
org.apache.commons.codec.binary.Base32:295-if (containsAlphabetOrPad(lineSeparator)) {	0
org.apache.commons.codec.binary.Base32:296-final String sep = StringUtils.newStringUtf8(lineSeparator);	0
org.apache.commons.codec.binary.Base32:297-throw new IllegalArgumentException("lineSeparator must not contain Base32 characters: [" + sep + "]");	0
org.apache.commons.codec.binary.Base32:299-this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;	0
org.apache.commons.codec.binary.Base32:300-this.lineSeparator = new byte[lineSeparator.length];	0
org.apache.commons.codec.binary.Base32:301-System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);	0
org.apache.commons.codec.binary.Base32:311-}	0
org.apache.commons.codec.binary.Base32:339-if (context.eof) {	0
org.apache.commons.codec.binary.Base32:340-return;	0
org.apache.commons.codec.binary.Base32:342-if (inAvail < 0) {	0
org.apache.commons.codec.binary.Base32:343-context.eof = true;	0
org.apache.commons.codec.binary.Base32:345-for (int i = 0; i < inAvail; i++) {	0
org.apache.commons.codec.binary.Base32:346-final byte b = in[inPos++];	0
org.apache.commons.codec.binary.Base32:347-if (b == pad) {	0
org.apache.commons.codec.binary.Base32:349-context.eof = true;	0
org.apache.commons.codec.binary.Base32:350-break;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:85-public CpioArchiveOutputStream(final OutputStream out, final short format) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:63-private boolean closed = false;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:67-private short entryFormat = FORMAT_NEW;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:69-private final HashMap names = new HashMap();	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:71-private long crc = 0;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:86-this.out = new FilterOutputStream(out);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:87-setFormat(format);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:88-}	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:98-this(out, FORMAT_NEW);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:99-}	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:108-if (this.closed) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:111-}	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:121-switch (format) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:126-break;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:131-synchronized (this) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:132-this.entryFormat = format;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:133-}	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:134-}	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:150-ensureOpen();	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:151-if (this.cpioEntry != null) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:154-if (e.getTime() == -1) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:155-e.setTime(System.currentTimeMillis());	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:160-if (e.getFormat() == -1) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:164-if (this.names.put(e.getName(), e) != null) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:168-writeHeader(e);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:169-this.cpioEntry = e;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:170-this.written = 0;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:171-}	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:174-switch (e.getFormat()) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:176-out.write(MAGIC_NEW.getBytes());	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:177-writeNewEntry(e);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:178-break;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:193-}	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:196-writeAsciiLong(entry.getInode(), 8, 16);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:197-writeAsciiLong(entry.getMode(), 8, 16);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:198-writeAsciiLong(entry.getUID(), 8, 16);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:199-writeAsciiLong(entry.getGID(), 8, 16);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:200-writeAsciiLong(entry.getNumberOfLinks(), 8, 16);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:201-writeAsciiLong(entry.getTime(), 8, 16);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:202-writeAsciiLong(entry.getSize(), 8, 16);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:203-writeAsciiLong(entry.getDeviceMaj(), 8, 16);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:204-writeAsciiLong(entry.getDeviceMin(), 8, 16);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:205-writeAsciiLong(entry.getRemoteDeviceMaj(), 8, 16);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:206-writeAsciiLong(entry.getRemoteDeviceMin(), 8, 16);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:207-writeAsciiLong(entry.getName().length() + 1, 8, 16);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:208-writeAsciiLong(entry.getChksum(), 8, 16);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:209-writeCString(entry.getName());	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:210-pad(entry.getHeaderSize() + entry.getName().length() + 1, 4);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:211-}	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:251-ensureOpen();	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:80-return null;	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:47-public ArArchiveInputStream( final InputStream pInput ) {	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:36-private long offset = 0;	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:48-input = pInput;	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:49-closed = false;	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:50-}	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:63-if (offset == 0) {	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:64-final byte[] expected = ArArchiveEntry.HEADER.getBytes();	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:65-final byte[] realized = new byte[expected.length];	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:66-final int read = read(realized);	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:67-if (read != expected.length) {	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:70-for (int i = 0; i < expected.length; i++) {	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:71-if (expected[i] != realized[i]) {	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:79-if (input.available() == 0) {	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:83-if (offset % 2 != 0) {	1
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:86-final byte[] name = new byte[16];	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:87-final byte[] lastmodified = new byte[12];	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:88-final byte[] userid = new byte[6];	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:89-final byte[] groupid = new byte[6];	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:90-final byte[] filemode = new byte[8];	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:91-final byte[] length = new byte[10];	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:93-read(name);	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:94-read(lastmodified);	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:95-read(userid);	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:96-read(groupid);	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:97-read(filemode);	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:98-read(length);	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:101-final byte[] expected = ArArchiveEntry.TRAILER.getBytes();	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:102-final byte[] realized = new byte[expected.length];	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:103-final int read = read(realized);	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:104-if (read != expected.length) {	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:107-for (int i = 0; i < expected.length; i++) {	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:108-if (expected[i] != realized[i]) {	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:114-return new ArArchiveEntry(new String(name).trim(),	1
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:121-return getNextArEntry();	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:125-if (!closed) {	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:126-closed = true;	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:127-input.close();	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:129-}	1
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:138-return read(b, 0, b.length);	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:142-int toRead = len;	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:143-final int ret = this.input.read(b, off, toRead);	1
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:144-offset += (ret > 0 ? ret : 0);	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:145-return ret;	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:151-if (length < 8) {	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:154-if (signature[0] != 0x21) {	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:157-if (signature[1] != 0x3c) {	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:160-if (signature[2] != 0x61) {	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:163-if (signature[3] != 0x72) {	0
org.apache.commons.compress.archivers.ar.ArArchiveInputStream:166-if (signature[4] != 0x63) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:63-this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:64-}	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:81-public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:50-private int longFileMode = LONGFILE_ERROR;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:52-private boolean closed = false;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:82-out = os;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:84-this.buffer = new TarBuffer(os, blockSize, recordSize);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:85-this.assemLen = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:86-this.assemBuf = new byte[recordSize];	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:87-this.recordBuf = new byte[recordSize];	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:88-}	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:112-writeEOFRecord();	1
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:113-writeEOFRecord();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:114-}	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:154-TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:155-if (entry.getName().length() >= TarConstants.NAMELEN) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:176-entry.writeEntryHeader(recordBuf);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:177-buffer.writeRecord(recordBuf);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:179-currBytes = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:181-if (entry.isDirectory()) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:184-currSize = entry.getSize();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:186-currName = entry.getName();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:187-}	1
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:303-for (int i = 0; i < recordBuf.length; ++i) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:304-recordBuf[i] = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:307-buffer.writeRecord(recordBuf);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:308-}	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:72-this(os, blockSize, TarBuffer.DEFAULT_RCDSIZE);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:73-}	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:98-this.longFileMode = longFileMode;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:99-}	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:123-if (!closed) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:124-finish();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:125-buffer.close();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:126-out.close();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:127-closed = true;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:129-}	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:137-return buffer.getRecordSize();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:157-if (longFileMode == LONGFILE_GNU) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:160-TarArchiveEntry longLinkEntry = new TarArchiveEntry(TarConstants.GNU_LONGLINK,	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:163-final byte[] nameBytes = entry.getName().getBytes(); // TODO is it correct to use the default charset here?	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:164-longLinkEntry.setSize(nameBytes.length + 1); // +1 for NUL	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:165-putArchiveEntry(longLinkEntry);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:166-write(nameBytes);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:167-write(0); // NUL terminator	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:168-closeArchiveEntry();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:169-} else if (longFileMode != LONGFILE_TRUNCATE) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:170-throw new RuntimeException("file name '" + entry.getName()	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:182-currSize = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:200-if (assemLen > 0) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:335-if(entry != null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:339-cdOffset = written;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:340-for (Iterator i = entries.iterator(); i.hasNext(); ) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:341-writeCentralFileHeader((ZipArchiveEntry) i.next());	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:343-cdLength = written - cdOffset;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:344-writeCentralDirectoryEnd();	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:345-offsets.clear();	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:346-entries.clear();	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:347-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:354-if (entry == null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:355-return;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:358-long realCrc = crc.getValue();	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:359-crc.reset();	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:361-if (entry.getMethod() == DEFLATED) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:362-def.finish();	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:363-while (!def.finished()) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:364-deflate();	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:367-entry.setSize(ZipUtil.adjustToLong(def.getTotalIn()));	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:368-entry.setCompressedSize(ZipUtil.adjustToLong(def.getTotalOut()));	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:369-entry.setCrc(realCrc);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:371-def.reset();	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:373-written += entry.getCompressedSize();	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:400-if (raf != null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:410-writeDataDescriptor(entry);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:411-entry = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:412-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:417-closeArchiveEntry();	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:419-entry = ((ZipArchiveEntry) archiveEntry);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:420-entries.add(entry);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:422-if (entry.getMethod() == -1) { // not specified	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:423-entry.setMethod(method);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:426-if (entry.getTime() == -1) { // not specified	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:427-entry.setTime(System.currentTimeMillis());	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:431-if (entry.getMethod() == STORED && raf == null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:444-if (entry.getMethod() == DEFLATED && hasCompressionLevelChanged) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:448-writeLocalFileHeader(entry);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:449-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:530-finish();	1
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:531-if (raf != null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:534-if (out != null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:537-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:576-int len = def.deflate(buf, 0, buf.length);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:577-if (len > 0) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:578-writeOut(buf, 0, len);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:580-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:589-boolean encodable = zipEncoding.canEncode(ze.getName());	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:593-if (!encodable && fallbackToUTF8) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:596-entryEncoding = zipEncoding;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:599-ByteBuffer name = entryEncoding.encode(ze.getName());	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:601-if (createUnicodeExtraFields != UnicodeExtraFieldPolicy.NEVER) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:101-boolean useUnicodeExtraFields) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:61-private final Inflater inf = new Inflater(true);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:62-private final CRC32 crc = new CRC32();	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:64-private final byte[] buf = new byte[ZipArchiveOutputStream.BUFFER_SIZE];	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:66-private ZipArchiveEntry current = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:67-private boolean closed = false;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:68-private boolean hitCentralDirectory = false;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:69-private int readBytesOfEntry = 0, offsetInBuffer = 0;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:70-private int bytesReadFromStream = 0;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:71-private int lengthOfLastRead = 0;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:72-private boolean hasDataDescriptor = false;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:102-zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:103-this.useUnicodeExtraFields = useUnicodeExtraFields;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:104-in = new PushbackInputStream(inputStream, buf.length);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:105-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:108-if (closed || hitCentralDirectory) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:111-if (current != null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:112-closeEntry();	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:114-byte[] lfh = new byte[LFH_LEN];	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:116-readFully(lfh);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:119-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:120-ZipLong sig = new ZipLong(lfh);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:121-if (sig.equals(ZipLong.CFH_SIG)) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:125-if (!sig.equals(ZipLong.LFH_SIG)) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:129-int off = WORD;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:130-current = new ZipArchiveEntry();	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:132-int versionMadeBy = ZipShort.getValue(lfh, off);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:133-off += SHORT;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:134-current.setPlatform((versionMadeBy >> ZipFile.BYTE_SHIFT)	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:137-final int generalPurposeFlag = ZipShort.getValue(lfh, off);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:138-final boolean hasEFS =	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:140-final ZipEncoding entryEncoding =	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:142-hasDataDescriptor = (generalPurposeFlag & 8) != 0;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:144-off += SHORT;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:146-current.setMethod(ZipShort.getValue(lfh, off));	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:147-off += SHORT;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:149-long time = ZipUtil.dosToJavaTime(ZipLong.getValue(lfh, off));	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:150-current.setTime(time);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:151-off += WORD;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:153-if (!hasDataDescriptor) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:154-current.setCrc(ZipLong.getValue(lfh, off));	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:155-off += WORD;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:157-current.setCompressedSize(ZipLong.getValue(lfh, off));	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:158-off += WORD;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:160-current.setSize(ZipLong.getValue(lfh, off));	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:161-off += WORD;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:166-int fileNameLen = ZipShort.getValue(lfh, off);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:168-off += SHORT;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:170-int extraLen = ZipShort.getValue(lfh, off);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:171-off += SHORT;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:455-if (this == obj) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:458-if (obj == null || getClass() != obj.getClass()) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:461-ZipArchiveEntry other = (ZipArchiveEntry) obj;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:462-if (name == null) {	1
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:463-if (other.name != null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:469-return true;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:63-super(name);	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:50-private int method = -1;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:52-private int internalAttributes = 0;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:53-private int platform = PLATFORM_FAT;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:54-private long externalAttributes = 0;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:55-private LinkedHashMap/*<ZipShort, ZipExtraField>*/ extraFields = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:56-private String name = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:64-}	1
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:72-super(entry);	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:50-private int method = -1;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:52-private int internalAttributes = 0;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:53-private int platform = PLATFORM_FAT;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:54-private long externalAttributes = 0;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:55-private LinkedHashMap/*<ZipShort, ZipExtraField>*/ extraFields = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:56-private String name = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:73-setName(entry.getName());	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:74-byte[] extra = entry.getExtra();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:75-if (extra != null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:76-setExtraFields(ExtraFieldUtils.parse(extra));	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:79-setExtra();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:81-setMethod(entry.getMethod());	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:82-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:90-this((java.util.zip.ZipEntry) entry);	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:91-setInternalAttributes(entry.getInternalAttributes());	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:92-setExternalAttributes(entry.getExternalAttributes());	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:93-setExtraFields(entry.getExtraFields());	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:94-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:99-this("");	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:100-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:103-this(inputFile.isDirectory() && !entryName.endsWith("/") ?	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:105-if (inputFile.isFile()){	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:106-setSize(inputFile.length());	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:108-setTime(inputFile.lastModified());	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:110-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:117-ZipArchiveEntry e = (ZipArchiveEntry) super.clone();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:119-e.extraFields = extraFields != null ? (LinkedHashMap) extraFields.clone() : null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:120-e.setInternalAttributes(getInternalAttributes());	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:121-e.setExternalAttributes(getExternalAttributes());	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:122-e.setExtraFields(getExtraFields());	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:123-return e;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:137-return method == STORED || method == DEFLATED;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:147-return method;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:156-if (method < 0) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:157-throw new IllegalArgumentException(	0
org.apache.commons.compress.archivers.tar.TarUtils:94-StringBuffer result = new StringBuffer(length);	0
org.apache.commons.compress.archivers.tar.TarUtils:95-intend = offset + length;	0
org.apache.commons.compress.archivers.tar.TarUtils:97-for (int i = offset; i < end; ++i) {	0
org.apache.commons.compress.archivers.tar.TarUtils:98-if (buffer[i] == 0) {	1
org.apache.commons.compress.archivers.tar.TarUtils:99-break;	0
org.apache.commons.compress.archivers.tar.TarUtils:101-result.append((char) buffer[i]);	0
org.apache.commons.compress.archivers.tar.TarUtils:104-return result.toString();	0
org.apache.commons.compress.archivers.tar.TarUtils:126-for (i = 0; i < length && i < name.length(); ++i) {	0
org.apache.commons.compress.archivers.tar.TarUtils:127-buf[offset + i] = (byte) name.charAt(i);	0
org.apache.commons.compress.archivers.tar.TarUtils:131-for (; i < length; ++i) {	0
org.apache.commons.compress.archivers.tar.TarUtils:132-buf[offset + i] = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:135-return offset + length;	0
org.apache.commons.compress.archivers.tar.TarUtils:32-private TarUtils(){	0
org.apache.commons.compress.archivers.tar.TarUtils:33-}	0
org.apache.commons.compress.archivers.tar.TarUtils:49-longresult = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:50-boolean stillPadding = true;	0
org.apache.commons.compress.archivers.tar.TarUtils:51-int end = offset + length;	0
org.apache.commons.compress.archivers.tar.TarUtils:53-for (int i = offset; i < end; ++i) {	0
org.apache.commons.compress.archivers.tar.TarUtils:54-final byte currentByte = buffer[i];	0
org.apache.commons.compress.archivers.tar.TarUtils:55-if (currentByte == 0) { // Found trailing null	0
org.apache.commons.compress.archivers.tar.TarUtils:56-break;	0
org.apache.commons.compress.archivers.tar.TarUtils:60-if (currentByte == (byte) ' ' || currentByte == '0') {	0
org.apache.commons.compress.archivers.tar.TarUtils:61-if (stillPadding) {	0
org.apache.commons.compress.archivers.tar.TarUtils:62-continue;	0
org.apache.commons.compress.archivers.tar.TarUtils:65-if (currentByte == (byte) ' ') { // Found trailing space	0
org.apache.commons.compress.archivers.tar.TarUtils:66-break;	0
org.apache.commons.compress.archivers.tar.TarUtils:70-stillPadding = false;	0
org.apache.commons.compress.archivers.tar.TarUtils:72-if (currentByte < '0' || currentByte > '7'){	0
org.apache.commons.compress.archivers.tar.TarUtils:73-throw new IllegalArgumentException(	0
org.apache.commons.compress.archivers.tar.TarUtils:76-result = (result << 3) + (currentByte - '0');// TODO needs to reject invalid bytes	0
org.apache.commons.compress.archivers.tar.TarUtils:80-return result;	0
org.apache.commons.compress.archivers.tar.TarUtils:149-int remaining = length;	0
org.apache.commons.compress.archivers.tar.TarUtils:150-remaining--;	0
org.apache.commons.compress.archivers.tar.TarUtils:151-if (value == 0) {	0
org.apache.commons.compress.archivers.tar.TarUtils:152-buffer[offset + remaining--] = (byte) '0';	0
org.apache.commons.compress.archivers.tar.TarUtils:154-long val = value;	0
org.apache.commons.compress.archivers.tar.TarUtils:155-for (; remaining >= 0 && val != 0; --remaining) {	0
org.apache.commons.compress.archivers.tar.TarUtils:157-buffer[offset + remaining] = (byte) ((byte) '0' + (byte) (val & 7));	0
org.apache.commons.compress.archivers.tar.TarUtils:158-val = val >>> 3;	0
org.apache.commons.compress.archivers.tar.TarUtils:161-if (val != 0){	0
org.apache.commons.compress.archivers.tar.TarUtils:162-throw new IllegalArgumentException	0
org.apache.commons.compress.archivers.tar.TarUtils:167-for (; remaining >= 0; --remaining) { // leading zeros	0
org.apache.commons.compress.archivers.tar.TarUtils:168-buffer[offset + remaining] = (byte) '0';	0
org.apache.commons.compress.archivers.tar.TarUtils:170-}	0
org.apache.commons.compress.archivers.tar.TarUtils:188-int idx=length-2; // For space and trailing null	0
org.apache.commons.compress.archivers.tar.TarUtils:189-formatUnsignedOctalString(value, buf, offset, idx);	0
org.apache.commons.compress.archivers.tar.TarUtils:191-buf[offset + idx++] = (byte) ' '; // Trailing space	0
org.apache.commons.compress.archivers.tar.TarUtils:192-buf[offset + idx] = 0; // Trailing null	0
org.apache.commons.compress.archivers.tar.TarUtils:194-return offset + length;	0
org.apache.commons.compress.archivers.tar.TarUtils:213-int idx=length-1; // For space	0
org.apache.commons.compress.archivers.tar.TarUtils:52-longresult = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:53-boolean stillPadding = true;	1
org.apache.commons.compress.archivers.tar.TarUtils:54-int end = offset + length;	0
org.apache.commons.compress.archivers.tar.TarUtils:55-int start = offset;	0
org.apache.commons.compress.archivers.tar.TarUtils:57-for (int i = start; i < end; i++){	1
org.apache.commons.compress.archivers.tar.TarUtils:86-return result;	0
org.apache.commons.compress.archivers.tar.TarUtils:32-private TarUtils(){	0
org.apache.commons.compress.archivers.tar.TarUtils:33-}	0
org.apache.commons.compress.archivers.tar.TarUtils:58-final byte currentByte = buffer[i];	0
org.apache.commons.compress.archivers.tar.TarUtils:59-if (currentByte == 0) {	0
org.apache.commons.compress.archivers.tar.TarUtils:60-break;	0
org.apache.commons.compress.archivers.tar.TarUtils:64-if (currentByte == (byte) ' ' || currentByte == '0') {	0
org.apache.commons.compress.archivers.tar.TarUtils:65-if (stillPadding) {	0
org.apache.commons.compress.archivers.tar.TarUtils:66-continue;	0
org.apache.commons.compress.archivers.tar.TarUtils:68-if (currentByte == (byte) ' ') {	0
org.apache.commons.compress.archivers.tar.TarUtils:69-break;	0
org.apache.commons.compress.archivers.tar.TarUtils:76-stillPadding = false;	0
org.apache.commons.compress.archivers.tar.TarUtils:78-if (currentByte < '0' || currentByte > '7'){	0
org.apache.commons.compress.archivers.tar.TarUtils:79-throw new IllegalArgumentException(	0
org.apache.commons.compress.archivers.tar.TarUtils:82-result = (result << 3) + (currentByte - '0'); // convert from ASCII	0
org.apache.commons.compress.archivers.tar.TarUtils:92-String string = new String(buffer, offset, length);	0
org.apache.commons.compress.archivers.tar.TarUtils:93-string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed	0
org.apache.commons.compress.archivers.tar.TarUtils:94-final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length;	0
org.apache.commons.compress.archivers.tar.TarUtils:95-return s;	0
org.apache.commons.compress.archivers.tar.TarUtils:109-StringBuffer result = new StringBuffer(length);	0
org.apache.commons.compress.archivers.tar.TarUtils:110-intend = offset + length;	0
org.apache.commons.compress.archivers.tar.TarUtils:112-for (int i = offset; i < end; ++i) {	0
org.apache.commons.compress.archivers.tar.TarUtils:113-byte b = buffer[i];	0
org.apache.commons.compress.archivers.tar.TarUtils:114-if (b == 0) { // Trailing null	0
org.apache.commons.compress.archivers.tar.TarUtils:115-break;	0
org.apache.commons.compress.archivers.tar.TarUtils:117-result.append((char) (b & 0xFF)); // Allow for sign-extension	0
org.apache.commons.compress.archivers.tar.TarUtils:120-return result.toString();	0
org.apache.commons.compress.archivers.tar.TarUtils:142-for (i = 0; i < length && i < name.length(); ++i) {	0
org.apache.commons.compress.archivers.tar.TarUtils:143-buf[offset + i] = (byte) name.charAt(i);	0
org.apache.commons.compress.archivers.tar.TarUtils:147-for (; i < length; ++i) {	0
org.apache.commons.compress.archivers.tar.TarUtils:148-buf[offset + i] = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:151-return offset + length;	0
org.apache.commons.compress.archivers.tar.TarUtils:165-int remaining = length;	0
org.apache.commons.compress.archivers.tar.TarUtils:166-remaining--;	0
org.apache.commons.compress.archivers.tar.TarUtils:167-if (value == 0) {	0
org.apache.commons.compress.archivers.tar.TarUtils:168-buffer[offset + remaining--] = (byte) '0';	0
org.apache.commons.compress.archivers.tar.TarUtils:170-long val = value;	0
org.apache.commons.compress.archivers.tar.TarUtils:171-for (; remaining >= 0 && val != 0; --remaining) {	0
org.apache.commons.compress.archivers.tar.TarUtils:173-buffer[offset + remaining] = (byte) ((byte) '0' + (byte) (val & 7));	0
org.apache.commons.compress.archivers.tar.TarUtils:174-val = val >>> 3;	0
org.apache.commons.compress.archivers.tar.TarUtils:177-if (val != 0){	0
org.apache.commons.compress.archivers.tar.TarUtils:178-throw new IllegalArgumentException	0
org.apache.commons.compress.archivers.tar.TarUtils:183-for (; remaining >= 0; --remaining) { // leading zeros	0
org.apache.commons.compress.archivers.tar.TarUtils:184-buffer[offset + remaining] = (byte) '0';	0
org.apache.commons.compress.archivers.tar.TarUtils:186-}	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:69-this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:70-}	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:87-public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:52-private int longFileMode = LONGFILE_ERROR;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:54-private boolean closed = false;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:57-private boolean haveUnclosedEntry = false;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:60-private boolean finished = false;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:88-out = new CountingOutputStream(os);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:90-this.buffer = new TarBuffer(out, blockSize, recordSize);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:91-this.assemLen = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:92-this.assemBuf = new byte[recordSize];	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:93-this.recordBuf = new byte[recordSize];	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:94-}	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:121-if (finished) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:125-if(haveUnclosedEntry) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:128-writeEOFRecord();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:129-writeEOFRecord();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:130-buffer.flushBlock();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:131-finished = true;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:132-}	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:140-if(!finished) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:141-finish();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:144-if (!closed) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:145-buffer.close();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:146-out.close();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:147-closed = true;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:149-}	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:175-if(finished) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:178-TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:179-if (entry.getName().length() >= TarConstants.NAMELEN) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:200-entry.writeEntryHeader(recordBuf);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:201-buffer.writeRecord(recordBuf);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:203-currBytes = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:205-if (entry.isDirectory()) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:208-currSize = entry.getSize();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:210-currName = entry.getName();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:211-haveUnclosedEntry = true;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:212-}	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:226-if(finished) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:229-if (!haveUnclosedEntry){	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:232-if (assemLen > 0) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:233-for (int i = assemLen; i < assemBuf.length; ++i) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:234-assemBuf[i] = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:237-buffer.writeRecord(assemBuf);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:239-currBytes += assemLen;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:240-assemLen = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:243-if (currBytes < currSize) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:249-haveUnclosedEntry = false;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:250-}	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:268-if ((currBytes + numToWrite) > currSize) {	0
org.apache.commons.compress.archivers.zip.ZipFile:319-OffsetEntry offsetEntry = entries.get(ze);	0
org.apache.commons.compress.archivers.zip.ZipFile:320-if (offsetEntry == null) {	0
org.apache.commons.compress.archivers.zip.ZipFile:321-return null;	0
org.apache.commons.compress.archivers.zip.ZipFile:323-ZipUtil.checkRequestedFeatures(ze);	0
org.apache.commons.compress.archivers.zip.ZipFile:324-long start = offsetEntry.dataOffset;	0
org.apache.commons.compress.archivers.zip.ZipFile:325-BoundedInputStream bis =	0
org.apache.commons.compress.archivers.zip.ZipFile:327-switch (ze.getMethod()) {	0
org.apache.commons.compress.archivers.zip.ZipFile:329-return bis;	0
org.apache.commons.compress.archivers.zip.ZipFile:513-noUTF8Flag.put(ze, new NameAndComment(fileName, comment));	0
org.apache.commons.compress.archivers.zip.ZipFile:833-String orig = ze.getName();	0
org.apache.commons.compress.archivers.zip.ZipFile:834-NameAndComment nc = entriesWithoutUTF8Flag.get(ze);	0
org.apache.commons.compress.archivers.zip.ZipFile:835-ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,	0
org.apache.commons.compress.archivers.zip.ZipFile:837-if (!orig.equals(ze.getName())) {	0
org.apache.commons.compress.archivers.zip.ZipFile:838-nameMap.remove(orig);	0
org.apache.commons.compress.archivers.zip.ZipFile:839-nameMap.put(ze.getName(), ze);	0
org.apache.commons.compress.archivers.zip.ZipFile:295-return nameMap.get(name);	0
org.apache.commons.compress.archivers.zip.ZipFile:197-throws IOException {	0
org.apache.commons.compress.archivers.zip.ZipFile:86-private final Map<ZipArchiveEntry, OffsetEntry> entries =	0
org.apache.commons.compress.archivers.zip.ZipFile:92-private final Map<String, ZipArchiveEntry> nameMap =	0
org.apache.commons.compress.archivers.zip.ZipFile:947-private final Comparator<ZipArchiveEntry> OFFSET_COMPARATOR =	0
org.apache.commons.compress.archivers.zip.ZipFile:198-this.archiveName = f.getAbsolutePath();	0
org.apache.commons.compress.archivers.zip.ZipFile:199-this.encoding = encoding;	0
org.apache.commons.compress.archivers.zip.ZipFile:200-this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);	0
org.apache.commons.compress.archivers.zip.ZipFile:201-this.useUnicodeExtraFields = useUnicodeExtraFields;	0
org.apache.commons.compress.archivers.zip.ZipFile:202-archive = new RandomAccessFile(f, "r");	0
org.apache.commons.compress.archivers.zip.ZipFile:203-boolean success = false;	0
org.apache.commons.compress.archivers.zip.ZipFile:205-Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag =	0
org.apache.commons.compress.archivers.zip.ZipFile:207-resolveLocalFileHeaderData(entriesWithoutUTF8Flag);	0
org.apache.commons.compress.archivers.zip.ZipFile:208-success = true;	0
org.apache.commons.compress.archivers.zip.ZipFile:210-if (!success) {	0
org.apache.commons.compress.archivers.zip.ZipFile:219-}	0
org.apache.commons.compress.archivers.zip.ZipFile:386-private static final long CFH_SIG =	0
org.apache.commons.compress.archivers.zip.ZipFile:238-closed = true;	0
org.apache.commons.compress.archivers.zip.ZipFile:240-archive.close();	0
org.apache.commons.compress.archivers.zip.ZipFile:241-}	0
org.apache.commons.compress.archivers.zip.ZipFile:249-if (zipfile != null) {	0
org.apache.commons.compress.archivers.zip.ZipFile:251-zipfile.close();	0
org.apache.commons.compress.archivers.zip.ZipFile:254-}	0
org.apache.commons.compress.archivers.zip.ZipFile:256-}	0
org.apache.commons.compress.archivers.zip.ZipFile:402-HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag =	0
org.apache.commons.compress.archivers.zip.ZipFile:405-positionAtCentralDirectory();	0
org.apache.commons.compress.archivers.zip.ZipFile:407-byte[] signatureBytes = new byte[WORD];	0
org.apache.commons.compress.archivers.zip.ZipFile:408-archive.readFully(signatureBytes);	0
org.apache.commons.compress.archivers.zip.ZipFile:409-long sig = ZipLong.getValue(signatureBytes);	0
org.apache.commons.compress.archivers.zip.ZipFile:411-if (sig != CFH_SIG && startsWithLocalFileHeader()) {	0
org.apache.commons.compress.archivers.zip.ZipFile:416-while (sig == CFH_SIG) {	0
org.apache.commons.compress.archivers.zip.ZipFile:417-readCentralDirectoryEntry(noUTF8Flag);	0
org.apache.commons.compress.archivers.zip.ZipFile:418-archive.readFully(signatureBytes);	0
org.apache.commons.compress.archivers.zip.ZipFile:419-sig = ZipLong.getValue(signatureBytes);	0
org.apache.commons.compress.archivers.zip.ZipFile:421-return noUTF8Flag;	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:74-public class ArchiveStreamFactory {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:199-if (in == null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:203-if (!in.markSupported()) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:207-final byte[] signature = new byte[12];	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:208-in.mark(signature.length);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:210-int signatureLength = in.read(signature);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:211-in.reset();	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:212-if (ZipArchiveInputStream.matches(signature, signatureLength)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:214-} else if (JarArchiveInputStream.matches(signature, signatureLength)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:216-} else if (ArArchiveInputStream.matches(signature, signatureLength)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:218-} else if (CpioArchiveInputStream.matches(signature, signatureLength)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:223-final byte[] dumpsig = new byte[32];	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:224-in.mark(dumpsig.length);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:225-signatureLength = in.read(dumpsig);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:226-in.reset();	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:227-if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:232-final byte[] tarheader = new byte[512];	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:233-in.mark(tarheader.length);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:234-signatureLength = in.read(tarheader);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:235-in.reset();	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:236-if (TarArchiveInputStream.matches(tarheader, signatureLength)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:241-TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:242-tais.getNextEntry();	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:243-return new TarArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:120-if (archiverName == null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:121-throw new IllegalArgumentException("Archivername must not be null.");	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:124-if (in == null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:125-throw new IllegalArgumentException("InputStream must not be null.");	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:128-if (AR.equalsIgnoreCase(archiverName)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:129-return new ArArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:131-if (ZIP.equalsIgnoreCase(archiverName)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:132-return new ZipArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:134-if (TAR.equalsIgnoreCase(archiverName)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:135-return new TarArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:137-if (JAR.equalsIgnoreCase(archiverName)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:138-return new JarArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:140-if (CPIO.equalsIgnoreCase(archiverName)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:141-return new CpioArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:143-if (DUMP.equalsIgnoreCase(archiverName)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:144-return new DumpArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:147-throw new ArchiveException("Archiver: " + archiverName + " not found.");	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:162-if (archiverName == null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:163-throw new IllegalArgumentException("Archivername must not be null.");	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:165-if (out == null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:166-throw new IllegalArgumentException("OutputStream must not be null.");	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:169-if (AR.equalsIgnoreCase(archiverName)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:170-return new ArArchiveOutputStream(out);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:172-if (ZIP.equalsIgnoreCase(archiverName)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:173-return new ZipArchiveOutputStream(out);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:175-if (TAR.equalsIgnoreCase(archiverName)) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:395-return getNextTarEntry();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:61-this(is, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:62-}	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:79-public TarArchiveInputStream(InputStream is, int blockSize, int recordSize) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:80-this.buffer = new TarBuffer(is, blockSize, recordSize);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:81-this.readBuf = null;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:82-this.hasHitEOF = false;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:83-}	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:173-if (hasHitEOF) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:177-if (currEntry != null) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:191-byte[] headerBuf = getRecord();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:193-if (hasHitEOF) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:198-currEntry = new TarArchiveEntry(headerBuf);	1
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:253-if (hasHitEOF) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:257-byte[] headerBuf = buffer.readRecord();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:259-if (headerBuf == null) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:261-} else if (buffer.isEOFRecord(headerBuf)) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:265-return hasHitEOF ? null : headerBuf;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:70-this(is, blockSize, TarBuffer.DEFAULT_RCDSIZE);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:71-}	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:91-buffer.close();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:92-}	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:100-return buffer.getRecordSize();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:117-if (entrySize - entryOffset > Integer.MAX_VALUE) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:118-return Integer.MAX_VALUE;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:120-return (int) (entrySize - entryOffset);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:139-byte[] skipBuf = new byte[BUFFER_SIZE];	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:140-long skip = numToSkip;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:141-while (skip > 0) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:142-int realSkip = (int) (skip > skipBuf.length ? skipBuf.length : skip);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:143-int numRead = read(skipBuf, 0, realSkip);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:144-if (numRead == -1) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:145-break;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:147-skip -= numRead;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:148-}	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:149-return (numToSkip - skip);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:157-}	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:174-return null;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:178-long numToSkip = entrySize - entryOffset;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:180-while (numToSkip > 0) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:181-long skipped = skip(numToSkip);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:182-if (skipped <= 0) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:183-throw new RuntimeException("failed to skip current tar entry");	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:185-numToSkip -= skipped;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:186-}	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:188-readBuf = null;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:194-currEntry = null;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:195-return null;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:199-entryOffset = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:200-entrySize = currEntry.getSize();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:294-if (fields[i] instanceof UnparseableExtraFieldData) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:297-extraFields.put(fields[i].getHeaderId(), fields[i]);	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:97-super(name);	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:69-private int method = -1;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:77-private long size = SIZE_UNKNOWN;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:79-private int internalAttributes = 0;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:80-private int platform = PLATFORM_FAT;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:81-private long externalAttributes = 0;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:82-private LinkedHashMap<ZipShort, ZipExtraField> extraFields = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:83-private UnparseableExtraFieldData unparseableExtra = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:84-private String name = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:85-private byte[] rawName = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:86-private GeneralPurposeBit gpb = new GeneralPurposeBit();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:98-setName(name);	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:99-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:145-this("");	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:146-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:203-if (method < 0) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:207-this.method = method;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:208-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:284-this.platform = platform;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:285-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:292-extraFields = new LinkedHashMap<ZipShort, ZipExtraField>();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:293-for (int i = 0; i < fields.length; i++) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:300-setExtra();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:301-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:321-if (extraFields == null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:326-List<ZipExtraField> result =	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:328-if (includeUnparseable && unparseableExtra != null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:331-return result.toArray(new ZipExtraField[0]);	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:409-if (extraFields != null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:410-return extraFields.get(type);	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:437-ZipExtraField[] local =	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:440-mergeExtraFields(local, true);	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:445-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:446-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:455-super.setExtra(ExtraFieldUtils.mergeLocalFileDataData(getExtraFields(true)));	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:456-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:495-return name == null ? super.getName() : name;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:512-this.name = name;	1
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:513-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:532-if (size < 0) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:535-this.size = size;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:536-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:548-setName(name);	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:549-this.rawName = rawName;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:550-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:597-gpb = b;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:598-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:610-if (extraFields == null) {	0
org.apache.commons.compress.archivers.tar.TarUtils:57-longresult = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:58-int end = offset + length;	0
org.apache.commons.compress.archivers.tar.TarUtils:59-int start = offset;	0
org.apache.commons.compress.archivers.tar.TarUtils:61-if (length < 2){	0
org.apache.commons.compress.archivers.tar.TarUtils:65-boolean allNUL = true;	1
org.apache.commons.compress.archivers.tar.TarUtils:66-for (int i = start; i < end; i++){	0
org.apache.commons.compress.archivers.tar.TarUtils:67-if (buffer[i] != 0){	0
org.apache.commons.compress.archivers.tar.TarUtils:68-allNUL = false;	0
org.apache.commons.compress.archivers.tar.TarUtils:69-break;	0
org.apache.commons.compress.archivers.tar.TarUtils:72-if (allNUL) {	0
org.apache.commons.compress.archivers.tar.TarUtils:77-while (start < end){	0
org.apache.commons.compress.archivers.tar.TarUtils:78-if (buffer[start] == ' '){	0
org.apache.commons.compress.archivers.tar.TarUtils:87-trailer = buffer[end-1];	0
org.apache.commons.compress.archivers.tar.TarUtils:88-if (trailer == 0 || trailer == ' '){	0
org.apache.commons.compress.archivers.tar.TarUtils:89-end--;	0
org.apache.commons.compress.archivers.tar.TarUtils:95-trailer = buffer[end-1];	0
org.apache.commons.compress.archivers.tar.TarUtils:96-if (trailer == 0 || trailer == ' '){	0
org.apache.commons.compress.archivers.tar.TarUtils:97-end--;	0
org.apache.commons.compress.archivers.tar.TarUtils:100-for ( ;start < end; start++) {	0
org.apache.commons.compress.archivers.tar.TarUtils:101-final byte currentByte = buffer[start];	0
org.apache.commons.compress.archivers.tar.TarUtils:103-if (currentByte < '0' || currentByte > '7'){	0
org.apache.commons.compress.archivers.tar.TarUtils:104-throw new IllegalArgumentException(	0
org.apache.commons.compress.archivers.tar.TarUtils:107-result = (result << 3) + (currentByte - '0'); // convert from ASCII	0
org.apache.commons.compress.archivers.tar.TarUtils:111-return result;	0
org.apache.commons.compress.archivers.tar.TarUtils:134-if ((buffer[offset] & 0x80) == 0) {	0
org.apache.commons.compress.archivers.tar.TarUtils:135-return parseOctal(buffer, offset, length);	0
org.apache.commons.compress.archivers.tar.TarUtils:167-String string = new String(buffer, offset, length);	0
org.apache.commons.compress.archivers.tar.TarUtils:168-string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed	0
org.apache.commons.compress.archivers.tar.TarUtils:169-final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length;	0
org.apache.commons.compress.archivers.tar.TarUtils:170-return s;	0
org.apache.commons.compress.archivers.tar.TarUtils:184-StringBuffer result = new StringBuffer(length);	0
org.apache.commons.compress.archivers.tar.TarUtils:185-intend = offset + length;	0
org.apache.commons.compress.archivers.tar.TarUtils:187-for (int i = offset; i < end; ++i) {	0
org.apache.commons.compress.archivers.tar.TarUtils:188-byte b = buffer[i];	0
org.apache.commons.compress.archivers.tar.TarUtils:189-if (b == 0) { // Trailing null	0
org.apache.commons.compress.archivers.tar.TarUtils:190-break;	0
org.apache.commons.compress.archivers.tar.TarUtils:192-result.append((char) (b & 0xFF)); // Allow for sign-extension	0
org.apache.commons.compress.archivers.tar.TarUtils:195-return result.toString();	0
org.apache.commons.compress.archivers.tar.TarUtils:32-private TarUtils(){	0
org.apache.commons.compress.archivers.tar.TarUtils:33-}	0
org.apache.commons.compress.archivers.tar.TarUtils:62-throw new IllegalArgumentException("Length "+length+" must be at least 2");	0
org.apache.commons.compress.archivers.tar.TarUtils:73-return 0L;	0
org.apache.commons.compress.archivers.tar.TarUtils:79-start++;	0
org.apache.commons.compress.archivers.tar.TarUtils:91-throw new IllegalArgumentException(	0
org.apache.commons.compress.archivers.tar.TarUtils:138-long val = buffer[offset] & 0x7f;	0
org.apache.commons.compress.archivers.tar.TarUtils:139-for (int i = 1; i < length; i++) {	0
org.apache.commons.compress.archivers.tar.TarUtils:140-if (val >= (1L << (63 - 8))) {	0
org.apache.commons.compress.archivers.tar.TarUtils:141-throw new IllegalArgumentException(	0
org.apache.commons.compress.archivers.tar.TarUtils:145-val = (val << 8) + (buffer[offset + i] & 0xff);	0
org.apache.commons.compress.archivers.tar.TarUtils:147-return val;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:666-String myComment = getComment();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:667-String otherComment = other.getComment();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:668-if (myComment == null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:669-if (otherComment != null) {	1
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:670-return false;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:650-if (this == obj) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:653-if (obj == null || getClass() != obj.getClass()) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:656-ZipArchiveEntry other = (ZipArchiveEntry) obj;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:657-String myName = getName();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:658-String otherName = other.getName();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:659-if (myName == null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:663-} else if (!myName.equals(otherName)) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:495-return name == null ? super.getName() : name;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:514-name = name.replace('\\', '/');	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:97-super(name);	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:69-private int method = -1;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:77-private long size = SIZE_UNKNOWN;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:79-private int internalAttributes = 0;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:80-private int platform = PLATFORM_FAT;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:81-private long externalAttributes = 0;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:82-private LinkedHashMap<ZipShort, ZipExtraField> extraFields = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:83-private UnparseableExtraFieldData unparseableExtra = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:84-private String name = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:85-private byte[] rawName = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:86-private GeneralPurposeBit gpb = new GeneralPurposeBit();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:98-setName(name);	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:99-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:276-return platform;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:512-if (name != null && getPlatform() == PLATFORM_FAT	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:516-this.name = name;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:517-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:111-super(entry);	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:69-private int method = -1;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:77-private long size = SIZE_UNKNOWN;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:79-private int internalAttributes = 0;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:80-private int platform = PLATFORM_FAT;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:81-private long externalAttributes = 0;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:82-private LinkedHashMap<ZipShort, ZipExtraField> extraFields = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:83-private UnparseableExtraFieldData unparseableExtra = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:84-private String name = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:85-private byte[] rawName = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:86-private GeneralPurposeBit gpb = new GeneralPurposeBit();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:112-setName(entry.getName());	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:113-byte[] extra = entry.getExtra();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:114-if (extra != null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:115-setExtraFields(ExtraFieldUtils.parse(extra, true,	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:120-setExtra();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:122-setMethod(entry.getMethod());	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:123-this.size = entry.getSize();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:124-}	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:242-TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:244-tais.getNextEntry();	1
org.apache.commons.compress.archivers.ArchiveStreamFactory:245-return new TarArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:74-public class ArchiveStreamFactory {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:199-if (in == null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:203-if (!in.markSupported()) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:207-final byte[] signature = new byte[12];	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:208-in.mark(signature.length);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:210-int signatureLength = in.read(signature);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:211-in.reset();	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:212-if (ZipArchiveInputStream.matches(signature, signatureLength)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:214-} else if (JarArchiveInputStream.matches(signature, signatureLength)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:216-} else if (ArArchiveInputStream.matches(signature, signatureLength)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:218-} else if (CpioArchiveInputStream.matches(signature, signatureLength)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:223-final byte[] dumpsig = new byte[32];	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:224-in.mark(dumpsig.length);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:225-signatureLength = in.read(dumpsig);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:226-in.reset();	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:227-if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:232-final byte[] tarheader = new byte[512];	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:233-in.mark(tarheader.length);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:234-signatureLength = in.read(tarheader);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:235-in.reset();	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:236-if (TarArchiveInputStream.matches(tarheader, signatureLength)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:240-if (signatureLength >= 512) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:120-if (archiverName == null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:121-throw new IllegalArgumentException("Archivername must not be null.");	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:124-if (in == null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:125-throw new IllegalArgumentException("InputStream must not be null.");	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:128-if (AR.equalsIgnoreCase(archiverName)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:129-return new ArArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:131-if (ZIP.equalsIgnoreCase(archiverName)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:132-return new ZipArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:134-if (TAR.equalsIgnoreCase(archiverName)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:135-return new TarArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:137-if (JAR.equalsIgnoreCase(archiverName)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:138-return new JarArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:140-if (CPIO.equalsIgnoreCase(archiverName)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:141-return new CpioArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:143-if (DUMP.equalsIgnoreCase(archiverName)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:144-return new DumpArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:147-throw new ArchiveException("Archiver: " + archiverName + " not found.");	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:162-if (archiverName == null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:163-throw new IllegalArgumentException("Archivername must not be null.");	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:165-if (out == null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:166-throw new IllegalArgumentException("OutputStream must not be null.");	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:169-if (AR.equalsIgnoreCase(archiverName)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:170-return new ArArchiveOutputStream(out);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:172-if (ZIP.equalsIgnoreCase(archiverName)) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:173-return new ZipArchiveOutputStream(out);	0
org.apache.commons.compress.archivers.tar.TarUtils:143-throw new IllegalArgumentException(	0
org.apache.commons.compress.archivers.tar.TarUtils:241-String string = new String(buffer, offset, length); // TODO default charset?	0
org.apache.commons.compress.archivers.tar.TarUtils:242-string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed	0
org.apache.commons.compress.archivers.tar.TarUtils:243-final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length;	0
org.apache.commons.compress.archivers.tar.TarUtils:244-return s;	0
org.apache.commons.compress.archivers.tar.TarUtils:136-end--;	0
org.apache.commons.compress.archivers.tar.TarUtils:40-static final ZipEncoding DEFAULT_ENCODING =	0
org.apache.commons.compress.archivers.tar.TarUtils:47-static final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() {	0
org.apache.commons.compress.archivers.tar.TarUtils:103-longresult = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:104-int end = offset + length;	0
org.apache.commons.compress.archivers.tar.TarUtils:105-int start = offset;	0
org.apache.commons.compress.archivers.tar.TarUtils:107-if (length < 2){	0
org.apache.commons.compress.archivers.tar.TarUtils:111-if (buffer[start] == 0) {	0
org.apache.commons.compress.archivers.tar.TarUtils:116-while (start < end){	0
org.apache.commons.compress.archivers.tar.TarUtils:117-if (buffer[start] == ' '){	0
org.apache.commons.compress.archivers.tar.TarUtils:126-trailer = buffer[end-1];	0
org.apache.commons.compress.archivers.tar.TarUtils:127-if (trailer == 0 || trailer == ' '){	0
org.apache.commons.compress.archivers.tar.TarUtils:128-end--;	0
org.apache.commons.compress.archivers.tar.TarUtils:134-trailer = buffer[end - 1];	0
org.apache.commons.compress.archivers.tar.TarUtils:135-if (trailer == 0 || trailer == ' '){	1
org.apache.commons.compress.archivers.tar.TarUtils:139-for ( ;start < end; start++) {	0
org.apache.commons.compress.archivers.tar.TarUtils:140-final byte currentByte = buffer[start];	0
org.apache.commons.compress.archivers.tar.TarUtils:142-if (currentByte < '0' || currentByte > '7'){	0
org.apache.commons.compress.archivers.tar.TarUtils:146-result = (result << 3) + (currentByte - '0'); // convert from ASCII	0
org.apache.commons.compress.archivers.tar.TarUtils:150-return result;	0
org.apache.commons.compress.archivers.tar.TarUtils:173-if ((buffer[offset] & 0x80) == 0) {	0
org.apache.commons.compress.archivers.tar.TarUtils:174-return parseOctal(buffer, offset, length);	0
org.apache.commons.compress.archivers.tar.TarUtils:287-int len = length;	0
org.apache.commons.compress.archivers.tar.TarUtils:288-for (; len > 0; len--) {	0
org.apache.commons.compress.archivers.tar.TarUtils:289-if (buffer[offset + len - 1] != 0) {	0
org.apache.commons.compress.archivers.tar.TarUtils:290-break;	0
org.apache.commons.compress.archivers.tar.TarUtils:293-if (len > 0) {	0
org.apache.commons.compress.archivers.tar.TarUtils:294-byte[] b = new byte[len];	0
org.apache.commons.compress.archivers.tar.TarUtils:295-System.arraycopy(buffer, offset, b, 0, len);	0
org.apache.commons.compress.archivers.tar.TarUtils:296-return encoding.decode(b);	0
org.apache.commons.compress.archivers.tar.TarUtils:78-private TarUtils(){	0
org.apache.commons.compress.archivers.tar.TarUtils:79-}	0
org.apache.commons.compress.archivers.tar.TarUtils:108-throw new IllegalArgumentException("Length "+length+" must be at least 2");	0
org.apache.commons.compress.archivers.tar.TarUtils:112-return 0L;	0
org.apache.commons.compress.archivers.tar.TarUtils:118-start++;	0
org.apache.commons.compress.archivers.tar.TarUtils:130-throw new IllegalArgumentException(	0
org.apache.commons.compress.archivers.tar.TarUtils:176-final boolean negative = buffer[offset] == (byte) 0xff;	0
org.apache.commons.compress.archivers.tar.TarUtils:177-if (length < 9) {	0
org.apache.commons.compress.archivers.tar.TarUtils:178-return parseBinaryLong(buffer, offset, length, negative);	0
org.apache.commons.compress.archivers.tar.TarUtils:180-return parseBinaryBigInteger(buffer, offset, length, negative);	0
org.apache.commons.compress.archivers.tar.TarUtils:186-if (length >= 9) {	0
org.apache.commons.compress.archivers.tar.TarUtils:187-throw new IllegalArgumentException("At offset " + offset + ", "	0
org.apache.commons.compress.archivers.tar.TarUtils:192-long val = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:193-for (int i = 1; i < length; i++) {	0
org.apache.commons.compress.archivers.tar.TarUtils:194-val = (val << 8) + (buffer[offset + i] & 0xff);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:387-throw new IOException("request to write '" + numToWrite	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:304-paxHeaders.put("path", entryName);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:185-addPaxHeadersForNonAsciiNames = b;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:186-}	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:324-currSize = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:314-writePaxHeaders(entryName, paxHeaders);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:480-len = actualLength;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:481-line = len + " " + key + "=" + value + "\n";	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:482-actualLength = line.getBytes(CharsetNames.UTF_8).length;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:94-this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:95-}	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:135-this(os, blockSize, recordSize, null);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:136-}	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:456-String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:459-if (name.length() >= TarConstants.NAMELEN) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:462-TarArchiveEntry pex = new TarArchiveEntry(name,	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:465-StringWriter w = new StringWriter();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:466-for (Map.Entry<String, String> h : headers.entrySet()) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:467-String key = h.getKey();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:468-String value = h.getValue();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:469-int len = key.length() + value.length()	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:472-String line = len + " " + key + "=" + value + "\n";	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:473-int actualLength = line.getBytes(CharsetNames.UTF_8).length;	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:474-while (len != actualLength) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:484-w.write(line);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:485-}	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:486-byte[] data = w.toString().getBytes(CharsetNames.UTF_8);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:487-pex.setSize(data.length);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:488-putArchiveEntry(pex);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:489-write(data);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:494-final int length = name.length();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:495-StringBuffer result = new StringBuffer(length);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:496-for (int i = 0; i < length; i++) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:497-char stripped = (char) (name.charAt(i) & 0x7F);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:498-if (stripped != 0) { // would be read as Trailing null	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:499-result.append(stripped);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:502-return result.toString();	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:566-failForBigNumber("user id", entry.getUserId(), TarConstants.MAXID);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:567-failForBigNumber("mode", entry.getMode(), TarConstants.MAXID);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:568-failForBigNumber("major device number", entry.getDevMajor(),	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:570-failForBigNumber("minor device number", entry.getDevMinor(),	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:572-}	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:299-failForBigNumbers(entry);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:561-failForBigNumber("entry size", entry.getSize(), TarConstants.MAXSIZE);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:562-failForBigNumber("group id", entry.getGroupId(), TarConstants.MAXID);	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:563-failForBigNumber("last modification time",	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:298-} else if (bigNumberMode != BIGNUMBER_STAR) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:386-if ((currBytes + numToWrite) > currSize) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:575-if (value < 0 || value > maxValue) {	0
org.apache.commons.compress.archivers.tar.TarArchiveOutputStream:580-}	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:202-relativeHeaderOffset = new ZipEightByteInteger(buffer, offset);	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:203-offset += DWORD;	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:204-remaining -= DWORD;	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:207-diskStart = new ZipLong(buffer, offset);	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:208-offset += WORD;	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:209-remaining -= WORD;	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:218-rawCentralDirectoryData = new byte[length];	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:219-System.arraycopy(buffer, offset, rawCentralDirectoryData, 0, length);	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:227-if (length >= 3 * DWORD + WORD) {	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:228-parseFromLocalFileData(buffer, offset, length);	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:238-}	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:254-if (rawCentralDirectoryData != null) {	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:255-int expectedLength = (hasUncompressedSize ? DWORD : 0)	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:259-if (rawCentralDirectoryData.length != expectedLength) {	1
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:260-throw new ZipException("central directory zip64 extended"	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:144-return new ZipShort(size != null ? 2 * DWORD : 0);	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:157-if (size != null || compressedSize != null) {	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:158-if (size == null || compressedSize == null) {	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:161-byte[] data = new byte[2 * DWORD];	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:162-addSizes(data);	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:163-return data;	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:186-if (length == 0) {	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:193-if (length < 2 * DWORD) {	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:196-size = new ZipEightByteInteger(buffer, offset);	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:197-offset += DWORD;	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:198-compressedSize = new ZipEightByteInteger(buffer, offset);	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:199-offset += DWORD;	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:200-int remaining = length - 2 * DWORD;	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:201-if (remaining >= DWORD) {	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:206-if (remaining >= WORD) {	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:211-}	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:346-int off = 0;	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:347-if (size != null) {	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:348-System.arraycopy(size.getBytes(), 0, data, 0, DWORD);	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:349-off += DWORD;	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:351-if (compressedSize != null) {	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:352-System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD);	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:353-off += DWORD;	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:355-return off;	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:104-public Zip64ExtendedInformationExtraField() { }	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:78-static final ZipShort HEADER_ID = new ZipShort(0x0001);	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:83-private static final byte[] EMPTY = new byte[0];	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:139-return HEADER_ID;	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:116-this(size, compressedSize, null, null);	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:117-}	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:130-ZipLong diskStart) {	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:131-this.size = size;	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:132-this.compressedSize = compressedSize;	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:133-this.relativeHeaderOffset = relativeHeaderOffset;	0
org.apache.commons.compress.archivers.zip.Zip64ExtendedInformationExtraField:134-this.diskStart = diskStart;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:204-this.entry = readNewEntry(false);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:326-ret = new CpioArchiveEntry(FORMAT_NEW);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:95-this(in, BLOCK_SIZE);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:96-}	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:108-public CpioArchiveInputStream(final InputStream in, int blockSize) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:66-private boolean closed = false;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:70-private long entryBytesRead = 0;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:72-private boolean entryEOF = false;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:74-private final byte tmpbuf[] = new byte[4096];	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:76-private long crc = 0;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:81-private final byte[] TWO_BYTES_BUF = new byte[2];	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:82-private final byte[] FOUR_BYTES_BUF = new byte[4];	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:83-private final byte[] SIX_BYTES_BUF = new byte[6];	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:109-this.in = in;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:110-this.blockSize = blockSize;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:111-}	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:157-ensureOpen();	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:158-while (read(this.tmpbuf, 0, this.tmpbuf.length) != -1) { // NOPMD	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:162-this.entryEOF = true;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:163-}	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:172-if (this.closed) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:175-}	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:187-ensureOpen();	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:188-if (this.entry != null) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:189-closeEntry();	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:191-readFully(TWO_BYTES_BUF, 0, TWO_BYTES_BUF.length);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:192-if (CpioUtil.byteArray2long(TWO_BYTES_BUF, false) == MAGIC_OLD_BINARY) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:194-} else if (CpioUtil.byteArray2long(TWO_BYTES_BUF, true)	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:198-System.arraycopy(TWO_BYTES_BUF, 0, SIX_BYTES_BUF, 0,	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:200-readFully(SIX_BYTES_BUF, TWO_BYTES_BUF.length,	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:202-String magicString = ArchiveUtils.toAsciiString(SIX_BYTES_BUF);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:203-if (magicString.equals(MAGIC_NEW)) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:214-this.entryBytesRead = 0;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:215-this.entryEOF = false;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:216-this.crc = 0;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:218-if (this.entry.getName().equals(CPIO_TRAILER)) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:223-return this.entry;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:228-if (bytes > 0) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:231-}	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:252-ensureOpen();	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:253-if (off < 0 || len < 0 || off > b.length - len) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:255-} else if (len == 0) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:259-if (this.entry == null || this.entryEOF) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:262-if (this.entryBytesRead == this.entry.getSize()) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:263-skip(entry.getDataPadCount());	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:264-this.entryEOF = true;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:265-if (this.entry.getFormat() == FORMAT_NEW_CRC	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:270-return -1; // EOF for this entry	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:272-int tmplength = (int) Math.min(len, this.entry.getSize()	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:274-if (tmplength < 0) {	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:97-final SevenZArchiveEntry entry = new SevenZArchiveEntry();	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:98-entry.setDirectory(inputFile.isDirectory());	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:99-entry.setName(entryName);	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:100-entry.setLastModifiedDate(new Date(inputFile.lastModified()));	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:101-return entry;	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:164-write(b, 0, b.length);	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:165-}	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:175-if (len > 0) {	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:178-}	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:422-header.write(NID.kEmptyFile);	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:423-final ByteArrayOutputStream baos = new ByteArrayOutputStream();	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:424-final DataOutputStream out = new DataOutputStream(baos);	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:425-writeBits(out, emptyFiles, emptyStreamCounter);	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:426-out.flush();	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:427-final byte[] contents = baos.toByteArray();	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:428-writeUint64(header, contents.length);	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:429-header.write(contents);	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:548-++numLastModifiedDates;	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:552-header.write(NID.kMTime);	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:554-final ByteArrayOutputStream baos = new ByteArrayOutputStream();	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:555-final DataOutputStream out = new DataOutputStream(baos);	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:556-if (numLastModifiedDates != files.size()) {	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:557-out.write(0);	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:558-final BitSet mTimes = new BitSet(files.size());	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:559-for (int i = 0; i < files.size(); i++) {	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:560-mTimes.set(i, files.get(i).getHasLastModifiedDate());	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:562-writeBits(out, mTimes, files.size());	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:563-} else {	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:566-out.write(0);	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:567-for (final SevenZArchiveEntry entry : files) {	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:568-if (entry.getHasLastModifiedDate()) {	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:569-out.writeLong(Long.reverseBytes(	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:572-}	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:573-out.flush();	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:574-final byte[] contents = baos.toByteArray();	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:575-writeUint64(header, contents.length);	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:576-header.write(contents);	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:81-finish();	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:114-final SevenZArchiveEntry entry = (SevenZArchiveEntry) archiveEntry;	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:115-files.add(entry);	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:116-}	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:123-if (currentOutputStream != null) {	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:128-final SevenZArchiveEntry entry = files.get(files.size() - 1);	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:129-if (fileBytesWritten > 0) {	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:138-entry.setHasStream(false);	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:139-entry.setSize(0);	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:140-entry.setCompressedSize(0);	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:141-entry.setHasCrc(false);	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:143-currentOutputStream = null;	0
org.apache.commons.compress.archivers.sevenz.SevenZOutputFile:144-crc32.reset();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:129-public BZip2CompressorInputStream(final InputStream in, final boolean decompressConcatenated) throws IOException {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:60-private final CRC crc = new CRC();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:67-private int currentChar = -1;	1
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:77-private int currentState = START_BLOCK_STATE;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:130-this.in = in;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:131-this.decompressConcatenated = decompressConcatenated;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:133-init(true);	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:134-initBlock();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:135-setupBlock();	1
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:136-}	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:157-if (offs < 0) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:160-if (len < 0) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:163-if (offs + len > dest.length) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:167-if (this.in == null) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:171-final int hi = offs + len;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:172-int destOffs = offs;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:174-while (destOffs < hi && ((b = read0()) >= 0)) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:175-dest[destOffs++] = (byte) b;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:176-count(1);	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:184-final boolean[] inUse = this.data.inUse;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:185-final byte[] seqToUnseq = this.data.seqToUnseq;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:187-int nInUseShadow = 0;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:189-for (int i = 0; i < 256; i++) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:190-if (inUse[i]) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:191-seqToUnseq[nInUseShadow++] = (byte) i;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:195-this.nInUse = nInUseShadow;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:196-}	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:199-final int retChar = this.currentChar;	1
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:200-switch (currentState) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:222-setupNoRandPartB();	1
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:223-break;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:232-return retChar;	1
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:236-if (null == in) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:240-int magic0 = this.in.read();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:241-if (magic0 == -1 && !isFirstStream) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:244-int magic1 = this.in.read();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:245-int magic2 = this.in.read();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:247-if (magic0 != 'B' || magic1 != 'Z' || magic2 != 'h') {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:253-int blockSize = this.in.read();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:254-if ((blockSize < '1') || (blockSize > '9')) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:258-this.blockSize100k = blockSize - '0';	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:260-this.bsLive = 0;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:261-this.computedCombinedCRC = 0;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:263-return true;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:276-magic0 = bsGetUByte();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:277-magic1 = bsGetUByte();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:278-magic2 = bsGetUByte();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:279-magic3 = bsGetUByte();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:280-magic4 = bsGetUByte();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:281-magic5 = bsGetUByte();	0
org.apache.commons.compress.archivers.sevenz.Coders:65-static CoderId[] coderTable = new CoderId[] {	0
org.apache.commons.compress.archivers.sevenz.Coders:43-class Coders {	0
org.apache.commons.compress.archivers.sevenz.Coders:250-private static class DummyByteAddingInputStream extends FilterInputStream {	0
org.apache.commons.compress.archivers.sevenz.Coders:46-for (final CoderId coderId : coderTable) {	0
org.apache.commons.compress.archivers.sevenz.Coders:47-if (Arrays.equals(coderId.method.getId(), coder.decompressionMethodId)) {	0
org.apache.commons.compress.archivers.sevenz.Coders:48-return coderId.coder.decode(is, coder, password);	0
org.apache.commons.compress.archivers.sevenz.Coders:51-throw new IOException("Unsupported compression method " +	0
org.apache.commons.compress.archivers.sevenz.Coders:57-for (final CoderId coderId : coderTable) {	0
org.apache.commons.compress.archivers.sevenz.Coders:58-if (coderId.method.equals(method)) {	0
org.apache.commons.compress.archivers.sevenz.Coders:59-return coderId.coder.encode(out, password);	0
org.apache.commons.compress.archivers.sevenz.Coders:62-throw new IOException("Unsupported compression method " + method);	0
org.apache.commons.compress.archivers.tar.TarUtils:132-throw new IllegalArgumentException(	0
org.apache.commons.compress.archivers.tar.TarUtils:250-String string = new String(buffer, offset, length);	0
org.apache.commons.compress.archivers.tar.TarUtils:252-string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed	0
org.apache.commons.compress.archivers.tar.TarUtils:253-final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length;	0
org.apache.commons.compress.archivers.tar.TarUtils:254-return s;	0
org.apache.commons.compress.archivers.tar.TarUtils:103-longresult = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:104-int end = offset + length;	0
org.apache.commons.compress.archivers.tar.TarUtils:105-int start = offset;	0
org.apache.commons.compress.archivers.tar.TarUtils:107-if (length < 2){	0
org.apache.commons.compress.archivers.tar.TarUtils:111-if (buffer[start] == 0) {	0
org.apache.commons.compress.archivers.tar.TarUtils:116-while (start < end){	0
org.apache.commons.compress.archivers.tar.TarUtils:117-if (buffer[start] == ' '){	0
org.apache.commons.compress.archivers.tar.TarUtils:128-byte trailer = buffer[end - 1];	0
org.apache.commons.compress.archivers.tar.TarUtils:129-if (trailer == 0 || trailer == ' '){	1
org.apache.commons.compress.archivers.tar.TarUtils:40-static final ZipEncoding DEFAULT_ENCODING =	0
org.apache.commons.compress.archivers.tar.TarUtils:47-static final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() {	0
org.apache.commons.compress.archivers.tar.TarUtils:78-private TarUtils(){	0
org.apache.commons.compress.archivers.tar.TarUtils:79-}	0
org.apache.commons.compress.archivers.tar.TarUtils:108-throw new IllegalArgumentException("Length "+length+" must be at least 2");	0
org.apache.commons.compress.archivers.tar.TarUtils:112-return 0L;	0
org.apache.commons.compress.archivers.tar.TarUtils:118-start++;	0
org.apache.commons.compress.archivers.tar.TarUtils:130-end--;	0
org.apache.commons.compress.archivers.tar.TarUtils:135-trailer = buffer[end - 1];	0
org.apache.commons.compress.archivers.tar.TarUtils:136-while (start < end - 1 && (trailer == 0 || trailer == ' ')) {	0
org.apache.commons.compress.archivers.tar.TarUtils:137-end--;	0
org.apache.commons.compress.archivers.tar.TarUtils:138-trailer = buffer[end - 1];	0
org.apache.commons.compress.archivers.tar.TarUtils:141-for ( ;start < end; start++) {	0
org.apache.commons.compress.archivers.tar.TarUtils:142-final byte currentByte = buffer[start];	0
org.apache.commons.compress.archivers.tar.TarUtils:144-if (currentByte < '0' || currentByte > '7'){	0
org.apache.commons.compress.archivers.tar.TarUtils:145-throw new IllegalArgumentException(	0
org.apache.commons.compress.archivers.tar.TarUtils:148-result = (result << 3) + (currentByte - '0'); // convert from ASCII	0
org.apache.commons.compress.archivers.tar.TarUtils:152-return result;	0
org.apache.commons.compress.archivers.tar.TarUtils:175-if ((buffer[offset] & 0x80) == 0) {	0
org.apache.commons.compress.archivers.tar.TarUtils:176-return parseOctal(buffer, offset, length);	0
org.apache.commons.compress.archivers.tar.TarUtils:178-final boolean negative = buffer[offset] == (byte) 0xff;	0
org.apache.commons.compress.archivers.tar.TarUtils:179-if (length < 9) {	0
org.apache.commons.compress.archivers.tar.TarUtils:180-return parseBinaryLong(buffer, offset, length, negative);	0
org.apache.commons.compress.archivers.tar.TarUtils:182-return parseBinaryBigInteger(buffer, offset, length, negative);	0
org.apache.commons.compress.archivers.tar.TarUtils:188-if (length >= 9) {	0
org.apache.commons.compress.archivers.tar.TarUtils:189-throw new IllegalArgumentException("At offset " + offset + ", "	0
org.apache.commons.compress.archivers.tar.TarUtils:194-long val = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:195-for (int i = 1; i < length; i++) {	0
org.apache.commons.compress.archivers.tar.TarUtils:196-val = (val << 8) + (buffer[offset + i] & 0xff);	0
org.apache.commons.compress.archivers.tar.TarUtils:198-if (negative) {	0
org.apache.commons.compress.archivers.tar.TarUtils:200-val--;	0
org.apache.commons.compress.archivers.tar.TarUtils:201-val ^= (long) Math.pow(2, (length - 1) * 8) - 1;	0
org.apache.commons.compress.archivers.tar.TarUtils:203-return negative ? -val : val;	0
org.apache.commons.compress.archivers.tar.TarUtils:210-byte[] remainder = new byte[length - 1];	0
org.apache.commons.compress.archivers.tar.TarUtils:211-System.arraycopy(buffer, offset + 1, remainder, 0, length - 1);	0
org.apache.commons.compress.archivers.tar.TarUtils:212-BigInteger val = new BigInteger(remainder);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:431-toRead = (int) (csize - current.bytesRead);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:381-read = readStored(buffer, offset, length);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:404-if (current.hasDataDescriptor) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:411-long csize = current.entry.getSize();	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:412-if (current.bytesRead >= csize) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:413-return -1;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:416-if (buf.position() >= buf.limit()) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:428-int toRead = Math.min(buf.remaining(), length);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:429-if ((csize - current.bytesRead) < toRead) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:433-buf.get(buffer, offset, toRead);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:434-current.bytesRead += toRead;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:435-return toRead;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:360-if (closed) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:364-if (current == null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:369-if (offset > buffer.length || length < 0 || offset < 0 || buffer.length - offset < length) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:373-ZipUtil.checkRequestedFeatures(current.entry);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:374-if (!supportsDataDescriptorFor(current.entry)) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:380-if (current.entry.getMethod() == ZipArchiveOutputStream.STORED) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:392-if (read >= 0) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:393-current.crc.update(buffer, offset, read);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:396-return read;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:713-return !entry.getGeneralPurposeBit().usesDataDescriptor()	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:279-} else if (current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:485-if (!closed) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:486-closed = true;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:487-in.close();	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:488-inf.end();	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:490-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:143-this(inputStream, ZipEncodingHelper.UTF8);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:144-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:152-this(inputStream, encoding, true);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:153-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:162-this(inputStream, encoding, useUnicodeExtraFields, false);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:163-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:177-boolean allowStoredEntriesWithDataDescriptor) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:71-private final Inflater inf = new Inflater(true);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:74-private final ByteBuffer buf = ByteBuffer.allocate(ZipArchiveOutputStream.BUFFER_SIZE);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:77-private CurrentEntry current = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:80-private boolean closed = false;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:83-private boolean hitCentralDirectory = false;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:90-private ByteArrayInputStream lastStoredEntry = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:93-private boolean allowStoredEntriesWithDataDescriptor = false;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:134-private final byte[] LFH_BUF = new byte[LFH_LEN];	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:135-private final byte[] SKIP_BUF = new byte[1024];	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:136-private final byte[] SHORT_BUF = new byte[SHORT];	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:137-private final byte[] WORD_BUF = new byte[WORD];	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:138-private final byte[] TWO_DWORD_BUF = new byte[2 * DWORD];	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:140-private int entriesRead = 0;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:178-zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:179-this.useUnicodeExtraFields = useUnicodeExtraFields;	0
org.apache.commons.compress.utils.IOUtils:99-break;	0
org.apache.commons.compress.utils.IOUtils:95-long available = numToSkip;	0
org.apache.commons.compress.utils.IOUtils:96-while (numToSkip > 0) {	0
org.apache.commons.compress.utils.IOUtils:97-long skipped = input.skip(numToSkip);	0
org.apache.commons.compress.utils.IOUtils:98-if (skipped == 0) {	0
org.apache.commons.compress.utils.IOUtils:104-return available - numToSkip;	1
org.apache.commons.compress.utils.IOUtils:101-numToSkip -= skipped;	0
org.apache.commons.compress.utils.IOUtils:102-}	0
org.apache.commons.compress.utils.IOUtils:37-private IOUtils(){	0
org.apache.commons.compress.utils.IOUtils:38-}	0
org.apache.commons.compress.utils.IOUtils:52-return copy(input, output, COPY_BUF_SIZE);	0
org.apache.commons.compress.utils.IOUtils:68-final byte[] buffer = new byte[buffersize];	0
org.apache.commons.compress.utils.IOUtils:69-int n = 0;	0
org.apache.commons.compress.utils.IOUtils:70-long count=0;	0
org.apache.commons.compress.utils.IOUtils:71-while (-1 != (n = input.read(buffer))) {	0
org.apache.commons.compress.utils.IOUtils:72-output.write(buffer, 0, n);	0
org.apache.commons.compress.utils.IOUtils:73-count += n;	0
org.apache.commons.compress.utils.IOUtils:75-return count;	0
org.apache.commons.compress.utils.IOUtils:120-return readFully(input, b, 0, b.length);	0
org.apache.commons.compress.utils.IOUtils:141-if (len < 0 || offset < 0 || len + offset > b.length) {	0
org.apache.commons.compress.utils.IOUtils:142-throw new IndexOutOfBoundsException();	0
org.apache.commons.compress.utils.IOUtils:144-int count = 0, x = 0;	0
org.apache.commons.compress.utils.IOUtils:145-while (count != len) {	0
org.apache.commons.compress.utils.IOUtils:146-x = input.read(b, offset + count, len - count);	0
org.apache.commons.compress.utils.IOUtils:147-if (x == -1) {	0
org.apache.commons.compress.utils.IOUtils:148-break;	0
org.apache.commons.compress.utils.IOUtils:150-count += x;	0
org.apache.commons.compress.utils.IOUtils:152-return count;	0
org.apache.commons.compress.utils.IOUtils:174-final ByteArrayOutputStream output = new ByteArrayOutputStream();	0
org.apache.commons.compress.utils.IOUtils:175-copy(input, output);	0
org.apache.commons.compress.utils.IOUtils:176-return output.toByteArray();	0
org.apache.commons.compress.utils.IOUtils:185-if (c != null) {	0
org.apache.commons.compress.utils.IOUtils:187-c.close();	0
org.apache.commons.compress.utils.IOUtils:189-}	0
org.apache.commons.compress.utils.IOUtils:188-} catch (IOException ignored) { // NOPMD	0
org.apache.commons.compress.utils.IOUtils:191-}	0
org.apache.commons.compress.archivers.tar.TarUtils:112-return 0L;	0
org.apache.commons.compress.archivers.tar.TarUtils:134-throw new IllegalArgumentException(	0
org.apache.commons.compress.archivers.tar.TarUtils:118-start++;	0
org.apache.commons.compress.archivers.tar.TarUtils:247-String string = new String(buffer, offset, length);	0
org.apache.commons.compress.archivers.tar.TarUtils:249-string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed	0
org.apache.commons.compress.archivers.tar.TarUtils:250-final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length;	0
org.apache.commons.compress.archivers.tar.TarUtils:251-return s;	0
org.apache.commons.compress.archivers.tar.TarUtils:149-return result;	0
org.apache.commons.compress.archivers.tar.TarUtils:103-longresult = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:104-int end = offset + length;	0
org.apache.commons.compress.archivers.tar.TarUtils:105-int start = offset;	0
org.apache.commons.compress.archivers.tar.TarUtils:107-if (length < 2){	0
org.apache.commons.compress.archivers.tar.TarUtils:111-if (buffer[start] == 0) {	0
org.apache.commons.compress.archivers.tar.TarUtils:116-while (start < end){	0
org.apache.commons.compress.archivers.tar.TarUtils:117-if (buffer[start] == ' '){	0
org.apache.commons.compress.archivers.tar.TarUtils:128-byte trailer = buffer[end - 1];	0
org.apache.commons.compress.archivers.tar.TarUtils:129-while (start < end && (trailer == 0 || trailer == ' ')) {	0
org.apache.commons.compress.archivers.tar.TarUtils:130-end--;	0
org.apache.commons.compress.archivers.tar.TarUtils:131-trailer = buffer[end - 1];	0
org.apache.commons.compress.archivers.tar.TarUtils:133-if (start == end) {	1
org.apache.commons.compress.archivers.tar.TarUtils:138-for ( ;start < end; start++) {	0
org.apache.commons.compress.archivers.tar.TarUtils:139-final byte currentByte = buffer[start];	0
org.apache.commons.compress.archivers.tar.TarUtils:141-if (currentByte < '0' || currentByte > '7'){	0
org.apache.commons.compress.archivers.tar.TarUtils:145-result = (result << 3) + (currentByte - '0'); // convert from ASCII	0
org.apache.commons.compress.archivers.tar.TarUtils:40-static final ZipEncoding DEFAULT_ENCODING =	0
org.apache.commons.compress.archivers.tar.TarUtils:47-static final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() {	0
org.apache.commons.compress.archivers.tar.TarUtils:78-private TarUtils(){	0
org.apache.commons.compress.archivers.tar.TarUtils:79-}	0
org.apache.commons.compress.archivers.tar.TarUtils:108-throw new IllegalArgumentException("Length "+length+" must be at least 2");	0
org.apache.commons.compress.archivers.tar.TarUtils:142-throw new IllegalArgumentException(	0
org.apache.commons.compress.archivers.tar.TarUtils:172-if ((buffer[offset] & 0x80) == 0) {	0
org.apache.commons.compress.archivers.tar.TarUtils:173-return parseOctal(buffer, offset, length);	0
org.apache.commons.compress.archivers.tar.TarUtils:175-final boolean negative = buffer[offset] == (byte) 0xff;	0
org.apache.commons.compress.archivers.tar.TarUtils:176-if (length < 9) {	0
org.apache.commons.compress.archivers.tar.TarUtils:177-return parseBinaryLong(buffer, offset, length, negative);	0
org.apache.commons.compress.archivers.tar.TarUtils:179-return parseBinaryBigInteger(buffer, offset, length, negative);	0
org.apache.commons.compress.archivers.tar.TarUtils:185-if (length >= 9) {	0
org.apache.commons.compress.archivers.tar.TarUtils:186-throw new IllegalArgumentException("At offset " + offset + ", "	0
org.apache.commons.compress.archivers.tar.TarUtils:191-long val = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:192-for (int i = 1; i < length; i++) {	0
org.apache.commons.compress.archivers.tar.TarUtils:193-val = (val << 8) + (buffer[offset + i] & 0xff);	0
org.apache.commons.compress.archivers.tar.TarUtils:195-if (negative) {	0
org.apache.commons.compress.archivers.tar.TarUtils:197-val--;	0
org.apache.commons.compress.archivers.tar.TarUtils:198-val ^= (long) Math.pow(2, (length - 1) * 8) - 1;	0
org.apache.commons.compress.archivers.tar.TarUtils:200-return negative ? -val : val;	0
org.apache.commons.compress.archivers.tar.TarUtils:207-byte[] remainder = new byte[length - 1];	0
org.apache.commons.compress.archivers.tar.TarUtils:208-System.arraycopy(buffer, offset + 1, remainder, 0, length - 1);	0
org.apache.commons.compress.archivers.tar.TarUtils:209-BigInteger val = new BigInteger(remainder);	0
org.apache.commons.compress.archivers.tar.TarUtils:210-if (negative) {	0
org.apache.commons.compress.archivers.tar.TarUtils:212-val = val.add(BigInteger.valueOf(-1)).not();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:227-return null;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:586-hasHitEOF = true;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:177-if (entrySize - entryOffset > Integer.MAX_VALUE) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:180-return (int) (entrySize - entryOffset);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:570-int totalRead = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:572-if (hasHitEOF || entryOffset >= entrySize) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:573-return -1;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:576-if (currEntry == null) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:580-numToRead = Math.min(numToRead, available());	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:582-totalRead = is.read(buf, offset, numToRead);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:583-count(totalRead);	1
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:585-if (totalRead == -1) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:588-entryOffset += totalRead;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:591-return totalRead;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:302-long numRecords = (this.entrySize / this.recordSize) + 1;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:303-long padding = (numRecords * this.recordSize) - this.entrySize;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:304-long skipped = IOUtils.skip(is, padding);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:305-count(skipped);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:196-long available = entrySize - entryOffset;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:197-numToSkip = Math.min(numToSkip, available);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:199-long skipped = IOUtils.skip(is, numToSkip);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:200-count(skipped);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:201-entryOffset += skipped;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:202-return skipped;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:232-skip(Long.MAX_VALUE);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:235-skipRecordPadding();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:301-if (this.entrySize > 0 && this.entrySize % this.recordSize != 0) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:307-}	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:226-if (hasHitEOF) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:230-if (currEntry != null) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:238-byte[] headerBuf = getRecord();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:240-if (headerBuf == null) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:247-currEntry = new TarArchiveEntry(headerBuf, encoding);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:252-}	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:254-entryOffset = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:255-entrySize = currEntry.getSize();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:257-if (currEntry.isGNULongLinkEntry()) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:268-if (currEntry.isGNULongNameEntry()) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:279-if (currEntry.isPaxHeader()){ // Process Pax headers	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:283-if (currEntry.isGNUSparse()){ // Process sparse files	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:291-entrySize = currEntry.getSize();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:293-return currEntry;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:357-byte[] headerBuf = readRecord();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:358-hasHitEOF = isEOFRecord(headerBuf);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:359-if (hasHitEOF && headerBuf != null) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:364-return headerBuf;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:375-return record == null || ArchiveUtils.isArrayZero(record, recordSize);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:386-byte[] record = new byte[recordSize];	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:388-int readNow = IOUtils.readFully(is, record);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:389-count(readNow);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:122-this(in, BLOCK_SIZE, encoding);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:123-}	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:95-this(is, TarConstants.DEFAULT_BLKSIZE, TarConstants.DEFAULT_RCDSIZE,	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:97-}	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:209-if (entryEncoding != null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:210-return new ArjArchiveInputStream(in, entryEncoding);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:212-return new ArjArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:216-if (entryEncoding != null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:217-return new ZipArchiveInputStream(in, entryEncoding);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:219-return new ZipArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:223-if (entryEncoding != null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:224-return new TarArchiveInputStream(in, entryEncoding);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:226-return new TarArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:230-if (entryEncoding != null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:231-return new JarArchiveInputStream(in, entryEncoding);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:233-return new JarArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:237-if (entryEncoding != null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:238-return new CpioArchiveInputStream(in, entryEncoding);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:240-return new CpioArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:244-if (entryEncoding != null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:245-return new DumpArchiveInputStream(in, entryEncoding);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:247-return new DumpArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:283-ZipArchiveOutputStream zip = new ZipArchiveOutputStream(out);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:284-if (entryEncoding != null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:285-zip.setEncoding(entryEncoding);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:287-return zip;	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:290-if (entryEncoding != null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:291-return new TarArchiveOutputStream(out, entryEncoding);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:293-return new TarArchiveOutputStream(out);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:297-return new JarArchiveOutputStream(out);	1
org.apache.commons.compress.archivers.ArchiveStreamFactory:300-if (entryEncoding != null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:301-return new CpioArchiveOutputStream(out, entryEncoding);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:303-return new CpioArchiveOutputStream(out);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:341-return new ZipArchiveInputStream(in, entryEncoding);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:354-if (entryEncoding != null) {	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:355-return new CpioArchiveInputStream(in, entryEncoding);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:357-return new CpioArchiveInputStream(in);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:360-return new ArjArchiveInputStream(in);	1
org.apache.commons.compress.archivers.ArchiveStreamFactory:371-return new DumpArchiveInputStream(in, entryEncoding);	0
org.apache.commons.compress.archivers.ArchiveStreamFactory:380-return new TarArchiveInputStream(in, entryEncoding);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:539-if (signature[1] != 0x37) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:542-if (signature[2] != 0x30) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:545-if (signature[3] != 0x37) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:548-if (signature[4] != 0x30) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:552-if (signature[5] == 0x31) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:555-if (signature[5] == 0x32) {	0
org.apache.commons.compress.archivers.cpio.CpioArchiveInputStream:556-return true;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:708-return true;	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:110-this(out, format, BLOCK_SIZE, CharsetNames.US_ASCII);	0
org.apache.commons.compress.archivers.cpio.CpioArchiveOutputStream:111-}	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:110-}	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:133-initBlock();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:134-}	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:155-if (offs < 0) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:158-if (len < 0) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:161-if (offs + len > dest.length) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:165-if (this.in == null) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:169-final int hi = offs + len;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:170-int destOffs = offs;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:172-while (destOffs < hi && ((b = read0()) >= 0)) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:173-dest[destOffs++] = (byte) b;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:174-count(1);	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:177-int c = (destOffs == offs) ? -1 : (destOffs - offs);	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:178-return c;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:182-final boolean[] inUse = this.data.inUse;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:183-final byte[] seqToUnseq = this.data.seqToUnseq;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:185-int nInUseShadow = 0;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:187-for (int i = 0; i < 256; i++) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:188-if (inUse[i]) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:189-seqToUnseq[nInUseShadow++] = (byte) i;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:193-this.nInUse = nInUseShadow;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:194-}	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:197-switch (currentState) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:202-return setupBlock();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:217-return setupNoRandPartB();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:245-int blockSize = this.in.read();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:246-if ((blockSize < '1') || (blockSize > '9')) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:250-this.blockSize100k = blockSize - '0';	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:252-this.bsLive = 0;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:253-this.computedCombinedCRC = 0;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:255-return true;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:268-magic0 = bsGetUByte();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:269-magic1 = bsGetUByte();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:270-magic2 = bsGetUByte();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:271-magic3 = bsGetUByte();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:272-magic4 = bsGetUByte();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:273-magic5 = bsGetUByte();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:276-if (magic0 != 0x17 || magic1 != 0x72 || magic2 != 0x45	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:289-if (magic0 != 0x31 || // '1'	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:299-this.storedBlockCRC = bsGetInt();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:300-this.blockRandomised = bsR(1) == 1;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:306-if (this.data == null) {	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:307-this.data = new Data(this.blockSize100k);	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:311-getAndMoveToFrontDecode();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:313-this.crc.initialiseCRC();	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:314-this.currentState = START_BLOCK_STATE;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:316-}	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:367-int bsLiveShadow = this.bsLive;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:368-int bsBuffShadow = this.bsBuff;	0
org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream:370-if (bsLiveShadow < n) {	0
org.apache.commons.compress.archivers.tar.TarUtils:136-break;	0
org.apache.commons.compress.archivers.tar.TarUtils:107-throw new IllegalArgumentException("Length "+length+" must be at least 2");	0
org.apache.commons.compress.archivers.tar.TarUtils:140-throw new IllegalArgumentException(	0
org.apache.commons.compress.archivers.tar.TarUtils:245-String string = new String(buffer, offset, length);	0
org.apache.commons.compress.archivers.tar.TarUtils:247-string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed	0
org.apache.commons.compress.archivers.tar.TarUtils:248-final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length;	0
org.apache.commons.compress.archivers.tar.TarUtils:249-return s;	0
org.apache.commons.compress.archivers.tar.TarUtils:102-longresult = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:103-int end = offset + length;	0
org.apache.commons.compress.archivers.tar.TarUtils:104-int start = offset;	0
org.apache.commons.compress.archivers.tar.TarUtils:106-if (length < 2){	0
org.apache.commons.compress.archivers.tar.TarUtils:110-if (buffer[start] == 0) {	0
org.apache.commons.compress.archivers.tar.TarUtils:115-while (start < end){	0
org.apache.commons.compress.archivers.tar.TarUtils:116-if (buffer[start] == ' '){	0
org.apache.commons.compress.archivers.tar.TarUtils:117-start++;	0
org.apache.commons.compress.archivers.tar.TarUtils:127-byte trailer = buffer[end - 1];	0
org.apache.commons.compress.archivers.tar.TarUtils:128-while (start < end && (trailer == 0 || trailer == ' ')) {	0
org.apache.commons.compress.archivers.tar.TarUtils:129-end--;	0
org.apache.commons.compress.archivers.tar.TarUtils:130-trailer = buffer[end - 1];	0
org.apache.commons.compress.archivers.tar.TarUtils:133-for ( ;start < end; start++) {	0
org.apache.commons.compress.archivers.tar.TarUtils:134-final byte currentByte = buffer[start];	0
org.apache.commons.compress.archivers.tar.TarUtils:135-if (currentByte == 0) {	1
org.apache.commons.compress.archivers.tar.TarUtils:139-if (currentByte < '0' || currentByte > '7'){	0
org.apache.commons.compress.archivers.tar.TarUtils:143-result = (result << 3) + (currentByte - '0'); // convert from ASCII	0
org.apache.commons.compress.archivers.tar.TarUtils:147-return result;	0
org.apache.commons.compress.archivers.tar.TarUtils:232-return buffer[offset] == 1;	0
org.apache.commons.compress.archivers.tar.TarUtils:111-return 0L;	0
org.apache.commons.compress.archivers.tar.TarUtils:40-static final ZipEncoding DEFAULT_ENCODING =	0
org.apache.commons.compress.archivers.tar.TarUtils:47-static final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() {	0
org.apache.commons.compress.archivers.tar.TarUtils:303-return "";	0
org.apache.commons.compress.archivers.tar.TarUtils:605-long storedSum = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:606-long unsignedSum = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:607-long signedSum = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:609-int digits = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:610-for (int i = 0; i < header.length; i++) {	0
org.apache.commons.compress.archivers.tar.TarUtils:611-byte b = header[i];	0
org.apache.commons.compress.archivers.tar.TarUtils:612-if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) {	0
org.apache.commons.compress.archivers.tar.TarUtils:613-if ('0' <= b && b <= '7' && digits++ < 6) {	0
org.apache.commons.compress.archivers.tar.TarUtils:614-storedSum = storedSum * 8 + b - '0';	0
org.apache.commons.compress.archivers.tar.TarUtils:615-} else if (digits > 0) {	0
org.apache.commons.compress.archivers.tar.TarUtils:616-digits = 6; // only look at the first octal digit sequence	0
org.apache.commons.compress.archivers.tar.TarUtils:618-b = ' ';	0
org.apache.commons.compress.archivers.tar.TarUtils:620-unsignedSum += 0xff & b;	0
org.apache.commons.compress.archivers.tar.TarUtils:621-signedSum += b;	0
org.apache.commons.compress.archivers.tar.TarUtils:624-return storedSum == unsignedSum || storedSum == signedSum	0
org.apache.commons.compress.archivers.tar.TarUtils:171-return parseOctal(buffer, offset, length);	0
org.apache.commons.compress.archivers.tar.TarUtils:264-return parseName(buffer, offset, length, DEFAULT_ENCODING);	0
org.apache.commons.compress.archivers.tar.TarUtils:292-int len = length;	0
org.apache.commons.compress.archivers.tar.TarUtils:293-for (; len > 0; len--) {	0
org.apache.commons.compress.archivers.tar.TarUtils:294-if (buffer[offset + len - 1] != 0) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:501-currEntry.setGroupId(Integer.parseInt(val));	1
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:311-paxHeaders();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:429-Map<String, String> headers = parsePaxHeaders(this);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:430-getNextEntry(); // Get the actual file entry	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:431-applyPaxHeadersToCurrentEntry(headers);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:493-for (Entry<String, String> ent : headers.entrySet()){	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:494-String key = ent.getKey();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:495-String val = ent.getValue();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:496-if ("path".equals(key)){	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:498-} else if ("linkpath".equals(key)){	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:500-} else if ("gid".equals(key)){	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:558-return getNextTarEntry();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:181-if (entrySize - entryOffset > Integer.MAX_VALUE) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:184-return (int) (entrySize - entryOffset);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:435-Map<String, String> headers = new HashMap<String, String>();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:439-int len = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:440-int read = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:441-while((ch = i.read()) != -1) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:442-read++;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:443-if (ch == ' '){ // End of length string	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:445-ByteArrayOutputStream coll = new ByteArrayOutputStream();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:446-while((ch = i.read()) != -1) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:447-read++;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:448-if (ch == '='){ // end of keyword	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:449-String keyword = coll.toString(CharsetNames.UTF_8);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:451-final int restLen = len - read;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:452-byte[] rest = new byte[restLen];	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:453-int got = IOUtils.readFully(i, rest);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:454-if (got != restLen) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:462-String value = new String(rest, 0,	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:464-headers.put(keyword, value);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:465-break;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:467-coll.write((byte) ch);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:471-len *= 10;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:472-len += ch - '0';	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:474-if (ch == -1){ // EOF	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:475-break;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:477-}	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:478-return headers;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:608-if (currEntry == null) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:612-numToRead = Math.min(numToRead, available());	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:614-totalRead = is.read(buf, offset, numToRead);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:616-if (totalRead == -1) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:622-count(totalRead);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:623-entryOffset += totalRead;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:626-return totalRead;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:333-long numRecords = (this.entrySize / this.recordSize) + 1;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:334-long padding = (numRecords * this.recordSize) - this.entrySize;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:335-long skipped = IOUtils.skip(is, padding);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:336-count(skipped);	0
org.apache.commons.compress.compressors.CompressorStreamFactory:206-if (in == null) {	0
org.apache.commons.compress.compressors.CompressorStreamFactory:210-if (!in.markSupported()) {	0
org.apache.commons.compress.compressors.CompressorStreamFactory:214-final byte[] signature = new byte[12];	0
org.apache.commons.compress.compressors.CompressorStreamFactory:215-in.mark(signature.length);	0
org.apache.commons.compress.compressors.CompressorStreamFactory:217-int signatureLength = IOUtils.readFully(in, signature);	0
org.apache.commons.compress.compressors.CompressorStreamFactory:218-in.reset();	0
org.apache.commons.compress.compressors.CompressorStreamFactory:220-if (BZip2CompressorInputStream.matches(signature, signatureLength)) {	0
org.apache.commons.compress.compressors.CompressorStreamFactory:221-return new BZip2CompressorInputStream(in, decompressConcatenated);	0
org.apache.commons.compress.compressors.CompressorStreamFactory:224-if (GzipCompressorInputStream.matches(signature, signatureLength)) {	0
org.apache.commons.compress.compressors.CompressorStreamFactory:225-return new GzipCompressorInputStream(in, decompressConcatenated);	0
org.apache.commons.compress.compressors.CompressorStreamFactory:228-if (Pack200CompressorInputStream.matches(signature, signatureLength)) {	0
org.apache.commons.compress.compressors.CompressorStreamFactory:232-if (FramedSnappyCompressorInputStream.matches(signature, signatureLength)) {	0
org.apache.commons.compress.compressors.CompressorStreamFactory:236-if (ZCompressorInputStream.matches(signature, signatureLength)) {	0
org.apache.commons.compress.compressors.CompressorStreamFactory:241-if (XZUtils.matches(signature, signatureLength) &&	0
org.apache.commons.compress.compressors.CompressorStreamFactory:246-if (LZMAUtils.matches(signature, signatureLength) &&	0
org.apache.commons.compress.compressors.CompressorStreamFactory:253-}	0
org.apache.commons.compress.compressors.CompressorStreamFactory:255-throw new CompressorException("No Compressor found for the stream signature.");	0
org.apache.commons.compress.compressors.CompressorStreamFactory:149-public CompressorStreamFactory() {	0
org.apache.commons.compress.compressors.CompressorStreamFactory:144-private volatile boolean decompressConcatenated = false;	0
org.apache.commons.compress.compressors.CompressorStreamFactory:150-this.decompressUntilEOF = null;	0
org.apache.commons.compress.compressors.CompressorStreamFactory:151-}	0
org.apache.commons.compress.compressors.CompressorStreamFactory:163-public CompressorStreamFactory(boolean decompressUntilEOF) {	0
org.apache.commons.compress.compressors.CompressorStreamFactory:144-private volatile boolean decompressConcatenated = false;	0
org.apache.commons.compress.compressors.CompressorStreamFactory:164-this.decompressUntilEOF = Boolean.valueOf(decompressUntilEOF);	0
org.apache.commons.compress.compressors.CompressorStreamFactory:166-this.decompressConcatenated = decompressUntilEOF;	0
org.apache.commons.compress.compressors.CompressorStreamFactory:167-}	0
org.apache.commons.compress.compressors.CompressorStreamFactory:187-if (this.decompressUntilEOF != null) {	0
org.apache.commons.compress.compressors.CompressorStreamFactory:190-this.decompressConcatenated = decompressConcatenated;	0
org.apache.commons.compress.compressors.CompressorStreamFactory:191-}	0
org.apache.commons.compress.compressors.CompressorStreamFactory:229-return new Pack200CompressorInputStream(in);	0
org.apache.commons.compress.compressors.CompressorStreamFactory:372-return decompressConcatenated;	0
org.apache.commons.compress.compressors.CompressorStreamFactory:188-throw new IllegalStateException("Cannot override the setting defined by the constructor");	0
org.apache.commons.compress.compressors.CompressorStreamFactory:207-throw new IllegalArgumentException("Stream must not be null.");	0
org.apache.commons.compress.compressors.CompressorStreamFactory:211-throw new IllegalArgumentException("Mark is not supported.");	0
org.apache.commons.compress.compressors.CompressorStreamFactory:233-return new FramedSnappyCompressorInputStream(in);	0
org.apache.commons.compress.compressors.CompressorStreamFactory:237-return new ZCompressorInputStream(in);	0
org.apache.commons.compress.compressors.CompressorStreamFactory:243-return new XZCompressorInputStream(in, decompressConcatenated);	0
org.apache.commons.compress.compressors.CompressorStreamFactory:248-return new LZMACompressorInputStream(in);	0
org.apache.commons.compress.compressors.CompressorStreamFactory:251-} catch (IOException e) {	0
org.apache.commons.compress.compressors.CompressorStreamFactory:252-throw new CompressorException("Failed to detect Compressor from InputStream.", e);	0
org.apache.commons.compress.compressors.CompressorStreamFactory:272-if (name == null || in == null) {	0
org.apache.commons.compress.compressors.CompressorStreamFactory:273-throw new IllegalArgumentException(	0
org.apache.commons.compress.compressors.CompressorStreamFactory:279-if (GZIP.equalsIgnoreCase(name)) {	0
org.apache.commons.compress.compressors.CompressorStreamFactory:280-return new GzipCompressorInputStream(in, decompressConcatenated);	0
org.apache.commons.compress.compressors.CompressorStreamFactory:283-if (BZIP2.equalsIgnoreCase(name)) {	0
org.apache.commons.compress.compressors.CompressorStreamFactory:284-return new BZip2CompressorInputStream(in, decompressConcatenated);	0
org.apache.commons.compress.compressors.CompressorStreamFactory:287-if (XZ.equalsIgnoreCase(name)) {	0
org.apache.commons.compress.compressors.CompressorStreamFactory:288-return new XZCompressorInputStream(in, decompressConcatenated);	0
org.apache.commons.compress.compressors.CompressorStreamFactory:291-if (LZMA.equalsIgnoreCase(name)) {	0
org.apache.commons.compress.compressors.CompressorStreamFactory:292-return new LZMACompressorInputStream(in);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:122-this.gid = ZipUtil.longToBig(l);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:123-}	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:146-return getLocalFileDataLength();	1
org.apache.commons.compress.archivers.zip.X7875_NewUnix:95-public long getUID() { return ZipUtil.bigToLong(uid); }	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:105-public long getGID() { return ZipUtil.bigToLong(gid); }	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:113-this.uid = ZipUtil.longToBig(l);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:114-}	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:132-int uidSize = trimLeadingZeroesForceMinLength(uid.toByteArray()).length;	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:133-int gidSize = trimLeadingZeroesForceMinLength(gid.toByteArray()).length;	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:136-return new ZipShort(3 + uidSize + gidSize);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:156-byte[] uidBytes = uid.toByteArray();	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:157-byte[] gidBytes = gid.toByteArray();	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:162-uidBytes = trimLeadingZeroesForceMinLength(uidBytes);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:163-gidBytes = trimLeadingZeroesForceMinLength(gidBytes);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:170-byte[] data = new byte[3 + uidBytes.length + gidBytes.length];	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:173-reverse(uidBytes);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:174-reverse(gidBytes);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:176-int pos = 0;	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:177-data[pos++] = unsignedIntToSignedByte(version);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:178-data[pos++] = unsignedIntToSignedByte(uidBytes.length);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:179-System.arraycopy(uidBytes, 0, data, pos, uidBytes.length);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:180-pos += uidBytes.length;	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:181-data[pos++] = unsignedIntToSignedByte(gidBytes.length);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:182-System.arraycopy(gidBytes, 0, data, pos, gidBytes.length);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:183-return data;	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:207-reset();	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:208-this.version = signedByteToUnsignedInt(data[offset++]);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:209-int uidSize = signedByteToUnsignedInt(data[offset++]);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:210-byte[] uidBytes = new byte[uidSize];	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:211-System.arraycopy(data, offset, uidBytes, 0, uidSize);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:212-offset += uidSize;	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:213-this.uid = new BigInteger(1, reverse(uidBytes)); // sign-bit forced positive	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:215-int gidSize = signedByteToUnsignedInt(data[offset++]);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:216-byte[] gidBytes = new byte[gidSize];	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:217-System.arraycopy(data, offset, gidBytes, 0, gidSize);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:218-this.gid = new BigInteger(1, reverse(gidBytes)); // sign-bit forced positive	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:219-}	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:288-if (array == null) {	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:292-int pos = 0;	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:293-for (byte b : array) {	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:294-if (b == 0) {	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:295-pos++;	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:338-final int MIN_LENGTH = 1;	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:340-byte[] trimmedArray = new byte[Math.max(MIN_LENGTH, array.length - pos)];	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:341-int startPos = trimmedArray.length - (array.length - pos);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:342-System.arraycopy(array, pos, trimmedArray, startPos, trimmedArray.length - startPos);	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:343-return trimmedArray;	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:74-public X7875_NewUnix() {	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:61-private int version = 1; // always '1' according to current info-zip spec.	0
org.apache.commons.compress.archivers.zip.X7875_NewUnix:75-reset();	0
org.apache.commons.compress.archivers.tar.TarUtils:40-static final ZipEncoding DEFAULT_ENCODING =	0
org.apache.commons.compress.archivers.tar.TarUtils:47-static final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() {	0
org.apache.commons.compress.archivers.tar.TarUtils:102-longresult = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:103-int end = offset + length;	0
org.apache.commons.compress.archivers.tar.TarUtils:104-int start = offset;	0
org.apache.commons.compress.archivers.tar.TarUtils:106-if (length < 2){	0
org.apache.commons.compress.archivers.tar.TarUtils:110-if (buffer[start] == 0) {	0
org.apache.commons.compress.archivers.tar.TarUtils:111-return 0L;	0
org.apache.commons.compress.archivers.tar.TarUtils:115-while (start < end){	0
org.apache.commons.compress.archivers.tar.TarUtils:116-if (buffer[start] == ' '){	0
org.apache.commons.compress.archivers.tar.TarUtils:127-byte trailer = buffer[end - 1];	0
org.apache.commons.compress.archivers.tar.TarUtils:128-while (start < end && (trailer == 0 || trailer == ' ')) {	0
org.apache.commons.compress.archivers.tar.TarUtils:129-end--;	0
org.apache.commons.compress.archivers.tar.TarUtils:130-trailer = buffer[end - 1];	0
org.apache.commons.compress.archivers.tar.TarUtils:133-for ( ;start < end; start++) {	0
org.apache.commons.compress.archivers.tar.TarUtils:134-final byte currentByte = buffer[start];	0
org.apache.commons.compress.archivers.tar.TarUtils:136-if (currentByte < '0' || currentByte > '7'){	0
org.apache.commons.compress.archivers.tar.TarUtils:140-result = (result << 3) + (currentByte - '0'); // convert from ASCII	0
org.apache.commons.compress.archivers.tar.TarUtils:144-return result;	0
org.apache.commons.compress.archivers.tar.TarUtils:167-if ((buffer[offset] & 0x80) == 0) {	0
org.apache.commons.compress.archivers.tar.TarUtils:168-return parseOctal(buffer, offset, length);	0
org.apache.commons.compress.archivers.tar.TarUtils:261-return parseName(buffer, offset, length, DEFAULT_ENCODING);	0
org.apache.commons.compress.archivers.tar.TarUtils:290-int len = length;	0
org.apache.commons.compress.archivers.tar.TarUtils:291-for (; len > 0; len--) {	0
org.apache.commons.compress.archivers.tar.TarUtils:292-if (buffer[offset + len - 1] != 0) {	0
org.apache.commons.compress.archivers.tar.TarUtils:293-break;	0
org.apache.commons.compress.archivers.tar.TarUtils:296-if (len > 0) {	0
org.apache.commons.compress.archivers.tar.TarUtils:297-byte[] b = new byte[len];	0
org.apache.commons.compress.archivers.tar.TarUtils:298-System.arraycopy(buffer, offset, b, 0, len);	0
org.apache.commons.compress.archivers.tar.TarUtils:299-return encoding.decode(b);	0
org.apache.commons.compress.archivers.tar.TarUtils:301-return "";	0
org.apache.commons.compress.archivers.tar.TarUtils:594-long storedSum = 0;	1
org.apache.commons.compress.archivers.tar.TarUtils:595-long unsignedSum = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:596-long signedSum = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:598-int digits = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:599-for (int i = 0; i < header.length; i++) {	0
org.apache.commons.compress.archivers.tar.TarUtils:600-byte b = header[i];	0
org.apache.commons.compress.archivers.tar.TarUtils:601-if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) {	0
org.apache.commons.compress.archivers.tar.TarUtils:602-if ('0' <= b && b <= '7' && digits++ < 6) {	1
org.apache.commons.compress.archivers.tar.TarUtils:603-storedSum = storedSum * 8 + b - '0';	0
org.apache.commons.compress.archivers.tar.TarUtils:604-} else if (digits > 0) {	0
org.apache.commons.compress.archivers.tar.TarUtils:605-digits = 6;	0
org.apache.commons.compress.archivers.tar.TarUtils:607-b = ' ';	0
org.apache.commons.compress.archivers.tar.TarUtils:609-unsignedSum += 0xff & b;	0
org.apache.commons.compress.archivers.tar.TarUtils:610-signedSum += b;	0
org.apache.commons.compress.archivers.tar.TarUtils:612-return storedSum == unsignedSum || storedSum == signedSum;	0
org.apache.commons.compress.archivers.tar.TarUtils:77-private TarUtils(){	0
org.apache.commons.compress.archivers.tar.TarUtils:78-}	0
org.apache.commons.compress.archivers.tar.TarUtils:107-throw new IllegalArgumentException("Length "+length+" must be at least 2");	0
org.apache.commons.compress.archivers.tar.TarUtils:117-start++;	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:82-static final byte[] sevenZSignature = {	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:320-int nid = header.readUnsignedByte();	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:322-if (nid == NID.kPackInfo) {	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:323-readPackInfo(header, archive);	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:324-nid = header.readUnsignedByte();	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:327-if (nid == NID.kUnpackInfo) {	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:328-readUnpackInfo(header, archive);	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:329-nid = header.readUnsignedByte();	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:335-if (nid == NID.kSubStreamsInfo) {	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:340-if (nid != NID.kEnd) {	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:343-}	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:346-archive.packPos = readUint64(header);	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:347-final long numPackStreams = readUint64(header);	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:348-int nid = header.readUnsignedByte();	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:349-if (nid == NID.kSize) {	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:350-archive.packSizes = new long[(int)numPackStreams];	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:351-for (int i = 0; i < archive.packSizes.length; i++) {	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:352-archive.packSizes[i] = readUint64(header);	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:354-nid = header.readUnsignedByte();	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:357-if (nid == NID.kCRC) {	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:369-if (nid != NID.kEnd) {	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:372-}	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:375-int nid = header.readUnsignedByte();	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:376-if (nid != NID.kFolder) {	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:379-final long numFolders = readUint64(header);	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:380-final Folder[] folders = new Folder[(int)numFolders];	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:381-archive.folders = folders;	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:382-final int external = header.readUnsignedByte();	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:383-if (external != 0) {	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:386-for (int i = 0; i < (int)numFolders; i++) {	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:387-folders[i] = readFolder(header);	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:390-nid = header.readUnsignedByte();	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:391-if (nid != NID.kCodersUnpackSize) {	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:394-for (final Folder folder : folders) {	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:395-folder.unpackSizes = new long[(int)folder.totalOutputStreams];	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:396-for (int i = 0; i < folder.totalOutputStreams; i++) {	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:397-folder.unpackSizes[i] = readUint64(header);	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:401-nid = header.readUnsignedByte();	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:402-if (nid == NID.kCRC) {	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:416-if (nid != NID.kEnd) {	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:419-}	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:505-final Folder folder = new Folder();	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:507-final long numCoders = readUint64(header);	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:508-final Coder[] coders = new Coder[(int)numCoders];	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:509-long totalInStreams = 0;	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:510-long totalOutStreams = 0;	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:511-for (int i = 0; i < coders.length; i++) {	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:512-coders[i] = new Coder();	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:513-final int bits = header.readUnsignedByte();	0
org.apache.commons.compress.archivers.sevenz.SevenZFile:514-final int idSize = bits & 0xf;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:472-headers.remove(keyword);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:319-paxHeaders();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:444-final Map<String, String> headers = parsePaxHeaders(this);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:184-if (isDirectory()) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:187-if (entrySize - entryOffset > Integer.MAX_VALUE) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:190-return (int) (entrySize - entryOffset);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:648-if (currEntry == null) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:652-numToRead = Math.min(numToRead, available());	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:654-totalRead = is.read(buf, offset, numToRead);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:656-if (totalRead == -1) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:662-count(totalRead);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:663-entryOffset += totalRead;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:666-return totalRead;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:454-final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:458-int len = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:459-int read = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:460-while((ch = i.read()) != -1) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:461-read++;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:462-if (ch == ' '){	1
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:464-final ByteArrayOutputStream coll = new ByteArrayOutputStream();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:465-while((ch = i.read()) != -1) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:466-read++;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:467-if (ch == '='){ // end of keyword	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:468-final String keyword = coll.toString(CharsetNames.UTF_8);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:470-final int restLen = len - read;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:471-if (restLen == 1) { // only NL	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:474-final byte[] rest = new byte[restLen];	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:475-final int got = IOUtils.readFully(i, rest);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:476-if (got != restLen) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:484-final String value = new String(rest, 0,	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:486-headers.put(keyword, value);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:488-break;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:490-coll.write((byte) ch);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:494-len *= 10;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:495-len += ch - '0';	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:497-if (ch == -1){ // EOF	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:500-}	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:586-return currEntry != null && currEntry.isDirectory();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:642-int totalRead = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:644-if (hasHitEOF || isDirectory() || entryOffset >= entrySize) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:263-if (hasHitEOF) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:267-if (currEntry != null) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:275-final byte[] headerBuf = getRecord();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:277-if (headerBuf == null) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:284-currEntry = new TarArchiveEntry(headerBuf, zipEncoding);	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:287-}	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:289-entryOffset = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:290-entrySize = currEntry.getSize();	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:292-if (currEntry.isGNULongLinkEntry()) {	0
org.apache.commons.compress.archivers.tar.TarArchiveInputStream:303-if (currEntry.isGNULongNameEntry()) {	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:860-return true;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1153-final String prefix = oldStyle	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1158-if (isDirectory() && !name.endsWith("/")){	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1161-if (prefix.length() > 0){	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1226-return FORMAT_POSIX;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1221-if (ArchiveUtils.matchAsciiBuffer(MAGIC_POSIX, header, MAGIC_OFFSET, MAGICLEN)) {	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1222-if (ArchiveUtils.matchAsciiBuffer(MAGIC_XSTAR, header, XSTAR_MAGIC_OFFSET,	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:851-if (file != null) {	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:855-if (linkFlag == LF_DIR) {	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:859-if (getName().endsWith("/")) {	1
org.apache.commons.compress.archivers.tar.TarArchiveEntry:225-private TarArchiveEntry() {	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:149-private String name = "";	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:158-private long userId = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:161-private long groupId = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:164-private long size = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:176-private String linkName = "";	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:179-private String magic = MAGIC_POSIX;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:181-private String version = VERSION_POSIX;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:187-private String groupName = "";	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:190-private int devMajor = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:193-private int devMinor = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:226-String user = System.getProperty("user.name", "");	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:228-if (user.length() > MAX_NAMELEN) {	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:232-this.userName = user;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:233-this.file = null;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:234-}	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:367-this();	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:368-parseTarHeader(headerBuf, encoding);	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:369-}	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:146-private static final TarArchiveEntry[] EMPTY_TAR_ARCHIVE_ENTRIES = new TarArchiveEntry[0];	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:426-return name;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:676-return size;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:808-return linkFlag == LF_GNUTYPE_LONGLINK;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:817-return linkFlag == LF_GNUTYPE_LONGNAME;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:829-return linkFlag == LF_PAX_EXTENDED_HEADER_LC	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:841-return linkFlag == LF_PAX_GLOBAL_EXTENDED_HEADER;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1085-parseTarHeader(header, encoding, false);	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1086-}	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1091-int offset = 0;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1093-name = oldStyle ? TarUtils.parseName(header, offset, NAMELEN)	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1095-offset += NAMELEN;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1096-mode = (int) TarUtils.parseOctalOrBinary(header, offset, MODELEN);	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1097-offset += MODELEN;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1098-userId = (int) TarUtils.parseOctalOrBinary(header, offset, UIDLEN);	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1099-offset += UIDLEN;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1100-groupId = (int) TarUtils.parseOctalOrBinary(header, offset, GIDLEN);	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1101-offset += GIDLEN;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1102-size = TarUtils.parseOctalOrBinary(header, offset, SIZELEN);	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1103-offset += SIZELEN;	0
org.apache.commons.compress.archivers.tar.TarArchiveEntry:1104-modTime = TarUtils.parseOctalOrBinary(header, offset, MODTIMELEN);	0
org.apache.commons.compress.utils.ArchiveUtils:273-final char[] chars = s.toCharArray();	1
org.apache.commons.compress.utils.ArchiveUtils:274-final int len = chars.length;	0
org.apache.commons.compress.utils.ArchiveUtils:275-final StringBuilder sb = new StringBuilder();	0
org.apache.commons.compress.utils.ArchiveUtils:276-for (int i = 0; i < len; i++) {	0
org.apache.commons.compress.utils.ArchiveUtils:277-final char c = chars[i];	0
org.apache.commons.compress.utils.ArchiveUtils:278-if (!Character.isISOControl(c)) {	0
org.apache.commons.compress.utils.ArchiveUtils:279-Character.UnicodeBlock block = Character.UnicodeBlock.of(c);	0
org.apache.commons.compress.utils.ArchiveUtils:280-if (block != null && block != Character.UnicodeBlock.SPECIALS) {	0
org.apache.commons.compress.utils.ArchiveUtils:281-sb.append(c);	0
org.apache.commons.compress.utils.ArchiveUtils:282-continue;	0
org.apache.commons.compress.utils.ArchiveUtils:287-return sb.toString();	0
org.apache.commons.compress.utils.ArchiveUtils:33-private ArchiveUtils(){	0
org.apache.commons.compress.utils.ArchiveUtils:34-}	0
org.apache.commons.compress.utils.ArchiveUtils:49-final StringBuilder sb = new StringBuilder();	0
org.apache.commons.compress.utils.ArchiveUtils:50-sb.append(entry.isDirectory()? 'd' : '-');// c.f. "ls -l" output	0
org.apache.commons.compress.utils.ArchiveUtils:51-final String size = Long.toString(entry.getSize());	0
org.apache.commons.compress.utils.ArchiveUtils:52-sb.append(' ');	0
org.apache.commons.compress.utils.ArchiveUtils:54-for(int i=7; i > size.length(); i--){	0
org.apache.commons.compress.utils.ArchiveUtils:55-sb.append(' ');	0
org.apache.commons.compress.utils.ArchiveUtils:57-sb.append(size);	0
org.apache.commons.compress.utils.ArchiveUtils:58-sb.append(' ').append(entry.getName());	0
org.apache.commons.compress.utils.ArchiveUtils:59-return sb.toString();	0
org.apache.commons.compress.utils.ArchiveUtils:75-buffer1 = expected.getBytes(CharsetNames.US_ASCII);	0
org.apache.commons.compress.utils.ArchiveUtils:78-}	0
org.apache.commons.compress.utils.ArchiveUtils:76-} catch (final UnsupportedEncodingException e) {	0
org.apache.commons.compress.utils.ArchiveUtils:77-throw new RuntimeException(e); // Should not happen	0
org.apache.commons.compress.utils.ArchiveUtils:79-return isEqual(buffer1, 0, buffer1.length, buffer, offset, length, false);	0
org.apache.commons.compress.utils.ArchiveUtils:90-return matchAsciiBuffer(expected, buffer, 0, buffer.length);	0
org.apache.commons.compress.utils.ArchiveUtils:102-return inputString.getBytes(CharsetNames.US_ASCII);	0
org.apache.commons.compress.utils.ArchiveUtils:103-} catch (final UnsupportedEncodingException e) {	0
org.apache.commons.compress.utils.ArchiveUtils:104-throw new RuntimeException(e); // Should never happen	0
org.apache.commons.compress.utils.ArchiveUtils:116-return new String(inputBytes, CharsetNames.US_ASCII);	0
org.apache.commons.compress.utils.ArchiveUtils:117-} catch (final UnsupportedEncodingException e) {	0
org.apache.commons.compress.utils.ArchiveUtils:118-throw new RuntimeException(e); // Should never happen	0
org.apache.commons.compress.utils.ArchiveUtils:132-return new String(inputBytes, offset, length, CharsetNames.US_ASCII);	0
org.apache.commons.compress.utils.ArchiveUtils:133-} catch (final UnsupportedEncodingException e) {	0
org.apache.commons.compress.utils.ArchiveUtils:134-throw new RuntimeException(e); // Should never happen	0
org.apache.commons.compress.utils.ArchiveUtils:154-final int minLen=length1 < length2 ? length1 : length2;	0
org.apache.commons.compress.utils.ArchiveUtils:155-for (int i=0; i < minLen; i++){	0
org.apache.commons.compress.utils.ArchiveUtils:156-if (buffer1[offset1+i] != buffer2[offset2+i]){	0
org.apache.commons.compress.utils.ArchiveUtils:157-return false;	0
org.apache.commons.compress.utils.ArchiveUtils:160-if (length1 == length2){	0
org.apache.commons.compress.utils.ArchiveUtils:161-return true;	0
org.apache.commons.compress.utils.ArchiveUtils:163-if (ignoreTrailingNulls){	0
org.apache.commons.compress.utils.ArchiveUtils:164-if (length1 > length2){	0
org.apache.commons.compress.utils.ArchiveUtils:165-for(int i = length2; i < length1; i++){	0
org.apache.commons.compress.utils.ArchiveUtils:166-if (buffer1[offset1+i] != 0){	0
org.apache.commons.compress.utils.ArchiveUtils:167-return false;	0
org.apache.commons.compress.utils.ArchiveUtils:171-for(int i = length1; i < length2; i++){	0
org.apache.commons.compress.utils.ArchiveUtils:172-if (buffer2[offset2+i] != 0){	0
org.apache.commons.compress.utils.BitInputStream:85-while (bitsCachedSize < count) {	1
org.apache.commons.compress.utils.BitInputStream:86-final long nextByte = in.read();	0
org.apache.commons.compress.utils.BitInputStream:87-if (nextByte < 0) {	0
org.apache.commons.compress.utils.BitInputStream:90-if (byteOrder == ByteOrder.LITTLE_ENDIAN) {	0
org.apache.commons.compress.utils.BitInputStream:96-bitsCachedSize += 8;	0
org.apache.commons.compress.utils.BitInputStream:97-}	0
org.apache.commons.compress.utils.BitInputStream:101-if (byteOrder == ByteOrder.LITTLE_ENDIAN) {	0
org.apache.commons.compress.utils.BitInputStream:107-bitsCachedSize -= count;	0
org.apache.commons.compress.utils.BitInputStream:108-return bitsOut;	1
org.apache.commons.compress.utils.BitInputStream:52-public BitInputStream(final InputStream in, final ByteOrder byteOrder) {	0
org.apache.commons.compress.utils.BitInputStream:43-private long bitsCached = 0;	0
org.apache.commons.compress.utils.BitInputStream:44-private int bitsCachedSize = 0;	0
org.apache.commons.compress.utils.BitInputStream:53-this.in = in;	0
org.apache.commons.compress.utils.BitInputStream:54-this.byteOrder = byteOrder;	0
org.apache.commons.compress.utils.BitInputStream:55-}	0
org.apache.commons.compress.utils.BitInputStream:33-private static final long[] MASKS = new long[MAXIMUM_CACHE_SIZE + 1];	0
org.apache.commons.compress.utils.BitInputStream:36-for (int i = 1; i <= MAXIMUM_CACHE_SIZE; i++) {	0
org.apache.commons.compress.utils.BitInputStream:37-MASKS[i] = (MASKS[i - 1] << 1) + 1;	0
org.apache.commons.compress.utils.BitInputStream:39-}	0
org.apache.commons.compress.utils.BitInputStream:82-if (count < 0 || count > MAXIMUM_CACHE_SIZE) {	0
org.apache.commons.compress.utils.BitInputStream:93-bitsCached <<= 8;	0
org.apache.commons.compress.utils.BitInputStream:94-bitsCached |= nextByte;	0
org.apache.commons.compress.utils.BitInputStream:105-bitsOut = (bitsCached >> (bitsCachedSize - count)) & MASKS[count];	0
org.apache.commons.compress.utils.BitInputStream:91-bitsCached |= (nextByte << bitsCachedSize);	0
org.apache.commons.compress.utils.BitInputStream:102-bitsOut = (bitsCached & MASKS[count]);	0
org.apache.commons.compress.utils.BitInputStream:103-bitsCached >>>= count;	0
org.apache.commons.compress.utils.BitInputStream:59-in.close();	0
org.apache.commons.compress.utils.BitInputStream:60-}	0
org.apache.commons.compress.utils.BitInputStream:67-bitsCached = 0;	0
org.apache.commons.compress.utils.BitInputStream:68-bitsCachedSize = 0;	0
org.apache.commons.compress.utils.BitInputStream:69-}	0
org.apache.commons.compress.utils.BitInputStream:83-throw new IllegalArgumentException("count must not be negative or greater than " + MAXIMUM_CACHE_SIZE);	0
org.apache.commons.compress.utils.BitInputStream:88-return nextByte;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:556-skipped += x;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:557-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:285-off += 3 * WORD;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:644-readDataDescriptor();	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:729-readFully(WORD_BUF);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:730-ZipLong val = new ZipLong(WORD_BUF);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:731-if (ZipLong.DD_SIG.equals(val)) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:733-readFully(WORD_BUF);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:734-val = new ZipLong(WORD_BUF);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:736-current.entry.setCrc(val.getValue());	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:749-readFully(TWO_DWORD_BUF);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:750-final ZipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:751-if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG)) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:752-pushback(TWO_DWORD_BUF, DWORD, DWORD);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:753-current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:754-current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD));	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:759-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:249-return null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:521-if (!closed) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:522-closed = true;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:524-in.close();	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:526-inf.end();	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:527-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:529-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:168-this(inputStream, ZipEncodingHelper.UTF8);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:169-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:179-this(inputStream, encoding, true);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:180-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:191-this(inputStream, encoding, useUnicodeExtraFields, false);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:192-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:208-final boolean allowStoredEntriesWithDataDescriptor) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:92-private final Inflater inf = new Inflater(true);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:95-private final ByteBuffer buf = ByteBuffer.allocate(ZipArchiveOutputStream.BUFFER_SIZE);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:98-private CurrentEntry current = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:101-private boolean closed = false;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:104-private boolean hitCentralDirectory = false;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:111-private ByteArrayInputStream lastStoredEntry = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:114-private boolean allowStoredEntriesWithDataDescriptor = false;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:155-private final byte[] LFH_BUF = new byte[LFH_LEN];	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:156-private final byte[] SKIP_BUF = new byte[1024];	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:157-private final byte[] SHORT_BUF = new byte[SHORT];	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:158-private final byte[] WORD_BUF = new byte[WORD];	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:159-private final byte[] TWO_DWORD_BUF = new byte[2 * DWORD];	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:161-private int entriesRead = 0;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:209-this.encoding = encoding;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:210-zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:211-this.useUnicodeExtraFields = useUnicodeExtraFields;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:212-in = new PushbackInputStream(inputStream, buf.capacity());	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:213-this.allowStoredEntriesWithDataDescriptor =	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:216-buf.limit(0);	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:154-this("");	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:155-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:284-return platform != PLATFORM_UNIX ? 0 :	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:297-return (getUnixMode() & UnixStat.LINK_FLAG) == UnixStat.LINK_FLAG;	1
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:642-if (size < 0) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:645-this.size = size;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:646-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:658-setName(name);	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:659-this.rawName = rawName;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:660-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:692-return getName().hashCode();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:724-setExtraFields(f);	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:813-this.versionMadeBy = versionMadeBy;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:814-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:822-this.versionRequired = versionRequired;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:823-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:858-this.rawFlag = rawFlag;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:859-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:239-internalAttributes = value;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:240-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:316-this.platform = platform;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:317-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:537-final ZipExtraField[] local =	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:540-mergeExtraFields(local, true);	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:545-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:546-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:564-final ZipExtraField[] central =	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:567-mergeExtraFields(central, false);	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:570-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:571-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:710-gpb = b;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:711-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:723-if (extraFields == null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:726-for (final ZipExtraField element : f) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:745-setExtra();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:747-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:214-if (method < 0) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:218-this.method = method;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:219-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:260-externalAttributes = value;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:261-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:252-return externalAttributes;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:505-if (extraFields != null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:506-for (final ZipExtraField extraField : extraFields) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:512-return null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:324-final List<ZipExtraField> newFields = new ArrayList<>();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:325-for (final ZipExtraField field : fields) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:332-extraFields = newFields.toArray(new ZipExtraField[newFields.size()]);	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:333-setExtra();	0
org.apache.commons.compress.archivers.zip.ZipArchiveEntry:334-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:530-preClose();	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:531-entry.bytesRead = entry.entry.getSize();	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:532-final Zip64Mode effectiveMode = getEffectiveZip64Mode(entry.entry);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:533-final boolean actuallyNeedsZip64 = checkIfNeedsZip64(effectiveMode);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:534-closeEntry(actuallyNeedsZip64, phased);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:535-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:577-final ZipArchiveEntry ae = new ZipArchiveEntry(entry);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:578-if (hasZip64Extra(ae)) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:584-final boolean is2PhaseSource = ae.getCrc() != ZipArchiveEntry.CRC_UNKNOWN	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:587-putArchiveEntry(ae, is2PhaseSource);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:588-copyFromZipInputStream(rawStream);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:589-closeCopiedEntry(is2PhaseSource);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:590-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:936-if (entry == null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:939-ZipUtil.checkRequestedFeatures(entry.entry);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:940-entry.hasWritten = true;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:942-while ((length = src.read(copyBuffer)) >= 0 )	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:944-streamCompressor.writeCounted(copyBuffer, 0, length);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:945-count( length );	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:947-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:1089-putLong(ze.getCrc(), buf, LFH_CRC_OFFSET);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:1105-putLong(ze.getCompressedSize(), buf, LFH_COMPRESSED_SIZE_OFFSET);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:1106-putLong(ze.getSize(), buf, LFH_ORIGINAL_SIZE_OFFSET);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:273-public ZipArchiveOutputStream(final OutputStream out) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:116-protected boolean finished = false;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:156-private String comment = "";	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:161-private int level = DEFAULT_COMPRESSION;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:167-private boolean hasCompressionLevelChanged = false;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:172-private int method = java.util.zip.ZipEntry.DEFLATED;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:177-private final List<ZipArchiveEntry> entries =	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:185-private long cdOffset = 0;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:190-private long cdLength = 0;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:207-private final Map<ZipArchiveEntry, EntryMetaData> metaData =	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:217-private String encoding = DEFAULT_ENCODING;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:225-private ZipEncoding zipEncoding =	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:245-private boolean useUTF8Flag = true;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:250-private boolean fallbackToUTF8 = false;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:255-private UnicodeExtraFieldPolicy createUnicodeExtraFields = UnicodeExtraFieldPolicy.NEVER;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:262-private boolean hasUsedZip64 = false;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:264-private Zip64Mode zip64Mode = Zip64Mode.AsNeeded;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:266-private final byte[] copyBuffer = new byte[32768];	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:267-private final Calendar calendarInstance = Calendar.getInstance();	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:274-this.out = out;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:275-this.channel = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:276-def = new Deflater(level, true);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:277-streamCompressor = StreamCompressor.create(out, def);	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:278-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:1104-} else if (phased) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:1107-} else if (zipMethod == DEFLATED || channel != null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveOutputStream:1108-System.arraycopy(LZERO, 0, buf, LFH_COMPRESSED_SIZE_OFFSET, WORD);	0
org.apache.commons.compress.utils.ChecksumCalculatingInputStream:33-public ChecksumCalculatingInputStream(final Checksum checksum, final InputStream in) {	0
org.apache.commons.compress.utils.ChecksumCalculatingInputStream:37-this.checksum = checksum;	0
org.apache.commons.compress.utils.ChecksumCalculatingInputStream:38-this.in = in;	0
org.apache.commons.compress.utils.ChecksumCalculatingInputStream:39-}	0
org.apache.commons.compress.utils.ChecksumCalculatingInputStream:49-final int ret = in.read();	0
org.apache.commons.compress.utils.ChecksumCalculatingInputStream:50-if (ret >= 0) {	0
org.apache.commons.compress.utils.ChecksumCalculatingInputStream:51-checksum.update(ret);	0
org.apache.commons.compress.utils.ChecksumCalculatingInputStream:53-return ret;	0
org.apache.commons.compress.utils.ChecksumCalculatingInputStream:64-return read(b, 0, b.length);	0
org.apache.commons.compress.utils.ChecksumCalculatingInputStream:75-final int ret = in.read(b, off, len);	0
org.apache.commons.compress.utils.ChecksumCalculatingInputStream:76-if (ret >= 0) {	0
org.apache.commons.compress.utils.ChecksumCalculatingInputStream:77-checksum.update(b, off, ret);	0
org.apache.commons.compress.utils.ChecksumCalculatingInputStream:79-return ret;	0
org.apache.commons.compress.utils.ChecksumCalculatingInputStream:85-if (read() >= 0) {	0
org.apache.commons.compress.utils.ChecksumCalculatingInputStream:86-return 1;	0
org.apache.commons.compress.utils.ChecksumCalculatingInputStream:88-return 0;	0
org.apache.commons.compress.utils.ChecksumCalculatingInputStream:96-return checksum.getValue();	0
org.apache.commons.compress.archivers.tar.TarUtils:486-formatLongBinary(value, buf, offset, length, negative);	0
org.apache.commons.compress.archivers.tar.TarUtils:497-final int bits = (length - 1) * 8;	0
org.apache.commons.compress.archivers.tar.TarUtils:498-final long max = 1l << bits;	0
org.apache.commons.compress.archivers.tar.TarUtils:499-long val = Math.abs(value); // Long.MIN_VALUE stays Long.MIN_VALUE	0
org.apache.commons.compress.archivers.tar.TarUtils:500-if (val < 0 || val >= max) {	0
org.apache.commons.compress.archivers.tar.TarUtils:504-if (negative) {	0
org.apache.commons.compress.archivers.tar.TarUtils:505-val ^= max - 1;	0
org.apache.commons.compress.archivers.tar.TarUtils:506-val++;	0
org.apache.commons.compress.archivers.tar.TarUtils:507-val |= 0xffl << bits;	0
org.apache.commons.compress.archivers.tar.TarUtils:509-for (int i = offset + length - 1; i >= offset; i--) {	0
org.apache.commons.compress.archivers.tar.TarUtils:510-buf[i] = (byte) val;	0
org.apache.commons.compress.archivers.tar.TarUtils:511-val >>= 8;	0
org.apache.commons.compress.archivers.tar.TarUtils:513-}	0
org.apache.commons.compress.archivers.tar.TarUtils:523-throw new IllegalArgumentException("Value " + value +	0
org.apache.commons.compress.archivers.tar.TarUtils:478-final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;	0
org.apache.commons.compress.archivers.tar.TarUtils:480-final boolean negative = value < 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:481-if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars	0
org.apache.commons.compress.archivers.tar.TarUtils:482-return formatLongOctalBytes(value, buf, offset, length);	0
org.apache.commons.compress.archivers.tar.TarUtils:485-if (length < 9) {	0
org.apache.commons.compress.archivers.tar.TarUtils:488-formatBigIntegerBinary(value, buf, offset, length, negative);	0
org.apache.commons.compress.archivers.tar.TarUtils:490-buf[offset] = (byte) (negative ? 0xff : 0x80);	0
org.apache.commons.compress.archivers.tar.TarUtils:491-return offset + length;	0
org.apache.commons.compress.archivers.tar.TarUtils:519-final BigInteger val = BigInteger.valueOf(value);	0
org.apache.commons.compress.archivers.tar.TarUtils:520-final byte[] b = val.toByteArray();	0
org.apache.commons.compress.archivers.tar.TarUtils:521-final int len = b.length;	0
org.apache.commons.compress.archivers.tar.TarUtils:522-if (len > length - 1) {	0
org.apache.commons.compress.archivers.tar.TarUtils:526-final int off = offset + length - len;	0
org.apache.commons.compress.archivers.tar.TarUtils:527-System.arraycopy(b, 0, buf, off, len);	0
org.apache.commons.compress.archivers.tar.TarUtils:528-final byte fill = (byte) (negative ? 0xff : 0);	0
org.apache.commons.compress.archivers.tar.TarUtils:529-for (int i = offset + 1; i < off; i++) {	0
org.apache.commons.compress.archivers.tar.TarUtils:530-buf[i] = fill;	0
org.apache.commons.compress.archivers.tar.TarUtils:532-}	0
org.apache.commons.compress.archivers.tar.TarUtils:171-return parseOctal(buffer, offset, length);	0
org.apache.commons.compress.archivers.tar.TarUtils:175-return parseBinaryLong(buffer, offset, length, negative);	0
org.apache.commons.compress.archivers.tar.TarUtils:183-if (length >= 9) {	0
org.apache.commons.compress.archivers.tar.TarUtils:189-long val = 0;	0
org.apache.commons.compress.archivers.tar.TarUtils:190-for (int i = 1; i < length; i++) {	0
org.apache.commons.compress.archivers.tar.TarUtils:191-val = (val << 8) + (buffer[offset + i] & 0xff);	0
org.apache.commons.compress.archivers.tar.TarUtils:193-if (negative) {	0
org.apache.commons.compress.archivers.tar.TarUtils:195-val--;	0
org.apache.commons.compress.archivers.tar.TarUtils:196-val ^= (long) Math.pow(2.0, (length - 1) * 8.0) - 1;	0
org.apache.commons.compress.archivers.tar.TarUtils:198-return negative ? -val : val;	0
org.apache.commons.compress.archivers.tar.TarUtils:388-buffer[offset + remaining--] = (byte) '0';	0
org.apache.commons.compress.archivers.tar.TarUtils:404-buffer[offset + remaining] = (byte) '0';	0
org.apache.commons.compress.archivers.tar.TarUtils:449-final int idx=length-1; // For space	0
org.apache.commons.compress.archivers.tar.TarUtils:451-formatUnsignedOctalString(value, buf, offset, idx);	0
org.apache.commons.compress.archivers.tar.TarUtils:452-buf[offset + idx] = (byte) ' '; // Trailing space	0
org.apache.commons.compress.archivers.tar.TarUtils:454-return offset + length;	0
org.apache.commons.compress.archivers.tar.TarUtils:173-final boolean negative = buffer[offset] == (byte) 0xff;	0
org.apache.commons.compress.archivers.tar.TarUtils:174-if (length < 9) {	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:480-public void setModifyJavaTime(final Date d) { setModifyTime(dateToZipLong(d)); }	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:523-if (d == null) { return null; }	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:525-return unixTimeToZipLong(d.getTime() / 1000);	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:529-final long TWO_TO_32 = 0x100000000L;	1
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:530-if (l >= TWO_TO_32) {	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:533-return new ZipLong(l);	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:423-bit0_modifyTimePresent = l != null;	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:424-flags = (byte) (l != null ? (flags | MODIFY_TIME_BIT)	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:426-this.modifyTime = l;	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:427-}	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:122-public X5455_ExtendedTimestamp() {}	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:84-private static final ZipShort HEADER_ID = new ZipShort(0x5455);	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:131-return HEADER_ID;	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:142-return new ZipShort(1 +	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:161-return new ZipShort(1 +	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:174-final byte[] data = new byte[getLocalFileDataLength().getValue()];	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:175-int pos = 0;	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:176-data[pos++] = 0;	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:177-if (bit0_modifyTimePresent) {	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:178-data[0] |= MODIFY_TIME_BIT;	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:179-System.arraycopy(modifyTime.getBytes(), 0, data, pos, 4);	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:180-pos += 4;	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:182-if (bit1_accessTimePresent && accessTime != null) {	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:183-data[0] |= ACCESS_TIME_BIT;	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:184-System.arraycopy(accessTime.getBytes(), 0, data, pos, 4);	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:185-pos += 4;	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:187-if (bit2_createTimePresent && createTime != null) {	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:188-data[0] |= CREATE_TIME_BIT;	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:189-System.arraycopy(createTime.getBytes(), 0, data, pos, 4);	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:190-pos += 4; // NOSONAR - assignment as documentation	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:192-return data;	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:203-final byte[] centralData = new byte[getCentralDirectoryLength().getValue()];	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:204-final byte[] localData = getLocalFileDataData();	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:208-System.arraycopy(localData, 0, centralData, 0, centralData.length);	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:209-return centralData;	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:224-reset();	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:225-final int len = offset + length;	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:226-setFlags(data[offset++]);	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:227-if (bit0_modifyTimePresent) {	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:228-modifyTime = new ZipLong(data, offset);	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:229-offset += 4;	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:234-if (bit1_accessTimePresent && offset + 4 <= len) {	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:235-accessTime = new ZipLong(data, offset);	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:236-offset += 4;	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:238-if (bit2_createTimePresent && offset + 4 <= len) {	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:239-createTime = new ZipLong(data, offset);	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:240-offset += 4; // NOSONAR - assignment as documentation	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:242-}	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:252-reset();	0
org.apache.commons.compress.archivers.zip.X5455_ExtendedTimestamp:253-parseFromLocalFileData(buffer, offset, length);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:412-if (ae instanceof ZipArchiveEntry) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:413-final ZipArchiveEntry ze = (ZipArchiveEntry) ae;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:414-return ZipUtil.canHandleEntryData(ze)	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:798-return !entry.getGeneralPurposeBit().usesDataDescriptor()	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:549-if (!closed) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:550-closed = true;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:552-in.close();	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:554-inf.end();	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:555-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:557-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:169-this(inputStream, ZipEncodingHelper.UTF8);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:170-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:180-this(inputStream, encoding, true);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:181-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:192-this(inputStream, encoding, useUnicodeExtraFields, false);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:193-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:209-final boolean allowStoredEntriesWithDataDescriptor) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:93-private final Inflater inf = new Inflater(true);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:96-private final ByteBuffer buf = ByteBuffer.allocate(ZipArchiveOutputStream.BUFFER_SIZE);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:99-private CurrentEntry current = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:102-private boolean closed = false;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:105-private boolean hitCentralDirectory = false;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:112-private ByteArrayInputStream lastStoredEntry = null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:115-private boolean allowStoredEntriesWithDataDescriptor = false;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:156-private final byte[] lfhBuf = new byte[LFH_LEN];	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:157-private final byte[] skipBuf = new byte[1024];	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:158-private final byte[] shortBuf = new byte[SHORT];	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:159-private final byte[] wordBuf = new byte[WORD];	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:160-private final byte[] twoDwordBuf = new byte[2 * DWORD];	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:162-private int entriesRead = 0;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:210-this.encoding = encoding;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:211-zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:212-this.useUnicodeExtraFields = useUnicodeExtraFields;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:213-in = new PushbackInputStream(inputStream, buf.capacity());	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:214-this.allowStoredEntriesWithDataDescriptor =	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:217-buf.limit(0);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:218-}	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:858-private static final byte[] LFH = ZipLong.LFH_SIG.getBytes();	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:859-private static final byte[] CFH = ZipLong.CFH_SIG.getBytes();	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:860-private static final byte[] DD = ZipLong.DD_SIG.getBytes();	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:221-boolean firstEntry = true;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:222-if (closed || hitCentralDirectory) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:223-return null;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:225-if (current != null) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:226-closeEntry();	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:227-firstEntry = false;	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:230-long currentHeaderOffset = getBytesRead();	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:232-if (firstEntry) {	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:237-readFirstLocalFileHeader(lfhBuf);	0
org.apache.commons.compress.archivers.zip.ZipArchiveInputStream:239-readFully(lfhBuf);	0
org.apache.commons.csv.ExtendedBufferedReader:159-return lineCounter;	0
org.apache.commons.csv.ExtendedBufferedReader:146-super.mark(1);	0
org.apache.commons.csv.ExtendedBufferedReader:147-int c = super.read();	0
org.apache.commons.csv.ExtendedBufferedReader:148-super.reset();	0
org.apache.commons.csv.ExtendedBufferedReader:150-return c;	0
org.apache.commons.csv.ExtendedBufferedReader:52-super(r);	0
org.apache.commons.csv.ExtendedBufferedReader:43-private int lastChar = UNDEFINED;	0
org.apache.commons.csv.ExtendedBufferedReader:46-private int lineCounter = 0;	0
org.apache.commons.csv.ExtendedBufferedReader:53-}	0
org.apache.commons.csv.ExtendedBufferedReader:57-int current = super.read();	0
org.apache.commons.csv.ExtendedBufferedReader:58-if (current == '\n') {	1
org.apache.commons.csv.ExtendedBufferedReader:61-lastChar = current;	0
org.apache.commons.csv.ExtendedBufferedReader:62-return lastChar;	0
org.apache.commons.csv.ExtendedBufferedReader:76-return lastChar;	0
org.apache.commons.csv.ExtendedBufferedReader:59-lineCounter++;	0
org.apache.commons.csv.ExtendedBufferedReader:81-if (length == 0) {	0
org.apache.commons.csv.ExtendedBufferedReader:82-return 0;	0
org.apache.commons.csv.ExtendedBufferedReader:85-int len = super.read(buf, offset, length);	0
org.apache.commons.csv.ExtendedBufferedReader:87-if (len > 0) {	0
org.apache.commons.csv.ExtendedBufferedReader:89-for (int i = offset; i < offset + len; i++) {	0
org.apache.commons.csv.ExtendedBufferedReader:90-char ch = buf[i];	0
org.apache.commons.csv.ExtendedBufferedReader:91-if (ch == '\n') {	0
org.apache.commons.csv.ExtendedBufferedReader:92-if ('\r' != (i > 0 ? buf[i-1]: lastChar)) {	0
org.apache.commons.csv.ExtendedBufferedReader:93-lineCounter++;	0
org.apache.commons.csv.ExtendedBufferedReader:95-} else if (ch == '\r') {	0
org.apache.commons.csv.ExtendedBufferedReader:96-lineCounter++;	0
org.apache.commons.csv.ExtendedBufferedReader:100-lastChar = buf[offset + len - 1];	0
org.apache.commons.csv.ExtendedBufferedReader:102-} else if (len == -1) {	0
org.apache.commons.csv.ExtendedBufferedReader:103-lastChar = END_OF_STREAM;	0
org.apache.commons.csv.ExtendedBufferedReader:106-return len;	0
org.apache.commons.csv.ExtendedBufferedReader:123-String line = super.readLine();	0
org.apache.commons.csv.ExtendedBufferedReader:125-if (line != null) {	0
org.apache.commons.csv.ExtendedBufferedReader:126-if (line.length() > 0) {	0
org.apache.commons.csv.ExtendedBufferedReader:127-lastChar = line.charAt(line.length() - 1);	0
org.apache.commons.csv.ExtendedBufferedReader:129-lineCounter++;	0
org.apache.commons.csv.ExtendedBufferedReader:131-lastChar = END_OF_STREAM;	0
org.apache.commons.csv.ExtendedBufferedReader:134-return line;	0
org.apache.commons.csv.CSVRecord:84-final Integer index = mapping.get(name);	0
org.apache.commons.csv.CSVRecord:85-return index != null ? values[index.intValue()] : null;	1
org.apache.commons.csv.CSVRecord:80-if (mapping == null) {	0
org.apache.commons.csv.CSVRecord:49-final String comment, final long recordNumber) {	0
org.apache.commons.csv.CSVRecord:50-this.recordNumber = recordNumber;	0
org.apache.commons.csv.CSVRecord:51-this.values = values != null ? values : EMPTY_STRING_ARRAY;	0
org.apache.commons.csv.CSVRecord:52-this.mapping = mapping;	0
org.apache.commons.csv.CSVRecord:53-this.comment = comment;	0
org.apache.commons.csv.CSVRecord:54-}	0
org.apache.commons.csv.CSVRecord:34-private static final String[] EMPTY_STRING_ARRAY = new String[0];	0
org.apache.commons.csv.CSVRecord:64-return values[i];	0
org.apache.commons.csv.CSVRecord:81-throw new IllegalStateException(	0
org.apache.commons.csv.CSVRecord:96-return mapping == null ? true : mapping.size() == values.length;	0
org.apache.commons.csv.CSVRecord:107-return mapping != null ? mapping.containsKey(name) : false;	0
org.apache.commons.csv.CSVRecord:118-return isMapped(name) && mapping.get(name).intValue() < values.length;	0
org.apache.commons.csv.CSVRecord:127-return Arrays.asList(values).iterator();	0
org.apache.commons.csv.CSVRecord:131-return values;	0
org.apache.commons.csv.CSVRecord:141-return comment;	0
org.apache.commons.csv.CSVRecord:150-return recordNumber;	0
org.apache.commons.csv.CSVRecord:159-return values.length;	0
org.apache.commons.csv.CSVRecord:164-return Arrays.toString(values);	0
org.apache.commons.csv.Lexer:111-return c;	1
org.apache.commons.csv.Lexer:89-final int c = in.read();	0
org.apache.commons.csv.Lexer:90-switch (c) {	0
org.apache.commons.csv.Lexer:156-return c == LF || c == CR || c == UNDEFINED;	0
org.apache.commons.csv.Lexer:171-return c == escape;	0
org.apache.commons.csv.Lexer:175-return c == quoteChar;	0
org.apache.commons.csv.Lexer:179-return c == commmentStart;	0
org.apache.commons.csv.Lexer:57-Lexer(final CSVFormat format, final ExtendedBufferedReader in) {	0
org.apache.commons.csv.Lexer:58-this.format = format;	0
org.apache.commons.csv.Lexer:59-this.in = in;	0
org.apache.commons.csv.Lexer:60-this.delimiter = format.getDelimiter();	0
org.apache.commons.csv.Lexer:61-this.escape = mapNullToDisabled(format.getEscape());	0
org.apache.commons.csv.Lexer:62-this.quoteChar = mapNullToDisabled(format.getQuoteChar());	0
org.apache.commons.csv.Lexer:63-this.commmentStart = mapNullToDisabled(format.getCommentStart());	0
org.apache.commons.csv.Lexer:64-this.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();	0
org.apache.commons.csv.Lexer:65-this.ignoreEmptyLines = format.getIgnoreEmptyLines();	0
org.apache.commons.csv.Lexer:66-}	0
org.apache.commons.csv.Lexer:69-return c == null ? DISABLED : c.charValue();	0
org.apache.commons.csv.Lexer:133-if (c == CR && in.lookAhead() == LF) {	0
org.apache.commons.csv.Lexer:137-return c == LF || c == CR;	0
org.apache.commons.csv.Lexer:163-return c == END_OF_STREAM;	0
org.apache.commons.csv.Lexer:167-return c == delimiter;	0
org.apache.commons.csv.Lexer:106-return c;	0
org.apache.commons.csv.Lexer:73-return in.getLineNumber();	0
org.apache.commons.csv.Lexer:92-return CR;	0
org.apache.commons.csv.Lexer:94-return LF;	0
org.apache.commons.csv.Lexer:96-return TAB;	0
org.apache.commons.csv.Lexer:98-return BACKSPACE;	0
org.apache.commons.csv.Lexer:100-return FF;	0
org.apache.commons.csv.Lexer:108-throw new IOException("EOF whilst processing escape sequence");	0
org.apache.commons.csv.Lexer:117-int length = buffer.length();	0
org.apache.commons.csv.Lexer:118-while (length > 0 && Character.isWhitespace(buffer.charAt(length - 1))) {	0
org.apache.commons.csv.Lexer:119-length = length - 1;	0
org.apache.commons.csv.Lexer:121-if (length != buffer.length()) {	0
org.apache.commons.csv.Lexer:122-buffer.setLength(length);	0
org.apache.commons.csv.Lexer:124-}	0
org.apache.commons.csv.Lexer:135-c = in.read();	0
org.apache.commons.csv.Lexer:146-return c != format.getDelimiter() && Character.isWhitespace((char) c);	0
org.apache.commons.csv.CSVParser:288-return new LinkedHashMap<String, Integer>(this.headerMap);	1
org.apache.commons.csv.CSVParser:172-return new CSVParser(new StringReader(string), format);	0
org.apache.commons.csv.CSVParser:170-Assertions.notNull(format, "format");	0
org.apache.commons.csv.CSVParser:169-Assertions.notNull(string, "string");	0
org.apache.commons.csv.CSVParser:241-format.validate();	0
org.apache.commons.csv.CSVParser:242-this.format = format;	0
org.apache.commons.csv.CSVParser:243-this.lexer = new Lexer(format, new ExtendedBufferedReader(reader));	0
org.apache.commons.csv.CSVParser:244-this.headerMap = this.initializeHeader();	0
org.apache.commons.csv.CSVParser:245-}	0
org.apache.commons.csv.CSVParser:325-Map<String, Integer> hdrMap = null;	0
org.apache.commons.csv.CSVParser:326-final String[] formatHeader = this.format.getHeader();	0
org.apache.commons.csv.CSVParser:327-if (formatHeader != null) {	0
org.apache.commons.csv.CSVParser:351-return hdrMap;	0
org.apache.commons.csv.CSVParser:239-Assertions.notNull(format, "format");	0
org.apache.commons.csv.CSVParser:237-public CSVParser(final Reader reader, final CSVFormat format) throws IOException {	0
org.apache.commons.csv.CSVParser:214-private final List<String> record = new ArrayList<String>();	0
org.apache.commons.csv.CSVParser:218-private final Token reusableToken = new Token();	0
org.apache.commons.csv.CSVParser:238-Assertions.notNull(reader, "reader");	0
org.apache.commons.csv.CSVParser:149-Assertions.notNull(file, "file");	0
org.apache.commons.csv.CSVParser:150-Assertions.notNull(format, "format");	0
org.apache.commons.csv.CSVParser:152-return new CSVParser(new FileReader(file), format);	0
org.apache.commons.csv.CSVParser:196-Assertions.notNull(url, "url");	0
org.apache.commons.csv.CSVParser:197-Assertions.notNull(charset, "charset");	0
org.apache.commons.csv.CSVParser:198-Assertions.notNull(format, "format");	0
org.apache.commons.csv.CSVParser:200-return new CSVParser(new InputStreamReader(url.openStream(),	0
org.apache.commons.csv.CSVParser:248-final String input = this.reusableToken.content.toString();	0
org.apache.commons.csv.CSVParser:249-final String nullString = this.format.getNullString();	0
org.apache.commons.csv.CSVParser:250-if (nullString == null) {	0
org.apache.commons.csv.CSVParser:251-this.record.add(input);	0
org.apache.commons.csv.CSVParser:253-this.record.add(input.equalsIgnoreCase(nullString) ? null : input);	0
org.apache.commons.csv.CSVParser:255-}	0
org.apache.commons.csv.CSVParser:264-if (this.lexer != null) {	0
org.apache.commons.csv.CSVParser:265-this.lexer.close();	0
org.apache.commons.csv.CSVParser:267-}	0
org.apache.commons.csv.CSVParser:277-return this.lexer.getCurrentLineNumber();	0
org.apache.commons.csv.CSVParser:299-return this.recordNumber;	0
org.apache.commons.csv.CSVParser:313-final List<CSVRecord> records = new ArrayList<CSVRecord>();	0
org.apache.commons.csv.CSVParser:315-while ((rec = this.nextRecord()) != null) {	0
org.apache.commons.csv.CSVParser:316-records.add(rec);	0
org.apache.commons.csv.CSVParser:318-return records;	0
org.apache.commons.csv.CSVParser:328-hdrMap = new LinkedHashMap<String, Integer>();	0
org.apache.commons.csv.CSVParser:330-String[] header = null;	0
org.apache.commons.csv.CSVParser:331-if (formatHeader.length == 0) {	0
org.apache.commons.csv.CSVParser:333-final CSVRecord record = this.nextRecord();	0
org.apache.commons.csv.CSVParser:334-if (record != null) {	0
org.apache.commons.csv.CSVParser:335-header = record.values();	0
org.apache.commons.csv.CSVParser:337-} else {	0
org.apache.commons.csv.CSVParser:338-if (this.format.getSkipHeaderRecord()) {	0
org.apache.commons.csv.CSVParser:339-this.nextRecord();	0
org.apache.commons.csv.CSVParser:341-header = formatHeader;	0
org.apache.commons.csv.CSVPrinter:117-} else if (format.isEscaping()) {	0
org.apache.commons.csv.CSVPrinter:120-out.append(value, offset, offset + len);	0
org.apache.commons.csv.CSVPrinter:58-public CSVPrinter(final Appendable out, final CSVFormat format) {	0
org.apache.commons.csv.CSVPrinter:43-private boolean newRecord = true;	0
org.apache.commons.csv.CSVPrinter:59-Assertions.notNull(out, "out");	0
org.apache.commons.csv.CSVPrinter:60-Assertions.notNull(format, "format");	0
org.apache.commons.csv.CSVPrinter:62-this.out = out;	0
org.apache.commons.csv.CSVPrinter:63-this.format = format;	0
org.apache.commons.csv.CSVPrinter:64-this.format.validate();	0
org.apache.commons.csv.CSVPrinter:65-}	0
org.apache.commons.csv.CSVPrinter:100-if (value == null) {	0
org.apache.commons.csv.CSVPrinter:104-strValue = value.toString();	0
org.apache.commons.csv.CSVPrinter:106-this.print(value, strValue, 0, strValue.length());	0
org.apache.commons.csv.CSVPrinter:107-}	0
org.apache.commons.csv.CSVPrinter:111-if (!newRecord) {	0
org.apache.commons.csv.CSVPrinter:112-out.append(format.getDelimiter());	0
org.apache.commons.csv.CSVPrinter:114-if (format.isQuoting()) {	0
org.apache.commons.csv.CSVPrinter:122-newRecord = false;	0
org.apache.commons.csv.CSVPrinter:123-}	0
org.apache.commons.csv.CSVPrinter:324-final String recordSeparator = format.getRecordSeparator();	0
org.apache.commons.csv.CSVPrinter:325-out.append(recordSeparator);	1
org.apache.commons.csv.CSVPrinter:326-newRecord = true;	0
org.apache.commons.csv.CSVPrinter:327-}	0
org.apache.commons.csv.CSVPrinter:355-for (final Object value : values) {	0
org.apache.commons.csv.CSVPrinter:356-print(value);	0
org.apache.commons.csv.CSVPrinter:358-println();	0
org.apache.commons.csv.CSVPrinter:359-}	0
org.apache.commons.csv.CSVPrinter:72-if (out instanceof Closeable) {	0
org.apache.commons.csv.CSVPrinter:73-((Closeable) out).close();	0
org.apache.commons.csv.CSVPrinter:75-}	0
org.apache.commons.csv.CSVPrinter:84-if (out instanceof Flushable) {	0
org.apache.commons.csv.CSVPrinter:85-((Flushable) out).flush();	0
org.apache.commons.csv.CSVPrinter:87-}	0
org.apache.commons.csv.CSVPrinter:101-final String nullString = format.getNullString();	0
org.apache.commons.csv.CSVPrinter:102-strValue = nullString == null ? Constants.EMPTY : nullString;	0
org.apache.commons.csv.CSVPrinter:103-} else {	0
org.apache.commons.csv.CSVPrinter:116-printAndQuote(object, value, offset, len);	0
org.apache.commons.csv.CSVPrinter:118-printAndEscape(value, offset, len);	0
org.apache.commons.csv.CSVPrinter:129-int start = offset;	0
org.apache.commons.csv.CSVPrinter:130-int pos = offset;	0
org.apache.commons.csv.CSVPrinter:131-final int end = offset + len;	0
org.apache.commons.csv.CSVPrinter:133-final char delim = format.getDelimiter();	0
org.apache.commons.csv.CSVPrinter:134-final char escape = format.getEscape().charValue();	0
org.apache.commons.csv.CSVPrinter:136-while (pos < end) {	0
org.apache.commons.csv.CSVPrinter:137-char c = value.charAt(pos);	0
org.apache.commons.csv.CSVPrinter:138-if (c == CR || c == LF || c == delim || c == escape) {	0
org.apache.commons.csv.CSVPrinter:140-if (pos > start) {	0
org.apache.commons.csv.CSVPrinter:141-out.append(value, start, pos);	0
org.apache.commons.csv.CSVPrinter:143-if (c == LF) {	0
org.apache.commons.csv.CSVPrinter:144-c = 'n';	0
org.apache.commons.csv.CSVRecord:212-return putIn(new HashMap<String, String>(values.length));	0
org.apache.commons.csv.CSVRecord:180-for (final Entry<String, Integer> entry : mapping.entrySet()) {	0
org.apache.commons.csv.CSVRecord:181-final int col = entry.getValue().intValue();	0
org.apache.commons.csv.CSVRecord:182-map.put(entry.getKey(), values[col]);	1
org.apache.commons.csv.CSVRecord:183-}	0
org.apache.commons.csv.CSVRecord:52-final String comment, final long recordNumber) {	0
org.apache.commons.csv.CSVRecord:53-this.recordNumber = recordNumber;	0
org.apache.commons.csv.CSVRecord:54-this.values = values != null ? values : EMPTY_STRING_ARRAY;	0
org.apache.commons.csv.CSVRecord:55-this.mapping = mapping;	0
org.apache.commons.csv.CSVRecord:56-this.comment = comment;	0
org.apache.commons.csv.CSVRecord:57-}	0
org.apache.commons.csv.CSVRecord:35-private static final String[] EMPTY_STRING_ARRAY = new String[0];	0
org.apache.commons.csv.CSVRecord:67-return get(e.toString());	0
org.apache.commons.csv.CSVRecord:78-return values[i];	0
org.apache.commons.csv.CSVRecord:95-if (mapping == null) {	0
org.apache.commons.csv.CSVRecord:96-throw new IllegalStateException(	0
org.apache.commons.csv.CSVRecord:99-final Integer index = mapping.get(name);	0
org.apache.commons.csv.CSVRecord:100-if (index == null) {	0
org.apache.commons.csv.CSVRecord:101-throw new IllegalArgumentException(String.format("Mapping for %s not found, expected one of %s", name,	0
org.apache.commons.csv.CSVRecord:105-return values[index.intValue()];	0
org.apache.commons.csv.CSVRecord:106-} catch (final ArrayIndexOutOfBoundsException e) {	0
org.apache.commons.csv.CSVRecord:107-throw new IllegalArgumentException(String.format(	0
org.apache.commons.csv.CSVRecord:120-return comment;	0
org.apache.commons.csv.CSVRecord:129-return recordNumber;	0
org.apache.commons.csv.CSVRecord:139-return mapping == null ? true : mapping.size() == values.length;	0
org.apache.commons.csv.CSVRecord:150-return mapping != null ? mapping.containsKey(name) : false;	0
org.apache.commons.csv.CSVRecord:161-return isMapped(name) && mapping.get(name).intValue() < values.length;	0
org.apache.commons.csv.CSVRecord:170-return toList().iterator();	0
org.apache.commons.csv.CSVRecord:184-return map;	0
org.apache.commons.csv.CSVRecord:193-return values.length;	0
org.apache.commons.csv.CSVRecord:203-return Arrays.asList(values);	0
org.apache.commons.csv.CSVRecord:217-return Arrays.toString(values);	0
org.apache.commons.csv.CSVRecord:221-return values;	0
org.apache.commons.csv.CSVParser:357-final CSVRecord nextRecord = this.nextRecord();	0
org.apache.commons.csv.CSVParser:358-if (nextRecord != null) {	0
org.apache.commons.csv.CSVParser:359-header = nextRecord.values();	0
org.apache.commons.csv.CSVParser:361-} else {	0
org.apache.commons.csv.CSVParser:352-hdrMap = new LinkedHashMap<String, Integer>();	0
org.apache.commons.csv.CSVParser:354-String[] header = null;	0
org.apache.commons.csv.CSVParser:355-if (formatHeader.length == 0) {	0
org.apache.commons.csv.CSVParser:369-if (header != null) {	0
org.apache.commons.csv.CSVParser:370-for (int i = 0; i < header.length; i++) {	0
org.apache.commons.csv.CSVParser:371-hdrMap.put(header[i], Integer.valueOf(i));	1
org.apache.commons.csv.CSVParser:171-return new CSVParser(new StringReader(string), format);	0
org.apache.commons.csv.CSVParser:169-Assertions.notNull(format, "format");	0
org.apache.commons.csv.CSVParser:168-Assertions.notNull(string, "string");	0
org.apache.commons.csv.CSVParser:454-this.addRecordValue();	0
org.apache.commons.csv.CSVParser:455-break;	0
org.apache.commons.csv.CSVParser:457-this.addRecordValue();	0
org.apache.commons.csv.CSVParser:458-break;	0
org.apache.commons.csv.CSVParser:246-final String input = this.reusableToken.content.toString();	0
org.apache.commons.csv.CSVParser:247-final String nullString = this.format.getNullString();	0
org.apache.commons.csv.CSVParser:248-if (nullString == null) {	0
org.apache.commons.csv.CSVParser:249-this.record.add(input);	0
org.apache.commons.csv.CSVParser:253-}	0
org.apache.commons.csv.CSVParser:481-this.recordNumber++;	0
org.apache.commons.csv.CSVParser:482-final String comment = sb == null ? null : sb.toString();	0
org.apache.commons.csv.CSVParser:483-result = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,	0
org.apache.commons.csv.CSVParser:446-CSVRecord result = null;	0
org.apache.commons.csv.CSVParser:447-this.record.clear();	0
org.apache.commons.csv.CSVParser:448-StringBuilder sb = null;	0
org.apache.commons.csv.CSVParser:450-this.reusableToken.reset();	0
org.apache.commons.csv.CSVParser:451-this.lexer.nextToken(this.reusableToken);	0
org.apache.commons.csv.CSVParser:452-switch (this.reusableToken.type) {	0
org.apache.commons.csv.CSVParser:478-} while (this.reusableToken.type == TOKEN);	0
org.apache.commons.csv.CSVParser:480-if (!this.record.isEmpty()) {	0
org.apache.commons.csv.CSVParser:486-return result;	0
org.apache.commons.csv.CSVParser:239-format.validate();	0
org.apache.commons.csv.CSVParser:240-this.format = format;	0
org.apache.commons.csv.CSVParser:241-this.lexer = new Lexer(format, new ExtendedBufferedReader(reader));	0
org.apache.commons.csv.CSVParser:242-this.headerMap = this.initializeHeader();	0
org.apache.commons.csv.CSVParser:243-}	0
org.apache.commons.csv.CSVParser:349-Map<String, Integer> hdrMap = null;	0
org.apache.commons.csv.CSVParser:350-final String[] formatHeader = this.format.getHeader();	0
org.apache.commons.csv.CSVParser:351-if (formatHeader != null) {	0
org.apache.commons.csv.CSVParser:375-return hdrMap;	0
org.apache.commons.csv.CSVParser:237-Assertions.notNull(format, "format");	0
org.apache.commons.csv.CSVParser:235-public CSVParser(final Reader reader, final CSVFormat format) throws IOException {	0
org.apache.commons.csv.CSVParser:212-private final List<String> record = new ArrayList<String>();	0
org.apache.commons.csv.CSVParser:216-private final Token reusableToken = new Token();	0
org.apache.commons.csv.CSVParser:236-Assertions.notNull(reader, "reader");	0
org.apache.commons.csv.CSVParser:148-Assertions.notNull(file, "file");	0
org.apache.commons.csv.CSVParser:149-Assertions.notNull(format, "format");	0
org.apache.commons.csv.CSVFormat:669-throw new IllegalStateException("The header contains duplicate names: " + Arrays.toString(header));	0
org.apache.commons.csv.CSVFormat:666-final Set<String> set = new HashSet<String>(header.length);	0
org.apache.commons.csv.CSVFormat:667-set.addAll(Arrays.asList(header));	0
org.apache.commons.csv.CSVFormat:668-if (set.size() != header.length) {	0
org.apache.commons.csv.CSVFormat:665-if (header != null) {	1
org.apache.commons.csv.CSVFormat:661-if (escape == null && quotePolicy == Quote.NONE) {	0
org.apache.commons.csv.CSVFormat:316-this.header = header.clone();	1
org.apache.commons.csv.CSVFormat:773-return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,	0
org.apache.commons.csv.CSVFormat:656-if (escape != null && escape.equals(commentStart)) {	0
org.apache.commons.csv.CSVFormat:651-if (quoteChar != null && quoteChar.equals(commentStart)) {	0
org.apache.commons.csv.CSVFormat:646-if (commentStart != null && delimiter == commentStart.charValue()) {	0
org.apache.commons.csv.CSVFormat:641-if (escape != null && delimiter == escape.charValue()) {	0
org.apache.commons.csv.CSVFormat:636-if (quoteChar != null && delimiter == quoteChar.charValue()) {	0
org.apache.commons.csv.CSVFormat:300-final String nullString, final String[] header, final boolean skipHeaderRecord) {	0
org.apache.commons.csv.CSVFormat:301-if (isLineBreak(delimiter)) {	0
org.apache.commons.csv.CSVFormat:304-this.delimiter = delimiter;	0
org.apache.commons.csv.CSVFormat:305-this.quoteChar = quoteChar;	0
org.apache.commons.csv.CSVFormat:306-this.quotePolicy = quotePolicy;	0
org.apache.commons.csv.CSVFormat:307-this.commentStart = commentStart;	0
org.apache.commons.csv.CSVFormat:308-this.escape = escape;	0
org.apache.commons.csv.CSVFormat:309-this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;	0
org.apache.commons.csv.CSVFormat:310-this.ignoreEmptyLines = ignoreEmptyLines;	0
org.apache.commons.csv.CSVFormat:311-this.recordSeparator = recordSeparator;	0
org.apache.commons.csv.CSVFormat:312-this.nullString = nullString;	0
org.apache.commons.csv.CSVFormat:313-if (header == null) {	0
org.apache.commons.csv.CSVFormat:314-this.header = null;	0
org.apache.commons.csv.CSVFormat:318-this.skipHeaderRecord = skipHeaderRecord;	0
org.apache.commons.csv.CSVFormat:319-}	0
org.apache.commons.csv.CSVFormat:174-public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,	0
org.apache.commons.csv.CSVFormat:186-public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);	0
org.apache.commons.csv.CSVFormat:210-public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);	0
org.apache.commons.csv.CSVFormat:213-public static final CSVFormat TDF =	0
org.apache.commons.csv.CSVFormat:226-public static final CSVFormat MYSQL =	0
org.apache.commons.csv.CSVFormat:243-return c == LF || c == CR;	0
org.apache.commons.csv.CSVFormat:255-return c != null && isLineBreak(c.charValue());	0
org.apache.commons.csv.CSVFormat:718-if (isLineBreak(delimiter)) {	0
org.apache.commons.csv.CSVFormat:721-return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,	0
org.apache.commons.csv.CSVFormat:735-return withEscape(Character.valueOf(escape));	0
org.apache.commons.csv.CSVFormat:748-if (isLineBreak(escape)) {	0
org.apache.commons.csv.CSVFormat:751-return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,	0
org.apache.commons.csv.CSVFormat:786-return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,	0
org.apache.commons.csv.CSVFormat:799-return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,	0
org.apache.commons.csv.CSVFormat:846-if (isLineBreak(quoteChar)) {	0
org.apache.commons.csv.CSVFormat:849-return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,	0
org.apache.commons.csv.CSVFormat:875-return withRecordSeparator(String.valueOf(recordSeparator));	0
org.apache.commons.csv.CSVFormat:887-return new CSVFormat(delimiter, quoteChar, quotePolicy, commentStart, escape,	0
org.apache.commons.csv.CSVFormat:302-throw new IllegalArgumentException("The delimiter cannot be a line break");	0
org.apache.commons.csv.CSVFormat:267-return new CSVFormat(delimiter, null, null, null, null, false, false, null, null, null, false);	0
org.apache.commons.csv.CSVFormat:323-if (this == obj) {	0
org.apache.commons.csv.CSVFormat:324-return true;	0
org.apache.commons.csv.CSVRecord:214-return putIn(new HashMap<String, String>(values.length));	0
org.apache.commons.csv.CSVRecord:180-for (final Entry<String, Integer> entry : mapping.entrySet()) {	1
org.apache.commons.csv.CSVRecord:52-final String comment, final long recordNumber) {	0
org.apache.commons.csv.CSVRecord:53-this.recordNumber = recordNumber;	0
org.apache.commons.csv.CSVRecord:54-this.values = values != null ? values : EMPTY_STRING_ARRAY;	0
org.apache.commons.csv.CSVRecord:55-this.mapping = mapping;	0
org.apache.commons.csv.CSVRecord:56-this.comment = comment;	0
org.apache.commons.csv.CSVRecord:57-}	0
org.apache.commons.csv.CSVRecord:35-private static final String[] EMPTY_STRING_ARRAY = new String[0];	0
org.apache.commons.csv.CSVRecord:67-return get(e.toString());	0
org.apache.commons.csv.CSVRecord:78-return values[i];	0
org.apache.commons.csv.CSVRecord:95-if (mapping == null) {	0
org.apache.commons.csv.CSVRecord:96-throw new IllegalStateException(	0
org.apache.commons.csv.CSVRecord:99-final Integer index = mapping.get(name);	0
org.apache.commons.csv.CSVRecord:100-if (index == null) {	0
org.apache.commons.csv.CSVRecord:101-throw new IllegalArgumentException(String.format("Mapping for %s not found, expected one of %s", name,	0
org.apache.commons.csv.CSVRecord:105-return values[index.intValue()];	0
org.apache.commons.csv.CSVRecord:106-} catch (final ArrayIndexOutOfBoundsException e) {	0
org.apache.commons.csv.CSVRecord:107-throw new IllegalArgumentException(String.format(	0
org.apache.commons.csv.CSVRecord:120-return comment;	0
org.apache.commons.csv.CSVRecord:129-return recordNumber;	0
org.apache.commons.csv.CSVRecord:139-return mapping == null || mapping.size() == values.length;	0
org.apache.commons.csv.CSVRecord:150-return mapping != null && mapping.containsKey(name);	0
org.apache.commons.csv.CSVRecord:161-return isMapped(name) && mapping.get(name).intValue() < values.length;	0
org.apache.commons.csv.CSVRecord:170-return toList().iterator();	0
org.apache.commons.csv.CSVRecord:181-final int col = entry.getValue().intValue();	0
org.apache.commons.csv.CSVRecord:182-if (col < values.length) {	0
org.apache.commons.csv.CSVRecord:183-map.put(entry.getKey(), values[col]);	0
org.apache.commons.csv.CSVRecord:185-}	0
org.apache.commons.csv.CSVRecord:186-return map;	0
org.apache.commons.csv.CSVRecord:195-return values.length;	0
org.apache.commons.csv.CSVRecord:205-return Arrays.asList(values);	0
org.apache.commons.csv.CSVRecord:219-return Arrays.toString(values);	0
org.apache.commons.csv.CSVRecord:223-return values;	0
org.apache.commons.csv.CSVPrinter:125-out.append(value, offset, offset + len);	0
org.apache.commons.csv.CSVPrinter:122-} else if (format.isEscaping()) {	0
org.apache.commons.csv.CSVPrinter:367-for (final Object value : values) {	0
org.apache.commons.csv.CSVPrinter:368-print(value);	0
org.apache.commons.csv.CSVPrinter:370-println();	0
org.apache.commons.csv.CSVPrinter:371-}	0
org.apache.commons.csv.CSVPrinter:334-final String recordSeparator = format.getRecordSeparator();	0
org.apache.commons.csv.CSVPrinter:335-if (recordSeparator != null) {	0
org.apache.commons.csv.CSVPrinter:336-out.append(recordSeparator);	0
org.apache.commons.csv.CSVPrinter:338-newRecord = true;	0
org.apache.commons.csv.CSVPrinter:339-}	0
org.apache.commons.csv.CSVPrinter:117-out.append(format.getDelimiter());	0
org.apache.commons.csv.CSVPrinter:105-if (value == null) {	0
org.apache.commons.csv.CSVPrinter:109-strValue = value.toString();	0
org.apache.commons.csv.CSVPrinter:111-this.print(value, strValue, 0, strValue.length());	0
org.apache.commons.csv.CSVPrinter:112-}	0
org.apache.commons.csv.CSVPrinter:116-if (!newRecord) {	0
org.apache.commons.csv.CSVPrinter:119-if (format.isQuoting()) {	0
org.apache.commons.csv.CSVPrinter:127-newRecord = false;	0
org.apache.commons.csv.CSVPrinter:128-}	0
org.apache.commons.csv.CSVPrinter:65-this.out = out;	0
org.apache.commons.csv.CSVPrinter:66-this.format = format;	0
org.apache.commons.csv.CSVPrinter:67-this.format.validate();	0
org.apache.commons.csv.CSVPrinter:70-}	1
org.apache.commons.csv.CSVPrinter:63-Assertions.notNull(format, "format");	0
org.apache.commons.csv.CSVPrinter:61-public CSVPrinter(final Appendable out, final CSVFormat format) throws IOException {	0
org.apache.commons.csv.CSVPrinter:43-private boolean newRecord = true;	0
org.apache.commons.csv.CSVPrinter:62-Assertions.notNull(out, "out");	0
org.apache.commons.csv.CSVPrinter:77-if (out instanceof Closeable) {	0
org.apache.commons.csv.CSVPrinter:78-((Closeable) out).close();	0
org.apache.commons.csv.CSVPrinter:80-}	0
org.apache.commons.csv.CSVPrinter:89-if (out instanceof Flushable) {	0
org.apache.commons.csv.CSVPrinter:90-((Flushable) out).flush();	0
org.apache.commons.csv.CSVPrinter:92-}	0
org.apache.commons.csv.CSVPrinter:106-final String nullString = format.getNullString();	0
org.apache.commons.csv.CSVPrinter:107-strValue = nullString == null ? Constants.EMPTY : nullString;	0
org.apache.commons.csv.CSVPrinter:108-} else {	0
org.apache.commons.csv.CSVPrinter:121-printAndQuote(object, value, offset, len);	0
org.apache.commons.csv.CSVPrinter:123-printAndEscape(value, offset, len);	0
org.apache.commons.csv.CSVPrinter:134-int start = offset;	0
org.apache.commons.csv.CSVPrinter:135-int pos = offset;	0
org.apache.commons.csv.CSVPrinter:136-final int end = offset + len;	0
org.apache.commons.csv.CSVPrinter:138-final char delim = format.getDelimiter();	0
org.apache.commons.csv.CSVPrinter:139-final char escape = format.getEscape().charValue();	0
org.apache.commons.csv.CSVPrinter:141-while (pos < end) {	0
org.apache.commons.csv.CSVPrinter:142-char c = value.charAt(pos);	0
org.apache.commons.csv.CSVPrinter:143-if (c == CR || c == LF || c == delim || c == escape) {	0
org.apache.commons.csv.CSVPrinter:145-if (pos > start) {	0
org.apache.commons.csv.CSVPrinter:146-out.append(value, start, pos);	0
org.apache.commons.csv.CSVPrinter:148-if (c == LF) {	0
org.apache.commons.csv.CSVParser:259-this.record.add(input.equalsIgnoreCase(nullString) ? null : input);	0
org.apache.commons.csv.CSVParser:368-final CSVRecord nextRecord = this.nextRecord();	0
org.apache.commons.csv.CSVParser:369-if (nextRecord != null) {	0
org.apache.commons.csv.CSVParser:370-headerRecord = nextRecord.values();	0
org.apache.commons.csv.CSVParser:372-} else {	0
org.apache.commons.csv.CSVParser:363-hdrMap = new LinkedHashMap<String, Integer>();	0
org.apache.commons.csv.CSVParser:365-String[] headerRecord = null;	0
org.apache.commons.csv.CSVParser:366-if (formatHeader.length == 0) {	0
org.apache.commons.csv.CSVParser:380-if (headerRecord != null) {	0
org.apache.commons.csv.CSVParser:381-for (int i = 0; i < headerRecord.length; i++) {	0
org.apache.commons.csv.CSVParser:382-final String header = headerRecord[i];	0
org.apache.commons.csv.CSVParser:383-final boolean containsHeader = hdrMap.containsKey(header);	0
org.apache.commons.csv.CSVParser:384-final boolean emptyHeader = header.trim().isEmpty();	1
org.apache.commons.csv.CSVParser:385-if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {	0
org.apache.commons.csv.CSVParser:389-hdrMap.put(header, Integer.valueOf(i));	0
org.apache.commons.csv.CSVParser:472-this.addRecordValue();	0
org.apache.commons.csv.CSVParser:473-break;	0
org.apache.commons.csv.CSVParser:475-this.addRecordValue();	0
org.apache.commons.csv.CSVParser:476-break;	0
org.apache.commons.csv.CSVParser:254-final String input = this.reusableToken.content.toString();	0
org.apache.commons.csv.CSVParser:255-final String nullString = this.format.getNullString();	0
org.apache.commons.csv.CSVParser:256-if (nullString == null) {	0
org.apache.commons.csv.CSVParser:261-}	0
org.apache.commons.csv.CSVParser:499-this.recordNumber++;	0
org.apache.commons.csv.CSVParser:500-final String comment = sb == null ? null : sb.toString();	0
org.apache.commons.csv.CSVParser:501-result = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,	0
org.apache.commons.csv.CSVParser:464-CSVRecord result = null;	0
org.apache.commons.csv.CSVParser:465-this.record.clear();	0
org.apache.commons.csv.CSVParser:466-StringBuilder sb = null;	0
org.apache.commons.csv.CSVParser:468-this.reusableToken.reset();	0
org.apache.commons.csv.CSVParser:469-this.lexer.nextToken(this.reusableToken);	0
org.apache.commons.csv.CSVParser:470-switch (this.reusableToken.type) {	0
org.apache.commons.csv.CSVParser:496-} while (this.reusableToken.type == TOKEN);	0
org.apache.commons.csv.CSVParser:498-if (!this.record.isEmpty()) {	0
org.apache.commons.csv.CSVParser:504-return result;	0
org.apache.commons.csv.CSVParser:248-this.format = format;	0
org.apache.commons.csv.CSVParser:249-this.lexer = new Lexer(format, new ExtendedBufferedReader(reader));	0
org.apache.commons.csv.CSVParser:250-this.headerMap = this.initializeHeader();	0
org.apache.commons.csv.CSVParser:360-Map<String, Integer> hdrMap = null;	0
org.apache.commons.csv.CSVParser:361-final String[] formatHeader = this.format.getHeader();	0
org.apache.commons.csv.CSVParser:362-if (formatHeader != null) {	0
org.apache.commons.csv.CSVParser:246-Assertions.notNull(format, "format");	0
org.apache.commons.csv.CSVParser:244-public CSVParser(final Reader reader, final CSVFormat format) throws IOException {	0
org.apache.commons.csv.CSVParser:221-private final List<String> record = new ArrayList<String>();	0
org.apache.commons.csv.CSVParser:225-private final Token reusableToken = new Token();	0
org.apache.commons.csv.CSVParser:245-Assertions.notNull(reader, "reader");	0
org.apache.commons.csv.CSVParser:251-}	0
org.apache.commons.csv.CSVParser:157-Assertions.notNull(file, "file");	0
org.apache.commons.csv.CSVParser:158-Assertions.notNull(format, "format");	0
org.apache.commons.csv.CSVParser:160-return new CSVParser(new InputStreamReader(new FileInputStream(file), charset), format);	0
org.apache.commons.csv.CSVFormat:505-return allowMissingColumnNames;	0
org.apache.commons.csv.CSVFormat:362-final Set<String> dupCheck = new HashSet<String>();	0
org.apache.commons.csv.CSVFormat:363-for (final String hdr : header) {	0
org.apache.commons.csv.CSVFormat:369-this.header = header.clone();	0
org.apache.commons.csv.CSVFormat:849-return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,	0
org.apache.commons.csv.CSVFormat:542-return nullString;	0
org.apache.commons.csv.CSVFormat:468-return commentMarker;	0
org.apache.commons.csv.CSVFormat:477-return delimiter;	0
org.apache.commons.csv.CSVFormat:486-return escapeCharacter;	0
org.apache.commons.csv.CSVFormat:495-return header != null ? header.clone() : null;	0
org.apache.commons.csv.CSVFormat:515-return ignoreEmptyLines;	0
org.apache.commons.csv.CSVFormat:525-return ignoreSurroundingSpaces;	0
org.apache.commons.csv.CSVFormat:551-return quoteCharacter;	0
org.apache.commons.csv.CSVFormat:345-final boolean allowMissingColumnNames) {	0
org.apache.commons.csv.CSVFormat:346-if (isLineBreak(delimiter)) {	0
org.apache.commons.csv.CSVFormat:349-this.delimiter = delimiter;	0
org.apache.commons.csv.CSVFormat:350-this.quoteCharacter = quoteChar;	0
org.apache.commons.csv.CSVFormat:351-this.quoteMode = quoteMode;	0
org.apache.commons.csv.CSVFormat:352-this.commentMarker = commentStart;	0
org.apache.commons.csv.CSVFormat:353-this.escapeCharacter = escape;	0
org.apache.commons.csv.CSVFormat:354-this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;	0
org.apache.commons.csv.CSVFormat:355-this.allowMissingColumnNames = allowMissingColumnNames;	0
org.apache.commons.csv.CSVFormat:356-this.ignoreEmptyLines = ignoreEmptyLines;	0
org.apache.commons.csv.CSVFormat:357-this.recordSeparator = recordSeparator;	0
org.apache.commons.csv.CSVFormat:358-this.nullString = nullString;	0
org.apache.commons.csv.CSVFormat:359-if (header == null) {	0
org.apache.commons.csv.CSVFormat:360-this.header = null;	0
org.apache.commons.csv.CSVFormat:371-this.skipHeaderRecord = skipHeaderRecord;	0
org.apache.commons.csv.CSVFormat:372-validate();	0
org.apache.commons.csv.CSVFormat:373-}	0
org.apache.commons.csv.CSVFormat:175-public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null,	0
org.apache.commons.csv.CSVFormat:191-public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);	0
org.apache.commons.csv.CSVFormat:219-public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false);	1
org.apache.commons.csv.CSVFormat:234-public static final CSVFormat TDF =	0
org.apache.commons.csv.CSVFormat:260-public static final CSVFormat MYSQL =	0
org.apache.commons.csv.CSVFormat:277-return c == LF || c == CR;	0
org.apache.commons.csv.CSVFormat:289-return c != null && isLineBreak(c.charValue());	0
org.apache.commons.csv.CSVFormat:717-if (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {	0
org.apache.commons.csv.CSVFormat:722-if (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {	0
org.apache.commons.csv.CSVFormat:727-if (commentMarker != null && delimiter == commentMarker.charValue()) {	0
org.apache.commons.csv.CSVFormat:732-if (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {	0
org.apache.commons.csv.CSVFormat:737-if (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {	0
org.apache.commons.csv.CSVFormat:742-if (escapeCharacter == null && quoteMode == QuoteMode.NONE) {	0
org.apache.commons.csv.CSVFormat:745-}	0
org.apache.commons.csv.CSVFormat:792-if (isLineBreak(delimiter)) {	0
org.apache.commons.csv.CSVFormat:795-return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,	0
org.apache.commons.csv.CSVFormat:810-return withEscape(Character.valueOf(escape));	0
org.apache.commons.csv.CSVFormat:823-if (isLineBreak(escape)) {	0
org.apache.commons.csv.CSVFormat:826-return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape,	0
org.apache.commons.csv.CSVFormat:877-return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,	0
org.apache.commons.csv.CSVPrinter:100-if (out instanceof Flushable) {	0
org.apache.commons.csv.CSVPrinter:101-((Flushable) out).flush();	0
org.apache.commons.csv.CSVPrinter:103-}	0
org.apache.commons.csv.CSVFormat:632-return nullString;	0
org.apache.commons.csv.CSVFormat:598-return ignoreEmptyLines;	0
org.apache.commons.csv.CSVFormat:607-return ignoreSurroundingSpaces;	0
org.apache.commons.csv.CSVFormat:542-return commentMarker;	0
org.apache.commons.csv.CSVFormat:560-return escapeCharacter;	0
org.apache.commons.csv.CSVFormat:419-final boolean allowMissingColumnNames, final boolean ignoreHeaderCase) {	0
org.apache.commons.csv.CSVFormat:420-this.delimiter = delimiter;	0
org.apache.commons.csv.CSVFormat:421-this.quoteCharacter = quoteChar;	0
org.apache.commons.csv.CSVFormat:422-this.quoteMode = quoteMode;	0
org.apache.commons.csv.CSVFormat:423-this.commentMarker = commentStart;	0
org.apache.commons.csv.CSVFormat:424-this.escapeCharacter = escape;	0
org.apache.commons.csv.CSVFormat:425-this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;	0
org.apache.commons.csv.CSVFormat:426-this.allowMissingColumnNames = allowMissingColumnNames;	0
org.apache.commons.csv.CSVFormat:427-this.ignoreEmptyLines = ignoreEmptyLines;	0
org.apache.commons.csv.CSVFormat:428-this.recordSeparator = recordSeparator;	0
org.apache.commons.csv.CSVFormat:429-this.nullString = nullString;	0
org.apache.commons.csv.CSVFormat:430-this.headerComments = toStringArray(headerComments);	0
org.apache.commons.csv.CSVFormat:431-this.header = header == null ? null : header.clone();	0
org.apache.commons.csv.CSVFormat:432-this.skipHeaderRecord = skipHeaderRecord;	0
org.apache.commons.csv.CSVFormat:433-this.ignoreHeaderCase = ignoreHeaderCase;	0
org.apache.commons.csv.CSVFormat:434-validate();	0
org.apache.commons.csv.CSVFormat:435-}	0
org.apache.commons.csv.CSVFormat:229-public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true,	0
org.apache.commons.csv.CSVFormat:246-public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);	0
org.apache.commons.csv.CSVFormat:276-public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false).withAllowMissingColumnNames();	0
org.apache.commons.csv.CSVFormat:292-public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();	0
org.apache.commons.csv.CSVFormat:318-public static final CSVFormat MYSQL = DEFAULT.withDelimiter(TAB).withEscape(BACKSLASH).withIgnoreEmptyLines(false)	0
org.apache.commons.csv.CSVFormat:330-return c == LF || c == CR;	0
org.apache.commons.csv.CSVFormat:342-return c != null && isLineBreak(c.charValue());	0
org.apache.commons.csv.CSVFormat:438-if (values == null) {	0
org.apache.commons.csv.CSVFormat:439-return null;	0
org.apache.commons.csv.CSVFormat:659-return recordSeparator;	0
org.apache.commons.csv.CSVFormat:814-if (isLineBreak(delimiter)) {	0
org.apache.commons.csv.CSVFormat:818-if (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {	0
org.apache.commons.csv.CSVFormat:823-if (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {	0
org.apache.commons.csv.CSVFormat:828-if (commentMarker != null && delimiter == commentMarker.charValue()) {	0
org.apache.commons.csv.CSVFormat:833-if (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {	0
org.apache.commons.csv.CSVFormat:838-if (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {	0
org.apache.commons.csv.CSVFormat:843-if (escapeCharacter == null && quoteMode == QuoteMode.NONE) {	0
org.apache.commons.csv.CSVFormat:848-if (header != null) {	0
org.apache.commons.csv.CSVFormat:857-}	0
org.apache.commons.csv.CSVFormat:904-if (isLineBreak(delimiter)) {	0
org.apache.commons.csv.CSVFormat:907-return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,	0
org.apache.commons.csv.CSVFormat:922-return withEscape(Character.valueOf(escape));	0
org.apache.commons.csv.CSVFormat:935-if (isLineBreak(escape)) {	0
org.apache.commons.csv.CSVFormat:938-return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,	0
org.apache.commons.csv.CSVFormat:1068-return this.withAllowMissingColumnNames(true);	0
org.apache.commons.csv.CSVFormat:890-return new CSVPrinter(new OutputStreamWriter(new FileOutputStream(out), charset), this);	0
org.apache.commons.csv.CSVFormat:1040-quote = true;	0
org.apache.commons.csv.CSVFormat:519-final boolean trailingDelimiter) {	0
org.apache.commons.csv.CSVFormat:520-this.delimiter = delimiter;	0
org.apache.commons.csv.CSVFormat:521-this.quoteCharacter = quoteChar;	0
org.apache.commons.csv.CSVFormat:522-this.quoteMode = quoteMode;	0
org.apache.commons.csv.CSVFormat:523-this.commentMarker = commentStart;	0
org.apache.commons.csv.CSVFormat:524-this.escapeCharacter = escape;	0
org.apache.commons.csv.CSVFormat:525-this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;	0
org.apache.commons.csv.CSVFormat:526-this.allowMissingColumnNames = allowMissingColumnNames;	0
org.apache.commons.csv.CSVFormat:527-this.ignoreEmptyLines = ignoreEmptyLines;	0
org.apache.commons.csv.CSVFormat:528-this.recordSeparator = recordSeparator;	0
org.apache.commons.csv.CSVFormat:529-this.nullString = nullString;	0
org.apache.commons.csv.CSVFormat:530-this.headerComments = toStringArray(headerComments);	0
org.apache.commons.csv.CSVFormat:531-this.header = header == null ? null : header.clone();	0
org.apache.commons.csv.CSVFormat:532-this.skipHeaderRecord = skipHeaderRecord;	0
org.apache.commons.csv.CSVFormat:533-this.ignoreHeaderCase = ignoreHeaderCase;	0
org.apache.commons.csv.CSVFormat:534-this.trailingDelimiter = trailingDelimiter;	0
org.apache.commons.csv.CSVFormat:535-this.trim = trim;	0
org.apache.commons.csv.CSVFormat:536-validate();	0
org.apache.commons.csv.CSVFormat:537-}	0
org.apache.commons.csv.CSVFormat:233-public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF,	0
org.apache.commons.csv.CSVFormat:265-public static final CSVFormat EXCEL = DEFAULT.withIgnoreEmptyLines(false).withAllowMissingColumnNames();	0
org.apache.commons.csv.CSVFormat:291-public static final CSVFormat INFORMIX_UNLOAD = DEFAULT.withDelimiter(PIPE).withEscape(BACKSLASH)	0
org.apache.commons.csv.CSVFormat:317-public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT.withDelimiter(COMMA).withQuote(DOUBLE_QUOTE_CHAR)	0
org.apache.commons.csv.CSVFormat:344-public static final CSVFormat MYSQL = DEFAULT.withDelimiter(TAB).withEscape(BACKSLASH).withIgnoreEmptyLines(false)	0
org.apache.commons.csv.CSVFormat:362-public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);	0
org.apache.commons.csv.CSVFormat:381-public static final CSVFormat TDF = DEFAULT.withDelimiter(TAB).withIgnoreSurroundingSpaces();	0
org.apache.commons.csv.CSVFormat:392-return c == LF || c == CR;	0
org.apache.commons.csv.CSVFormat:404-return c != null && isLineBreak(c.charValue());	0
org.apache.commons.csv.CSVFormat:748-return recordSeparator;	0
org.apache.commons.csv.CSVFormat:1196-if (values == null) {	0
org.apache.commons.csv.CSVFormat:1197-return null;	0
org.apache.commons.csv.CSVFormat:1230-if (isLineBreak(delimiter)) {	0
org.apache.commons.csv.CSVFormat:1234-if (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {	0
org.apache.commons.csv.CSVFormat:1239-if (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {	0
org.apache.commons.csv.CSVFormat:1244-if (commentMarker != null && delimiter == commentMarker.charValue()) {	0
org.apache.commons.csv.CSVFormat:1249-if (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {	0
org.apache.commons.csv.CSVFormat:1254-if (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {	0
org.apache.commons.csv.CSVFormat:1259-if (escapeCharacter == null && quoteMode == QuoteMode.NONE) {	0
org.apache.commons.csv.CSVFormat:1264-if (header != null) {	0
org.apache.commons.csv.CSVFormat:1273-}	0
org.apache.commons.csv.CSVFormat:1283-return this.withAllowMissingColumnNames(true);	0
org.apache.commons.csv.CSVFormat:1295-return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,	0
org.apache.commons.csv.CSVFormat:1345-if (isLineBreak(delimiter)) {	0
org.apache.commons.csv.CSVFormat:1348-return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,	0
org.apache.commons.csv.CSVFormat:1363-return withEscape(Character.valueOf(escape));	0
org.apache.commons.csv.CSVFormat:1376-if (isLineBreak(escape)) {	0
org.apache.commons.csv.CSVFormat:1379-return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,	0
org.apache.commons.csv.CSVFormat:1580-return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,	0
org.apache.commons.csv.CSVFormat:633-final boolean trailingDelimiter, final boolean autoFlush) {	0
org.apache.commons.csv.CSVFormat:634-this.delimiter = delimiter;	0
org.apache.commons.csv.CSVFormat:635-this.quoteCharacter = quoteChar;	0
org.apache.commons.csv.CSVFormat:636-this.quoteMode = quoteMode;	0
org.apache.commons.csv.CSVFormat:637-this.commentMarker = commentStart;	0
org.apache.commons.csv.CSVFormat:638-this.escapeCharacter = escape;	0
org.apache.commons.csv.CSVFormat:639-this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;	0
org.apache.commons.csv.CSVFormat:640-this.allowMissingColumnNames = allowMissingColumnNames;	0
org.apache.commons.csv.CSVFormat:641-this.ignoreEmptyLines = ignoreEmptyLines;	0
org.apache.commons.csv.CSVFormat:642-this.recordSeparator = recordSeparator;	0
org.apache.commons.csv.CSVFormat:643-this.nullString = nullString;	0
org.apache.commons.csv.CSVFormat:644-this.headerComments = toStringArray(headerComments);	0
org.apache.commons.csv.CSVFormat:645-this.header = header == null ? null : header.clone();	0
org.apache.commons.csv.CSVFormat:646-this.skipHeaderRecord = skipHeaderRecord;	0
org.apache.commons.csv.CSVFormat:647-this.ignoreHeaderCase = ignoreHeaderCase;	0
org.apache.commons.csv.CSVFormat:648-this.trailingDelimiter = trailingDelimiter;	0
org.apache.commons.csv.CSVFormat:649-this.trim = trim;	0
org.apache.commons.csv.CSVFormat:650-this.autoFlush = autoFlush;	0
org.apache.commons.csv.CSVFormat:651-validate();	0
org.apache.commons.csv.CSVFormat:652-}	0
org.apache.commons.csv.CSVFormat:244-public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF,	0
org.apache.commons.csv.CSVFormat:277-public static final CSVFormat EXCEL = DEFAULT	0
org.apache.commons.csv.CSVFormat:307-public static final CSVFormat INFORMIX_UNLOAD = DEFAULT	0
org.apache.commons.csv.CSVFormat:338-public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT	0
org.apache.commons.csv.CSVFormat:370-public static final CSVFormat MYSQL = DEFAULT	0
org.apache.commons.csv.CSVFormat:407-public static final CSVFormat POSTGRESQL_CSV = DEFAULT	0
org.apache.commons.csv.CSVFormat:444-public static final CSVFormat POSTGRESQL_TEXT = DEFAULT	0
org.apache.commons.csv.CSVFormat:469-public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);	0
org.apache.commons.csv.CSVFormat:489-public static final CSVFormat TDF = DEFAULT	0
org.apache.commons.csv.CSVFormat:503-return c == LF || c == CR;	0
org.apache.commons.csv.CSVFormat:515-return c != null && isLineBreak(c.charValue());	0
org.apache.commons.csv.CSVFormat:863-return recordSeparator;	0
org.apache.commons.csv.CSVFormat:1346-if (values == null) {	0
org.apache.commons.csv.CSVFormat:1347-return null;	0
org.apache.commons.csv.CSVFormat:1380-if (isLineBreak(delimiter)) {	0
org.apache.commons.csv.CSVFormat:1384-if (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {	0
org.apache.commons.csv.CSVFormat:1389-if (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {	0
org.apache.commons.csv.CSVFormat:1394-if (commentMarker != null && delimiter == commentMarker.charValue()) {	0
org.apache.commons.csv.CSVFormat:1399-if (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {	0
org.apache.commons.csv.CSVFormat:1404-if (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {	0
org.apache.commons.csv.CSVFormat:1409-if (escapeCharacter == null && quoteMode == QuoteMode.NONE) {	0
org.apache.commons.csv.CSVFormat:1414-if (header != null) {	0
org.apache.commons.csv.CSVFormat:1423-}	0
org.apache.commons.csv.CSVFormat:1433-return this.withAllowMissingColumnNames(true);	0
org.apache.commons.csv.CSVFormat:1445-return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,	0
org.apache.commons.csv.CSVFormat:1495-if (isLineBreak(delimiter)) {	0
org.apache.commons.csv.CSVFormat:1498-return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,	0
org.apache.commons.csv.CSVFormat:1513-return withEscape(Character.valueOf(escape));	0
org.apache.commons.csv.CSVFormat:1526-if (isLineBreak(escape)) {	0
org.apache.commons.csv.CSVFormat:1529-return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,	0
com.google.gson.TypeInfoFactory:52-Class<?> classDefiningF = TypeUtils.toRawClass(typeDefiningF);	0
com.google.gson.TypeInfoFactory:53-Type type = f.getGenericType();	0
com.google.gson.TypeInfoFactory:54-Type actualType = getActualType(type, typeDefiningF, classDefiningF);	0
com.google.gson.TypeInfoFactory:60-if (typeToEvaluate instanceof Class<?>) {	0
com.google.gson.TypeInfoFactory:62-} else if (typeToEvaluate instanceof ParameterizedType) {	0
com.google.gson.TypeInfoFactory:69-} else if (typeToEvaluate instanceof GenericArrayType) {	0
com.google.gson.TypeInfoFactory:79-} else if (typeToEvaluate instanceof TypeVariable<?>) {	0
com.google.gson.TypeInfoFactory:80-if (parentType instanceof ParameterizedType) {	0
com.google.gson.TypeInfoFactory:97-throw new UnsupportedOperationException("Expecting parameterized type, got " + parentType	0
com.google.gson.TypeInfoFactory:34-private TypeInfoFactory() {	0
com.google.gson.TypeInfoFactory:36-}	0
com.google.gson.TypeInfoFactory:39-Preconditions.checkArgument(TypeUtils.isArray(type));	0
com.google.gson.TypeInfoFactory:40-return new TypeInfoArray(type);	0
com.google.gson.TypeInfoFactory:55-return new TypeInfo(actualType);	0
com.google.gson.TypeInfoFactory:61-return typeToEvaluate;	0
com.google.gson.TypeInfoFactory:63-ParameterizedType castedType = (ParameterizedType) typeToEvaluate;	0
com.google.gson.TypeInfoFactory:64-Type owner = castedType.getOwnerType();	0
com.google.gson.TypeInfoFactory:65-Type[] actualTypeParameters =	0
com.google.gson.TypeInfoFactory:67-Type rawType = castedType.getRawType();	0
com.google.gson.TypeInfoFactory:68-return new ParameterizedTypeImpl(rawType, actualTypeParameters, owner);	0
com.google.gson.TypeInfoFactory:70-GenericArrayType castedType = (GenericArrayType) typeToEvaluate;	0
com.google.gson.TypeInfoFactory:71-Type componentType = castedType.getGenericComponentType();	0
com.google.gson.TypeInfoFactory:72-Type actualType = getActualType(componentType, parentType, rawParentClass);	0
com.google.gson.TypeInfoFactory:73-if (componentType.equals(actualType)) {	0
com.google.gson.TypeInfoFactory:74-return castedType;	0
com.google.gson.TypeInfoFactory:76-return actualType instanceof Class<?> ?	0
com.google.gson.TypeInfoFactory:87-TypeVariable<?> fieldTypeVariable = (TypeVariable<?>) typeToEvaluate;	0
com.google.gson.TypeInfoFactory:88-TypeVariable<?>[] classTypeVariables = rawParentClass.getTypeParameters();	0
com.google.gson.TypeInfoFactory:89-ParameterizedType objParameterizedType = (ParameterizedType) parentType;	0
com.google.gson.TypeInfoFactory:90-int indexOfActualTypeArgument = getIndex(classTypeVariables, fieldTypeVariable);	0
com.google.gson.TypeInfoFactory:91-Type[] actualTypeArguments = objParameterizedType.getActualTypeArguments();	0
com.google.gson.TypeInfoFactory:92-return actualTypeArguments[indexOfActualTypeArgument];	0
com.google.gson.TypeInfoFactory:100-} else if (typeToEvaluate instanceof WildcardType) {	0
com.google.gson.TypeInfoFactory:101-WildcardType castedType = (WildcardType) typeToEvaluate;	0
com.google.gson.TypeInfoFactory:102-return getActualType(castedType.getUpperBounds()[0], parentType, rawParentClass);	0
com.google.gson.TypeInfoFactory:104-throw new IllegalArgumentException("Type \'" + typeToEvaluate + "\' is not a Class, "	0
com.google.gson.TypeInfoFactory:116-Preconditions.checkNotNull(actualTypeArguments);	0
com.google.gson.TypeInfoFactory:118-Type[] retTypes = new Type[actualTypeArguments.length];	0
com.google.gson.TypeInfoFactory:119-for (int i = 0; i < actualTypeArguments.length; ++i) {	0
com.google.gson.TypeInfoFactory:120-retTypes[i] = getActualType(actualTypeArguments[i], parentType, rawParentClass);	0
com.google.gson.TypeInfoFactory:122-return retTypes;	0
com.google.gson.TypeInfoFactory:126-for (int i = 0; i < types.length; ++i) {	0
com.google.gson.TypeInfoFactory:127-if (type.equals(types[i])) {	0
com.google.gson.TypeInfoFactory:128-return i;	0
com.google.gson.TypeInfoFactory:131-throw new IllegalStateException(	0
com.google.gson.internal.bind.TypeAdapters:62-public static final TypeAdapter<Class> CLASS = new TypeAdapter<Class>() {	0
com.google.gson.internal.bind.TypeAdapters:83-public static final TypeAdapterFactory CLASS_FACTORY = newFactory(Class.class, CLASS);	0
com.google.gson.internal.bind.TypeAdapters:85-public static final TypeAdapter<BitSet> BIT_SET = new TypeAdapter<BitSet>() {	0
com.google.gson.internal.bind.TypeAdapters:142-public static final TypeAdapterFactory BIT_SET_FACTORY = newFactory(BitSet.class, BIT_SET);	0
com.google.gson.internal.bind.TypeAdapters:144-public static final TypeAdapter<Boolean> BOOLEAN = new TypeAdapter<Boolean>() {	0
com.google.gson.internal.bind.TypeAdapters:170-public static final TypeAdapter<Boolean> BOOLEAN_AS_STRING = new TypeAdapter<Boolean>() {	0
com.google.gson.internal.bind.TypeAdapters:184-public static final TypeAdapterFactory BOOLEAN_FACTORY	0
com.google.gson.internal.bind.TypeAdapters:187-public static final TypeAdapter<Number> BYTE = new TypeAdapter<Number>() {	0
com.google.gson.internal.bind.TypeAdapters:207-public static final TypeAdapterFactory BYTE_FACTORY	0
com.google.gson.internal.bind.TypeAdapters:210-public static final TypeAdapter<Number> SHORT = new TypeAdapter<Number>() {	0
com.google.gson.internal.bind.TypeAdapters:229-public static final TypeAdapterFactory SHORT_FACTORY	0
com.google.gson.internal.bind.TypeAdapters:232-public static final TypeAdapter<Number> INTEGER = new TypeAdapter<Number>() {	0
com.google.gson.internal.bind.TypeAdapters:251-public static final TypeAdapterFactory INTEGER_FACTORY	0
com.google.gson.internal.bind.TypeAdapters:254-public static final TypeAdapter<Number> LONG = new TypeAdapter<Number>() {	0
com.google.gson.internal.bind.TypeAdapters:273-public static final TypeAdapter<Number> FLOAT = new TypeAdapter<Number>() {	0
com.google.gson.internal.bind.TypeAdapters:288-public static final TypeAdapter<Number> DOUBLE = new TypeAdapter<Number>() {	0
com.google.gson.internal.bind.TypeAdapters:303-public static final TypeAdapter<Number> NUMBER = new TypeAdapter<Number>() {	0
com.google.gson.internal.bind.TypeAdapters:323-public static final TypeAdapterFactory NUMBER_FACTORY = newFactory(Number.class, NUMBER);	0
com.google.gson.internal.bind.TypeAdapters:325-public static final TypeAdapter<Character> CHARACTER = new TypeAdapter<Character>() {	0
com.google.gson.internal.bind.TypeAdapters:344-public static final TypeAdapterFactory CHARACTER_FACTORY	0
com.google.gson.internal.bind.TypeAdapters:347-public static final TypeAdapter<String> STRING = new TypeAdapter<String>() {	0
com.google.gson.internal.bind.TypeAdapters:367-public static final TypeAdapter<BigDecimal> BIG_DECIMAL = new TypeAdapter<BigDecimal>() {	0
com.google.gson.internal.bind.TypeAdapters:385-public static final TypeAdapter<BigInteger> BIG_INTEGER = new TypeAdapter<BigInteger>() {	0
com.google.gson.internal.bind.TypeAdapters:403-public static final TypeAdapterFactory STRING_FACTORY = newFactory(String.class, STRING);	0
com.google.gson.internal.bind.TypeAdapters:405-public static final TypeAdapter<StringBuilder> STRING_BUILDER = new TypeAdapter<StringBuilder>() {	0
com.google.gson.internal.bind.TypeAdapters:420-public static final TypeAdapterFactory STRING_BUILDER_FACTORY =	0
com.google.gson.internal.bind.TypeAdapters:423-public static final TypeAdapter<StringBuffer> STRING_BUFFER = new TypeAdapter<StringBuffer>() {	0
com.google.gson.internal.bind.TypeAdapters:438-public static final TypeAdapterFactory STRING_BUFFER_FACTORY =	0
com.google.gson.internal.bind.TypeAdapters:441-public static final TypeAdapter<URL> URL = new TypeAdapter<URL>() {	0
com.google.gson.internal.bind.TypeAdapters:457-public static final TypeAdapterFactory URL_FACTORY = newFactory(URL.class, URL);	0
com.google.gson.internal.bind.TypeAdapters:459-public static final TypeAdapter<URI> URI = new TypeAdapter<URI>() {	0
com.google.gson.internal.bind.TypeAdapters:479-public static final TypeAdapterFactory URI_FACTORY = newFactory(URI.class, URI);	0
com.google.gson.internal.bind.TypeAdapters:481-public static final TypeAdapter<InetAddress> INET_ADDRESS = new TypeAdapter<InetAddress>() {	0
com.google.gson.internal.bind.TypeAdapters:497-public static final TypeAdapterFactory INET_ADDRESS_FACTORY =	0
com.google.gson.internal.bind.TypeAdapters:500-public static final TypeAdapter<UUID> UUID = new TypeAdapter<UUID>() {	0
com.google.gson.internal.bind.TypeAdapters:515-public static final TypeAdapterFactory UUID_FACTORY = newFactory(UUID.class, UUID);	0
com.google.gson.internal.bind.TypeAdapters:517-public static final TypeAdapterFactory TIMESTAMP_FACTORY = new TypeAdapterFactory() {	0
com.google.gson.internal.bind.TypeAdapters:538-public static final TypeAdapter<Calendar> CALENDAR = new TypeAdapter<Calendar>() {	0
com.google.gson.internal.bind.TypeAdapters:603-public static final TypeAdapterFactory CALENDAR_FACTORY =	0
com.google.gson.internal.bind.TypeAdapters:606-public static final TypeAdapter<Locale> LOCALE = new TypeAdapter<Locale>() {	0
com.google.gson.internal.bind.TypeAdapters:641-public static final TypeAdapterFactory LOCALE_FACTORY = newFactory(Locale.class, LOCALE);	0
com.google.gson.internal.bind.TypeAdapters:643-public static final TypeAdapter<JsonElement> JSON_ELEMENT = new TypeAdapter<JsonElement>() {	0
com.google.gson.internal.bind.TypeAdapters:715-public static final TypeAdapterFactory JSON_ELEMENT_FACTORY	0
com.google.gson.internal.bind.TypeAdapters:753-public static final TypeAdapterFactory ENUM_FACTORY = new TypeAdapterFactory() {	0
com.google.gson.internal.bind.TypeAdapters:779-return new TypeAdapterFactory() {	0
com.google.gson.internal.bind.TypeAdapters:792-return new TypeAdapterFactory() {	0
com.google.gson.internal.bind.TypeAdapters:807-return new TypeAdapterFactory() {	0
com.google.gson.internal.bind.TypeAdapters:826-return new TypeAdapterFactory() {	0
com.google.gson.internal.bind.TypeAdapters:57-private TypeAdapters() {	0
com.google.gson.internal.bind.TypeAdapters:58-throw new UnsupportedOperationException();	0
com.google.gson.internal.ConstructorConstructor:176-return new ObjectConstructor<T>() {	0
com.google.gson.internal.ConstructorConstructor:183-return new ObjectConstructor<T>() {	0
com.google.gson.internal.ConstructorConstructor:84-ObjectConstructor<T> defaultImplementation = newDefaultImplementationConstructor(type, rawType);	0
com.google.gson.internal.ConstructorConstructor:85-if (defaultImplementation != null) {	0
com.google.gson.internal.ConstructorConstructor:86-return defaultImplementation;	0
com.google.gson.internal.ConstructorConstructor:118-} catch (NoSuchMethodException e) {	0
com.google.gson.internal.ConstructorConstructor:119-return null;	0
com.google.gson.internal.ConstructorConstructor:130-if (Collection.class.isAssignableFrom(rawType)) {	0
com.google.gson.internal.ConstructorConstructor:174-if (Map.class.isAssignableFrom(rawType)) {	0
com.google.gson.internal.ConstructorConstructor:175-if (SortedMap.class.isAssignableFrom(rawType)) {	1
com.google.gson.internal.ConstructorConstructor:69-final InstanceCreator<T> rawTypeCreator =	0
com.google.gson.internal.ConstructorConstructor:71-if (rawTypeCreator != null) {	0
com.google.gson.internal.ConstructorConstructor:79-ObjectConstructor<T> defaultConstructor = newDefaultConstructor(rawType);	0
com.google.gson.internal.ConstructorConstructor:80-if (defaultConstructor != null) {	0
com.google.gson.internal.ConstructorConstructor:95-final Constructor<? super T> constructor = rawType.getDeclaredConstructor();	0
com.google.gson.internal.ConstructorConstructor:52-final Type type = typeToken.getType();	0
com.google.gson.internal.ConstructorConstructor:53-final Class<? super T> rawType = typeToken.getRawType();	0
com.google.gson.internal.ConstructorConstructor:58-final InstanceCreator<T> typeCreator = (InstanceCreator<T>) instanceCreators.get(type);	0
com.google.gson.internal.ConstructorConstructor:59-if (typeCreator != null) {	0
com.google.gson.internal.ConstructorConstructor:47-public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {	0
com.google.gson.internal.ConstructorConstructor:48-this.instanceCreators = instanceCreators;	0
com.google.gson.internal.ConstructorConstructor:49-}	0
com.google.gson.internal.ConstructorConstructor:181-} else if (type instanceof ParameterizedType && !(String.class.isAssignableFrom(	0
com.google.gson.internal.ConstructorConstructor:60-return new ObjectConstructor<T>() {	0
com.google.gson.internal.ConstructorConstructor:72-return new ObjectConstructor<T>() {	0
com.google.gson.internal.ConstructorConstructor:81-return defaultConstructor;	0
com.google.gson.internal.ConstructorConstructor:90-return newUnsafeAllocator(type, rawType);	0
com.google.gson.internal.ConstructorConstructor:96-if (!constructor.isAccessible()) {	0
com.google.gson.internal.ConstructorConstructor:97-constructor.setAccessible(true);	0
com.google.gson.internal.ConstructorConstructor:99-return new ObjectConstructor<T>() {	0
com.google.gson.internal.ConstructorConstructor:131-if (SortedSet.class.isAssignableFrom(rawType)) {	0
com.google.gson.internal.ConstructorConstructor:132-return new ObjectConstructor<T>() {	0
com.google.gson.internal.ConstructorConstructor:137-} else if (EnumSet.class.isAssignableFrom(rawType)) {	0
com.google.gson.internal.ConstructorConstructor:138-return new ObjectConstructor<T>() {	0
com.google.gson.internal.ConstructorConstructor:153-} else if (Set.class.isAssignableFrom(rawType)) {	0
com.google.gson.internal.ConstructorConstructor:154-return new ObjectConstructor<T>() {	0
com.google.gson.internal.ConstructorConstructor:159-} else if (Queue.class.isAssignableFrom(rawType)) {	0
com.google.gson.internal.ConstructorConstructor:160-return new ObjectConstructor<T>() {	0
com.google.gson.internal.ConstructorConstructor:166-return new ObjectConstructor<T>() {	0
com.google.gson.internal.ConstructorConstructor:189-return new ObjectConstructor<T>() {	0
com.google.gson.internal.ConstructorConstructor:197-return null;	0
com.google.gson.internal.ConstructorConstructor:202-return new ObjectConstructor<T>() {	0
com.google.gson.internal.ConstructorConstructor:218-return instanceCreators.toString();	0
com.google.gson.stream.JsonWriter:623-throw new IllegalStateException(	0
com.google.gson.stream.JsonReader:586-checkLenient();	0
com.google.gson.stream.JsonReader:1422-throw syntaxError("Use JsonReader.setLenient(true) to accept malformed JSON");	0
com.google.gson.stream.JsonWriter:465-writeDeferredName();	0
com.google.gson.stream.JsonWriter:466-beforeValue(false);	0
com.google.gson.stream.JsonReader:1572-throw new MalformedJsonException(message	0
com.google.gson.stream.JsonReader:1421-if (!lenient) {	0
com.google.gson.stream.JsonReader:1475-StringBuilder result = new StringBuilder().append('$');	0
com.google.gson.stream.JsonReader:1476-for (int i = 0, size = stackSize; i < size; i++) {	0
com.google.gson.stream.JsonReader:1477-switch (stack[i]) {	0
com.google.gson.stream.JsonReader:1498-return result.toString();	0
com.google.gson.stream.JsonReader:1317-return lineNumber + 1;	0
com.google.gson.stream.JsonReader:1321-return pos - lineStart + 1;	0
com.google.gson.stream.JsonReader:583-pos--; // Don't consume the first character in a literal value.	0
com.google.gson.stream.JsonReader:585-if (stackSize == 1) {	0
com.google.gson.stream.JsonReader:854-p = doPeek();	0
com.google.gson.stream.JsonReader:852-int p = peeked;	0
com.google.gson.stream.JsonReader:853-if (p == PEEKED_NONE) {	0
com.google.gson.stream.JsonReader:1396-} else if (c == '#') {	0
com.google.gson.stream.JsonReader:1408-pos = p;	0
com.google.gson.stream.JsonReader:1409-return c;	0
com.google.gson.stream.JsonReader:554-switch (c) {	0
com.google.gson.stream.JsonReader:1300-limit += total;	0
com.google.gson.stream.JsonReader:1303-if (lineNumber == 0 && lineStart == 0 && limit > 0 && buffer[0] == '\ufeff') {	0
com.google.gson.stream.JsonReader:1309-if (limit >= minimum) {	0
com.google.gson.stream.JsonReader:1310-return true;	0
com.google.gson.stream.JsonReader:1348-p = pos;	0
com.google.gson.stream.JsonReader:1349-l = limit;	0
com.google.gson.stream.JsonReader:1352-int c = buffer[p++];	0
com.google.gson.stream.JsonReader:1353-if (c == '\n') {	0
com.google.gson.stream.JsonReader:1357-} else if (c == ' ' || c == '\r' || c == '\t') {	0
com.google.gson.stream.JsonReader:1361-if (c == '/') {	0
com.google.gson.stream.JsonReader:293-this.in = in;	0
com.google.gson.stream.JsonReader:294-}	0
com.google.gson.stream.JsonReader:466-int peekStack = stack[stackSize - 1];	0
com.google.gson.stream.JsonReader:467-if (peekStack == JsonScope.EMPTY_ARRAY) {	0
com.google.gson.stream.JsonReader:469-} else if (peekStack == JsonScope.NONEMPTY_ARRAY) {	0
com.google.gson.stream.JsonReader:520-} else if (peekStack == JsonScope.DANGLING_NAME) {	0
com.google.gson.stream.JsonReader:537-if (lenient) {	0
com.google.gson.stream.JsonReader:540-stack[stackSize - 1] = JsonScope.NONEMPTY_DOCUMENT;	0
com.google.gson.stream.JsonReader:553-int c = nextNonWhitespace(true);	0
com.google.gson.stream.JsonReader:1288-char[] buffer = this.buffer;	0
com.google.gson.stream.JsonReader:1289-lineStart -= pos;	0
com.google.gson.stream.JsonReader:1290-if (limit != pos) {	0
com.google.gson.stream.JsonReader:1294-limit = 0;	0
com.google.gson.stream.JsonReader:1297-pos = 0;	0
com.google.gson.stream.JsonReader:1299-while ((total = in.read(buffer, limit, buffer.length - limit)) != -1) {	0
com.google.gson.stream.JsonReader:1339-char[] buffer = this.buffer;	0
com.google.gson.stream.JsonReader:1340-int p = pos;	0
com.google.gson.stream.JsonReader:1341-int l = limit;	0
com.google.gson.internal.bind.util.ISO8601Utils:178-offset += 1;	0
com.google.gson.internal.bind.util.ISO8601Utils:179-int endOffset = indexOfNonDigit(date, offset + 1); // assume at least one digit	0
com.google.gson.internal.bind.util.ISO8601Utils:180-int parseEndOffset = Math.min(endOffset, offset + 3); // parse up to 3 digits	0
com.google.gson.internal.bind.util.ISO8601Utils:181-int fraction = parseInt(date, offset, parseEndOffset);	0
com.google.gson.internal.bind.util.ISO8601Utils:183-switch (parseEndOffset - offset) { // number of digits parsed	0
com.google.gson.internal.bind.util.ISO8601Utils:191-milliseconds = fraction;	0
com.google.gson.internal.bind.util.ISO8601Utils:193-offset = endOffset;	0
com.google.gson.internal.bind.util.ISO8601Utils:210-} else if (timezoneIndicator == '+' || timezoneIndicator == '-') {	0
com.google.gson.internal.bind.util.ISO8601Utils:211-String timezoneOffset = date.substring(offset);	0
com.google.gson.internal.bind.util.ISO8601Utils:215-offset += timezoneOffset.length();	0
com.google.gson.internal.bind.util.ISO8601Utils:217-if ("+0000".equals(timezoneOffset) || "+00:00".equals(timezoneOffset)) {	0
com.google.gson.internal.bind.util.ISO8601Utils:218-timezone = TIMEZONE_UTC;	0
com.google.gson.internal.bind.util.ISO8601Utils:224-String timezoneId = "GMT" + timezoneOffset;	0
com.google.gson.internal.bind.util.ISO8601Utils:227-timezone = TimeZone.getTimeZone(timezoneId);	0
com.google.gson.internal.bind.util.ISO8601Utils:229-String act = timezone.getID();	0
com.google.gson.internal.bind.util.ISO8601Utils:230-if (!act.equals(timezoneId)) {	0
com.google.gson.internal.bind.util.ISO8601Utils:236-String cleaned = act.replace(":", "");	0
com.google.gson.internal.bind.util.ISO8601Utils:237-if (!cleaned.equals(timezoneId)) {	0
com.google.gson.internal.bind.util.ISO8601Utils:238-throw new IndexOutOfBoundsException("Mismatching time zone indicator: "+timezoneId+" given, resolves to "	0
com.google.gson.internal.bind.util.ISO8601Utils:243-} else {	0
com.google.gson.internal.bind.util.ISO8601Utils:261-} catch (IndexOutOfBoundsException e) {	0
com.google.gson.internal.bind.util.ISO8601Utils:262-fail = e;	0
com.google.gson.internal.bind.util.ISO8601Utils:267-}	0
com.google.gson.internal.bind.util.ISO8601Utils:268-String input = (date == null) ? null : ('"' + date + "'");	0
com.google.gson.internal.bind.util.ISO8601Utils:269-String msg = fail.getMessage();	0
com.google.gson.internal.bind.util.ISO8601Utils:270-if (msg == null || msg.isEmpty()) {	0
com.google.gson.internal.bind.util.ISO8601Utils:273-ParseException ex = new ParseException("Failed to parse date [" + input + "]: " + msg, pos.getIndex());	0
com.google.gson.internal.bind.util.ISO8601Utils:274-ex.initCause(fail);	0
com.google.gson.internal.bind.util.ISO8601Utils:275-throw ex;	0
com.google.gson.internal.bind.util.ISO8601Utils:344-for (int i = offset; i < string.length(); i++) {	0
com.google.gson.internal.bind.util.ISO8601Utils:345-char c = string.charAt(i);	0
com.google.gson.internal.bind.util.ISO8601Utils:346-if (c < '0' || c > '9') return i;	0
com.google.gson.internal.bind.util.ISO8601Utils:30-private static final TimeZone TIMEZONE_UTC = TimeZone.getTimeZone(UTC_ID);	0
com.google.gson.internal.bind.util.ISO8601Utils:124-Exception fail = null;	0
com.google.gson.internal.bind.util.ISO8601Utils:126-int offset = pos.getIndex();	0
com.google.gson.internal.bind.util.ISO8601Utils:129-int year = parseInt(date, offset, offset += 4);	0
com.google.gson.internal.bind.util.ISO8601Utils:130-if (checkOffset(date, offset, '-')) {	0
com.google.gson.internal.bind.util.ISO8601Utils:131-offset += 1;	0
com.google.gson.internal.bind.util.ISO8601Utils:135-int month = parseInt(date, offset, offset += 2);	0
com.google.gson.internal.bind.util.ISO8601Utils:136-if (checkOffset(date, offset, '-')) {	0
com.google.gson.internal.bind.util.ISO8601Utils:137-offset += 1;	0
com.google.gson.internal.bind.util.ISO8601Utils:141-int day = parseInt(date, offset, offset += 2);	0
com.google.gson.internal.bind.util.ISO8601Utils:143-int hour = 0;	0
com.google.gson.internal.bind.util.ISO8601Utils:144-int minutes = 0;	0
com.google.gson.internal.bind.util.ISO8601Utils:145-int seconds = 0;	0
com.google.gson.internal.bind.util.ISO8601Utils:146-int milliseconds = 0; // always use 0 otherwise returned date will include millis of current time	0
com.google.gson.internal.bind.util.ISO8601Utils:149-boolean hasT = checkOffset(date, offset, 'T');	0
com.google.gson.internal.bind.util.ISO8601Utils:151-if (!hasT && (date.length() <= offset)) {	0
com.google.gson.internal.bind.util.ISO8601Utils:158-if (hasT) {	0
com.google.gson.internal.bind.util.ISO8601Utils:161-hour = parseInt(date, offset += 1, offset += 2);	0
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:36-public JsonAdapterAnnotationTypeAdapterFactory(ConstructorConstructor constructorConstructor) {	0
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:37-this.constructorConstructor = constructorConstructor;	0
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:38-}	0
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:43-JsonAdapter annotation = targetType.getRawType().getAnnotation(JsonAdapter.class);	0
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:44-if (annotation == null) {	0
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:47-return (TypeAdapter<T>) getTypeAdapter(constructorConstructor, gson, targetType, annotation);	0
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:53-Class<?> value = annotation.value();	0
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:55-if (TypeAdapter.class.isAssignableFrom(value)) {	0
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:58-} else if (TypeAdapterFactory.class.isAssignableFrom(value)) {	0
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:59-Class<TypeAdapterFactory> typeAdapterFactory = (Class<TypeAdapterFactory>) value;	0
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:60-typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterFactory))	0
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:63-} else {	0
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:67-typeAdapter = typeAdapter.nullSafe();	1
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:45-return null;	0
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:56-Class<TypeAdapter<?>> typeAdapterClass = (Class<TypeAdapter<?>>) value;	0
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:57-typeAdapter = constructorConstructor.get(TypeToken.get(typeAdapterClass)).construct();	0
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:64-throw new IllegalArgumentException(	0
com.google.gson.internal.bind.JsonAdapterAnnotationTypeAdapterFactory:68-return typeAdapter;	0
com.google.gson.stream.JsonReader:1193-throw new IllegalStateException("Expected an int but was " + peek()	0
com.google.gson.stream.JsonReader:965-throw new IllegalStateException("Expected a long but was " + peek()	0
com.google.gson.stream.JsonReader:513-pos--; // Don't consume the first character in an unquoted string.	0
com.google.gson.stream.JsonReader:514-if (isLiteral((char) c)) {	0
com.google.gson.stream.JsonReader:515-return peeked = PEEKED_UNQUOTED_NAME;	0
com.google.gson.stream.JsonReader:954-} else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {	1
com.google.gson.stream.JsonReader:512-checkLenient();	0
com.google.gson.stream.JsonReader:1182-} else if (p == PEEKED_SINGLE_QUOTED || p == PEEKED_DOUBLE_QUOTED) {	1
com.google.gson.stream.JsonReader:1179-if (p == PEEKED_NUMBER) {	0
com.google.gson.stream.JsonReader:769-return true;	0
com.google.gson.stream.JsonReader:454-return JsonToken.STRING;	0
com.google.gson.stream.JsonReader:1480-result.append('.');	0
com.google.gson.stream.JsonReader:1481-if (pathNames[i] != null) {	0
com.google.gson.stream.JsonReader:1418-}	0
com.google.gson.stream.JsonReader:729-last = NUMBER_CHAR_EXP_DIGIT;	0
com.google.gson.stream.JsonReader:1162-int p = peeked;	0
com.google.gson.stream.JsonReader:1163-if (p == PEEKED_NONE) {	0
com.google.gson.stream.JsonReader:1168-if (p == PEEKED_LONG) {	0
com.google.gson.stream.JsonReader:951-if (p == PEEKED_NUMBER) {	0
com.google.gson.stream.JsonReader:333-return lenient;	0
com.google.gson.stream.JsonReader:416-int p = peeked;	0
com.google.gson.stream.JsonReader:417-if (p == PEEKED_NONE) {	0
com.google.gson.stream.JsonReader:418-p = doPeek();	0
com.google.gson.stream.JsonReader:420-return p != PEEKED_END_OBJECT && p != PEEKED_END_ARRAY;	0
com.google.gson.stream.JsonReader:434-return JsonToken.BEGIN_OBJECT;	0
com.google.gson.stream.JsonReader:695-if (last == NUMBER_CHAR_DIGIT || last == NUMBER_CHAR_FRACTION_DIGIT) {	0
com.google.gson.stream.JsonReader:696-last = NUMBER_CHAR_EXP_E;	0
com.google.gson.stream.JsonReader:697-continue;	0
com.google.gson.stream.JsonReader:728-} else if (last == NUMBER_CHAR_EXP_E || last == NUMBER_CHAR_EXP_SIGN) {	0
com.google.gson.stream.JsonReader:1469-StringBuilder result = new StringBuilder().append('$');	0
com.google.gson.stream.JsonReader:1470-for (int i = 0, size = stackSize; i < size; i++) {	0
com.google.gson.stream.JsonReader:1471-switch (stack[i]) {	0
com.google.gson.stream.JsonReader:1492-return result.toString();	0
com.google.gson.stream.JsonReader:1311-return lineNumber + 1;	0
com.google.gson.stream.JsonReader:1315-return pos - lineStart + 1;	0
com.google.gson.stream.JsonReader:1415-if (!lenient) {	0
com.google.gson.stream.JsonReader:1584-return; // not a security token!	0
com.google.gson.stream.JsonReader:432-switch (p) {	0
com.google.gson.stream.JsonReader:1582-for (int i = 0; i < NON_EXECUTE_PREFIX.length; i++) {	0
com.google.gson.stream.JsonReader:1583-if (buffer[pos + i] != NON_EXECUTE_PREFIX[i]) {	0
com.google.gson.stream.JsonReader:326-this.lenient = lenient;	0
com.google.gson.stream.JsonReader:327-}	0
com.google.gson.stream.JsonReader:538-consumeNonExecutePrefix();	0
com.google.gson.stream.JsonReader:1575-nextNonWhitespace(true);	0
com.google.gson.stream.JsonReader:1576-pos--;	0
com.google.gson.stream.JsonReader:1578-if (pos + NON_EXECUTE_PREFIX.length > limit && !fillBuffer(NON_EXECUTE_PREFIX.length)) {	0
com.google.gson.stream.JsonReader:702-if (last == NUMBER_CHAR_DIGIT) {	0
com.google.gson.stream.JsonReader:703-last = NUMBER_CHAR_DECIMAL;	0
com.google.gson.stream.JsonReader:704-continue;	0
com.google.gson.stream.JsonReader:727-last = NUMBER_CHAR_FRACTION_DIGIT;	0
com.google.gson.internal.UnsafeAllocator:30-public abstract class UnsafeAllocator {	0
com.google.gson.internal.UnsafeAllocator:39-Class<?> unsafeClass = Class.forName("sun.misc.Unsafe");	0
com.google.gson.internal.UnsafeAllocator:40-Field f = unsafeClass.getDeclaredField("theUnsafe");	0
com.google.gson.internal.UnsafeAllocator:41-f.setAccessible(true);	0
com.google.gson.internal.UnsafeAllocator:42-final Object unsafe = f.get(null);	0
com.google.gson.internal.UnsafeAllocator:43-final Method allocateInstance = unsafeClass.getMethod("allocateInstance", Class.class);	0
com.google.gson.internal.UnsafeAllocator:44-return new UnsafeAllocator() {	0
com.google.gson.internal.UnsafeAllocator:51-} catch (Exception ignored) {	0
com.google.gson.internal.UnsafeAllocator:60-Method getConstructorId = ObjectStreamClass.class	0
com.google.gson.internal.UnsafeAllocator:62-getConstructorId.setAccessible(true);	0
com.google.gson.internal.UnsafeAllocator:63-final int constructorId = (Integer) getConstructorId.invoke(null, Object.class);	0
com.google.gson.internal.UnsafeAllocator:64-final Method newInstance = ObjectStreamClass.class	0
com.google.gson.internal.UnsafeAllocator:66-newInstance.setAccessible(true);	0
com.google.gson.internal.UnsafeAllocator:67-return new UnsafeAllocator() {	0
com.google.gson.internal.UnsafeAllocator:74-} catch (Exception ignored) {	0
com.google.gson.internal.UnsafeAllocator:83-final Method newInstance = ObjectInputStream.class	0
com.google.gson.internal.UnsafeAllocator:85-newInstance.setAccessible(true);	0
com.google.gson.internal.UnsafeAllocator:86-return new UnsafeAllocator() {	0
com.google.gson.internal.UnsafeAllocator:93-} catch (Exception ignored) {	0
com.google.gson.internal.UnsafeAllocator:97-return new UnsafeAllocator() {	0
com.google.gson.stream.JsonWriter:467-out.write(value ? "true" : "false");	0
com.google.gson.stream.JsonWriter:468-return this;	0
com.google.gson.stream.JsonWriter:465-writeDeferredName();	0
com.google.gson.stream.JsonWriter:466-beforeValue();	0
com.google.gson.stream.JsonWriter:637-out.append(',');	0
com.google.gson.stream.JsonWriter:638-newline();	0
com.google.gson.stream.JsonWriter:639-break;	0
com.google.gson.stream.JsonWriter:632-replaceTop(NONEMPTY_ARRAY);	0
com.google.gson.stream.JsonWriter:633-newline();	0
com.google.gson.stream.JsonWriter:634-break;	0
com.google.gson.stream.JsonWriter:589-return;	0
com.google.gson.stream.JsonWriter:588-if (indent == null) {	0
com.google.gson.stream.JsonWriter:287-writeDeferredName();	0
com.google.gson.stream.JsonWriter:288-return open(EMPTY_ARRAY, "[");	0
com.google.gson.stream.JsonWriter:325-beforeValue();	0
com.google.gson.stream.JsonWriter:326-push(empty);	0
com.google.gson.stream.JsonWriter:327-out.write(openBracket);	0
com.google.gson.stream.JsonWriter:328-return this;	0
com.google.gson.stream.JsonWriter:376-stack[stackSize - 1] = topOfStack;	0
com.google.gson.stream.JsonWriter:377-}	0
com.google.gson.stream.JsonWriter:405-}	0
com.google.gson.stream.JsonWriter:620-switch (peek()) {	0
com.google.gson.stream.JsonWriter:628-replaceTop(NONEMPTY_DOCUMENT);	0
com.google.gson.stream.JsonWriter:629-break;	0
com.google.gson.stream.JsonWriter:649-}	0
com.google.gson.stream.JsonWriter:197-public JsonWriter(Writer out) {	0
com.google.gson.stream.JsonWriter:167-private int[] stack = new int[32];	0
com.google.gson.stream.JsonWriter:168-private int stackSize = 0;	0
com.google.gson.stream.JsonWriter:170-push(EMPTY_DOCUMENT);	0
com.google.gson.stream.JsonWriter:182-private String separator = ":";	0
com.google.gson.stream.JsonWriter:190-private boolean serializeNulls = true;	0
com.google.gson.stream.JsonWriter:198-if (out == null) {	0
com.google.gson.stream.JsonWriter:201-this.out = out;	0
com.google.gson.stream.JsonWriter:202-}	0
com.google.gson.stream.JsonWriter:145-REPLACEMENT_CHARS = new String[128];	0
com.google.gson.stream.JsonWriter:146-for (int i = 0; i <= 0x1f; i++) {	0
com.google.gson.stream.JsonWriter:147-REPLACEMENT_CHARS[i] = String.format("\\u%04x", (int) i);	0
com.google.gson.stream.JsonWriter:149-REPLACEMENT_CHARS['"'] = "\\\"";	0
com.google.gson.stream.JsonWriter:150-REPLACEMENT_CHARS['\\'] = "\\\\";	0
com.google.gson.stream.JsonWriter:151-REPLACEMENT_CHARS['\t'] = "\\t";	0
com.google.gson.stream.JsonWriter:152-REPLACEMENT_CHARS['\b'] = "\\b";	0
com.google.gson.stream.JsonWriter:153-REPLACEMENT_CHARS['\n'] = "\\n";	0
com.google.gson.stream.JsonWriter:154-REPLACEMENT_CHARS['\r'] = "\\r";	0
com.google.gson.stream.JsonWriter:155-REPLACEMENT_CHARS['\f'] = "\\f";	0
com.google.gson.stream.JsonWriter:156-HTML_SAFE_REPLACEMENT_CHARS = REPLACEMENT_CHARS.clone();	0
com.google.gson.stream.JsonWriter:157-HTML_SAFE_REPLACEMENT_CHARS['<'] = "\\u003c";	0
com.google.gson.stream.JsonWriter:158-HTML_SAFE_REPLACEMENT_CHARS['>'] = "\\u003e";	0
com.google.gson.stream.JsonWriter:159-HTML_SAFE_REPLACEMENT_CHARS['&'] = "\\u0026";	0
com.google.gson.stream.JsonWriter:160-HTML_SAFE_REPLACEMENT_CHARS['='] = "\\u003d";	0
com.google.gson.stream.JsonWriter:161-HTML_SAFE_REPLACEMENT_CHARS['\''] = "\\u0027";	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:111-mapped = getTypeAdapter(constructorConstructor, context, fieldType, annotation);	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:56-FieldNamingStrategy fieldNamingPolicy, Excluder excluder) {	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:57-this.constructorConstructor = constructorConstructor;	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:58-this.fieldNamingPolicy = fieldNamingPolicy;	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:59-this.excluder = excluder;	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:60-}	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:63-return excludeField(f, serialize, excluder);	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:67-return !excluder.excludeClass(f.getType(), serialize) && !excluder.excludeField(f, serialize);	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:72-SerializedName annotation = f.getAnnotation(SerializedName.class);	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:73-if (annotation == null) {	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:74-String name = fieldNamingPolicy.translateName(f);	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:75-return Collections.singletonList(name);	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:93-Class<? super T> raw = type.getRawType();	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:95-if (!Object.class.isAssignableFrom(raw)) {	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:99-ObjectConstructor<T> constructor = constructorConstructor.get(type);	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:100-return new Adapter<T>(constructor, getBoundFields(gson, type, raw));	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:106-final boolean isPrimitive = Primitives.isPrimitive(fieldType.getRawType());	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:108-JsonAdapter annotation = field.getAnnotation(JsonAdapter.class);	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:109-TypeAdapter<?> mapped = null;	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:110-if (annotation != null) {	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:113-final boolean jsonAdapterPresent = mapped != null;	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:114-if (mapped == null) mapped = context.getAdapter(fieldType);	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:116-final TypeAdapter<?> typeAdapter = mapped;	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:117-return new ReflectiveTypeAdapterFactory.BoundField(name, serialize, deserialize) {	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:142-Map<String, BoundField> result = new LinkedHashMap<String, BoundField>();	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:143-if (raw.isInterface()) {	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:147-Type declaredType = type.getType();	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:148-while (raw != Object.class) {	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:149-Field[] fields = raw.getDeclaredFields();	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:150-for (Field field : fields) {	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:151-boolean serialize = excludeField(field, true);	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:152-boolean deserialize = excludeField(field, false);	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:153-if (!serialize && !deserialize) {	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:156-field.setAccessible(true);	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:157-Type fieldType = $Gson$Types.resolve(type.getType(), raw, field.getGenericType());	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:158-List<String> fieldNames = getFieldNames(field);	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:159-BoundField previous = null;	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:160-for (int i = 0; i < fieldNames.size(); ++i) {	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:161-String name = fieldNames.get(i);	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:162-if (i != 0) serialize = false; // only serialize the default name	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:163-BoundField boundField = createBoundField(context, field, name,	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:165-BoundField replaced = result.put(name, boundField);	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:166-if (previous == null) previous = replaced;	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:168-if (previous != null) {	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:173-type = TypeToken.get($Gson$Types.resolve(type.getType(), raw, raw.getGenericSuperclass()));	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:174-raw = type.getRawType();	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:175-}	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:176-return result;	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:78-String serializedName = annotation.value();	0
com.google.gson.internal.bind.ReflectiveTypeAdapterFactory:79-String[] alternates = annotation.alternate();	0
com.google.gson.internal.bind.TypeAdapters:69-public static final TypeAdapter<Class> CLASS = new TypeAdapter<Class>() {	0
com.google.gson.internal.bind.TypeAdapters:90-public static final TypeAdapterFactory CLASS_FACTORY = newFactory(Class.class, CLASS);	0
com.google.gson.internal.bind.TypeAdapters:92-public static final TypeAdapter<BitSet> BIT_SET = new TypeAdapter<BitSet>() {	0
com.google.gson.internal.bind.TypeAdapters:149-public static final TypeAdapterFactory BIT_SET_FACTORY = newFactory(BitSet.class, BIT_SET);	0
com.google.gson.internal.bind.TypeAdapters:151-public static final TypeAdapter<Boolean> BOOLEAN = new TypeAdapter<Boolean>() {	0
com.google.gson.internal.bind.TypeAdapters:173-public static final TypeAdapter<Boolean> BOOLEAN_AS_STRING = new TypeAdapter<Boolean>() {	0
com.google.gson.internal.bind.TypeAdapters:187-public static final TypeAdapterFactory BOOLEAN_FACTORY	0
com.google.gson.internal.bind.TypeAdapters:190-public static final TypeAdapter<Number> BYTE = new TypeAdapter<Number>() {	0
com.google.gson.internal.bind.TypeAdapters:210-public static final TypeAdapterFactory BYTE_FACTORY	0
com.google.gson.internal.bind.TypeAdapters:213-public static final TypeAdapter<Number> SHORT = new TypeAdapter<Number>() {	0
com.google.gson.internal.bind.TypeAdapters:232-public static final TypeAdapterFactory SHORT_FACTORY	0
com.google.gson.internal.bind.TypeAdapters:235-public static final TypeAdapter<Number> INTEGER = new TypeAdapter<Number>() {	0
com.google.gson.internal.bind.TypeAdapters:253-public static final TypeAdapterFactory INTEGER_FACTORY	0
com.google.gson.internal.bind.TypeAdapters:256-public static final TypeAdapter<AtomicInteger> ATOMIC_INTEGER = new TypeAdapter<AtomicInteger>() {	0
com.google.gson.internal.bind.TypeAdapters:268-public static final TypeAdapterFactory ATOMIC_INTEGER_FACTORY =	0
com.google.gson.internal.bind.TypeAdapters:271-public static final TypeAdapter<AtomicBoolean> ATOMIC_BOOLEAN = new TypeAdapter<AtomicBoolean>() {	0
com.google.gson.internal.bind.TypeAdapters:279-public static final TypeAdapterFactory ATOMIC_BOOLEAN_FACTORY =	0
com.google.gson.internal.bind.TypeAdapters:282-public static final TypeAdapter<AtomicIntegerArray> ATOMIC_INTEGER_ARRAY = new TypeAdapter<AtomicIntegerArray>() {	0
com.google.gson.internal.bind.TypeAdapters:310-public static final TypeAdapterFactory ATOMIC_INTEGER_ARRAY_FACTORY =	0
com.google.gson.internal.bind.TypeAdapters:313-public static final TypeAdapter<Number> LONG = new TypeAdapter<Number>() {	0
com.google.gson.internal.bind.TypeAdapters:332-public static final TypeAdapter<Number> FLOAT = new TypeAdapter<Number>() {	0
com.google.gson.internal.bind.TypeAdapters:347-public static final TypeAdapter<Number> DOUBLE = new TypeAdapter<Number>() {	0
com.google.gson.internal.bind.TypeAdapters:362-public static final TypeAdapter<Number> NUMBER = new TypeAdapter<Number>() {	0
com.google.gson.internal.bind.TypeAdapters:382-public static final TypeAdapterFactory NUMBER_FACTORY = newFactory(Number.class, NUMBER);	0
com.google.gson.internal.bind.TypeAdapters:384-public static final TypeAdapter<Character> CHARACTER = new TypeAdapter<Character>() {	0
com.google.gson.internal.bind.TypeAdapters:403-public static final TypeAdapterFactory CHARACTER_FACTORY	0
com.google.gson.internal.bind.TypeAdapters:406-public static final TypeAdapter<String> STRING = new TypeAdapter<String>() {	0
com.google.gson.internal.bind.TypeAdapters:426-public static final TypeAdapter<BigDecimal> BIG_DECIMAL = new TypeAdapter<BigDecimal>() {	0
com.google.gson.internal.bind.TypeAdapters:444-public static final TypeAdapter<BigInteger> BIG_INTEGER = new TypeAdapter<BigInteger>() {	0
com.google.gson.internal.bind.TypeAdapters:462-public static final TypeAdapterFactory STRING_FACTORY = newFactory(String.class, STRING);	0
com.google.gson.internal.bind.TypeAdapters:464-public static final TypeAdapter<StringBuilder> STRING_BUILDER = new TypeAdapter<StringBuilder>() {	0
com.google.gson.internal.bind.TypeAdapters:479-public static final TypeAdapterFactory STRING_BUILDER_FACTORY =	0
com.google.gson.internal.bind.TypeAdapters:482-public static final TypeAdapter<StringBuffer> STRING_BUFFER = new TypeAdapter<StringBuffer>() {	0
com.google.gson.internal.bind.TypeAdapters:497-public static final TypeAdapterFactory STRING_BUFFER_FACTORY =	0
com.google.gson.internal.bind.TypeAdapters:500-public static final TypeAdapter<URL> URL = new TypeAdapter<URL>() {	0
com.google.gson.internal.bind.TypeAdapters:516-public static final TypeAdapterFactory URL_FACTORY = newFactory(URL.class, URL);	0
com.google.gson.internal.bind.TypeAdapters:518-public static final TypeAdapter<URI> URI = new TypeAdapter<URI>() {	0
com.google.gson.internal.bind.TypeAdapters:538-public static final TypeAdapterFactory URI_FACTORY = newFactory(URI.class, URI);	0
com.google.gson.internal.bind.TypeAdapters:540-public static final TypeAdapter<InetAddress> INET_ADDRESS = new TypeAdapter<InetAddress>() {	0
com.google.gson.internal.bind.TypeAdapters:556-public static final TypeAdapterFactory INET_ADDRESS_FACTORY =	0
com.google.gson.internal.bind.TypeAdapters:559-public static final TypeAdapter<UUID> UUID = new TypeAdapter<UUID>() {	0
com.google.gson.internal.bind.TypeAdapters:574-public static final TypeAdapterFactory UUID_FACTORY = newFactory(UUID.class, UUID);	0
com.google.gson.internal.bind.TypeAdapters:576-public static final TypeAdapter<Currency> CURRENCY = new TypeAdapter<Currency>() {	0
com.google.gson.internal.bind.TypeAdapters:586-public static final TypeAdapterFactory CURRENCY_FACTORY = newFactory(Currency.class, CURRENCY);	0
com.google.gson.internal.bind.TypeAdapters:588-public static final TypeAdapterFactory TIMESTAMP_FACTORY = new TypeAdapterFactory() {	0
com.google.gson.internal.bind.TypeAdapters:609-public static final TypeAdapter<Calendar> CALENDAR = new TypeAdapter<Calendar>() {	0
com.google.gson.internal.bind.TypeAdapters:674-public static final TypeAdapterFactory CALENDAR_FACTORY =	0
com.google.gson.internal.bind.TypeAdapters:677-public static final TypeAdapter<Locale> LOCALE = new TypeAdapter<Locale>() {	0
com.google.gson.internal.bind.TypeAdapters:712-public static final TypeAdapterFactory LOCALE_FACTORY = newFactory(Locale.class, LOCALE);	0
com.google.gson.internal.bind.TypeAdapters:714-public static final TypeAdapter<JsonElement> JSON_ELEMENT = new TypeAdapter<JsonElement>() {	0
com.google.gson.internal.bind.JsonTreeReader:66-super(UNREADABLE_READER);	0
com.google.gson.internal.bind.JsonTreeReader:51-private Object[] stack = new Object[32];	0
com.google.gson.internal.bind.JsonTreeReader:52-private int stackSize = 0;	0
com.google.gson.internal.bind.JsonTreeReader:62-private String[] pathNames = new String[32];	0
com.google.gson.internal.bind.JsonTreeReader:63-private int[] pathIndices = new int[32];	0
com.google.gson.internal.bind.JsonTreeReader:67-push(element);	0
com.google.gson.internal.bind.JsonTreeReader:68-}	0
com.google.gson.internal.bind.JsonTreeReader:38-private static final Reader UNREADABLE_READER = new Reader() {	0
com.google.gson.internal.bind.JsonTreeReader:46-private static final Object SENTINEL_CLOSED = new Object();	0
com.google.gson.internal.bind.JsonTreeReader:107-if (stackSize == 0) {	0
com.google.gson.internal.bind.JsonTreeReader:111-Object o = peekStack();	0
com.google.gson.internal.bind.JsonTreeReader:112-if (o instanceof Iterator) {	0
com.google.gson.internal.bind.JsonTreeReader:125-} else if (o instanceof JsonObject) {	0
com.google.gson.internal.bind.JsonTreeReader:126-return JsonToken.BEGIN_OBJECT;	0
com.google.gson.internal.bind.JsonTreeReader:150-return stack[stackSize - 1];	0
com.google.gson.internal.bind.JsonTreeReader:154-Object result = stack[--stackSize];	0
com.google.gson.internal.bind.JsonTreeReader:155-stack[stackSize] = null;	0
com.google.gson.internal.bind.JsonTreeReader:156-return result;	0
com.google.gson.internal.bind.JsonTreeReader:257-if (peek() == JsonToken.NAME) {	0
com.google.gson.internal.bind.JsonTreeReader:261-popStack();	0
com.google.gson.internal.bind.JsonTreeReader:262-pathNames[stackSize - 1] = "null";	1
com.google.gson.internal.bind.JsonTreeReader:280-if (stackSize == stack.length) {	0
com.google.gson.internal.bind.JsonTreeReader:291-stack[stackSize++] = newTop;	0
com.google.gson.internal.bind.JsonTreeReader:292-}	0
com.google.gson.internal.bind.JsonTreeReader:71-expect(JsonToken.BEGIN_ARRAY);	0
com.google.gson.internal.bind.JsonTreeReader:72-JsonArray array = (JsonArray) peekStack();	0
com.google.gson.internal.bind.JsonTreeReader:73-push(array.iterator());	0
com.google.gson.internal.bind.JsonTreeReader:74-pathIndices[stackSize - 1] = 0;	0
com.google.gson.internal.bind.JsonTreeReader:75-}	0
com.google.gson.internal.bind.JsonTreeReader:78-expect(JsonToken.END_ARRAY);	0
com.google.gson.internal.bind.JsonTreeReader:79-popStack(); // empty iterator	0
com.google.gson.internal.bind.JsonTreeReader:80-popStack(); // array	0
com.google.gson.internal.bind.JsonTreeReader:81-if (stackSize > 0) {	0
com.google.gson.internal.bind.JsonTreeReader:82-pathIndices[stackSize - 1]++;	0
com.google.gson.internal.bind.JsonTreeReader:84-}	0
com.google.gson.internal.bind.JsonTreeReader:87-expect(JsonToken.BEGIN_OBJECT);	0
com.google.gson.internal.bind.JsonTreeReader:88-JsonObject object = (JsonObject) peekStack();	0
com.google.gson.internal.bind.JsonTreeReader:89-push(object.entrySet().iterator());	0
com.google.gson.internal.bind.JsonTreeReader:90-}	0
com.google.gson.internal.bind.JsonTreeReader:93-expect(JsonToken.END_OBJECT);	0
com.google.gson.internal.bind.JsonTreeReader:94-popStack(); // empty iterator	0
com.google.gson.internal.bind.JsonTreeReader:95-popStack(); // object	0
com.google.gson.internal.bind.JsonTreeReader:96-if (stackSize > 0) {	0
com.google.gson.internal.bind.JsonTreeReader:97-pathIndices[stackSize - 1]++;	0
com.google.gson.internal.bind.JsonTreeReader:99-}	0
com.google.gson.internal.bind.JsonTreeReader:102-JsonToken token = peek();	0
com.google.gson.internal.bind.JsonTreeReader:103-return token != JsonToken.END_OBJECT && token != JsonToken.END_ARRAY;	0
com.google.gson.internal.bind.JsonTreeReader:108-return JsonToken.END_DOCUMENT;	0
com.google.gson.internal.bind.JsonTreeReader:113-boolean isObject = stack[stackSize - 2] instanceof JsonObject;	0
com.google.gson.internal.bind.JsonTreeReader:114-Iterator<?> iterator = (Iterator<?>) o;	0
com.google.gson.stream.JsonReader:820-result = Long.toString(peekedLong);	0
com.google.gson.stream.JsonReader:819-} else if (p == PEEKED_LONG) {	0
com.google.gson.stream.JsonReader:816-} else if (p == PEEKED_BUFFERED) {	0
com.google.gson.stream.JsonReader:453-return JsonToken.NUMBER;	0
com.google.gson.stream.JsonReader:672-if (last == NUMBER_CHAR_NONE) {	0
com.google.gson.stream.JsonReader:673-negative = true;	0
com.google.gson.stream.JsonReader:674-last = NUMBER_CHAR_SIGN;	0
com.google.gson.stream.JsonReader:675-continue;	0
com.google.gson.stream.JsonReader:732-peekedLong = negative ? value : -value;	0
com.google.gson.stream.JsonReader:733-pos += i;	0
com.google.gson.stream.JsonReader:734-return peeked = PEEKED_LONG;	0
com.google.gson.stream.JsonReader:586-return result;	0
com.google.gson.stream.JsonReader:711-if (last == NUMBER_CHAR_SIGN || last == NUMBER_CHAR_NONE) {	0
com.google.gson.stream.JsonReader:712-value = -(c - '0');	0
com.google.gson.stream.JsonReader:713-last = NUMBER_CHAR_DIGIT;	0
com.google.gson.stream.JsonReader:814-} else if (p == PEEKED_DOUBLE_QUOTED) {	0
com.google.gson.stream.JsonReader:655-for (; true; i++) {	0
com.google.gson.stream.JsonReader:812-} else if (p == PEEKED_SINGLE_QUOTED) {	0
com.google.gson.stream.JsonReader:827-peeked = PEEKED_NONE;	0
com.google.gson.stream.JsonReader:828-pathIndices[stackSize - 1]++;	0
com.google.gson.stream.JsonReader:829-return result;	0
com.google.gson.stream.JsonReader:707-break charactersOfNumber;	0
com.google.gson.stream.JsonReader:731-if (last == NUMBER_CHAR_DIGIT && fitsInLong && (value != Long.MIN_VALUE || negative)) {	1
com.google.gson.stream.JsonReader:810-if (p == PEEKED_UNQUOTED) {	0
com.google.gson.stream.JsonReader:805-int p = peeked;	0
com.google.gson.stream.JsonReader:806-if (p == PEEKED_NONE) {	0
com.google.gson.stream.JsonReader:428-switch (p) {	0
com.google.gson.stream.JsonReader:326-this.lenient = lenient;	0
com.google.gson.stream.JsonReader:327-}	0
com.google.gson.stream.JsonReader:616-return PEEKED_NONE;	0
com.google.gson.stream.JsonReader:706-if (!isLiteral(c)) {	0
com.google.gson.stream.JsonReader:763-return false;	0
com.google.gson.stream.JsonReader:584-result = peekNumber();	0
com.google.gson.stream.JsonReader:585-if (result != PEEKED_NONE) {	0
com.google.gson.stream.JsonReader:643-char[] buffer = this.buffer;	0
com.google.gson.stream.JsonReader:644-int p = pos;	0
com.google.gson.stream.JsonReader:645-int l = limit;	0
com.google.gson.stream.JsonReader:647-long value = 0; // Negative to accommodate Long.MIN_VALUE more easily.	0
com.google.gson.stream.JsonReader:648-boolean negative = false;	0
com.google.gson.stream.JsonReader:649-boolean fitsInLong = true;	0
com.google.gson.stream.JsonReader:650-int last = NUMBER_CHAR_NONE;	0
com.google.gson.stream.JsonReader:652-int i = 0;	0
com.google.gson.stream.JsonReader:656-if (p + i == l) {	0
com.google.gson.stream.JsonReader:669-char c = buffer[p + i];	0
com.google.gson.stream.JsonReader:670-switch (c) {	0
com.google.gson.stream.JsonReader:705-if (c < '0' || c > '9') {	0
com.google.gson.stream.JsonReader:611-} else if (c == 'n' || c == 'N') {	0
com.google.gson.stream.JsonReader:607-} else if (c == 'f' || c == 'F') {	0
com.google.gson.stream.JsonReader:425-p = doPeek();	0
com.google.gson.stream.JsonReader:423-int p = peeked;	0
com.google.gson.stream.JsonWriter:496-throw new IllegalArgumentException("Numeric values must be finite, but was " + value);	0
com.google.gson.stream.JsonWriter:235-this.lenient = lenient;	0
com.google.gson.stream.JsonWriter:236-}	0
com.google.gson.stream.JsonWriter:494-writeDeferredName();	0
com.google.gson.stream.JsonWriter:495-if (Double.isNaN(value) || Double.isInfinite(value)) {	1
com.google.gson.stream.JsonWriter:287-writeDeferredName();	0
com.google.gson.stream.JsonWriter:288-return open(EMPTY_ARRAY, "[");	0
com.google.gson.stream.JsonWriter:325-beforeValue();	0
com.google.gson.stream.JsonWriter:326-push(empty);	0
com.google.gson.stream.JsonWriter:327-out.write(openBracket);	0
com.google.gson.stream.JsonWriter:328-return this;	0
com.google.gson.stream.JsonWriter:376-stack[stackSize - 1] = topOfStack;	0
com.google.gson.stream.JsonWriter:377-}	0
com.google.gson.stream.JsonWriter:405-}	0
com.google.gson.stream.JsonWriter:629-switch (peek()) {	0
com.google.gson.stream.JsonWriter:637-replaceTop(NONEMPTY_DOCUMENT);	0
com.google.gson.stream.JsonWriter:638-break;	0
com.google.gson.stream.JsonWriter:658-}	0
com.google.gson.stream.JsonWriter:197-public JsonWriter(Writer out) {	0
com.google.gson.stream.JsonWriter:167-private int[] stack = new int[32];	0
com.google.gson.stream.JsonWriter:168-private int stackSize = 0;	0
com.google.gson.stream.JsonWriter:170-push(EMPTY_DOCUMENT);	0
com.google.gson.stream.JsonWriter:182-private String separator = ":";	0
com.google.gson.stream.JsonWriter:190-private boolean serializeNulls = true;	0
com.google.gson.stream.JsonWriter:198-if (out == null) {	0
com.google.gson.stream.JsonWriter:201-this.out = out;	0
com.google.gson.stream.JsonWriter:202-}	0
com.google.gson.stream.JsonWriter:145-REPLACEMENT_CHARS = new String[128];	0
com.google.gson.stream.JsonWriter:146-for (int i = 0; i <= 0x1f; i++) {	0
com.google.gson.stream.JsonWriter:147-REPLACEMENT_CHARS[i] = String.format("\\u%04x", (int) i);	0
com.google.gson.stream.JsonWriter:149-REPLACEMENT_CHARS['"'] = "\\\"";	0
com.google.gson.stream.JsonWriter:150-REPLACEMENT_CHARS['\\'] = "\\\\";	0
com.google.gson.stream.JsonWriter:151-REPLACEMENT_CHARS['\t'] = "\\t";	0
com.google.gson.stream.JsonWriter:152-REPLACEMENT_CHARS['\b'] = "\\b";	0
com.google.gson.stream.JsonWriter:153-REPLACEMENT_CHARS['\n'] = "\\n";	0
com.google.gson.stream.JsonWriter:154-REPLACEMENT_CHARS['\r'] = "\\r";	0
com.google.gson.stream.JsonWriter:155-REPLACEMENT_CHARS['\f'] = "\\f";	0
com.google.gson.stream.JsonWriter:156-HTML_SAFE_REPLACEMENT_CHARS = REPLACEMENT_CHARS.clone();	0
com.google.gson.stream.JsonWriter:157-HTML_SAFE_REPLACEMENT_CHARS['<'] = "\\u003c";	0
com.google.gson.stream.JsonWriter:158-HTML_SAFE_REPLACEMENT_CHARS['>'] = "\\u003e";	0
com.google.gson.stream.JsonWriter:159-HTML_SAFE_REPLACEMENT_CHARS['&'] = "\\u0026";	0
com.google.gson.stream.JsonWriter:160-HTML_SAFE_REPLACEMENT_CHARS['='] = "\\u003d";	0
com.google.gson.stream.JsonWriter:161-HTML_SAFE_REPLACEMENT_CHARS['\''] = "\\u0027";	0
com.google.gson.stream.JsonWriter:162-}	0
com.google.gson.stream.JsonWriter:354-if (stackSize == stack.length) {	0
com.google.gson.stream.JsonWriter:359-stack[stackSize++] = newTop;	0
com.google.gson.stream.JsonWriter:360-}	0
com.google.gson.stream.JsonWriter:366-if (stackSize == 0) {	0
com.google.gson.stream.JsonWriter:369-return stack[stackSize - 1];	0
com.google.gson.stream.JsonWriter:400-if (deferredName != null) {	0
com.google.gson.DefaultDateTypeAdapter:100-throw new JsonParseException("The date should be a string value");	0
com.google.gson.DefaultDateTypeAdapter:99-if (in.peek() != JsonToken.STRING) {	1
com.google.gson.DefaultDateTypeAdapter:49-this(dateType,	0
com.google.gson.DefaultDateTypeAdapter:52-}	0
com.google.gson.DefaultDateTypeAdapter:74-DefaultDateTypeAdapter(final Class<? extends Date> dateType, DateFormat enUsFormat, DateFormat localFormat) {	0
com.google.gson.DefaultDateTypeAdapter:75-if ( dateType != Date.class && dateType != java.sql.Date.class && dateType != Timestamp.class ) {	0
com.google.gson.DefaultDateTypeAdapter:78-this.dateType = dateType;	0
com.google.gson.DefaultDateTypeAdapter:79-this.enUsFormat = enUsFormat;	0
com.google.gson.DefaultDateTypeAdapter:80-this.localFormat = localFormat;	0
com.google.gson.DefaultDateTypeAdapter:81-}	0
com.google.gson.DefaultDateTypeAdapter:55-this(dateType, new SimpleDateFormat(datePattern, Locale.US), new SimpleDateFormat(datePattern));	0
com.google.gson.DefaultDateTypeAdapter:56-}	0
com.google.gson.DefaultDateTypeAdapter:59-this(dateType, DateFormat.getDateInstance(style, Locale.US), DateFormat.getDateInstance(style));	0
com.google.gson.DefaultDateTypeAdapter:60-}	0
com.google.gson.DefaultDateTypeAdapter:63-this(Date.class,	0
com.google.gson.DefaultDateTypeAdapter:66-}	0
com.google.gson.DefaultDateTypeAdapter:69-this(dateType,	0
com.google.gson.DefaultDateTypeAdapter:72-}	0
com.google.gson.DefaultDateTypeAdapter:76-throw new IllegalArgumentException("Date type must be one of " + Date.class + ", " + Timestamp.class + ", or " + java.sql.Date.class + " but was " + dateType);	0
com.google.gson.DefaultDateTypeAdapter:87-if (value == null) {	0
com.google.gson.DefaultDateTypeAdapter:88-out.nullValue();	0
com.google.gson.DefaultDateTypeAdapter:89-return;	0
com.google.gson.DefaultDateTypeAdapter:91-synchronized (localFormat) {	0
com.google.gson.DefaultDateTypeAdapter:92-String dateFormatAsString = enUsFormat.format(value);	0
com.google.gson.DefaultDateTypeAdapter:93-out.value(dateFormatAsString);	0
com.google.gson.DefaultDateTypeAdapter:94-}	0
com.google.gson.DefaultDateTypeAdapter:95-}	0
com.google.gson.DefaultDateTypeAdapter:102-Date date = deserializeToDate(in.nextString());	0
com.google.gson.DefaultDateTypeAdapter:103-if (dateType == Date.class) {	0
com.google.gson.DefaultDateTypeAdapter:104-return date;	0
com.google.gson.DefaultDateTypeAdapter:105-} else if (dateType == Timestamp.class) {	0
com.google.gson.DefaultDateTypeAdapter:106-return new Timestamp(date.getTime());	0
com.google.gson.DefaultDateTypeAdapter:107-} else if (dateType == java.sql.Date.class) {	0
com.google.gson.DefaultDateTypeAdapter:108-return new java.sql.Date(date.getTime());	0
com.google.gson.DefaultDateTypeAdapter:111-throw new AssertionError();	0
com.google.gson.DefaultDateTypeAdapter:116-synchronized (localFormat) {	0
com.google.gson.DefaultDateTypeAdapter:118-return localFormat.parse(s);	0
com.google.gson.DefaultDateTypeAdapter:119-} catch (ParseException ignored) {}	0
com.google.gson.DefaultDateTypeAdapter:121-return enUsFormat.parse(s);	0
com.google.gson.DefaultDateTypeAdapter:122-} catch (ParseException ignored) {}	0
com.google.gson.DefaultDateTypeAdapter:124-return ISO8601Utils.parse(s, new ParsePosition(0));	0
com.google.gson.DefaultDateTypeAdapter:125-} catch (ParseException e) {	0
com.google.gson.DefaultDateTypeAdapter:126-throw new JsonSyntaxException(s, e);	0
com.google.gson.DefaultDateTypeAdapter:128-}	0
com.google.gson.DefaultDateTypeAdapter:133-StringBuilder sb = new StringBuilder();	0
com.google.gson.DefaultDateTypeAdapter:134-sb.append(SIMPLE_NAME);	0
com.google.gson.DefaultDateTypeAdapter:135-sb.append('(').append(localFormat.getClass().getSimpleName()).append(')');	0
com.google.gson.DefaultDateTypeAdapter:136-return sb.toString();	0
com.fasterxml.jackson.core.io.NumberInput:295-return new BigDecimal(numStr);	1
com.fasterxml.jackson.core.util.TextBuffer:215-_inputBuffer = null;	0
com.fasterxml.jackson.core.util.TextBuffer:216-_inputStart = -1;	0
com.fasterxml.jackson.core.util.TextBuffer:217-_inputLen = 0;	0
com.fasterxml.jackson.core.util.TextBuffer:219-_resultString = value;	0
com.fasterxml.jackson.core.util.TextBuffer:220-_resultArray = null;	0
com.fasterxml.jackson.core.util.TextBuffer:222-if (_hasSegments) {	0
com.fasterxml.jackson.core.util.TextBuffer:225-_currentSize = 0;	0
com.fasterxml.jackson.core.util.TextBuffer:227-}	0
com.fasterxml.jackson.core.io.NumberInput:18-final static String MIN_LONG_STR_NO_SIGN = String.valueOf(Long.MIN_VALUE).substring(1);	0
com.fasterxml.jackson.core.io.NumberInput:19-final static String MAX_LONG_STR = String.valueOf(Long.MAX_VALUE);	0
com.fasterxml.jackson.core.util.TextBuffer:332-if (_resultString == null) {	0
com.fasterxml.jackson.core.util.TextBuffer:366-return _resultString;	0
com.fasterxml.jackson.core.util.TextBuffer:122-{	0
com.fasterxml.jackson.core.util.TextBuffer:85-private boolean _hasSegments = false;	0
com.fasterxml.jackson.core.util.TextBuffer:123-_allocator = allocator;	0
com.fasterxml.jackson.core.util.TextBuffer:124-}	0
com.fasterxml.jackson.core.util.TextBuffer:29-final static char[] NO_CHARS = new char[0];	0
com.fasterxml.jackson.core.util.TextBuffer:137-if (_allocator == null) {	0
com.fasterxml.jackson.core.util.TextBuffer:140-if (_currentSegment != null) {	0
com.fasterxml.jackson.core.util.TextBuffer:149-}	0
com.fasterxml.jackson.core.util.TextBuffer:138-resetWithEmpty();	0
com.fasterxml.jackson.core.util.TextBuffer:142-resetWithEmpty();	0
com.fasterxml.jackson.core.util.TextBuffer:144-char[] buf = _currentSegment;	0
com.fasterxml.jackson.core.util.TextBuffer:145-_currentSegment = null;	0
com.fasterxml.jackson.core.util.TextBuffer:146-_allocator.releaseCharBuffer(BufferRecycler.CharBufferType.TEXT_BUFFER, buf);	0
com.fasterxml.jackson.core.util.TextBuffer:157-_inputStart = -1; // indicates shared buffer not used	0
com.fasterxml.jackson.core.util.TextBuffer:158-_currentSize = 0;	0
com.fasterxml.jackson.core.util.TextBuffer:159-_inputLen = 0;	0
com.fasterxml.jackson.core.util.TextBuffer:161-_inputBuffer = null;	0
com.fasterxml.jackson.core.util.TextBuffer:162-_resultString = null;	0
com.fasterxml.jackson.core.util.TextBuffer:163-_resultArray = null;	0
com.fasterxml.jackson.core.util.TextBuffer:166-if (_hasSegments) {	0
com.fasterxml.jackson.core.util.TextBuffer:167-clearSegments();	0
com.fasterxml.jackson.core.util.TextBuffer:169-}	0
com.fasterxml.jackson.core.util.TextBuffer:180-_resultString = null;	0
com.fasterxml.jackson.core.util.TextBuffer:181-_resultArray = null;	0
com.fasterxml.jackson.core.util.TextBuffer:184-_inputBuffer = buf;	0
com.fasterxml.jackson.core.util.TextBuffer:185-_inputStart = start;	0
com.fasterxml.jackson.core.util.TextBuffer:186-_inputLen = len;	0
com.fasterxml.jackson.core.util.TextBuffer:189-if (_hasSegments) {	0
com.fasterxml.jackson.core.util.TextBuffer:190-clearSegments();	0
com.fasterxml.jackson.core.util.TextBuffer:192-}	0
com.fasterxml.jackson.core.util.TextBuffer:196-_inputBuffer = null;	0
com.fasterxml.jackson.core.util.TextBuffer:197-_inputStart = -1; // indicates shared buffer not used	0
com.fasterxml.jackson.core.util.TextBuffer:198-_inputLen = 0;	0
com.fasterxml.jackson.core.util.TextBuffer:200-_resultString = null;	0
com.fasterxml.jackson.core.util.TextBuffer:201-_resultArray = null;	0
com.fasterxml.jackson.core.util.TextBuffer:204-if (_hasSegments) {	0
com.fasterxml.jackson.core.util.TextBuffer:205-clearSegments();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:674-t = _parseNumber(i);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:675-break;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:853-boolean negative = (ch == INT_MINUS);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:854-int ptr = _inputPtr;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:855-int startPtr = ptr-1; // to include sign/digit already read	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:856-final int inputLen = _inputEnd;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:860-if (negative) { // need to read the next digit	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:876-if (ch == INT_0) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:886-int intLen = 1; // already got one	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:892-if (ptr >= _inputEnd) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:895-ch = (int) _inputBuffer[ptr++];	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:896-if (ch < INT_0 || ch > INT_9) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:897-break int_loop;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:899-++intLen;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:902-int fractLen = 0;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:905-if (ch == '.') { // yes, fraction	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:923-int expLen = 0;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:924-if (ch == 'e' || ch == 'E') { // and/or exponent	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:949---ptr; // need to push back following separator	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:950-_inputPtr = ptr;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:952-int len = ptr-startPtr;	1
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:953-_textBuffer.resetWithShared(_inputBuffer, startPtr, len);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:954-return reset(negative, intLen, fractLen, expLen);	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:787-return (_currToken = _parseNumber(i));	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1187-char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1188-int outPtr = 0;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1189-boolean negative = (c == INT_MINUS);	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1192-if (negative) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1206-if (c == INT_0) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1211-outBuf[outPtr++] = (char) c;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1212-int intLen = 1;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1215-int end = _inputPtr + outBuf.length;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1216-if (end > _inputEnd) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1217-end = _inputEnd;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1222-if (_inputPtr >= end) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1226-c = (int) _inputBuffer[_inputPtr++] & 0xFF;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1227-if (c < INT_0 || c > INT_9) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1228-break;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1230-++intLen;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1231-if (outPtr >= outBuf.length) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1235-outBuf[outPtr++] = (char) c;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1237-if (c == '.' || c == 'e' || c == 'E') {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1241---_inputPtr; // to push back trailing char (comma etc)	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1242-_textBuffer.setCurrentLength(outPtr);	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1246-return resetInt(negative, intLen);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:80-super(ctxt, features);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:69-protected boolean _tokenIncomplete = false;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:81-_reader = r;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:82-_inputBuffer = ctxt.allocTokenBuffer();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:83-_objectCodec = codec;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:118-super(ctxt, features);	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:63-protected int[] _quadBuffer = new int[16];	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:70-protected boolean _tokenIncomplete = false;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:119-_inputStream = in;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:120-_objectCodec = codec;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:121-_symbols = sym;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:122-_inputBuffer = inputBuffer;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:123-_inputPtr = start;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:124-_inputEnd = end;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:126-_bufferRecyclable = bufferRecyclable;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:127-}	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:27-private final static int[] _icUTF8 = CharTypes.getInputCodeUtf8();	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:31-protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:34-private final static int[] _icWS = CharTypes.getInputCodeWS();	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:606-return new JsonLocation(_ioContext.getSourceReference(),	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:636-_numTypesValid = NR_UNKNOWN;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:641-if (_currToken == JsonToken.FIELD_NAME) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:644-if (_tokenIncomplete) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:648-int i = _skipWSOrEnd();	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:649-if (i < 0) { // end-of-input	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:660-_tokenInputTotal = _currInputProcessed + _inputPtr - 1;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:661-_tokenInputRow = _currInputRow;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:662-_tokenInputCol = _inputPtr - _currInputRowStart - 1;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:665-_binaryValue = null;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:668-if (i == INT_RBRACKET) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:675-if (i == INT_RCURLY) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:684-if (_parsingContext.expectComma()) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:695-if (!_parsingContext.inObject()) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:696-return _nextTokenNotInObject(i);	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:774-if (i == INT_QUOTE) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:778-switch (i) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:783-_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:784-return (_currToken = JsonToken.START_OBJECT);	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:2550-final int[] codes = _icWS;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:2551-while ((_inputPtr < _inputEnd) || loadMore()) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:2552-final int i = _inputBuffer[_inputPtr++] & 0xFF;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:2553-switch (codes[i]) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:2555-return i;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:131-return _objectCodec;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:136-_objectCodec = c;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:137-}	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:148-int count = _inputEnd - _inputPtr;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:149-if (count < 1) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:150-return 0;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:153-int origPtr = _inputPtr;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:154-out.write(_inputBuffer, origPtr, count);	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:155-return count;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:160-return _inputStream;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:173-_currInputProcessed += _inputEnd;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:174-_currInputRowStart -= _inputEnd;	0
com.fasterxml.jackson.core.util.TextBuffer:514-if (_inputStart >= 0) {	0
com.fasterxml.jackson.core.util.TextBuffer:515-unshare(1);	0
com.fasterxml.jackson.core.util.TextBuffer:525-return _currentSegment;	0
com.fasterxml.jackson.core.util.TextBuffer:582-final char[] curr = _currentSegment;	0
com.fasterxml.jackson.core.util.TextBuffer:584-final int len = curr.length;	0
com.fasterxml.jackson.core.util.TextBuffer:586-int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));	0
com.fasterxml.jackson.core.util.TextBuffer:587-return (_currentSegment = Arrays.copyOf(curr, newLen));	0
com.fasterxml.jackson.core.util.TextBuffer:121-public TextBuffer(BufferRecycler allocator) {	0
com.fasterxml.jackson.core.util.TextBuffer:85-private boolean _hasSegments = false;	0
com.fasterxml.jackson.core.util.TextBuffer:122-_allocator = allocator;	0
com.fasterxml.jackson.core.util.TextBuffer:123-}	0
com.fasterxml.jackson.core.util.TextBuffer:29-final static char[] NO_CHARS = new char[0];	0
com.fasterxml.jackson.core.util.TextBuffer:234-if (_allocator != null) {	0
com.fasterxml.jackson.core.util.TextBuffer:235-return _allocator.allocCharBuffer(BufferRecycler.CHAR_TEXT_BUFFER, needed);	0
com.fasterxml.jackson.core.util.TextBuffer:631-int sharedLen = _inputLen;	0
com.fasterxml.jackson.core.util.TextBuffer:632-_inputLen = 0;	0
com.fasterxml.jackson.core.util.TextBuffer:633-char[] inputBuf = _inputBuffer;	0
com.fasterxml.jackson.core.util.TextBuffer:634-_inputBuffer = null;	0
com.fasterxml.jackson.core.util.TextBuffer:635-int start = _inputStart;	0
com.fasterxml.jackson.core.util.TextBuffer:636-_inputStart = -1;	0
com.fasterxml.jackson.core.util.TextBuffer:639-int needed = sharedLen+needExtra;	0
com.fasterxml.jackson.core.util.TextBuffer:640-if (_currentSegment == null || needed > _currentSegment.length) {	0
com.fasterxml.jackson.core.util.TextBuffer:641-_currentSegment = buf(needed);	0
com.fasterxml.jackson.core.util.TextBuffer:643-if (sharedLen > 0) {	0
com.fasterxml.jackson.core.util.TextBuffer:646-_segmentSize = 0;	0
com.fasterxml.jackson.core.util.TextBuffer:647-_currentSize = sharedLen;	0
com.fasterxml.jackson.core.util.TextBuffer:648-}	0
com.fasterxml.jackson.core.util.TextBuffer:136-if (_allocator == null) {	0
com.fasterxml.jackson.core.util.TextBuffer:137-resetWithEmpty();	0
com.fasterxml.jackson.core.util.TextBuffer:139-if (_currentSegment != null) {	0
com.fasterxml.jackson.core.util.TextBuffer:141-resetWithEmpty();	0
com.fasterxml.jackson.core.util.TextBuffer:143-char[] buf = _currentSegment;	0
com.fasterxml.jackson.core.util.TextBuffer:144-_currentSegment = null;	0
com.fasterxml.jackson.core.util.TextBuffer:145-_allocator.releaseCharBuffer(BufferRecycler.CHAR_TEXT_BUFFER, buf);	0
com.fasterxml.jackson.core.util.TextBuffer:148-}	0
com.fasterxml.jackson.core.util.TextBuffer:156-_inputStart = -1; // indicates shared buffer not used	0
com.fasterxml.jackson.core.util.TextBuffer:157-_currentSize = 0;	0
com.fasterxml.jackson.core.util.TextBuffer:158-_inputLen = 0;	0
com.fasterxml.jackson.core.util.TextBuffer:160-_inputBuffer = null;	0
com.fasterxml.jackson.core.util.TextBuffer:161-_resultString = null;	0
com.fasterxml.jackson.core.util.TextBuffer:162-_resultArray = null;	0
com.fasterxml.jackson.core.util.TextBuffer:165-if (_hasSegments) {	0
com.fasterxml.jackson.core.util.TextBuffer:166-clearSegments();	0
com.fasterxml.jackson.core.util.TextBuffer:168-}	0
com.fasterxml.jackson.core.util.TextBuffer:179-_resultString = null;	0
com.fasterxml.jackson.core.util.TextBuffer:180-_resultArray = null;	0
com.fasterxml.jackson.core.util.TextBuffer:183-_inputBuffer = buf;	0
com.fasterxml.jackson.core.util.TextBuffer:184-_inputStart = start;	0
com.fasterxml.jackson.core.util.TextBuffer:185-_inputLen = len;	0
com.fasterxml.jackson.core.util.TextBuffer:188-if (_hasSegments) {	0
com.fasterxml.jackson.core.JsonPointer:204-return NumberInput.parseInt(str);	0
com.fasterxml.jackson.core.JsonPointer:198-if (len == 10) {	0
com.fasterxml.jackson.core.JsonPointer:225-return new JsonPointer(input, input.substring(1), EMPTY);	0
com.fasterxml.jackson.core.JsonPointer:55-protected JsonPointer() {	0
com.fasterxml.jackson.core.JsonPointer:56-_nextSegment = null;	0
com.fasterxml.jackson.core.JsonPointer:57-_matchingPropertyName = "";	0
com.fasterxml.jackson.core.JsonPointer:58-_matchingElementIndex = -1;	0
com.fasterxml.jackson.core.JsonPointer:59-_asString = "";	0
com.fasterxml.jackson.core.JsonPointer:60-}	0
com.fasterxml.jackson.core.JsonPointer:65-protected JsonPointer(String fullString, String segment, JsonPointer next) {	0
com.fasterxml.jackson.core.JsonPointer:66-_asString = fullString;	0
com.fasterxml.jackson.core.JsonPointer:67-_nextSegment = next;	0
com.fasterxml.jackson.core.JsonPointer:69-_matchingPropertyName = segment;	0
com.fasterxml.jackson.core.JsonPointer:70-_matchingElementIndex = _parseIndex(segment);	0
com.fasterxml.jackson.core.JsonPointer:26-protected final static JsonPointer EMPTY = new JsonPointer();	0
com.fasterxml.jackson.core.JsonPointer:91-if ((input == null) || input.length() == 0) {	0
com.fasterxml.jackson.core.JsonPointer:95-if (input.charAt(0) != '/') {	0
com.fasterxml.jackson.core.JsonPointer:98-return _parseTail(input);	0
com.fasterxml.jackson.core.JsonPointer:186-final int len = str.length();	0
com.fasterxml.jackson.core.JsonPointer:189-if (len == 0 || len > 10) {	0
com.fasterxml.jackson.core.JsonPointer:192-for (int i = 0; i < len; ++i) {	0
com.fasterxml.jackson.core.JsonPointer:193-char c = str.charAt(i++);	1
com.fasterxml.jackson.core.JsonPointer:194-if (c > '9' || c < '0') {	0
com.fasterxml.jackson.core.JsonPointer:208-final int end = input.length();	0
com.fasterxml.jackson.core.JsonPointer:211-for (int i = 1; i < end; ) {	0
com.fasterxml.jackson.core.JsonPointer:212-char c = input.charAt(i);	0
com.fasterxml.jackson.core.JsonPointer:213-if (c == '/') { // common case, got a segment	0
com.fasterxml.jackson.core.JsonPointer:217-++i;	0
com.fasterxml.jackson.core.JsonPointer:219-if (c == '~' && i < end) { // possibly, quote	0
com.fasterxml.jackson.core.JsonPointer:223-}	0
com.fasterxml.jackson.core.JsonPointer:71-}	0
com.fasterxml.jackson.core.JsonPointer:92-return EMPTY;	0
com.fasterxml.jackson.core.JsonPointer:96-throw new IllegalArgumentException("Invalid input: JSON Pointer expression must start with '/': "+"\""+input+"\"");	0
com.fasterxml.jackson.core.JsonPointer:105-public static JsonPointer valueOf(String input) { return compile(input); }	0
com.fasterxml.jackson.core.JsonPointer:135-public boolean matches() { return _nextSegment == null; }	0
com.fasterxml.jackson.core.JsonPointer:136-public String getMatchingProperty() { return _matchingPropertyName; }	0
com.fasterxml.jackson.core.JsonPointer:137-public int getMatchingIndex() { return _matchingElementIndex; }	0
com.fasterxml.jackson.core.JsonPointer:138-public boolean mayMatchProperty() { return _matchingPropertyName != null; }	0
com.fasterxml.jackson.core.JsonPointer:139-public boolean mayMatchElement() { return _matchingElementIndex >= 0; }	0
com.fasterxml.jackson.core.JsonPointer:142-if (_nextSegment == null || !_matchingPropertyName.equals(name)) {	0
com.fasterxml.jackson.core.JsonPointer:143-return null;	0
com.fasterxml.jackson.core.JsonPointer:145-return _nextSegment;	0
com.fasterxml.jackson.core.JsonPointer:149-if ((index != _matchingElementIndex) || (index < 0)) {	0
com.fasterxml.jackson.core.JsonPointer:150-return null;	0
com.fasterxml.jackson.core.JsonPointer:152-return _nextSegment;	0
com.fasterxml.jackson.core.JsonPointer:160-return _nextSegment;	0
com.fasterxml.jackson.core.JsonPointer:169-@Override public String toString() { return _asString; }	0
com.fasterxml.jackson.core.JsonPointer:170-@Override public int hashCode() { return _asString.hashCode(); }	0
com.fasterxml.jackson.core.JsonPointer:173-if (o == this) return true;	0
com.fasterxml.jackson.core.JsonPointer:174-if (o == null) return false;	0
com.fasterxml.jackson.core.JsonPointer:205-return NumberInput.parseInt(str);	0
com.fasterxml.jackson.core.JsonPointer:199-if (len == 10) {	0
com.fasterxml.jackson.core.JsonPointer:137-public int getMatchingIndex() { return _matchingElementIndex; }	0
com.fasterxml.jackson.core.JsonPointer:226-return new JsonPointer(input, input.substring(1), EMPTY);	0
com.fasterxml.jackson.core.JsonPointer:55-protected JsonPointer() {	0
com.fasterxml.jackson.core.JsonPointer:56-_nextSegment = null;	0
com.fasterxml.jackson.core.JsonPointer:57-_matchingPropertyName = "";	0
com.fasterxml.jackson.core.JsonPointer:58-_matchingElementIndex = -1;	0
com.fasterxml.jackson.core.JsonPointer:59-_asString = "";	0
com.fasterxml.jackson.core.JsonPointer:60-}	0
com.fasterxml.jackson.core.JsonPointer:65-protected JsonPointer(String fullString, String segment, JsonPointer next) {	0
com.fasterxml.jackson.core.JsonPointer:66-_asString = fullString;	0
com.fasterxml.jackson.core.JsonPointer:67-_nextSegment = next;	0
com.fasterxml.jackson.core.JsonPointer:69-_matchingPropertyName = segment;	0
com.fasterxml.jackson.core.JsonPointer:70-_matchingElementIndex = _parseIndex(segment);	0
com.fasterxml.jackson.core.JsonPointer:71-}	0
com.fasterxml.jackson.core.JsonPointer:26-protected final static JsonPointer EMPTY = new JsonPointer();	0
com.fasterxml.jackson.core.JsonPointer:91-if ((input == null) || input.length() == 0) {	0
com.fasterxml.jackson.core.JsonPointer:95-if (input.charAt(0) != '/') {	0
com.fasterxml.jackson.core.JsonPointer:98-return _parseTail(input);	0
com.fasterxml.jackson.core.JsonPointer:186-final int len = str.length();	0
com.fasterxml.jackson.core.JsonPointer:189-if (len == 0 || len > 10) {	0
com.fasterxml.jackson.core.JsonPointer:193-for (int i = 0; i < len; ++i) {	1
com.fasterxml.jackson.core.JsonPointer:194-char c = str.charAt(i);	0
com.fasterxml.jackson.core.JsonPointer:195-if (c > '9' || c < '0') {	0
com.fasterxml.jackson.core.JsonPointer:209-final int end = input.length();	0
com.fasterxml.jackson.core.JsonPointer:212-for (int i = 1; i < end; ) {	0
com.fasterxml.jackson.core.JsonPointer:213-char c = input.charAt(i);	0
com.fasterxml.jackson.core.JsonPointer:214-if (c == '/') { // common case, got a segment	0
com.fasterxml.jackson.core.JsonPointer:218-++i;	0
com.fasterxml.jackson.core.JsonPointer:220-if (c == '~' && i < end) { // possibly, quote	0
com.fasterxml.jackson.core.JsonPointer:224-}	0
com.fasterxml.jackson.core.JsonPointer:92-return EMPTY;	0
com.fasterxml.jackson.core.JsonPointer:96-throw new IllegalArgumentException("Invalid input: JSON Pointer expression must start with '/': "+"\""+input+"\"");	0
com.fasterxml.jackson.core.JsonPointer:105-public static JsonPointer valueOf(String input) { return compile(input); }	0
com.fasterxml.jackson.core.JsonPointer:135-public boolean matches() { return _nextSegment == null; }	0
com.fasterxml.jackson.core.JsonPointer:136-public String getMatchingProperty() { return _matchingPropertyName; }	0
com.fasterxml.jackson.core.JsonPointer:138-public boolean mayMatchProperty() { return _matchingPropertyName != null; }	0
com.fasterxml.jackson.core.JsonPointer:139-public boolean mayMatchElement() { return _matchingElementIndex >= 0; }	0
com.fasterxml.jackson.core.JsonPointer:142-if (_nextSegment == null || !_matchingPropertyName.equals(name)) {	0
com.fasterxml.jackson.core.JsonPointer:143-return null;	0
com.fasterxml.jackson.core.JsonPointer:145-return _nextSegment;	0
com.fasterxml.jackson.core.JsonPointer:149-if ((index != _matchingElementIndex) || (index < 0)) {	0
com.fasterxml.jackson.core.JsonPointer:150-return null;	0
com.fasterxml.jackson.core.JsonPointer:152-return _nextSegment;	0
com.fasterxml.jackson.core.JsonPointer:160-return _nextSegment;	0
com.fasterxml.jackson.core.JsonPointer:169-@Override public String toString() { return _asString; }	0
com.fasterxml.jackson.core.JsonPointer:170-@Override public int hashCode() { return _asString.hashCode(); }	0
com.fasterxml.jackson.core.JsonPointer:173-if (o == this) return true;	0
com.fasterxml.jackson.core.JsonPointer:174-if (o == null) return false;	0
com.fasterxml.jackson.core.json.JsonWriteContext:169-_gotName = false;	1
com.fasterxml.jackson.core.json.JsonWriteContext:170-++_index;	0
com.fasterxml.jackson.core.json.JsonWriteContext:171-return STATUS_OK_AFTER_COLON;	0
com.fasterxml.jackson.core.json.JsonWriteContext:70-super();	0
com.fasterxml.jackson.core.json.JsonWriteContext:38-protected JsonWriteContext _child = null;	0
com.fasterxml.jackson.core.json.JsonWriteContext:71-_type = type;	0
com.fasterxml.jackson.core.json.JsonWriteContext:72-_parent = parent;	0
com.fasterxml.jackson.core.json.JsonWriteContext:73-_dups = dups;	0
com.fasterxml.jackson.core.json.JsonWriteContext:74-_index = -1;	0
com.fasterxml.jackson.core.json.JsonWriteContext:75-}	0
com.fasterxml.jackson.core.json.JsonWriteContext:115-return new JsonWriteContext(TYPE_ROOT, null, dd);	0
com.fasterxml.jackson.core.json.JsonWriteContext:128-JsonWriteContext ctxt = _child;	0
com.fasterxml.jackson.core.json.JsonWriteContext:129-if (ctxt == null) {	0
com.fasterxml.jackson.core.json.JsonWriteContext:130-_child = ctxt = new JsonWriteContext(TYPE_OBJECT, this, (_dups == null) ? null : _dups.child());	0
com.fasterxml.jackson.core.json.JsonWriteContext:131-return ctxt;	0
com.fasterxml.jackson.core.json.JsonWriteContext:168-if (_type == TYPE_OBJECT) {	0
com.fasterxml.jackson.core.json.JsonWriteContext:175-if (_type == TYPE_ARRAY) {	0
com.fasterxml.jackson.core.json.JsonWriteContext:183-++_index;	0
com.fasterxml.jackson.core.json.JsonWriteContext:184-return (_index == 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_SPACE;	0
com.fasterxml.jackson.core.json.JsonWriteContext:78-_type = type;	0
com.fasterxml.jackson.core.json.JsonWriteContext:79-_index = -1;	0
com.fasterxml.jackson.core.json.JsonWriteContext:80-_currentName = null;	0
com.fasterxml.jackson.core.json.JsonWriteContext:81-_gotName = false;	0
com.fasterxml.jackson.core.json.JsonWriteContext:82-_currentValue = null;	0
com.fasterxml.jackson.core.json.JsonWriteContext:83-if (_dups != null) { _dups.reset(); }	0
com.fasterxml.jackson.core.json.JsonWriteContext:84-return this;	0
com.fasterxml.jackson.core.json.JsonWriteContext:88-_dups = dups;	0
com.fasterxml.jackson.core.json.JsonWriteContext:89-return this;	0
com.fasterxml.jackson.core.json.JsonWriteContext:94-return _currentValue;	0
com.fasterxml.jackson.core.json.JsonWriteContext:99-_currentValue = v;	0
com.fasterxml.jackson.core.json.JsonWriteContext:100-}	0
com.fasterxml.jackson.core.json.JsonWriteContext:112-public static JsonWriteContext createRootContext() { return createRootContext(null); }	0
com.fasterxml.jackson.core.json.JsonWriteContext:119-JsonWriteContext ctxt = _child;	0
com.fasterxml.jackson.core.json.JsonWriteContext:120-if (ctxt == null) {	0
com.fasterxml.jackson.core.json.JsonWriteContext:121-_child = ctxt = new JsonWriteContext(TYPE_ARRAY, this, (_dups == null) ? null : _dups.child());	0
com.fasterxml.jackson.core.json.JsonWriteContext:122-return ctxt;	0
com.fasterxml.jackson.core.json.JsonWriteContext:124-return ctxt.reset(TYPE_ARRAY);	0
com.fasterxml.jackson.core.json.JsonWriteContext:133-return ctxt.reset(TYPE_OBJECT);	0
com.fasterxml.jackson.core.json.JsonWriteContext:138-@Override public final JsonWriteContext getParent() { return _parent; }	0
com.fasterxml.jackson.core.json.JsonWriteContext:139-@Override public final String getCurrentName() { return _currentName; }	0
com.fasterxml.jackson.core.json.JsonWriteContext:142-return _dups;	0
com.fasterxml.jackson.core.json.JsonWriteContext:153-if (_gotName) {	0
com.fasterxml.jackson.core.json.JsonWriteContext:154-return JsonWriteContext.STATUS_EXPECT_VALUE;	0
com.fasterxml.jackson.core.json.JsonWriteContext:156-_gotName = true;	0
com.fasterxml.jackson.core.json.JsonWriteContext:157-_currentName = name;	0
com.fasterxml.jackson.core.json.JsonWriteContext:158-if (_dups != null) { _checkDup(_dups, name); }	0
com.fasterxml.jackson.core.json.JsonWriteContext:159-return (_index < 0) ? STATUS_OK_AS_IS : STATUS_OK_AFTER_COMMA;	0
com.fasterxml.jackson.core.json.JsonWriteContext:163-if (dd.isDup(name)) { throw new JsonGenerationException("Duplicate field '"+name+"'"); }	0
com.fasterxml.jackson.core.json.JsonWriteContext:164-}	0
com.fasterxml.jackson.core.json.JsonWriteContext:176-int ix = _index;	0
com.fasterxml.jackson.core.util.TextBuffer:156-_inputStart = -1; // indicates shared buffer not used	0
com.fasterxml.jackson.core.util.TextBuffer:157-_currentSize = 0;	0
com.fasterxml.jackson.core.util.TextBuffer:158-_inputLen = 0;	0
com.fasterxml.jackson.core.util.TextBuffer:160-_inputBuffer = null;	0
com.fasterxml.jackson.core.util.TextBuffer:161-_resultString = null;	0
com.fasterxml.jackson.core.util.TextBuffer:162-_resultArray = null;	0
com.fasterxml.jackson.core.util.TextBuffer:165-if (_hasSegments) {	0
com.fasterxml.jackson.core.util.TextBuffer:168-}	0
com.fasterxml.jackson.core.util.TextBuffer:301-if (_inputStart >= 0) return _inputBuffer;	0
com.fasterxml.jackson.core.util.TextBuffer:302-if (_resultArray != null)return _resultArray;	0
com.fasterxml.jackson.core.util.TextBuffer:303-if (_resultString != null) {	0
com.fasterxml.jackson.core.util.TextBuffer:307-if (!_hasSegments)return _currentSegment;	1
com.fasterxml.jackson.core.util.TextBuffer:121-public TextBuffer(BufferRecycler allocator) {	0
com.fasterxml.jackson.core.util.TextBuffer:85-private boolean _hasSegments = false;	0
com.fasterxml.jackson.core.util.TextBuffer:122-_allocator = allocator;	0
com.fasterxml.jackson.core.util.TextBuffer:123-}	0
com.fasterxml.jackson.core.util.TextBuffer:29-final static char[] NO_CHARS = new char[0];	0
com.fasterxml.jackson.core.util.TextBuffer:136-if (_allocator == null) {	0
com.fasterxml.jackson.core.util.TextBuffer:137-resetWithEmpty();	0
com.fasterxml.jackson.core.util.TextBuffer:139-if (_currentSegment != null) {	0
com.fasterxml.jackson.core.util.TextBuffer:141-resetWithEmpty();	0
com.fasterxml.jackson.core.util.TextBuffer:143-char[] buf = _currentSegment;	0
com.fasterxml.jackson.core.util.TextBuffer:144-_currentSegment = null;	0
com.fasterxml.jackson.core.util.TextBuffer:145-_allocator.releaseCharBuffer(BufferRecycler.CHAR_TEXT_BUFFER, buf);	0
com.fasterxml.jackson.core.util.TextBuffer:148-}	0
com.fasterxml.jackson.core.util.TextBuffer:166-clearSegments();	0
com.fasterxml.jackson.core.util.TextBuffer:179-_resultString = null;	0
com.fasterxml.jackson.core.util.TextBuffer:180-_resultArray = null;	0
com.fasterxml.jackson.core.util.TextBuffer:183-_inputBuffer = buf;	0
com.fasterxml.jackson.core.util.TextBuffer:184-_inputStart = start;	0
com.fasterxml.jackson.core.util.TextBuffer:185-_inputLen = len;	0
com.fasterxml.jackson.core.util.TextBuffer:188-if (_hasSegments) {	0
com.fasterxml.jackson.core.util.TextBuffer:189-clearSegments();	0
com.fasterxml.jackson.core.util.TextBuffer:191-}	0
com.fasterxml.jackson.core.util.TextBuffer:195-_inputBuffer = null;	0
com.fasterxml.jackson.core.util.TextBuffer:196-_inputStart = -1; // indicates shared buffer not used	0
com.fasterxml.jackson.core.util.TextBuffer:197-_inputLen = 0;	0
com.fasterxml.jackson.core.util.TextBuffer:199-_resultString = null;	0
com.fasterxml.jackson.core.util.TextBuffer:200-_resultArray = null;	0
com.fasterxml.jackson.core.util.TextBuffer:203-if (_hasSegments) {	0
com.fasterxml.jackson.core.util.TextBuffer:204-clearSegments();	0
com.fasterxml.jackson.core.util.TextBuffer:205-} else if (_currentSegment == null) {	0
com.fasterxml.jackson.core.util.TextBuffer:206-_currentSegment = buf(len);	0
com.fasterxml.jackson.core.util.TextBuffer:208-_currentSize = _segmentSize = 0;	0
com.fasterxml.jackson.core.util.TextBuffer:209-append(buf, start, len);	0
com.fasterxml.jackson.core.util.TextBuffer:210-}	0
com.fasterxml.jackson.core.util.TextBuffer:214-_inputBuffer = null;	0
com.fasterxml.jackson.core.util.TextBuffer:215-_inputStart = -1;	0
com.fasterxml.jackson.core.util.TextBuffer:216-_inputLen = 0;	0
com.fasterxml.jackson.core.util.TextBuffer:218-_resultString = value;	0
com.fasterxml.jackson.core.base.ParserMinimalBase:397-if (_currToken == JsonToken.VALUE_STRING) {	0
com.fasterxml.jackson.core.base.ParserMinimalBase:400-if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {	1
com.fasterxml.jackson.core.base.ParserMinimalBase:401-return defaultValue;	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:298-if (_currToken == JsonToken.VALUE_STRING) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:305-return super.getValueAsString(null);	1
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:246-if (_currToken == JsonToken.VALUE_STRING) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:253-return super.getValueAsString(null);	1
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1694-if (i == INT_QUOTE) { // one byte/char case or broken	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:1695-return findName(q, 1);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:96-super(ctxt, features);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:77-protected boolean _tokenIncomplete = false;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:97-_reader = r;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:98-_inputBuffer = inputBuffer;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:99-_inputPtr = start;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:100-_inputEnd = end;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:101-_objectCodec = codec;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:102-_symbols = st;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:103-_hashSeed = st.hashSeed();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:104-_bufferRecyclable = bufferRecyclable;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:105-}	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:237-return _getText2(t);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:270-if (t == null) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:273-switch (t.id()) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:275-return _parsingContext.getCurrentName();	0
com.fasterxml.jackson.core.base.ParserMinimalBase:73-protected ParserMinimalBase(int features) { super(features); }	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:289-return _getText2(_currToken);	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:364-if (t == null) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:367-switch (t.id()) {	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:369-return _parsingContext.getCurrentName();	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:767-t = _parsePosNumber(i);	0
com.fasterxml.jackson.core.json.UTF8StreamJsonParser:768-break;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:680-t = _parsePosNumber(i);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:681-break;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:847-int ptr = _inputPtr;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:848-int startPtr = ptr-1; // to include digit already read	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:849-final int inputLen = _inputEnd;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:852-if (ch == INT_0) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:862-int intLen = 1; // already got one	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:867-if (ptr >= inputLen) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:871-ch = (int) _inputBuffer[ptr++];	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:872-if (ch < INT_0 || ch > INT_9) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:877-if (ch == INT_PERIOD || ch == INT_e || ch == INT_E) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:882---ptr; // need to push back following separator	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:883-_inputPtr = ptr;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:885-if (_parsingContext.inRoot()) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:888-int len = ptr-startPtr;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:889-_textBuffer.resetWithShared(_inputBuffer, startPtr, len);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:890-return resetInt(false, intLen);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1702-int i = _inputBuffer[++_inputPtr];	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1703-if (i > INT_SPACE) { // nor trailing	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1109-q[0] = oldHashArea[offset];	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1110-addName(name, q, 1);	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1111-break;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:821-offset = _findOffsetForAdd(calcHash(q[0]));	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:822-_hashArea[offset] = q[0];	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:823-_hashArea[offset+3] = 1;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:825-break;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:914-offset = _spilloverEnd;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:915-_spilloverEnd += 4;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:925-if (_spilloverEnd >= hashArea.length) {	1
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:933-return offset;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:977-int hash = q1 ^ _seed;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:983-hash += (hash >>> 16); // to xor hi- and low- 16-bits	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:984-hash ^= (hash >>> 12);	1
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:985-return hash;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1124-if (len > q.length) {	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1128-int qoff = oldHashArea[offset+1];	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1129-System.arraycopy(oldHashArea, qoff, q, 0, len);	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1130-addName(name, q, len);	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:373-public int bucketCount() { return _hashSize; }	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1198-if (tertSlots <= 1024) { // buckets of 16 slots (up to 1024 == 64 x 16)	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1199-return 6;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:864-int spillCount = (_spilloverEnd - _spilloverStart()) >> 2;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:865-if ((spillCount > (1 + _count >> 7))	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:867-_needRehash = true;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:880-rehash();	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:897-int offset2 = _secondaryStart + ((offset >> 3) << 2);	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:898-if (hashArea[offset2+3] == 0) {	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:900-return offset2;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:904-offset2 = _tertiaryStart + ((offset >> (_tertiaryShift + 2)) << _tertiaryShift);	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:905-final int bucketSize = (1 << _tertiaryShift);	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:906-for (int end = offset2 + bucketSize; offset2 < end; offset2 += 4) {	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:907-if (hashArea[offset2+3] == 0) {	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:909-return offset2;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1062-_needRehash = false;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1064-_hashShared = false;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1068-final int[] oldHashArea = _hashArea;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1069-final String[] oldNames = _names;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1070-final int oldSize = _hashSize;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1071-final int oldCount = _count;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1072-final int newSize = oldSize + oldSize;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1073-final int oldEnd = _spilloverEnd;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1078-if (newSize > MAX_T_SIZE) {	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1083-_hashArea = new int[oldHashArea.length + (oldSize<<3)];	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1084-_hashSize = newSize;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1085-_secondaryStart = (newSize << 2); // 4 ints per entry	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1086-_tertiaryStart = _secondaryStart + (_secondaryStart >> 1); // right after secondary	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1087-_tertiaryShift = _calcTertiaryShift(newSize);	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1090-_names = new String[oldNames.length << 1];	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1091-nukeSymbols(false);	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:470-int offset = _calcOffset(calcHash(q1));	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:472-final int[] hashArea = _hashArea;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:474-int len = hashArea[offset+3];	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:476-if (len == 1) {	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:477-if (hashArea[offset] == q1) {	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:480-} else if (len == 0) { // empty slot; unlikely but avoid further lookups if so	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:481-return null;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:484-int offset2 = _secondaryStart + ((offset >> 3) << 2);	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:486-len = hashArea[offset2+3];	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:488-if (len == 1) {	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:489-if (hashArea[offset2] == q1) {	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:492-} else if (len == 0) { // empty slot; unlikely but avoid further lookups if so	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:493-return null;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:497-return _findSecondary(offset, q1);	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:626-int offset = _tertiaryStart + ((origOffset >> (_tertiaryShift + 2)) << _tertiaryShift);	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:627-final int[] hashArea = _hashArea;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:628-final int bucketSize = (1 << _tertiaryShift);	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:629-for (int end = offset + bucketSize; offset < end; offset += 4) {	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:630-int len = hashArea[offset+3];	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:631-if ((q1 == hashArea[offset]) && (1 == len)) {	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:634-if (len == 0) {	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:635-return null;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:641-for (offset = _spilloverStart(); offset < _spilloverEnd; offset += 4) {	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:642-if ((q1 == hashArea[offset]) && (1 == hashArea[offset+3])) {	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:646-return null;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:823-offset = _findOffsetForAdd(calcHash(q[0]));	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:824-_hashArea[offset] = q[0];	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:825-_hashArea[offset+3] = 1;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:827-break;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:931-if (_failOnDoS) {	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:932-_reportTooManyCollisions();	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:936-_needRehash = true;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:982-int hash = q1 ^ _seed;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:988-hash += (hash >>> 16); // to xor hi- and low- 16-bits	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:989-hash ^= (hash << 3); // shuffle back a bit	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:990-hash += (hash >>> 12); // and bit more	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:991-return hash;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1183-if (_hashSize <= 1024) { // would have spill-over area of 128 entries	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:1184-return;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:249-{	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:250-_parent = parent;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:251-_seed = seed;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:252-_intern = intern;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:253-_failOnDoS = failOnDoS;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:254-_tableInfo = null; // not used by child tables	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:257-_count = state.count;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:258-_hashSize = state.size;	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:259-_secondaryStart = _hashSize << 2; // right after primary area	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:260-_tertiaryStart = _secondaryStart + (_secondaryStart >> 1); // right after secondary	0
com.fasterxml.jackson.core.sym.ByteQuadsCanonicalizer:261-_tertiaryShift = state.tertiaryShift;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:111-super(ctxt, features);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:77-protected boolean _tokenIncomplete = false;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:112-_reader = r;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:113-_inputBuffer = inputBuffer;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:114-_inputPtr = start;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:115-_inputEnd = end;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:116-_objectCodec = codec;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:117-_symbols = st;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:118-_hashSeed = st.hashSeed();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:119-_bufferRecyclable = bufferRecyclable;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:120-}	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:24-protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:580-if (_currToken == JsonToken.FIELD_NAME) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:581-return _nextAfterName();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:585-_numTypesValid = NR_UNKNOWN;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:586-if (_tokenIncomplete) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:589-int i = _skipWSOrEnd();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:590-if (i < 0) { // end-of-input	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:598-_binaryValue = null;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:601-if (i == INT_RBRACKET) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:609-if (i == INT_RCURLY) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:619-if (_parsingContext.expectComma()) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:622-_updateLocation();	1
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:627-boolean inObject = _parsingContext.inObject();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:628-if (inObject) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:630-String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);	1
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:631-_parsingContext.setCurrentName(name);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:632-_currToken = JsonToken.FIELD_NAME;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:633-i = _skipColon();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:640-switch (i) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:642-_tokenIncomplete = true;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:643-t = JsonToken.VALUE_STRING;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:644-break;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:652-if (!inObject) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:653-_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:655-t = JsonToken.START_OBJECT;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:656-break;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:699-if (inObject) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:700-_nextToken = t;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:701-return _currToken;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:703-_currToken = t;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:704-return t;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:709-_nameCopied = false; // need to invalidate if it was copied	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:710-JsonToken t = _nextToken;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:711-_nextToken = null;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:716-if (t == JsonToken.START_ARRAY) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:718-} else if (t == JsonToken.START_OBJECT) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:721-return (_currToken = t);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1593-int ptr = _inputPtr;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1594-int hash = _hashSeed;	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:120-super.enable(f);	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:121-if (f == Feature.QUOTE_FIELD_NAMES) {	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:122-_cfgUnqNames = false;	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:124-return this;	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:103-super(features, codec);	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:53-protected int[] _outputEscapes = sOutputEscapes;	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:84-protected SerializableString _rootValueSeparator	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:104-_ioContext = ctxt;	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:105-if (Feature.ESCAPE_NON_ASCII.enabledIn(features)) {	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:109-_cfgUnqNames = !Feature.QUOTE_FIELD_NAMES.enabledIn(features);	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:110-}	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:31-protected final static int[] sOutputEscapes = CharTypes.get7BitOutputEscapes();	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:107-_maximumNonEscapedChar = 127;	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:130-super._checkStdFeatureChanges(newFeatureFlags, changedFeatures);	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:131-_cfgUnqNames = !Feature.QUOTE_FIELD_NAMES.enabledIn(newFeatureFlags);	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:132-}	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:136-_maximumNonEscapedChar = (charCode < 0) ? 0 : charCode;	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:137-return this;	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:142-return _maximumNonEscapedChar;	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:148-_characterEscapes = esc;	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:149-if (esc == null) { // revert to standard escapes	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:150-_outputEscapes = sOutputEscapes;	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:152-_outputEscapes = esc.getEscapeCodesForAscii();	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:154-return this;	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:163-return _characterEscapes;	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:168-_rootValueSeparator = sep;	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:169-return this;	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:180-return VersionUtil.versionFor(getClass());	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:194-writeFieldName(fieldName);	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:195-writeString(value);	0
com.fasterxml.jackson.core.json.JsonGeneratorImpl:196-}	0
com.fasterxml.jackson.core.io.IOContext:102-{	0
com.fasterxml.jackson.core.io.IOContext:103-_bufferRecycler = br;	0
com.fasterxml.jackson.core.io.IOContext:104-_sourceRef = sourceRef;	0
com.fasterxml.jackson.core.io.IOContext:105-_managedResource = managedResource;	0
com.fasterxml.jackson.core.io.IOContext:106-}	0
com.fasterxml.jackson.core.io.IOContext:146-_verifyAlloc(_readIOBuffer);	0
com.fasterxml.jackson.core.io.IOContext:147-return (_readIOBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_READ_IO_BUFFER));	0
com.fasterxml.jackson.core.io.IOContext:207-if (buf != null) {	0
com.fasterxml.jackson.core.io.IOContext:211-_verifyRelease(buf, _readIOBuffer);	0
com.fasterxml.jackson.core.io.IOContext:269-if (buffer != null) { throw new IllegalStateException("Trying to call same allocXxx() method second time"); }	0
com.fasterxml.jackson.core.io.IOContext:270-}	0
com.fasterxml.jackson.core.io.IOContext:274-if ((toRelease != src) && (toRelease.length <= src.length)) { throw wrongBuf(); }	1
com.fasterxml.jackson.core.io.IOContext:284-return new IllegalArgumentException("Trying to release buffer not owned by the context");	1
com.fasterxml.jackson.core.io.IOContext:109-_encoding = enc;	0
com.fasterxml.jackson.core.io.IOContext:110-}	0
com.fasterxml.jackson.core.io.IOContext:116-_encoding = enc;	0
com.fasterxml.jackson.core.io.IOContext:117-return this;	0
com.fasterxml.jackson.core.io.IOContext:126-public Object getSourceReference() { return _sourceRef; }	0
com.fasterxml.jackson.core.io.IOContext:127-public JsonEncoding getEncoding() { return _encoding; }	0
com.fasterxml.jackson.core.io.IOContext:128-public boolean isResourceManaged() { return _managedResource; }	0
com.fasterxml.jackson.core.io.IOContext:137-return new TextBuffer(_bufferRecycler);	0
com.fasterxml.jackson.core.io.IOContext:154-_verifyAlloc(_readIOBuffer);	0
com.fasterxml.jackson.core.io.IOContext:155-return (_readIOBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_READ_IO_BUFFER, minSize));	0
com.fasterxml.jackson.core.io.IOContext:159-_verifyAlloc(_writeEncodingBuffer);	0
com.fasterxml.jackson.core.io.IOContext:160-return (_writeEncodingBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_WRITE_ENCODING_BUFFER));	0
com.fasterxml.jackson.core.io.IOContext:167-_verifyAlloc(_writeEncodingBuffer);	0
com.fasterxml.jackson.core.io.IOContext:168-return (_writeEncodingBuffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_WRITE_ENCODING_BUFFER, minSize));	0
com.fasterxml.jackson.core.io.IOContext:175-_verifyAlloc(_base64Buffer);	0
com.fasterxml.jackson.core.io.IOContext:176-return (_base64Buffer = _bufferRecycler.allocByteBuffer(BufferRecycler.BYTE_BASE64_CODEC_BUFFER));	0
com.fasterxml.jackson.core.io.IOContext:180-_verifyAlloc(_tokenCBuffer);	0
com.fasterxml.jackson.core.io.IOContext:181-return (_tokenCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_TOKEN_BUFFER));	0
com.fasterxml.jackson.core.io.IOContext:188-_verifyAlloc(_tokenCBuffer);	0
com.fasterxml.jackson.core.io.IOContext:189-return (_tokenCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_TOKEN_BUFFER, minSize));	0
com.fasterxml.jackson.core.io.IOContext:193-_verifyAlloc(_concatCBuffer);	0
com.fasterxml.jackson.core.io.IOContext:194-return (_concatCBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_CONCAT_BUFFER));	0
com.fasterxml.jackson.core.io.IOContext:198-_verifyAlloc(_nameCopyBuffer);	0
com.fasterxml.jackson.core.io.IOContext:199-return (_nameCopyBuffer = _bufferRecycler.allocCharBuffer(BufferRecycler.CHAR_NAME_COPY_BUFFER, minSize));	0
com.fasterxml.jackson.core.io.IOContext:212-_readIOBuffer = null;	0
com.fasterxml.jackson.core.io.IOContext:213-_bufferRecycler.releaseByteBuffer(BufferRecycler.BYTE_READ_IO_BUFFER, buf);	0
com.fasterxml.jackson.core.io.IOContext:215-}	0
com.fasterxml.jackson.core.io.IOContext:218-if (buf != null) {	0
com.fasterxml.jackson.core.io.IOContext:222-_verifyRelease(buf, _writeEncodingBuffer);	0
com.fasterxml.jackson.core.io.IOContext:223-_writeEncodingBuffer = null;	0
com.fasterxml.jackson.core.io.IOContext:224-_bufferRecycler.releaseByteBuffer(BufferRecycler.BYTE_WRITE_ENCODING_BUFFER, buf);	0
com.fasterxml.jackson.core.io.IOContext:226-}	0
com.fasterxml.jackson.core.io.IOContext:229-if (buf != null) { // sanity checks, release once-and-only-once, must be one owned	0
com.fasterxml.jackson.core.io.IOContext:230-_verifyRelease(buf, _base64Buffer);	0
com.fasterxml.jackson.core.io.IOContext:231-_base64Buffer = null;	0
com.fasterxml.jackson.core.io.IOContext:232-_bufferRecycler.releaseByteBuffer(BufferRecycler.BYTE_BASE64_CODEC_BUFFER, buf);	0
com.fasterxml.jackson.core.io.IOContext:234-}	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:447-return (_currToken = t);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:453-f = _itemFilter;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:454-if (f == TokenFilter.INCLUDE_ALL) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:458-if (f == null) { // does this occur?	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:463-f = _headContext.checkValue(f);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:464-if (f == null) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:468-if (f != TokenFilter.INCLUDE_ALL) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:469-f = f.filterStartArray();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:471-_itemFilter = f;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:472-if (f == TokenFilter.INCLUDE_ALL) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:476-_headContext = _headContext.createChildArrayContext(f, false);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:478-if (_includePath) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:488-f = _itemFilter;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:489-if (f == TokenFilter.INCLUDE_ALL) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:493-if (f == null) { // does this occur?	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:498-f = _headContext.checkValue(f);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:499-if (f == null) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:503-if (f != TokenFilter.INCLUDE_ALL) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:504-f = f.filterStartObject();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:506-_itemFilter = f;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:507-if (f == TokenFilter.INCLUDE_ALL) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:511-_headContext = _headContext.createChildObjectContext(f, false);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:512-if (_includePath) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:535-continue main_loop;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:558-if (_includePath) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:572-continue main_loop;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:577-return (_currToken = t);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:589-}	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:575-f = _itemFilter;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:576-if (f == TokenFilter.INCLUDE_ALL) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:579-if (f != null) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:580-f = _headContext.checkValue(f);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:581-if ((f == TokenFilter.INCLUDE_ALL)	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:524-boolean returnEnd = _headContext.isStartHandled();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:525-f = _headContext.getFilter();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:526-if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:527-f.filterFinishArray();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:529-_headContext = _headContext.getParent();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:530-_itemFilter = _headContext.getFilter();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:531-if (returnEnd) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:432-return _nextToken2();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:445-JsonToken t = delegate.nextToken();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:446-if (t == null) { // is this even legal?	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:451-switch (t.id()) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:539-final String name = delegate.getCurrentName();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:540-f = _headContext.setFieldName(name);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:541-if (f == TokenFilter.INCLUDE_ALL) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:545-if (f == null) { // filter out the value	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:550-f = f.includeProperty(name);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:551-if (f == null) { // filter out the value	0
com.fasterxml.jackson.core.util.JsonParserSequence:44-super(parsers[0]);	0
com.fasterxml.jackson.core.util.JsonParserSequence:45-_parsers = parsers;	1
com.fasterxml.jackson.core.util.JsonParserSequence:46-_nextParser = 1;	0
com.fasterxml.jackson.core.util.JsonParserSequence:47-}	0
com.fasterxml.jackson.core.util.JsonParserSequence:60-if (!(first instanceof JsonParserSequence || second instanceof JsonParserSequence)) {	0
com.fasterxml.jackson.core.util.JsonParserSequence:62-return new JsonParserSequence(new JsonParser[] { first, second });	0
com.fasterxml.jackson.core.util.JsonParserSequence:106-JsonToken t = delegate.nextToken();	0
com.fasterxml.jackson.core.util.JsonParserSequence:107-if (t != null) return t;	0
com.fasterxml.jackson.core.util.JsonParserSequence:108-while (switchToNext()) {	0
com.fasterxml.jackson.core.util.JsonParserSequence:109-t = delegate.nextToken();	0
com.fasterxml.jackson.core.util.JsonParserSequence:110-if (t != null) return t;	0
com.fasterxml.jackson.core.util.JsonParserSequence:146-if (_nextParser >= _parsers.length) {	0
com.fasterxml.jackson.core.util.JsonParserSequence:149-delegate = _parsers[_nextParser++];	0
com.fasterxml.jackson.core.util.JsonParserSequence:150-return true;	0
com.fasterxml.jackson.core.util.JsonParserSequence:64-ArrayList<JsonParser> p = new ArrayList<JsonParser>();	0
com.fasterxml.jackson.core.util.JsonParserSequence:65-if (first instanceof JsonParserSequence) {	0
com.fasterxml.jackson.core.util.JsonParserSequence:66-((JsonParserSequence) first).addFlattenedActiveParsers(p);	0
com.fasterxml.jackson.core.util.JsonParserSequence:68-p.add(first);	0
com.fasterxml.jackson.core.util.JsonParserSequence:70-if (second instanceof JsonParserSequence) {	0
com.fasterxml.jackson.core.util.JsonParserSequence:71-((JsonParserSequence) second).addFlattenedActiveParsers(p);	0
com.fasterxml.jackson.core.util.JsonParserSequence:73-p.add(second);	0
com.fasterxml.jackson.core.util.JsonParserSequence:75-return new JsonParserSequence(p.toArray(new JsonParser[p.size()]));	0
com.fasterxml.jackson.core.util.JsonParserSequence:81-for (int i = _nextParser-1, len = _parsers.length; i < len; ++i) {	0
com.fasterxml.jackson.core.util.JsonParserSequence:82-JsonParser p = _parsers[i];	0
com.fasterxml.jackson.core.util.JsonParserSequence:83-if (p instanceof JsonParserSequence) {	0
com.fasterxml.jackson.core.util.JsonParserSequence:84-((JsonParserSequence) p).addFlattenedActiveParsers(result);	0
com.fasterxml.jackson.core.util.JsonParserSequence:86-result.add(p);	0
com.fasterxml.jackson.core.util.JsonParserSequence:89-}	0
com.fasterxml.jackson.core.util.JsonParserSequence:100-do { delegate.close(); } while (switchToNext());	0
com.fasterxml.jackson.core.util.JsonParserSequence:101-}	0
com.fasterxml.jackson.core.util.JsonParserSequence:112-return null;	0
com.fasterxml.jackson.core.util.JsonParserSequence:127-return _parsers.length;	0
com.fasterxml.jackson.core.util.JsonParserSequence:147-return false;	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:525-final char[] buf = _charBuffer;	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:533-while (len > 0) {	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:534-int len2 = Math.min(buf.length, len);	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:535-text.getChars(offset, offset+len2, buf, 0);	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:536-writeRaw(buf, 0, len2);	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:1887-_reportError("Split surrogate on writeRaw() input (last character)");	1
com.fasterxml.jackson.core.json.UTF8JsonGenerator:103-super(ctxt, features, codec);	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:104-_outputStream = out;	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:105-_bufferRecyclable = true;	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:106-_outputBuffer = ctxt.allocWriteEncodingBuffer();	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:107-_outputEnd = _outputBuffer.length;	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:113-_outputMaxContiguous = _outputEnd >> 3;	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:114-_charBuffer = ctxt.allocConcatBuffer();	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:115-_charBufferLength = _charBuffer.length;	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:118-if (isEnabled(Feature.ESCAPE_NON_ASCII)) {	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:121-}	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:30-private final static byte[] HEX_CHARS = CharTypes.copyHexBytes();	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:32-private final static byte[] NULL_BYTES = { 'n', 'u', 'l', 'l' };	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:33-private final static byte[] TRUE_BYTES = { 't', 'r', 'u', 'e' };	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:34-private final static byte[] FALSE_BYTES = { 'f', 'a', 'l', 's', 'e' };	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:569-int len3 = len+len+len;	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:570-if ((_outputTail + len3) > _outputEnd) {	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:572-if (_outputEnd < len3) { // wouldn't be enough...	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:573-_writeSegmentedRaw(cbuf, offset, len);	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:629-final int end = _outputEnd;	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:630-final byte[] bbuf = _outputBuffer;	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:631-final int inputEnd = offset + len;	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:634-while (offset < inputEnd) {	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:637-int ch = (int) cbuf[offset];	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:638-if (ch >= 0x80) {	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:639-break inner_loop;	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:642-if (_outputTail >= end) {	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:645-bbuf[_outputTail++] = (byte) ch;	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:646-if (++offset >= inputEnd) {	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:649-}	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:650-if ((_outputTail + 3) >= _outputEnd) {	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:653-char ch = cbuf[offset++];	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:654-if (ch < 0x800) { // 2-byte?	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:658-offset = _outputRawMultiByteChar(ch, cbuf, offset, inputEnd);	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:660-}	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:926-int status = _writeContext.writeValue();	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:927-if (status == JsonWriteContext.STATUS_EXPECT_NAME) {	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:930-if (_cfgPrettyPrinter == null) {	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:932-switch (status) {	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:949-return;	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:1883-if (ch >= SURR1_FIRST) {	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:1884-if (ch <= SURR2_LAST) { // yes, outside of BMP	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:1886-if (inputOffset >= inputEnd || cbuf == null) { // nope... have to note down	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:1889-_outputSurrogates(ch, cbuf[inputOffset]);	0
com.fasterxml.jackson.core.json.UTF8JsonGenerator:1890-return inputOffset+1;	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:418-writeRawLong(text);	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:476-int room = _outputEnd - _outputTail;	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:478-text.getChars(0, room, _outputBuffer, _outputTail);	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:479-_outputTail += room;	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:480-_flushBuffer();	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:481-int offset = room;	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:482-int len = text.length() - room;	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:484-while (len > _outputEnd) {	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:485-int amount = _outputEnd;	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:486-text.getChars(offset, offset+amount, _outputBuffer, 0);	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:487-_outputHead = 0;	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:488-_outputTail = amount;	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:489-_flushBuffer();	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:490-offset += amount;	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:491-len -= amount;	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:492-}	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:494-text.getChars(offset, offset+len, _outputBuffer, 0);	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:495-_outputHead = 0;	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:496-_outputTail = len;	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:497-}	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:200-_verifyValueWrite("start an array");	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:201-_writeContext = _writeContext.createChildArrayContext();	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:202-if (_cfgPrettyPrinter != null) {	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:205-if (_outputTail >= _outputEnd) {	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:208-_outputBuffer[_outputTail++] = '[';	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:210-}	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:215-if (!_writeContext.inArray()) {	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:218-if (_cfgPrettyPrinter != null) {	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:221-if (_outputTail >= _outputEnd) {	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:224-_outputBuffer[_outputTail++] = ']';	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:226-_writeContext = _writeContext.clearAndGetParent();	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:227-}	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:690-writeRaw(value.toPlainString());	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:771-c = ',';	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:772-break;	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:683-_verifyValueWrite(WRITE_NUMBER);	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:684-if (value == null) {	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:686-} elseif (_cfgNumbersAsStrings) {	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:689-} else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:694-}	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:406-int len = text.length();	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:407-int room = _outputEnd - _outputTail;	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:409-if (room == 0) {	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:414-if (room >= len) {	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:420-}	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:785-if (_outputTail >= _outputEnd) {	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:788-_outputBuffer[_outputTail] = c;	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:789-++_outputTail;	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:790-}	0
com.fasterxml.jackson.core.json.WriterBasedJsonGenerator:759-if (_cfgPrettyPrinter != null) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:134-super(ctxt, features);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:135-_reader = r;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:136-_inputBuffer = ctxt.allocTokenBuffer();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:137-_inputPtr = 0;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:138-_inputEnd = 0;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:139-_objectCodec = codec;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:140-_symbols = st;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:141-_hashSeed = st.hashSeed();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:142-_bufferRecyclable = true;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:143-}	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:180-int count = _reader.read(_inputBuffer, 0, _inputBuffer.length);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:181-if (count > 0) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:182-_inputPtr = 0;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:183-_inputEnd = count;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:184-return true;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1266-return _parseNumber2(neg, startPtr);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1240-_inputPtr = ptr;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1241-return _parseFloat(ch, startPtr, ptr, false, intLen);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1258-final int inputLen = _inputEnd;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1259-int fractLen = 0;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1262-if (ch == '.') { // yes, fraction	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1265-if (ptr >= inputLen) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1268-ch = (int) _inputBuffer[ptr++];	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1269-if (ch < INT_0 || ch > INT_9) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1272-++fractLen;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1418-outBuf[outPtr++] = c;	1
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:2259-if (!loadMore()) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:169-final int bufSize = _inputEnd;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:171-_currInputProcessed += bufSize;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:172-_currInputRowStart -= bufSize;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:177-_nameStartOffset -= bufSize;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:179-if (_reader != null) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1376-_inputPtr = neg ? (startPtr+1) : startPtr;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1377-char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1378-int outPtr = 0;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1381-if (neg) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1386-int intLen = 0;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1387-char c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar("No digit following minus sign");	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1388-if (c == '0') {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1391-boolean eof = false;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1395-while (c >= '0' && c <= '9') {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1396-++intLen;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1397-if (outPtr >= outBuf.length) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1401-outBuf[outPtr++] = c;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1402-if (_inputPtr >= _inputEnd && !loadMore()) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1408-c = _inputBuffer[_inputPtr++];	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1411-if (intLen == 0) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1415-int fractLen = 0;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1417-if (c == '.') { // yes, fraction	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1237-++intLen;	0
com.fasterxml.jackson.core.JsonGenerator:1330-throw new JsonGenerationException("No native support for writing embedded objects",	1
com.fasterxml.jackson.core.JsonGenerator:267-protected JsonGenerator() { }	0
com.fasterxml.jackson.core.JsonGenerator:320-if (state) enable(f); else disable(f);	0
com.fasterxml.jackson.core.JsonGenerator:321-return this;	0
com.fasterxml.jackson.core.JsonGenerator:371-int oldState = getFeatureMask();	0
com.fasterxml.jackson.core.JsonGenerator:372-int newState = (oldState & ~mask) | (values & mask);	0
com.fasterxml.jackson.core.JsonGenerator:373-return setFeatureMask(newState);	0
com.fasterxml.jackson.core.JsonGenerator:385-return 0;	0
com.fasterxml.jackson.core.JsonGenerator:402-throw new IllegalArgumentException("No FormatFeatures defined for generator of type "+getClass().getName());	0
com.fasterxml.jackson.core.JsonGenerator:432-throw new UnsupportedOperationException("Generator of type "+getClass().getName()+" does not support schema of type '"	0
com.fasterxml.jackson.core.JsonGenerator:442-public FormatSchema getSchema() { return null; }	0
com.fasterxml.jackson.core.JsonGenerator:462-_cfgPrettyPrinter = pp;	0
com.fasterxml.jackson.core.JsonGenerator:463-return this;	0
com.fasterxml.jackson.core.JsonGenerator:473-return _cfgPrettyPrinter;	0
com.fasterxml.jackson.core.JsonGenerator:506-public JsonGenerator setHighestNonEscapedChar(int charCode) { return this; }	0
com.fasterxml.jackson.core.JsonGenerator:520-public int getHighestEscapedChar() { return 0; }	0
com.fasterxml.jackson.core.JsonGenerator:526-public CharacterEscapes getCharacterEscapes() { return null; }	0
com.fasterxml.jackson.core.JsonGenerator:534-public JsonGenerator setCharacterEscapes(CharacterEscapes esc) { return this; }	0
com.fasterxml.jackson.core.JsonGenerator:548-throw new UnsupportedOperationException();	0
com.fasterxml.jackson.core.JsonGenerator:573-return null;	0
com.fasterxml.jackson.core.JsonGenerator:595-return -1;	0
com.fasterxml.jackson.core.JsonGenerator:612-JsonStreamContext ctxt = getOutputContext();	0
com.fasterxml.jackson.core.JsonGenerator:613-return (ctxt == null) ? null : ctxt.getCurrentValue();	0
com.fasterxml.jackson.core.JsonGenerator:625-JsonStreamContext ctxt = getOutputContext();	0
com.fasterxml.jackson.core.JsonGenerator:626-if (ctxt != null) {	0
com.fasterxml.jackson.core.JsonGenerator:627-ctxt.setCurrentValue(v);	0
com.fasterxml.jackson.core.JsonGenerator:629-}	0
com.fasterxml.jackson.core.JsonGenerator:645-public boolean canUseSchema(FormatSchema schema) { return false; }	0
com.fasterxml.jackson.core.JsonGenerator:661-public boolean canWriteObjectId() { return false; }	0
com.fasterxml.jackson.core.JsonGenerator:677-public boolean canWriteTypeId() { return false; }	0
com.fasterxml.jackson.core.JsonGenerator:689-public boolean canWriteBinaryNatively() { return false; }	0
com.fasterxml.jackson.core.JsonGenerator:699-public boolean canOmitFields() { return true; }	0
com.fasterxml.jackson.core.JsonGenerator:713-public boolean canWriteFormattedNumbers() { return false; }	0
com.fasterxml.jackson.core.JsonGenerator:748-writeStartArray();	0
com.fasterxml.jackson.core.JsonGenerator:749-}	0
com.fasterxml.jackson.core.JsonGenerator:788-writeStartObject();	0
com.fasterxml.jackson.core.JsonGenerator:789-setCurrentValue(forValue);	0
com.fasterxml.jackson.core.JsonGenerator:790-}	0
com.fasterxml.jackson.core.JsonGenerator:839-writeFieldName(Long.toString(id));	0
com.fasterxml.jackson.core.JsonGenerator:840-}	0
com.fasterxml.jackson.core.JsonGenerator:861-if (array == null) {	0
com.fasterxml.jackson.core.JsonGenerator:862-throw new IllegalArgumentException("null array");	0
com.fasterxml.jackson.core.JsonGenerator:864-_verifyOffsets(array.length, offset, length);	0
com.fasterxml.jackson.core.JsonGenerator:865-writeStartArray();	0
com.fasterxml.jackson.core.JsonGenerator:866-for (int i = offset, end = offset+length; i < end; ++i) {	0
com.fasterxml.jackson.core.JsonGenerator:867-writeNumber(array[i]);	0
com.fasterxml.jackson.core.JsonGenerator:869-writeEndArray();	0
com.fasterxml.jackson.core.JsonGenerator:870-}	0
com.fasterxml.jackson.core.JsonGenerator:885-if (array == null) {	0
com.fasterxml.jackson.core.JsonGenerator:886-throw new IllegalArgumentException("null array");	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:117-super(p);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:118-rootFilter = f;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:120-_itemFilter = f;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:121-_headContext = TokenFilterContext.createRootContext(f);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:122-_includePath = includePath;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:123-_allowMultipleMatches = allowMultipleMatches;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:124-}	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:236-if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:238-if (_currToken.isStructEnd()) {	1
com.fasterxml.jackson.core.filter.FilteringParserDelegate:239-if (_headContext.isStartHandled()) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:240-return (_currToken = null);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:242-} else if (_currToken.isScalarValue()) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:245-if (!_headContext.isStartHandled() && (_itemFilter == TokenFilter.INCLUDE_ALL)) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:251-TokenFilterContext ctxt = _exposedContext;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:253-if (ctxt != null) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:255-JsonToken t = ctxt.nextTokenToRead();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:256-if (t != null) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:257-_currToken = t;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:258-return t;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:261-if (ctxt == _headContext) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:262-_exposedContext = null;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:263-if (ctxt.inArray()) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:283-ctxt = _headContext.findChildOf(ctxt);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:284-_exposedContext = ctxt;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:285-if (ctxt == null) { // should never occur	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:288-}	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:292-JsonToken t = delegate.nextToken();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:293-if (t == null) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:302-switch (t.id()) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:340-f = _itemFilter;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:341-if (f == TokenFilter.INCLUDE_ALL) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:345-if (f == null) { // does this occur?	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:350-f = _headContext.checkValue(f);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:351-if (f == null) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:355-if (f != TokenFilter.INCLUDE_ALL) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:356-f = f.filterStartObject();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:358-_itemFilter = f;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:359-if (f == TokenFilter.INCLUDE_ALL) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:363-_headContext = _headContext.createChildObjectContext(f, false);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:365-if (_includePath) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:366-t = _nextTokenWithBuffering(_headContext);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:367-if (t != null) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:394-final String name = delegate.getCurrentName();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:396-f = _headContext.setFieldName(name);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:397-if (f == TokenFilter.INCLUDE_ALL) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:409-if (f == null) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:414-f = f.includeProperty(name);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:415-if (f == null) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:420-_itemFilter = f;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:421-if (f == TokenFilter.INCLUDE_ALL) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:149-@Override public JsonToken currentToken() { return _currToken; }	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:139-return _matchCount;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:853-public int getIntValue() throws IOException { return delegate.getIntValue(); }	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:859-public NumberType getNumberType() throws IOException { return delegate.getNumberType(); }	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:117-super(p);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:118-rootFilter = f;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:120-_itemFilter = f;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:121-_headContext = TokenFilterContext.createRootContext(f);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:122-_includePath = includePath;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:123-_allowMultipleMatches = allowMultipleMatches;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:124-}	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:237-if (!_allowMultipleMatches && (_currToken != null) && (_exposedContext == null)) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:246-TokenFilterContext ctxt = _exposedContext;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:248-if (ctxt != null) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:287-JsonToken t = delegate.nextToken();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:288-if (t == null) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:297-switch (t.id()) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:335-f = _itemFilter;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:336-if (f == TokenFilter.INCLUDE_ALL) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:340-if (f == null) { // does this occur?	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:345-f = _headContext.checkValue(f);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:346-if (f == null) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:350-if (f != TokenFilter.INCLUDE_ALL) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:351-f = f.filterStartObject();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:353-_itemFilter = f;	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:354-if (f == TokenFilter.INCLUDE_ALL) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:358-_headContext = _headContext.createChildObjectContext(f, false);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:360-if (_includePath) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:374-boolean returnEnd = _headContext.isStartHandled();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:375-f = _headContext.getFilter();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:376-if ((f != null) && (f != TokenFilter.INCLUDE_ALL)) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:377-f.filterFinishArray();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:379-_headContext = _headContext.getParent();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:380-_itemFilter = _headContext.getFilter();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:381-if (returnEnd) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:382-return (_currToken = t);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:448-return _nextToken2();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:461-JsonToken t = delegate.nextToken();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:462-if (t == null) { // is this even legal?	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:468-switch (t.id()) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:186-JsonStreamContext ctxt = _filterContext();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:187-if (_currToken == JsonToken.START_OBJECT || _currToken == JsonToken.START_ARRAY) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:191-return ctxt.getCurrentName();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:899-if (_exposedContext != null) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:389-final String name = delegate.getCurrentName();	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:391-f = _headContext.setFieldName(name);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:392-if (f == TokenFilter.INCLUDE_ALL) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:404-if (f == null) {	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:409-f = f.includeProperty(name);	0
com.fasterxml.jackson.core.filter.FilteringParserDelegate:410-if (f == null) {	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:255-return new DefaultPrettyPrinter(this);	1
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:133-this(base, base._rootSeparator);	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:134-}	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:138-{	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:52-protected Indenter _arrayIndenter = FixedSpaceIndenter.instance;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:60-protected Indenter _objectIndenter = DefaultIndenter.SYSTEM_LINEFEED_INSTANCE;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:74-protected boolean _spacesInObjectEntries = true;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:139-_arrayIndenter = base._arrayIndenter;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:140-_objectIndenter = base._objectIndenter;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:141-_spacesInObjectEntries = base._spacesInObjectEntries;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:142-_nesting = base._nesting;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:144-_separators = base._separators;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:145-_objectFieldValueSeparatorWithSpaces = base._objectFieldValueSeparatorWithSpaces;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:147-_rootSeparator = rootSeparator;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:148-}	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:101-this(DEFAULT_ROOT_VALUE_SEPARATOR);	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:102-}	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:127-public DefaultPrettyPrinter(SerializableString rootSeparator) {	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:52-protected Indenter _arrayIndenter = FixedSpaceIndenter.instance;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:60-protected Indenter _objectIndenter = DefaultIndenter.SYSTEM_LINEFEED_INSTANCE;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:74-protected boolean _spacesInObjectEntries = true;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:128-_rootSeparator = rootSeparator;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:129-withSeparators(DEFAULT_SEPARATORS);	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:130-}	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:28-public final static SerializedString DEFAULT_ROOT_VALUE_SEPARATOR = new SerializedString(" ");	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:242-_separators = separators;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:243-_objectFieldValueSeparatorWithSpaces = " " + separators.getObjectFieldValueSeparator() + " ";	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:244-return this;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:116-this((rootSeparator == null) ? null : new SerializedString(rootSeparator));	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:117-}	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:152-if (_rootSeparator == rootSeparator ||	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:154-return this;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:156-return new DefaultPrettyPrinter(this, rootSeparator);	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:163-return withRootSeparator((rootSeparator == null) ? null : new SerializedString(rootSeparator));	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:167-_arrayIndenter = (i == null) ? NopIndenter.instance : i;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:168-}	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:171-_objectIndenter = (i == null) ? NopIndenter.instance : i;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:172-}	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:178-if (i == null) {	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:179-i = NopIndenter.instance;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:181-if (_arrayIndenter == i) {	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:182-return this;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:184-DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:185-pp._arrayIndenter = i;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:186-return pp;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:193-if (i == null) {	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:194-i = NopIndenter.instance;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:196-if (_objectIndenter == i) {	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:197-return this;	0
com.fasterxml.jackson.core.util.DefaultPrettyPrinter:199-DefaultPrettyPrinter pp = new DefaultPrettyPrinter(this);	0
com.fasterxml.jackson.core.base.ParserMinimalBase:598-int rawLen = rawNum.length();	0
com.fasterxml.jackson.core.base.ParserMinimalBase:599-if (rawLen < 1000) {	0
com.fasterxml.jackson.core.base.ParserBase:1155-if (JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION.enabledIn(_features)) {	0
com.fasterxml.jackson.core.base.ParserBase:1156-return _ioContext.getSourceReference();	0
com.fasterxml.jackson.core.base.ParserMinimalBase:704-throw _constructError(msg);	0
com.fasterxml.jackson.core.base.ParserMinimalBase:600-return rawNum;	0
com.fasterxml.jackson.core.base.ParserMinimalBase:714-throw _constructError(String.format(msg, arg1, arg2));	0
com.fasterxml.jackson.core.base.ParserBase:849-_reportTooLongIntegral(expType, numStr);	0
com.fasterxml.jackson.core.base.ParserBase:869-final String numDesc = _longIntegerDesc(rawNum);	1
com.fasterxml.jackson.core.base.ParserBase:870-_reportError("Numeric value (%s) out of range of %s", numDesc,	0
com.fasterxml.jackson.core.base.ParserBase:753-if (len <= 18) { // definitely fits AND is easy to parse using 2 int parse calls	0
com.fasterxml.jackson.core.base.ParserBase:658-if ((_numTypesValid & NR_LONG) == 0) {	0
com.fasterxml.jackson.core.base.ParserBase:745-int len = _intLength;	0
com.fasterxml.jackson.core.base.ParserBase:747-if (len <= 9) {	0
com.fasterxml.jackson.core.base.ParserBase:885-int result = (int) _numberLong;	0
com.fasterxml.jackson.core.base.ParserBase:886-if (((long) result) != _numberLong) {	0
com.fasterxml.jackson.core.base.ParserBase:887-_reportError("Numeric value ("+getText()+") out of range of int");	1
com.fasterxml.jackson.core.base.ParserBase:659-if (_numTypesValid == NR_UNKNOWN) {	0
com.fasterxml.jackson.core.base.ParserBase:848-if ((expType == NR_INT) || (expType == NR_LONG)) {	0
com.fasterxml.jackson.core.base.ParserMinimalBase:577-reportOverflowLong(getText());	0
com.fasterxml.jackson.core.base.ParserMinimalBase:582-_reportError(String.format("Numeric value (%s) out of range of long (%d - %s)",	1
com.fasterxml.jackson.core.base.ParserMinimalBase:602-if (rawNum.startsWith("-")) {	0
com.fasterxml.jackson.core.base.ParserMinimalBase:605-return String.format("[Integer with %d digits]", rawLen);	0
com.fasterxml.jackson.core.base.ParserBase:583-if (_numTypesValid == NR_UNKNOWN) {	0
com.fasterxml.jackson.core.base.ParserBase:587-if (_currToken == JsonToken.VALUE_NUMBER_INT) {	0
com.fasterxml.jackson.core.base.ParserBase:588-if ((_numTypesValid & NR_INT) != 0) {	0
com.fasterxml.jackson.core.base.ParserBase:591-if ((_numTypesValid & NR_LONG) != 0) {	0
com.fasterxml.jackson.core.base.ParserBase:594-if ((_numTypesValid & NR_BIGINT) != 0) {	0
com.fasterxml.jackson.core.base.ParserBase:595-return _numberBigInt;	0
com.fasterxml.jackson.core.base.ParserBase:744-if (_currToken == JsonToken.VALUE_NUMBER_INT) {	0
com.fasterxml.jackson.core.base.ParserBase:918-} else if ((_numTypesValid & NR_BIGINT) != 0) {	0
com.fasterxml.jackson.core.base.ParserBase:919-if (BI_MIN_LONG.compareTo(_numberBigInt) > 0	0
com.fasterxml.jackson.core.base.ParserBase:921-reportOverflowLong();	0
com.fasterxml.jackson.core.base.ParserBase:648-if ((_numTypesValid & NR_INT) == 0) { // wasn't an int natively?	0
com.fasterxml.jackson.core.base.ParserBase:649-convertNumberToInt(); // let's make it so, if possible	0
com.fasterxml.jackson.core.base.ParserBase:883-if ((_numTypesValid & NR_LONG) != 0) {	0
com.fasterxml.jackson.core.base.ParserMinimalBase:160-protected ParserMinimalBase(int features) { super(features); }	0
com.fasterxml.jackson.core.base.ParserMinimalBase:62-protected final static byte[] NO_BYTES = new byte[0];	0
com.fasterxml.jackson.core.base.ParserMinimalBase:67-protected final static int[] NO_INTS = new int[0];	0
com.fasterxml.jackson.core.base.ParserMinimalBase:97-protected final static BigInteger BI_MIN_INT = BigInteger.valueOf(Integer.MIN_VALUE);	0
com.fasterxml.jackson.core.base.ParserMinimalBase:98-protected final static BigInteger BI_MAX_INT = BigInteger.valueOf(Integer.MAX_VALUE);	0
com.fasterxml.jackson.core.base.ParserMinimalBase:100-protected final static BigInteger BI_MIN_LONG = BigInteger.valueOf(Long.MIN_VALUE);	0
com.fasterxml.jackson.core.base.ParserMinimalBase:101-protected final static BigInteger BI_MAX_LONG = BigInteger.valueOf(Long.MAX_VALUE);	0
com.fasterxml.jackson.core.base.ParserMinimalBase:103-protected final static BigDecimal BD_MIN_LONG = new BigDecimal(BI_MIN_LONG);	0
com.fasterxml.jackson.core.base.ParserMinimalBase:104-protected final static BigDecimal BD_MAX_LONG = new BigDecimal(BI_MAX_LONG);	0
com.fasterxml.jackson.core.base.ParserMinimalBase:106-protected final static BigDecimal BD_MIN_INT = new BigDecimal(BI_MIN_INT);	0
com.fasterxml.jackson.core.base.ParserMinimalBase:107-protected final static BigDecimal BD_MAX_INT = new BigDecimal(BI_MAX_INT);	0
com.fasterxml.jackson.core.base.ParserBase:233-super(features);	0
com.fasterxml.jackson.core.base.ParserBase:78-protected int _currInputRow = 1;	0
com.fasterxml.jackson.core.base.ParserBase:107-protected int _tokenInputRow = 1;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1805-int start = _inputPtr-1;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1806-_inputPtr = ptr;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1807-return _handleOddName2(start, hash, codes);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1950-_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1951-char[] outBuf = _textBuffer.getCurrentSegment();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1952-int outPtr = _textBuffer.getCurrentSegmentSize();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1953-final int maxCode = codes.length;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1956-if (_inputPtr >= _inputEnd) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1957-if (!_loadMore()) { // acceptable for now (will error out later)	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1961-char c = _inputBuffer[_inputPtr];	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1962-int i = (int) c;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1963-if (i <= maxCode) {	1
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:1964-if (codes[i] != 0) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:2371-if (i != INT_SPACE) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:136-super(ctxt, features);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:137-_reader = r;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:138-_inputBuffer = ctxt.allocTokenBuffer();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:139-_inputPtr = 0;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:140-_inputEnd = 0;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:141-_objectCodec = codec;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:142-_symbols = st;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:143-_hashSeed = st.hashSeed();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:144-_bufferRecyclable = true;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:145-}	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:22-protected final static int FEAT_MASK_TRAILING_COMMA = Feature.ALLOW_TRAILING_COMMA.getMask();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:26-protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:232-final int bufSize = _inputEnd;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:234-_currInputProcessed += bufSize;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:235-_currInputRowStart -= bufSize;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:240-_nameStartOffset -= bufSize;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:242-if (_reader != null) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:243-int count = _reader.read(_inputBuffer, 0, _inputBuffer.length);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:244-if (count > 0) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:245-_inputPtr = 0;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:246-_inputEnd = count;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:247-return true;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:647-if (_currToken == JsonToken.FIELD_NAME) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:652-_numTypesValid = NR_UNKNOWN;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:653-if (_tokenIncomplete) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:656-int i = _skipWSOrEnd();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:657-if (i < 0) { // end-of-input	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:664-_binaryValue = null;	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:667-if (i == INT_RBRACKET || i == INT_RCURLY) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:673-if (_parsingContext.expectComma()) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:688-boolean inObject = _parsingContext.inObject();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:689-if (inObject) {	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:691-_updateNameLocation();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:692-String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:697-_updateLocation();	0
com.fasterxml.jackson.core.json.ReaderBasedJsonParser:703-switch (i) {	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:68-super(ctxt, parserFeatures, sym);	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:45-protected byte[] _inputBuffer = NO_BYTES;	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:69-}	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:19-private final static int FEAT_MASK_TRAILING_COMMA = Feature.ALLOW_TRAILING_COMMA.getMask();	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:21-private final static int FEAT_MASK_LEADING_ZEROS = Feature.ALLOW_NUMERIC_LEADING_ZEROS.getMask();	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:23-private final static int FEAT_MASK_ALLOW_MISSING = Feature.ALLOW_MISSING_VALUES.getMask();	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:24-private final static int FEAT_MASK_ALLOW_SINGLE_QUOTES = Feature.ALLOW_SINGLE_QUOTES.getMask();	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:25-private final static int FEAT_MASK_ALLOW_UNQUOTED_NAMES = Feature.ALLOW_UNQUOTED_FIELD_NAMES.getMask();	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:26-private final static int FEAT_MASK_ALLOW_JAVA_COMMENTS = Feature.ALLOW_COMMENTS.getMask();	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:27-private final static int FEAT_MASK_ALLOW_YAML_COMMENTS = Feature.ALLOW_YAML_COMMENTS.getMask();	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:30-private final static int[] _icUTF8 = CharTypes.getInputCodeUtf8();	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:34-protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:79-return this;	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:91-if (_inputPtr < _inputEnd) {	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:94-if (end < start) {	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:98-if (_endOfInput) {	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:102-_currInputProcessed += _origBufferLen;	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:105-_currInputRowStart = start - (_inputEnd - _currInputRowStart);	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:108-_inputBuffer = buf;	1
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:109-_inputPtr = start;	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:110-_inputEnd = end;	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:111-_origBufferLen = end - start;	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:112-}	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:164-if (_inputPtr >= _inputEnd) {	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:180-if (_currToken == JsonToken.NOT_AVAILABLE) {	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:185-_numTypesValid = NR_UNKNOWN;	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:186-_tokenInputTotal = _currInputProcessed + _inputPtr;	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:188-_binaryValue = null;	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:189-int ch = _inputBuffer[_inputPtr++] & 0xFF;	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:191-switch (_majorState) {	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:193-return _startDocument(ch);	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:422-ch &= 0xFF;	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:425-if ((ch == 0xEF) && (_minorState != MINOR_ROOT_BOM)) {	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:430-while (ch <= 0x020) {	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:455-return _startValue(ch);	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:596-if (ch <= 0x0020) {	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:603-_updateTokenLocation();	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:604-if (ch == INT_QUOTE) {	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:607-switch (ch) {	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:637-return _startArrayScope();	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:84-return (_inputPtr >=_inputEnd) && !_endOfInput;	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:92-_reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:95-_reportError("Input end (%d) may not be before start (%d)", end, start);	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:99-_reportError("Already closed, can not feed more input");	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:116-_endOfInput = true;	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:117-}	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:138-int avail = _inputEnd - _inputPtr;	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:139-if (avail > 0) {	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:140-out.write(_inputBuffer, _inputPtr, avail);	0
com.fasterxml.jackson.core.json.async.NonBlockingJsonParser:142-return avail;	0
org.apache.commons.lang3.math.NumberUtils:462-pfxLen += pfx.length();	0
org.apache.commons.lang3.math.NumberUtils:463-break;	0
org.apache.commons.lang3.math.NumberUtils:467-final int hexDigits = str.length() - pfxLen;	1
org.apache.commons.lang3.math.NumberUtils:468-if (hexDigits > 16) { // too many for Long	0
org.apache.commons.lang3.math.NumberUtils:471-if (hexDigits > 8) { // too many for an int	0
org.apache.commons.lang3.math.NumberUtils:474-return createInteger(str);	0
org.apache.commons.lang3.math.NumberUtils:680-if (str == null) {	0
org.apache.commons.lang3.math.NumberUtils:684-return Integer.decode(str);	0
org.apache.commons.lang3.math.NumberUtils:451-if (str == null) {	0
org.apache.commons.lang3.math.NumberUtils:454-if (StringUtils.isBlank(str)) {	0
org.apache.commons.lang3.math.NumberUtils:458-final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};	0
org.apache.commons.lang3.math.NumberUtils:459-int pfxLen = 0;	0
org.apache.commons.lang3.math.NumberUtils:460-for(final String pfx : hex_prefixes) {	0
org.apache.commons.lang3.math.NumberUtils:461-if (str.startsWith(pfx)) {	0
org.apache.commons.lang3.math.NumberUtils:466-if (pfxLen > 0) { // we have a hex number	0
org.apache.commons.lang3.math.NumberUtils:34-public static final Long LONG_ZERO = Long.valueOf(0L);	0
org.apache.commons.lang3.math.NumberUtils:36-public static final Long LONG_ONE = Long.valueOf(1L);	0
org.apache.commons.lang3.math.NumberUtils:38-public static final Long LONG_MINUS_ONE = Long.valueOf(-1L);	0
org.apache.commons.lang3.math.NumberUtils:40-public static final Integer INTEGER_ZERO = Integer.valueOf(0);	0
org.apache.commons.lang3.math.NumberUtils:42-public static final Integer INTEGER_ONE = Integer.valueOf(1);	0
org.apache.commons.lang3.math.NumberUtils:44-public static final Integer INTEGER_MINUS_ONE = Integer.valueOf(-1);	0
org.apache.commons.lang3.math.NumberUtils:46-public static final Short SHORT_ZERO = Short.valueOf((short) 0);	0
org.apache.commons.lang3.math.NumberUtils:48-public static final Short SHORT_ONE = Short.valueOf((short) 1);	0
org.apache.commons.lang3.math.NumberUtils:50-public static final Short SHORT_MINUS_ONE = Short.valueOf((short) -1);	0
org.apache.commons.lang3.math.NumberUtils:52-public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);	0
org.apache.commons.lang3.math.NumberUtils:54-public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);	0
org.apache.commons.lang3.math.NumberUtils:56-public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);	0
org.apache.commons.lang3.math.NumberUtils:58-public static final Double DOUBLE_ZERO = Double.valueOf(0.0d);	0
org.apache.commons.lang3.math.NumberUtils:60-public static final Double DOUBLE_ONE = Double.valueOf(1.0d);	0
org.apache.commons.lang3.math.NumberUtils:62-public static final Double DOUBLE_MINUS_ONE = Double.valueOf(-1.0d);	0
org.apache.commons.lang3.math.NumberUtils:64-public static final Float FLOAT_ZERO = Float.valueOf(0.0f);	0
org.apache.commons.lang3.math.NumberUtils:66-public static final Float FLOAT_ONE = Float.valueOf(1.0f);	0
org.apache.commons.lang3.math.NumberUtils:68-public static final Float FLOAT_MINUS_ONE = Float.valueOf(-1.0f);	0
org.apache.commons.lang3.math.NumberUtils:78-super();	0
org.apache.commons.lang3.math.NumberUtils:79-}	0
org.apache.commons.lang3.math.NumberUtils:100-return toInt(str, 0);	0
org.apache.commons.lang3.math.NumberUtils:121-if(str == null) {	0
org.apache.commons.lang3.math.NumberUtils:122-return defaultValue;	0
org.apache.commons.lang3.math.NumberUtils:125-return Integer.parseInt(str);	0
org.apache.commons.lang3.math.NumberUtils:126-} catch (final NumberFormatException nfe) {	0
org.apache.commons.lang3.math.NumberUtils:127-return defaultValue;	0
org.apache.commons.lang3.math.NumberUtils:149-return toLong(str, 0L);	0
org.apache.commons.lang3.math.NumberUtils:170-if (str == null) {	0
org.apache.commons.lang3.math.NumberUtils:171-return defaultValue;	0
org.apache.commons.lang3.math.NumberUtils:174-return Long.parseLong(str);	0
org.apache.commons.lang3.math.NumberUtils:175-} catch (final NumberFormatException nfe) {	0
org.apache.commons.lang3.math.NumberUtils:176-return defaultValue;	0
org.apache.commons.lang3.math.NumberUtils:199-return toFloat(str, 0.0f);	0
org.apache.commons.lang3.math.NumberUtils:222-if (str == null) {	0
org.apache.commons.lang3.math.NumberUtils:223-return defaultValue;	0
org.apache.commons.lang3.math.NumberUtils:494-dec = str.substring(decPos + 1);	0
org.apache.commons.lang3.math.NumberUtils:573-exp = null;	0
org.apache.commons.lang3.math.NumberUtils:594-if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {	0
org.apache.commons.lang3.math.NumberUtils:595-return f;	0
org.apache.commons.lang3.math.NumberUtils:492-dec = str.substring(decPos + 1, expPos);	0
org.apache.commons.lang3.math.NumberUtils:496-mant = str.substring(0, decPos);	0
org.apache.commons.lang3.math.NumberUtils:497-numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.	0
org.apache.commons.lang3.math.NumberUtils:570-if (expPos > -1 && expPos < str.length() - 1) {	0
org.apache.commons.lang3.math.NumberUtils:571-exp = str.substring(expPos + 1, str.length());	0
org.apache.commons.lang3.math.NumberUtils:575-if (dec == null && exp == null) { // no decimal point and no exponent	0
org.apache.commons.lang3.math.NumberUtils:591-final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);	0
org.apache.commons.lang3.math.NumberUtils:593-final Float f = createFloat(str);	1
org.apache.commons.lang3.math.NumberUtils:488-if (expPos > -1) { // there is an exponent	0
org.apache.commons.lang3.math.NumberUtils:489-if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE	0
org.apache.commons.lang3.math.NumberUtils:509-if (!Character.isDigit(lastChar) && lastChar != '.') {	0
org.apache.commons.lang3.math.NumberUtils:621-if (str == null) {	0
org.apache.commons.lang3.math.NumberUtils:624-for (int i = str.length() - 1; i >= 0; i--) {	0
org.apache.commons.lang3.math.NumberUtils:625-if (str.charAt(i) != '0') {	0
org.apache.commons.lang3.math.NumberUtils:626-return false;	0
org.apache.commons.lang3.math.NumberUtils:643-if (str == null) {	0
org.apache.commons.lang3.math.NumberUtils:646-return Float.valueOf(str);	0
org.apache.commons.lang3.math.NumberUtils:451-if (str == null) {	0
org.apache.commons.lang3.math.NumberUtils:454-if (StringUtils.isBlank(str)) {	0
org.apache.commons.lang3.math.NumberUtils:458-final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};	0
org.apache.commons.lang3.math.NumberUtils:459-int pfxLen = 0;	0
org.apache.commons.lang3.math.NumberUtils:460-for(final String pfx : hex_prefixes) {	0
org.apache.commons.lang3.math.NumberUtils:461-if (str.startsWith(pfx)) {	0
org.apache.commons.lang3.math.NumberUtils:466-if (pfxLen > 0) { // we have a hex number	0
org.apache.commons.lang3.math.NumberUtils:476-final char lastChar = str.charAt(str.length() - 1);	0
org.apache.commons.lang3.math.NumberUtils:480-final int decPos = str.indexOf('.');	0
org.apache.commons.lang3.math.NumberUtils:481-final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present	0
org.apache.commons.lang3.math.NumberUtils:485-int numDecimals = 0; // Check required precision (LANG-693)	0
org.apache.commons.lang3.math.NumberUtils:486-if (decPos > -1) { // there is a decimal point	0
org.apache.commons.lang3.math.NumberUtils:34-public static final Long LONG_ZERO = Long.valueOf(0L);	0
org.apache.commons.lang3.math.NumberUtils:36-public static final Long LONG_ONE = Long.valueOf(1L);	0
org.apache.commons.lang3.math.NumberUtils:38-public static final Long LONG_MINUS_ONE = Long.valueOf(-1L);	0
org.apache.commons.lang3.math.NumberUtils:40-public static final Integer INTEGER_ZERO = Integer.valueOf(0);	0
org.apache.commons.lang3.math.NumberUtils:42-public static final Integer INTEGER_ONE = Integer.valueOf(1);	0
org.apache.commons.lang3.math.NumberUtils:44-public static final Integer INTEGER_MINUS_ONE = Integer.valueOf(-1);	0
org.apache.commons.lang3.math.NumberUtils:46-public static final Short SHORT_ZERO = Short.valueOf((short) 0);	0
org.apache.commons.lang3.math.NumberUtils:48-public static final Short SHORT_ONE = Short.valueOf((short) 1);	0
org.apache.commons.lang3.math.NumberUtils:50-public static final Short SHORT_MINUS_ONE = Short.valueOf((short) -1);	0
org.apache.commons.lang3.math.NumberUtils:52-public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);	0
org.apache.commons.lang3.math.NumberUtils:54-public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);	0
org.apache.commons.lang3.math.NumberUtils:56-public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);	0
org.apache.commons.lang3.math.NumberUtils:58-public static final Double DOUBLE_ZERO = Double.valueOf(0.0d);	0
org.apache.commons.lang3.math.NumberUtils:60-public static final Double DOUBLE_ONE = Double.valueOf(1.0d);	0
org.apache.commons.lang3.math.NumberUtils:62-public static final Double DOUBLE_MINUS_ONE = Double.valueOf(-1.0d);	0
org.apache.commons.lang3.math.NumberUtils:64-public static final Float FLOAT_ZERO = Float.valueOf(0.0f);	0
org.apache.commons.lang3.math.NumberUtils:66-public static final Float FLOAT_ONE = Float.valueOf(1.0f);	0
org.apache.commons.lang3.text.translate.LookupTranslator:83-return 0;	0
org.apache.commons.lang3.text.translate.LookupTranslator:45-public LookupTranslator(final CharSequence[]... lookup) {	0
org.apache.commons.lang3.text.translate.LookupTranslator:46-lookupMap = new HashMap<CharSequence, CharSequence>();	1
org.apache.commons.lang3.text.translate.LookupTranslator:47-int _shortest = Integer.MAX_VALUE;	0
org.apache.commons.lang3.text.translate.LookupTranslator:48-int _longest = 0;	0
org.apache.commons.lang3.text.translate.LookupTranslator:49-if (lookup != null) {	0
org.apache.commons.lang3.text.translate.LookupTranslator:50-for (final CharSequence[] seq : lookup) {	0
org.apache.commons.lang3.text.translate.LookupTranslator:51-this.lookupMap.put(seq[0], seq[1]);	1
org.apache.commons.lang3.text.translate.LookupTranslator:52-final int sz = seq[0].length();	0
org.apache.commons.lang3.text.translate.LookupTranslator:53-if (sz < _shortest) {	0
org.apache.commons.lang3.text.translate.LookupTranslator:54-_shortest = sz;	0
org.apache.commons.lang3.text.translate.LookupTranslator:56-if (sz > _longest) {	0
org.apache.commons.lang3.text.translate.LookupTranslator:57-_longest = sz;	0
org.apache.commons.lang3.text.translate.LookupTranslator:61-shortest = _shortest;	0
org.apache.commons.lang3.text.translate.LookupTranslator:62-longest = _longest;	0
org.apache.commons.lang3.text.translate.LookupTranslator:63-}	0
org.apache.commons.lang3.text.translate.LookupTranslator:70-int max = longest;	0
org.apache.commons.lang3.text.translate.LookupTranslator:71-if (index + longest > input.length()) {	0
org.apache.commons.lang3.text.translate.LookupTranslator:75-for (int i = max; i >= shortest; i--) {	0
org.apache.commons.lang3.text.translate.LookupTranslator:76-final CharSequence subSeq = input.subSequence(index, index + i);	0
org.apache.commons.lang3.text.translate.LookupTranslator:77-final CharSequence result = lookupMap.get(subSeq);	1
org.apache.commons.lang3.text.translate.LookupTranslator:78-if (result != null) {	0
org.apache.commons.lang3.text.translate.LookupTranslator:72-max = input.length() - index;	0
org.apache.commons.lang3.text.translate.LookupTranslator:79-out.write(result.toString());	0
org.apache.commons.lang3.text.translate.LookupTranslator:80-return i;	0
org.apache.commons.lang3.LocaleUtils:99-throw new IllegalArgumentException("Invalid locale format: " + str);	0
org.apache.commons.lang3.LocaleUtils:89-if (str == null) {	0
org.apache.commons.lang3.LocaleUtils:92-final int len = str.length();	0
org.apache.commons.lang3.LocaleUtils:93-if (len < 2) {	0
org.apache.commons.lang3.LocaleUtils:96-final char ch0 = str.charAt(0);	0
org.apache.commons.lang3.LocaleUtils:97-final char ch1 = str.charAt(1);	1
org.apache.commons.lang3.LocaleUtils:98-if (!Character.isLowerCase(ch0) || !Character.isLowerCase(ch1)) {	0
org.apache.commons.lang3.LocaleUtils:42-private static final ConcurrentMap<String, List<Locale>> cLanguagesByCountry =	0
org.apache.commons.lang3.LocaleUtils:46-private static final ConcurrentMap<String, List<Locale>> cCountriesByLanguage =	0
org.apache.commons.lang3.LocaleUtils:193-return SyncAvoid.AVAILABLE_LOCALE_LIST;	0
org.apache.commons.lang3.LocaleUtils:218-return availableLocaleList().contains(locale);	0
org.apache.commons.lang3.LocaleUtils:57-super();	0
org.apache.commons.lang3.LocaleUtils:58-}	0
org.apache.commons.lang3.LocaleUtils:90-return null;	0
org.apache.commons.lang3.LocaleUtils:94-throw new IllegalArgumentException("Invalid locale format: " + str);	0
org.apache.commons.lang3.LocaleUtils:101-if (len == 2) {	0
org.apache.commons.lang3.LocaleUtils:102-return new Locale(str);	0
org.apache.commons.lang3.LocaleUtils:104-if (len < 5) {	0
org.apache.commons.lang3.LocaleUtils:105-throw new IllegalArgumentException("Invalid locale format: " + str);	0
org.apache.commons.lang3.LocaleUtils:107-if (str.charAt(2) != '_') {	0
org.apache.commons.lang3.LocaleUtils:108-throw new IllegalArgumentException("Invalid locale format: " + str);	0
org.apache.commons.lang3.LocaleUtils:110-final char ch3 = str.charAt(3);	0
org.apache.commons.lang3.LocaleUtils:111-if (ch3 == '_') {	0
org.apache.commons.lang3.LocaleUtils:112-return new Locale(str.substring(0, 2), "", str.substring(4));	0
org.apache.commons.lang3.LocaleUtils:114-final char ch4 = str.charAt(4);	0
org.apache.commons.lang3.LocaleUtils:115-if (!Character.isUpperCase(ch3) || !Character.isUpperCase(ch4)) {	0
org.apache.commons.lang3.LocaleUtils:116-throw new IllegalArgumentException("Invalid locale format: " + str);	0
org.apache.commons.lang3.LocaleUtils:118-if (len == 5) {	0
org.apache.commons.lang3.LocaleUtils:119-return new Locale(str.substring(0, 2), str.substring(3, 5));	0
org.apache.commons.lang3.LocaleUtils:121-if (len < 7) {	0
org.apache.commons.lang3.LocaleUtils:122-throw new IllegalArgumentException("Invalid locale format: " + str);	0
org.apache.commons.lang3.LocaleUtils:124-if (str.charAt(5) != '_') {	0
org.apache.commons.lang3.LocaleUtils:125-throw new IllegalArgumentException("Invalid locale format: " + str);	0
org.apache.commons.lang3.LocaleUtils:127-return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));	0
org.apache.commons.lang3.LocaleUtils:144-return localeLookupList(locale, locale);	0
org.apache.commons.lang3.LocaleUtils:166-List<Locale> list = new ArrayList<Locale>(4);	0
org.apache.commons.lang3.LocaleUtils:167-if (locale != null) {	0
org.apache.commons.lang3.LocaleUtils:168-list.add(locale);	0
org.apache.commons.lang3.LocaleUtils:169-if (locale.getVariant().length() > 0) {	0
org.apache.commons.lang3.LocaleUtils:170-list.add(new Locale(locale.getLanguage(), locale.getCountry()));	0
org.apache.commons.lang3.LocaleUtils:172-if (locale.getCountry().length() > 0) {	0
org.apache.commons.lang3.LocaleUtils:173-list.add(new Locale(locale.getLanguage(), ""));	0
org.apache.commons.lang3.LocaleUtils:175-if (list.contains(defaultLocale) == false) {	0
org.apache.commons.lang3.LocaleUtils:176-list.add(defaultLocale);	0
org.apache.commons.lang3.LocaleUtils:179-return Collections.unmodifiableList(list);	0
org.apache.commons.lang3.LocaleUtils:207-return SyncAvoid.AVAILABLE_LOCALE_SET;	0
org.apache.commons.lang3.LocaleUtils:232-if (countryCode == null) {	0
org.apache.commons.lang3.LocaleUtils:233-return Collections.emptyList();	0
org.apache.commons.lang3.LocaleUtils:235-List<Locale> langs = cLanguagesByCountry.get(countryCode);	0
org.apache.commons.lang3.LocaleUtils:236-if (langs == null) {	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:32-public abstract class CharSequenceTranslator {	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:54-if (input == null) {	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:58-StringWriter writer = new StringWriter(input.length() * 2);	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:59-translate(input, writer);	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:76-if (out == null) {	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:79-if (input == null) {	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:82-int pos = 0;	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:83-int len = input.length();	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:84-while (pos < len) {	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:85-int consumed = translate(input, pos, out);	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:86-if (consumed == 0) {	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:94-for (int pt = 0; pt < consumed; pt++) {	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:95-pos += Character.charCount(Character.codePointAt(input, pos));	1
org.apache.commons.lang3.text.translate.CharSequenceTranslator:108-CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1];	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:109-newArray[0] = this;	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:110-System.arraycopy(translators, 0, newArray, 1, translators.length);	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:111-return new AggregateTranslator(newArray);	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:55-return null;	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:60-return writer.toString();	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:61-} catch (IOException ioe) {	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:63-throw new RuntimeException(ioe);	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:77-throw new IllegalArgumentException("The Writer must not be null");	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:80-return;	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:87-char[] c = Character.toChars(Character.codePointAt(input, pos));	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:88-out.write(c);	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:89-pos+= c.length;	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:90-continue;	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:97-}	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:98-}	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:122-return Integer.toHexString(codepoint).toUpperCase(Locale.ENGLISH);	0
org.apache.commons.lang3.time.FastDatePrinter:220-rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));	0
org.apache.commons.lang3.time.FastDatePrinter:221-break;	0
org.apache.commons.lang3.time.FastDatePrinter:250-rule = new TextField(Calendar.AM_PM, AmPmStrings);	0
org.apache.commons.lang3.time.FastDatePrinter:251-break;	0
org.apache.commons.lang3.time.FastDatePrinter:259-if (tokenLen >= 4) {	0
org.apache.commons.lang3.time.FastDatePrinter:262-rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);	0
org.apache.commons.lang3.time.FastDatePrinter:264-break;	0
org.apache.commons.lang3.time.FastDatePrinter:1079-TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);	0
org.apache.commons.lang3.time.FastDatePrinter:1080-String value = cTimeZoneDisplayCache.get(key);	0
org.apache.commons.lang3.time.FastDatePrinter:1081-if (value == null) {	0
org.apache.commons.lang3.time.FastDatePrinter:1083-value = tz.getDisplayName(daylight, style, locale);	0
org.apache.commons.lang3.time.FastDatePrinter:1084-String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);	0
org.apache.commons.lang3.time.FastDatePrinter:1085-if (prior != null) {	0
org.apache.commons.lang3.time.FastDatePrinter:1089-return value;	0
org.apache.commons.lang3.time.FastDatePrinter:226-rule = selectNumberRule(Calendar.MINUTE, tokenLen);	0
org.apache.commons.lang3.time.FastDatePrinter:227-break;	0
org.apache.commons.lang3.time.FastDatePrinter:359-return new UnpaddedNumberField(field);	0
org.apache.commons.lang3.time.FastDatePrinter:415-return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();	0
org.apache.commons.lang3.time.FastDatePrinter:441-return applyRules(calendar, buf);	0
org.apache.commons.lang3.time.FastDatePrinter:453-for (Rule rule : mRules) {	0
org.apache.commons.lang3.time.FastDatePrinter:454-rule.appendTo(buf, calendar);	0
org.apache.commons.lang3.time.FastDatePrinter:456-return buf;	0
org.apache.commons.lang3.time.FastDatePrinter:275-rule = new CharacterLiteral(sub.charAt(0));	0
org.apache.commons.lang3.time.FastDatePrinter:136-protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {	0
org.apache.commons.lang3.time.FastDatePrinter:137-mPattern = pattern;	0
org.apache.commons.lang3.time.FastDatePrinter:138-mTimeZone = timeZone;	0
org.apache.commons.lang3.time.FastDatePrinter:139-mLocale = locale;	0
org.apache.commons.lang3.time.FastDatePrinter:141-init();	0
org.apache.commons.lang3.time.FastDatePrinter:142-}	0
org.apache.commons.lang3.time.FastDatePrinter:1067-private static ConcurrentMap<TimeZoneDisplayKey, String> cTimeZoneDisplayCache =	0
org.apache.commons.lang3.time.FastDatePrinter:148-List<Rule> rulesList = parsePattern();	0
org.apache.commons.lang3.time.FastDatePrinter:149-mRules = rulesList.toArray(new Rule[rulesList.size()]);	0
org.apache.commons.lang3.time.FastDatePrinter:151-int len = 0;	0
org.apache.commons.lang3.time.FastDatePrinter:152-for (int i=mRules.length; --i >= 0; ) {	0
org.apache.commons.lang3.time.FastDatePrinter:153-len += mRules[i].estimateLength();	0
org.apache.commons.lang3.time.FastDatePrinter:156-mMaxLengthEstimate = len;	0
org.apache.commons.lang3.time.FastDatePrinter:157-}	0
org.apache.commons.lang3.time.FastDatePrinter:168-DateFormatSymbols symbols = new DateFormatSymbols(mLocale);	0
org.apache.commons.lang3.time.FastDatePrinter:169-List<Rule> rules = new ArrayList<Rule>();	0
org.apache.commons.lang3.time.FastDatePrinter:171-String[] ERAs = symbols.getEras();	0
org.apache.commons.lang3.time.FastDatePrinter:172-String[] months = symbols.getMonths();	0
org.apache.commons.lang3.time.FastDatePrinter:173-String[] shortMonths = symbols.getShortMonths();	0
org.apache.commons.lang3.time.FastDatePrinter:174-String[] weekdays = symbols.getWeekdays();	0
org.apache.commons.lang3.time.FastDatePrinter:175-String[] shortWeekdays = symbols.getShortWeekdays();	0
org.apache.commons.lang3.time.FastDatePrinter:176-String[] AmPmStrings = symbols.getAmPmStrings();	0
org.apache.commons.lang3.time.FastDatePrinter:178-int length = mPattern.length();	0
org.apache.commons.lang3.time.FastDatePrinter:179-int[] indexRef = new int[1];	0
org.apache.commons.lang3.time.FastDatePrinter:181-for (int i = 0; i < length; i++) {	0
org.apache.commons.lang3.time.FastDatePrinter:182-indexRef[0] = i;	0
org.apache.commons.lang3.time.FastDatePrinter:183-String token = parseToken(mPattern, indexRef);	0
org.apache.commons.lang3.time.FastDateParser:180-return parsePattern;	0
org.apache.commons.lang3.time.FastDateParser:537-if(formatField.length()>2) {	0
org.apache.commons.lang3.time.FastDateParser:538-formatField= formatField.substring(1, formatField.length()-1);	0
org.apache.commons.lang3.time.FastDateParser:260-return date;	0
org.apache.commons.lang3.time.FastDateParser:282-Calendar cal= Calendar.getInstance(timeZone, locale);	0
org.apache.commons.lang3.time.FastDateParser:283-cal.clear();	0
org.apache.commons.lang3.time.FastDateParser:285-for(int i=0; i<strategies.length;) {	0
org.apache.commons.lang3.time.FastDateParser:286-Strategy strategy= strategies[i++];	0
org.apache.commons.lang3.time.FastDateParser:287-strategy.setCalendar(this, cal, matcher.group(i));	0
org.apache.commons.lang3.time.FastDateParser:288-}	0
org.apache.commons.lang3.time.FastDateParser:289-pos.setIndex(offset+matcher.end());	0
org.apache.commons.lang3.time.FastDateParser:290-return cal.getTime();	0
org.apache.commons.lang3.time.FastDateParser:250-Date date= parse(source, new ParsePosition(0));	0
org.apache.commons.lang3.time.FastDateParser:251-if(date==null) {	0
org.apache.commons.lang3.time.FastDateParser:276-int offset= pos.getIndex();	0
org.apache.commons.lang3.time.FastDateParser:277-Matcher matcher= parsePattern.matcher(source.substring(offset));	0
org.apache.commons.lang3.time.FastDateParser:278-if(!matcher.lookingAt()) {	0
org.apache.commons.lang3.time.FastDateParser:145-collector.add(currentStrategy);	0
org.apache.commons.lang3.time.FastDateParser:566-return DAY_OF_MONTH_STRATEGY;	0
org.apache.commons.lang3.time.FastDateParser:304-for(int i= 0; i<value.length(); ++i) {	0
org.apache.commons.lang3.time.FastDateParser:305-char c= value.charAt(i);	0
org.apache.commons.lang3.time.FastDateParser:306-switch(c) {	0
org.apache.commons.lang3.time.FastDateParser:331-regex.append(c);	0
org.apache.commons.lang3.time.FastDateParser:333-return regex;	0
org.apache.commons.lang3.time.FastDateParser:542-return new CopyQuotedStrategy(formatField);	0
org.apache.commons.lang3.time.FastDateParser:104-protected FastDateParser(String pattern, TimeZone timeZone, Locale locale) {	0
org.apache.commons.lang3.time.FastDateParser:105-this.pattern = pattern;	0
org.apache.commons.lang3.time.FastDateParser:106-this.timeZone = timeZone;	0
org.apache.commons.lang3.time.FastDateParser:107-this.locale = locale;	0
org.apache.commons.lang3.time.FastDateParser:108-init();	0
org.apache.commons.lang3.time.FastDateParser:109-}	0
org.apache.commons.lang3.time.FastDateParser:116-thisYear= Calendar.getInstance(timeZone, locale).get(Calendar.YEAR);	0
org.apache.commons.lang3.time.FastDateParser:118-nameValues= new ConcurrentHashMap<Integer, KeyValue[]>();	0
org.apache.commons.lang3.time.FastDateParser:120-StringBuilder regex= new StringBuilder();	0
org.apache.commons.lang3.time.FastDateParser:121-List<Strategy> collector = new ArrayList<Strategy>();	0
org.apache.commons.lang3.time.FastDateParser:123-Matcher patternMatcher= formatPattern.matcher(pattern);	0
org.apache.commons.lang3.time.FastDateParser:124-if(!patternMatcher.lookingAt()) {	0
org.apache.commons.lang3.time.FastDateParser:128-currentFormatField= patternMatcher.group();	0
org.apache.commons.lang3.time.FastDateParser:129-Strategy currentStrategy= getStrategy(currentFormatField);	0
org.apache.commons.lang3.time.FastDateParser:131-patternMatcher.region(patternMatcher.end(), patternMatcher.regionEnd());	0
org.apache.commons.lang3.time.FastDateParser:132-if(!patternMatcher.lookingAt()) {	0
org.apache.commons.lang3.time.FastDateParser:133-nextStrategy = null;	0
org.apache.commons.lang3.time.FastDateParser:134-break;	0
org.apache.commons.lang3.time.FastDateParser:136-String nextFormatField= patternMatcher.group();	0
org.apache.commons.lang3.time.FastDateParser:137-nextStrategy = getStrategy(nextFormatField);	0
org.apache.commons.lang3.time.FastDateParser:138-if(currentStrategy.addRegex(this, regex)) {	0
org.apache.commons.lang3.time.FastDateParser:141-currentFormatField= nextFormatField;	0
org.apache.commons.lang3.time.FastDateParser:142-currentStrategy= nextStrategy;	0
org.apache.commons.lang3.time.FastDateParser:143-}	0
org.apache.commons.lang3.time.FastDateParser:144-if(currentStrategy.addRegex(this, regex)) {	1
org.apache.commons.lang3.time.FastDateParser:180-return parsePattern;	0
org.apache.commons.lang3.time.FastDateParser:395-fieldKeyValues= createKeyValues(symbols.getWeekdays(), symbols.getShortWeekdays());	0
org.apache.commons.lang3.time.FastDateParser:396-break;	0
org.apache.commons.lang3.time.FastDateParser:555-return DAY_OF_WEEK_STRATEGY;	0
org.apache.commons.lang3.time.FastDateParser:379-Integer fieldInt = Integer.valueOf(field);	0
org.apache.commons.lang3.time.FastDateParser:380-KeyValue[] fieldKeyValues= nameValues.get(fieldInt);	0
org.apache.commons.lang3.time.FastDateParser:381-if(fieldKeyValues==null) {	0
org.apache.commons.lang3.time.FastDateParser:382-DateFormatSymbols symbols= DateFormatSymbols.getInstance(locale);	0
org.apache.commons.lang3.time.FastDateParser:383-switch(field) {	0
org.apache.commons.lang3.time.FastDateParser:406-KeyValue[] prior = nameValues.putIfAbsent(fieldInt, fieldKeyValues);	0
org.apache.commons.lang3.time.FastDateParser:407-if(prior!=null) {	0
org.apache.commons.lang3.time.FastDateParser:411-return fieldKeyValues;	0
org.apache.commons.lang3.time.FastDateParser:434-KeyValue[] fieldKeyValues= new KeyValue[count(longValues)+count(shortValues)];	0
org.apache.commons.lang3.time.FastDateParser:435-copy(fieldKeyValues, copy(fieldKeyValues, 0, longValues), shortValues);	0
org.apache.commons.lang3.time.FastDateParser:436-Arrays.sort(fieldKeyValues, IGNORE_CASE_COMPARATOR);	0
org.apache.commons.lang3.time.FastDateParser:437-return fieldKeyValues;	0
org.apache.commons.lang3.time.FastDateParser:446-int count= 0;	0
org.apache.commons.lang3.time.FastDateParser:447-if(values!=null) {	0
org.apache.commons.lang3.time.FastDateParser:448-for(String value : values) {	0
org.apache.commons.lang3.time.FastDateParser:449-if(value.length()>0) {	0
org.apache.commons.lang3.time.FastDateParser:450-++count;	0
org.apache.commons.lang3.time.FastDateParser:454-return count;	0
org.apache.commons.lang3.time.FastDateParser:465-if(values!=null) {	0
org.apache.commons.lang3.time.FastDateParser:466-for(int i= 0; i<values.length; ++i) {	0
org.apache.commons.lang3.time.FastDateParser:467-String value= values[i];	0
org.apache.commons.lang3.time.FastDateParser:468-if(value.length()>0) {	0
org.apache.commons.lang3.time.FastDateParser:469-fieldKeyValues[offset++]= new KeyValue(value, i);	0
org.apache.commons.lang3.time.FastDateParser:473-return offset;	0
org.apache.commons.lang3.time.FastDateParser:308-if(!wasWhite) {	0
org.apache.commons.lang3.time.FastDateParser:309-wasWhite= true;	0
org.apache.commons.lang3.time.FastDateParser:310-regex.append("\\s*+");	0
org.apache.commons.lang3.time.FastDateParser:250-Date date= parse(source, new ParsePosition(0));	0
org.apache.commons.lang3.time.FastDateParser:251-if(date==null) {	0
org.apache.commons.lang3.time.FastDateParser:260-return date;	0
org.apache.commons.lang3.time.FastDateParser:276-int offset= pos.getIndex();	0
org.apache.commons.lang3.time.FastDateParser:277-Matcher matcher= parsePattern.matcher(source.substring(offset));	0
org.apache.commons.lang3.time.FastDateParser:278-if(!matcher.lookingAt()) {	0
org.apache.commons.lang3.time.FastDateParser:282-Calendar cal= Calendar.getInstance(timeZone, locale);	0
org.apache.commons.lang3.time.FastDateParser:283-cal.clear();	0
org.apache.commons.lang3.time.FastDateParser:285-for(int i=0; i<strategies.length;) {	0
org.apache.commons.lang3.time.FastDateParser:286-Strategy strategy= strategies[i++];	0
org.apache.commons.lang3.time.FastDateParser:287-strategy.setCalendar(this, cal, matcher.group(i));	0
org.apache.commons.lang3.time.FastDateParser:288-}	0
org.apache.commons.lang3.time.FastDateParser:289-pos.setIndex(offset+matcher.end());	0
org.apache.commons.lang3.time.FastDateParser:290-return cal.getTime();	0
org.apache.commons.lang3.time.FastDateParser:145-collector.add(currentStrategy);	0
org.apache.commons.lang3.time.FastDateParser:314-wasWhite= false;	0
org.apache.commons.lang3.time.FastDateParser:315-switch(c) {	0
org.apache.commons.lang3.time.FastDateParser:340-regex.append(c);	0
org.apache.commons.lang3.time.FastDateParser:304-boolean wasWhite= false;	1
org.apache.commons.lang3.RandomStringUtils:253-ch = (char) (random.nextInt(gap) + start);	0
org.apache.commons.lang3.RandomStringUtils:163-return random(count, start, end, letters, numbers, null, RANDOM);	0
org.apache.commons.lang3.RandomStringUtils:234-if (start == 0 && end == 0) {	0
org.apache.commons.lang3.RandomStringUtils:247-char[] buffer = new char[count];	0
org.apache.commons.lang3.RandomStringUtils:248-int gap = end - start;	0
org.apache.commons.lang3.RandomStringUtils:250-while (count-- != 0) {	0
org.apache.commons.lang3.RandomStringUtils:252-if (chars == null) {	0
org.apache.commons.lang3.RandomStringUtils:225-if (count == 0) {	0
org.apache.commons.lang3.RandomStringUtils:227-} else if (count < 0) {	0
org.apache.commons.lang3.RandomStringUtils:230-if (chars != null && chars.length == 0) {	0
org.apache.commons.lang3.RandomStringUtils:43-private static final Random RANDOM = new Random();	0
org.apache.commons.lang3.RandomStringUtils:54-super();	0
org.apache.commons.lang3.RandomStringUtils:55-}	0
org.apache.commons.lang3.RandomStringUtils:69-return random(count, false, false);	0
org.apache.commons.lang3.RandomStringUtils:83-return random(count, 32, 127, false, false);	0
org.apache.commons.lang3.RandomStringUtils:97-return random(count, true, false);	0
org.apache.commons.lang3.RandomStringUtils:111-return random(count, true, true);	0
org.apache.commons.lang3.RandomStringUtils:125-return random(count, false, true);	0
org.apache.commons.lang3.RandomStringUtils:143-return random(count, 0, 0, letters, numbers);	0
org.apache.commons.lang3.RandomStringUtils:187-return random(count, start, end, letters, numbers, chars, RANDOM);	0
org.apache.commons.lang3.RandomStringUtils:226-return "";	0
org.apache.commons.lang3.RandomStringUtils:228-throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");	0
org.apache.commons.lang3.RandomStringUtils:231-throw new IllegalArgumentException("The chars array must not be empty");	0
org.apache.commons.lang3.RandomStringUtils:235-if (chars != null) {	0
org.apache.commons.lang3.RandomStringUtils:236-end = chars.length;	0
org.apache.commons.lang3.RandomStringUtils:238-if (!letters && !numbers) {	0
org.apache.commons.lang3.RandomStringUtils:239-end = Integer.MAX_VALUE;	0
org.apache.commons.lang3.RandomStringUtils:241-end = 'z' + 1;	0
org.apache.commons.lang3.RandomStringUtils:242-start = ' ';	0
org.apache.commons.lang3.RandomStringUtils:255-ch = chars[random.nextInt(gap) + start];	0
org.apache.commons.lang3.RandomStringUtils:257-if (letters && Character.isLetter(ch)	0
org.apache.commons.lang3.RandomStringUtils:260-if(ch >= 56320 && ch <= 57343) {	0
org.apache.commons.lang3.RandomStringUtils:261-if(count == 0) {	0
org.apache.commons.lang3.RandomStringUtils:262-count++;	0
org.apache.commons.lang3.RandomStringUtils:265-buffer[count] = ch;	0
org.apache.commons.lang3.RandomStringUtils:266-count--;	0
org.apache.commons.lang3.RandomStringUtils:267-buffer[count] = (char) (55296 + random.nextInt(128));	0
org.apache.commons.lang3.RandomStringUtils:269-} else if(ch >= 55296 && ch <= 56191) {	0
org.apache.commons.lang3.RandomStringUtils:270-if(count == 0) {	0
org.apache.commons.lang3.RandomStringUtils:271-count++;	0
org.apache.commons.lang3.RandomStringUtils:274-buffer[count] = (char) (56320 + random.nextInt(128));	0
org.apache.commons.lang3.RandomStringUtils:275-count--;	0
org.apache.commons.lang3.RandomStringUtils:276-buffer[count] = ch;	0
org.apache.commons.lang3.RandomStringUtils:278-} else if(ch >= 56192 && ch <= 56319) {	0
org.apache.commons.lang3.RandomStringUtils:280-count++;	0
org.apache.commons.lang3.RandomStringUtils:282-buffer[count] = ch;	0
org.apache.commons.lang3.RandomStringUtils:285-count++;	0
org.apache.commons.lang3.RandomStringUtils:287-}	0
org.apache.commons.lang3.RandomStringUtils:288-return new String(buffer);	0
org.apache.commons.lang3.RandomStringUtils:306-if (chars == null) {	0
org.apache.commons.lang3.RandomStringUtils:248-ch = chars[random.nextInt(gap) + start];	0
org.apache.commons.lang3.RandomStringUtils:225-if (count == 0) {	0
org.apache.commons.lang3.RandomStringUtils:227-} else if (count < 0) {	0
org.apache.commons.lang3.RandomStringUtils:228-throw new IllegalArgumentException("Requested random string length " + count + " is less than 0.");	0
org.apache.commons.lang3.RandomStringUtils:231-if (start == 0 && end == 0) {	0
org.apache.commons.lang3.RandomStringUtils:232-if (!letters && !numbers) {	0
org.apache.commons.lang3.RandomStringUtils:233-end = Integer.MAX_VALUE;	0
org.apache.commons.lang3.RandomStringUtils:240-char[] buffer = new char[count];	0
org.apache.commons.lang3.RandomStringUtils:241-int gap = end - start;	0
org.apache.commons.lang3.RandomStringUtils:243-while (count-- != 0) {	0
org.apache.commons.lang3.RandomStringUtils:245-if (chars == null) {	0
org.apache.commons.lang3.RandomStringUtils:43-private static final Random RANDOM = new Random();	0
org.apache.commons.lang3.RandomStringUtils:318-if (chars == null) {	0
org.apache.commons.lang3.RandomStringUtils:321-return random(count, 0, chars.length, false, false, chars, RANDOM);	0
org.apache.commons.lang3.RandomStringUtils:69-return random(count, false, false);	0
org.apache.commons.lang3.RandomStringUtils:143-return random(count, 0, 0, letters, numbers);	0
org.apache.commons.lang3.RandomStringUtils:163-return random(count, start, end, letters, numbers, null, RANDOM);	0
org.apache.commons.lang3.RandomStringUtils:54-super();	0
org.apache.commons.lang3.RandomStringUtils:55-}	0
org.apache.commons.lang3.RandomStringUtils:83-return random(count, 32, 127, false, false);	0
org.apache.commons.lang3.RandomStringUtils:97-return random(count, true, false);	0
org.apache.commons.lang3.RandomStringUtils:111-return random(count, true, true);	0
org.apache.commons.lang3.RandomStringUtils:125-return random(count, false, true);	0
org.apache.commons.lang3.RandomStringUtils:187-return random(count, start, end, letters, numbers, chars, RANDOM);	0
org.apache.commons.lang3.RandomStringUtils:226-return "";	0
org.apache.commons.lang3.RandomStringUtils:235-end = 'z' + 1;	0
org.apache.commons.lang3.RandomStringUtils:236-start = ' ';	0
org.apache.commons.lang3.RandomStringUtils:246-ch = (char) (random.nextInt(gap) + start);	0
org.apache.commons.lang3.RandomStringUtils:250-if (letters && Character.isLetter(ch)	0
org.apache.commons.lang3.RandomStringUtils:253-if(ch >= 56320 && ch <= 57343) {	0
org.apache.commons.lang3.RandomStringUtils:254-if(count == 0) {	0
org.apache.commons.lang3.RandomStringUtils:255-count++;	0
org.apache.commons.lang3.RandomStringUtils:258-buffer[count] = ch;	0
org.apache.commons.lang3.RandomStringUtils:259-count--;	0
org.apache.commons.lang3.RandomStringUtils:260-buffer[count] = (char) (55296 + random.nextInt(128));	0
org.apache.commons.lang3.RandomStringUtils:262-} else if(ch >= 55296 && ch <= 56191) {	0
org.apache.commons.lang3.RandomStringUtils:263-if(count == 0) {	0
org.apache.commons.lang3.RandomStringUtils:264-count++;	0
org.apache.commons.lang3.RandomStringUtils:267-buffer[count] = (char) (56320 + random.nextInt(128));	0
org.apache.commons.lang3.RandomStringUtils:268-count--;	0
org.apache.commons.lang3.RandomStringUtils:269-buffer[count] = ch;	0
org.apache.commons.lang3.RandomStringUtils:271-} else if(ch >= 56192 && ch <= 56319) {	0
org.apache.commons.lang3.RandomStringUtils:273-count++;	0
org.apache.commons.lang3.RandomStringUtils:275-buffer[count] = ch;	0
org.apache.commons.lang3.RandomStringUtils:278-count++;	0
org.apache.commons.lang3.RandomStringUtils:280-}	0
org.apache.commons.lang3.RandomStringUtils:281-return new String(buffer);	0
org.apache.commons.lang3.RandomStringUtils:299-if (chars == null) {	0
org.apache.commons.lang3.RandomStringUtils:300-return random(count, 0, 0, false, false, null, RANDOM);	0
org.apache.commons.lang3.RandomStringUtils:302-return random(count, chars.toCharArray());	0
org.apache.commons.lang3.SerializationUtils:98-} catch (ClassNotFoundException ex) {	0
org.apache.commons.lang3.SerializationUtils:99-throw new SerializationException("ClassNotFoundException while reading cloned object data", ex);	0
org.apache.commons.lang3.SerializationUtils:103-try {	0
org.apache.commons.lang3.SerializationUtils:83-ByteArrayInputStream bais = new ByteArrayInputStream(objectData);	0
org.apache.commons.lang3.SerializationUtils:85-ClassLoaderAwareObjectInputStream in = null;	0
org.apache.commons.lang3.SerializationUtils:88-in = new ClassLoaderAwareObjectInputStream(bais, object.getClass().getClassLoader());	0
org.apache.commons.lang3.SerializationUtils:95-T readObject = (T) in.readObject();	0
org.apache.commons.lang3.SerializationUtils:104-if (in != null) {	0
org.apache.commons.lang3.SerializationUtils:105-in.close();	0
org.apache.commons.lang3.SerializationUtils:109-}	0
org.apache.commons.lang3.SerializationUtils:108-throw new SerializationException("IOException on closing cloned object data InputStream.", ex);	0
org.apache.commons.lang3.SerializationUtils:82-byte[] objectData = serialize(object);	0
org.apache.commons.lang3.SerializationUtils:79-if (object == null) {	0
org.apache.commons.lang3.SerializationUtils:164-return baos.toByteArray();	0
org.apache.commons.lang3.SerializationUtils:151-}	0
org.apache.commons.lang3.SerializationUtils:162-ByteArrayOutputStream baos = new ByteArrayOutputStream(512);	0
org.apache.commons.lang3.SerializationUtils:163-serialize(obj, baos);	0
org.apache.commons.lang3.SerializationUtils:138-out.writeObject(obj);	0
org.apache.commons.lang3.SerializationUtils:145-out.close();	0
org.apache.commons.lang3.SerializationUtils:134-ObjectOutputStream out = null;	0
org.apache.commons.lang3.SerializationUtils:137-out = new ObjectOutputStream(outputStream);	0
org.apache.commons.lang3.SerializationUtils:144-if (out != null) {	0
org.apache.commons.lang3.SerializationUtils:149-}	0
org.apache.commons.lang3.SerializationUtils:131-if (outputStream == null) {	0
org.apache.commons.lang3.SerializationUtils:59-super();	0
org.apache.commons.lang3.SerializationUtils:60-}	0
org.apache.commons.lang3.SerializationUtils:80-return null;	0
org.apache.commons.lang3.SerializationUtils:96-return readObject;	0
org.apache.commons.lang3.SerializationUtils:107-} catch (IOException ex) {	0
org.apache.commons.lang3.SerializationUtils:100-} catch (IOException ex) {	0
org.apache.commons.lang3.SerializationUtils:101-throw new SerializationException("IOException while reading cloned object data", ex);	0
org.apache.commons.lang3.SerializationUtils:132-throw new IllegalArgumentException("The OutputStream must not be null");	0
org.apache.commons.lang3.SerializationUtils:147-} catch (IOException ex) { // NOPMD	0
org.apache.commons.lang3.SerializationUtils:150-}	0
org.apache.commons.lang3.SerializationUtils:140-} catch (IOException ex) {	0
org.apache.commons.lang3.SerializationUtils:141-throw new SerializationException(ex);	0
org.apache.commons.lang3.SerializationUtils:143-try {	0
org.apache.commons.lang3.SerializationUtils:185-if (inputStream == null) {	0
org.apache.commons.lang3.SerializationUtils:186-throw new IllegalArgumentException("The InputStream must not be null");	0
org.apache.commons.lang3.SerializationUtils:188-ObjectInputStream in = null;	0
org.apache.commons.lang3.SerializationUtils:191-in = new ObjectInputStream(inputStream);	0
org.apache.commons.lang3.SerializationUtils:192-return in.readObject();	0
org.apache.commons.lang3.SerializationUtils:200-if (in != null) {	0
org.apache.commons.lang3.SerializationUtils:201-in.close();	0
org.apache.commons.lang3.SerializationUtils:205-}	0
org.apache.commons.lang3.SerializationUtils:203-} catch (IOException ex) { // NOPMD	0
org.apache.commons.lang3.SerializationUtils:194-} catch (ClassNotFoundException ex) {	0
org.apache.commons.lang3.SerializationUtils:195-throw new SerializationException(ex);	0
org.apache.commons.lang3.SerializationUtils:196-} catch (IOException ex) {	0
org.apache.commons.lang3.SerializationUtils:197-throw new SerializationException(ex);	0
org.apache.commons.lang3.StringUtils:782-if (cs1 == cs2) {	0
org.apache.commons.lang3.StringUtils:783-return true;	0
org.apache.commons.lang3.StringUtils:785-if (cs1 == null || cs2 == null) {	0
org.apache.commons.lang3.StringUtils:788-return cs1.equals(cs2);	1
org.apache.commons.lang3.StringUtils:148-private static final Pattern WHITESPACE_BLOCK = Pattern.compile("\\s+");	0
org.apache.commons.lang3.StringUtils:159-super();	0
org.apache.commons.lang3.StringUtils:160-}	0
org.apache.commons.lang3.StringUtils:184-return cs == null || cs.length() == 0;	0
org.apache.commons.lang3.StringUtils:203-return !StringUtils.isEmpty(cs);	0
org.apache.commons.lang3.StringUtils:224-if (cs == null || (strLen = cs.length()) == 0) {	0
org.apache.commons.lang3.StringUtils:225-return true;	0
org.apache.commons.lang3.StringUtils:227-for (int i = 0; i < strLen; i++) {	0
org.apache.commons.lang3.StringUtils:228-if (Character.isWhitespace(cs.charAt(i)) == false) {	0
org.apache.commons.lang3.StringUtils:229-return false;	0
org.apache.commons.lang3.StringUtils:232-return true;	0
org.apache.commons.lang3.StringUtils:253-return !StringUtils.isBlank(cs);	0
org.apache.commons.lang3.StringUtils:282-return str == null ? null : str.trim();	0
org.apache.commons.lang3.StringUtils:308-String ts = trim(str);	0
org.apache.commons.lang3.StringUtils:309-return isEmpty(ts) ? null : ts;	0
org.apache.commons.lang3.StringUtils:334-return str == null ? EMPTY : str.trim();	0
org.apache.commons.lang3.StringUtils:362-return strip(str, null);	0
org.apache.commons.lang3.StringUtils:389-if (str == null) {	0
org.apache.commons.lang3.StringUtils:390-return null;	0
org.apache.commons.lang3.StringUtils:392-str = strip(str, null);	0
org.apache.commons.lang3.StringUtils:393-return str.length() == 0 ? null : str;	0
org.apache.commons.lang3.StringUtils:419-return str == null ? EMPTY : strip(str, null);	0
org.apache.commons.lang3.StringUtils:449-if (isEmpty(str)) {	0
org.apache.commons.lang3.StringUtils:450-return str;	0
org.apache.commons.lang3.StringUtils:452-str = stripStart(str, stripChars);	0
org.apache.commons.lang3.StringUtils:453-return stripEnd(str, stripChars);	0
org.apache.commons.lang3.StringUtils:482-if (str == null || (strLen = str.length()) == 0) {	0
org.apache.commons.lang3.StringUtils:483-return str;	0
org.apache.commons.lang3.StringUtils:485-int start = 0;	0
org.apache.commons.lang3.StringUtils:486-if (stripChars == null) {	0
org.apache.commons.lang3.StringUtils:487-while (start != strLen && Character.isWhitespace(str.charAt(start))) {	0
org.apache.commons.lang3.StringUtils:488-start++;	0
org.apache.commons.lang3.StringUtils:490-} else if (stripChars.length() == 0) {	0
org.apache.commons.lang3.StringUtils:491-return str;	0
org.apache.commons.lang3.StringUtils:493-while (start != strLen && stripChars.indexOf(str.charAt(start)) != INDEX_NOT_FOUND) {	0
org.apache.commons.lang3.StringUtils:494-start++;	0
org.apache.commons.lang3.StringUtils:497-return str.substring(start);	0
org.apache.commons.lang3.StringUtils:527-if (str == null || (end = str.length()) == 0) {	0
org.apache.commons.lang3.StringUtils:528-return str;	0
org.apache.commons.lang3.StringUtils:531-if (stripChars == null) {	0
org.apache.commons.lang3.StringUtils:532-while (end != 0 && Character.isWhitespace(str.charAt(end - 1))) {	0
org.apache.commons.lang3.StringUtils:533-end--;	0
org.apache.commons.lang3.StringUtils:535-} else if (stripChars.length() == 0) {	0
org.apache.commons.lang3.StringUtils:536-return str;	0
org.apache.commons.lang3.StringUtils:538-while (end != 0 && stripChars.indexOf(str.charAt(end - 1)) != INDEX_NOT_FOUND) {	0
org.apache.commons.lang3.StringUtils:539-end--;	0
org.apache.commons.lang3.reflect.TypeUtils:612-ParameterizedType parameterizedOwnerType = (ParameterizedType) ownerType;	0
org.apache.commons.lang3.reflect.TypeUtils:613-typeVarAssigns = getTypeArguments(parameterizedOwnerType,	0
org.apache.commons.lang3.reflect.TypeUtils:615-} else {	0
org.apache.commons.lang3.reflect.TypeUtils:676-return typeVarAssigns;	0
org.apache.commons.lang3.reflect.TypeUtils:88-return isAssignable(type, (GenericArrayType) toType, typeVarAssigns);	0
org.apache.commons.lang3.reflect.TypeUtils:121-return false;	0
org.apache.commons.lang3.reflect.TypeUtils:134-if (type instanceof ParameterizedType) {	0
org.apache.commons.lang3.reflect.TypeUtils:136-return isAssignable(getRawType((ParameterizedType) type), toClass);	0
org.apache.commons.lang3.reflect.TypeUtils:140-if (type instanceof TypeVariable<?>) {	0
org.apache.commons.lang3.reflect.TypeUtils:154-if (type instanceof GenericArrayType) {	0
org.apache.commons.lang3.reflect.TypeUtils:155-return toClass.equals(Object.class)	0
org.apache.commons.lang3.reflect.TypeUtils:193-return true;	0
org.apache.commons.lang3.reflect.TypeUtils:211-return true;	0
org.apache.commons.lang3.reflect.TypeUtils:262-if (type == null) {	0
org.apache.commons.lang3.reflect.TypeUtils:268-if (toGenericArrayType == null) {	0
org.apache.commons.lang3.reflect.TypeUtils:273-if (toGenericArrayType.equals(type)) {	0
org.apache.commons.lang3.reflect.TypeUtils:274-return true;	0
org.apache.commons.lang3.reflect.TypeUtils:277-Type toComponentType = toGenericArrayType.getGenericComponentType();	0
org.apache.commons.lang3.reflect.TypeUtils:279-if (type instanceof Class<?>) {	0
org.apache.commons.lang3.reflect.TypeUtils:280-Class<?> cls = (Class<?>) type;	0
org.apache.commons.lang3.reflect.TypeUtils:283-return cls.isArray()	0
org.apache.commons.lang3.reflect.TypeUtils:287-if (type instanceof GenericArrayType) {	0
org.apache.commons.lang3.reflect.TypeUtils:289-return isAssignable(((GenericArrayType) type).getGenericComponentType(),	0
org.apache.commons.lang3.reflect.TypeUtils:357-WildcardType wildcardType = (WildcardType) type;	0
org.apache.commons.lang3.reflect.TypeUtils:358-Type[] upperBounds = getImplicitUpperBounds(wildcardType);	0
org.apache.commons.lang3.reflect.TypeUtils:359-Type[] lowerBounds = getImplicitLowerBounds(wildcardType);	0
org.apache.commons.lang3.reflect.TypeUtils:361-for (Type toBound : toUpperBounds) {	0
org.apache.commons.lang3.reflect.TypeUtils:364-toBound = substituteTypeVariables(toBound, typeVarAssigns);	0
org.apache.commons.lang3.reflect.TypeUtils:369-for (Type bound : upperBounds) {	0
org.apache.commons.lang3.reflect.TypeUtils:370-if (!isAssignable(bound, toBound, typeVarAssigns)) {	0
org.apache.commons.lang3.reflect.TypeUtils:371-return false;	0
org.apache.commons.lang3.reflect.TypeUtils:376-for (Type toBound : toLowerBounds) {	0
org.apache.commons.lang3.reflect.TypeUtils:379-toBound = substituteTypeVariables(toBound, typeVarAssigns);	0
org.apache.commons.lang3.reflect.TypeUtils:384-for (Type bound : lowerBounds) {	0
org.apache.commons.lang3.reflect.TypeUtils:385-if (!isAssignable(toBound, bound, typeVarAssigns)) {	0
org.apache.commons.lang3.reflect.TypeUtils:386-return false;	0
org.apache.commons.lang3.reflect.TypeUtils:391-return true;	0
org.apache.commons.lang3.reflect.TypeUtils:399-return false;	0
org.apache.commons.lang3.reflect.TypeUtils:408-return false;	0
org.apache.commons.lang3.reflect.TypeUtils:660-if (toClass.isPrimitive()) {	0
org.apache.commons.lang3.reflect.TypeUtils:667-cls = ClassUtils.primitiveToWrapper(cls);	0
org.apache.commons.lang3.reflect.TypeUtils:547-if (type instanceof Class<?>) {	0
org.apache.commons.lang3.reflect.TypeUtils:548-return getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns);	0
org.apache.commons.lang3.reflect.TypeUtils:551-if (type instanceof ParameterizedType) {	0
org.apache.commons.lang3.reflect.TypeUtils:552-return getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns);	0
org.apache.commons.lang3.reflect.TypeUtils:653-if (!isAssignable(cls, toClass)) {	0
org.apache.commons.lang3.reflect.TypeUtils:658-if (cls.isPrimitive()) {	0
org.apache.commons.lang3.reflect.TypeUtils:671-HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()	0
org.apache.commons.lang3.reflect.TypeUtils:675-if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {	1
org.apache.commons.lang3.reflect.TypeUtils:65-return isAssignable(type, toType, null);	0
org.apache.commons.lang3.math.NumberUtils:459-return createInteger(str);	0
org.apache.commons.lang3.math.NumberUtils:470-if (expPos > -1) {	0
org.apache.commons.lang3.math.NumberUtils:476-dec = str.substring(decPos + 1);	0
org.apache.commons.lang3.math.NumberUtils:478-mant = str.substring(0, decPos);	0
org.apache.commons.lang3.math.NumberUtils:481-if (expPos > str.length()) {	0
org.apache.commons.lang3.math.NumberUtils:484-mant = str.substring(0, expPos);	0
org.apache.commons.lang3.math.NumberUtils:517-Float f = NumberUtils.createFloat(numeric);	0
org.apache.commons.lang3.math.NumberUtils:518-if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {	0
org.apache.commons.lang3.math.NumberUtils:521-return f;	0
org.apache.commons.lang3.math.NumberUtils:531-Double d = NumberUtils.createDouble(numeric);	0
org.apache.commons.lang3.math.NumberUtils:532-if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {	0
org.apache.commons.lang3.math.NumberUtils:533-return d;	0
org.apache.commons.lang3.math.NumberUtils:545-throw new NumberFormatException(str + " is not a valid number.");	0
org.apache.commons.lang3.math.NumberUtils:551-if (expPos > -1 && expPos < str.length() - 1) {	0
org.apache.commons.lang3.math.NumberUtils:554-exp = null;	0
org.apache.commons.lang3.math.NumberUtils:556-if (dec == null && exp == null) {	0
org.apache.commons.lang3.math.NumberUtils:559-return createInteger(str);	0
org.apache.commons.lang3.math.NumberUtils:560-} catch (NumberFormatException nfe) { // NOPMD	0
org.apache.commons.lang3.math.NumberUtils:564-return createLong(str);	0
org.apache.commons.lang3.math.NumberUtils:572-boolean allZeros = isAllZeros(mant) && isAllZeros(exp);	0
org.apache.commons.lang3.math.NumberUtils:574-Float f = createFloat(str);	0
org.apache.commons.lang3.math.NumberUtils:575-if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {	0
org.apache.commons.lang3.math.NumberUtils:576-return f;	0
org.apache.commons.lang3.math.NumberUtils:445-if (str == null) {	0
org.apache.commons.lang3.math.NumberUtils:448-if (StringUtils.isBlank(str)) {	0
org.apache.commons.lang3.math.NumberUtils:451-if (str.startsWith("--")) {	0
org.apache.commons.lang3.math.NumberUtils:458-if (str.startsWith("0x") || str.startsWith("-0x")) {	1
org.apache.commons.lang3.math.NumberUtils:461-char lastChar = str.charAt(str.length() - 1);	0
org.apache.commons.lang3.math.NumberUtils:465-int decPos = str.indexOf('.');	0
org.apache.commons.lang3.math.NumberUtils:466-int expPos = str.indexOf('e') + str.indexOf('E') + 1;	0
org.apache.commons.lang3.math.NumberUtils:468-if (decPos > -1) {	0
org.apache.commons.lang3.math.NumberUtils:480-if (expPos > -1) {	0
org.apache.commons.lang3.math.NumberUtils:486-mant = str;	0
org.apache.commons.lang3.math.NumberUtils:488-dec = null;	0
org.apache.commons.lang3.math.NumberUtils:490-if (!Character.isDigit(lastChar) && lastChar != '.') {	0
org.apache.commons.lang3.math.NumberUtils:491-if (expPos > -1 && expPos < str.length() - 1) {	0
org.apache.commons.lang3.math.NumberUtils:494-exp = null;	0
org.apache.commons.lang3.math.NumberUtils:497-String numeric = str.substring(0, str.length() - 1);	0
org.apache.commons.lang3.math.NumberUtils:498-boolean allZeros = isAllZeros(mant) && isAllZeros(exp);	0
org.apache.commons.lang3.math.NumberUtils:499-switch (lastChar) {	0
org.apache.commons.lang3.math.NumberUtils:502-if (dec == null	0
org.apache.commons.lang3.math.NumberUtils:506-return createLong(numeric);	0
org.apache.commons.lang3.math.NumberUtils:605-if (str == null) {	0
org.apache.commons.lang3.math.NumberUtils:608-for (int i = str.length() - 1; i >= 0; i--) {	0
org.apache.commons.lang3.math.NumberUtils:609-if (str.charAt(i) != '0') {	0
org.apache.commons.lang3.math.NumberUtils:610-return false;	0
org.apache.commons.lang3.math.NumberUtils:627-if (str == null) {	0
org.apache.commons.lang3.math.NumberUtils:630-return Float.valueOf(str);	0
org.apache.commons.lang3.math.NumberUtils:643-if (str == null) {	0
org.apache.commons.lang3.math.NumberUtils:646-return Double.valueOf(str);	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:87-char[] c = Character.toChars(Character.codePointAt(input, pos));	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:88-out.write(c);	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:89-}	1
org.apache.commons.lang3.text.translate.CharSequenceTranslator:54-if (input == null) {	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:58-StringWriter writer = new StringWriter(input.length() * 2);	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:59-translate(input, writer);	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:60-return writer.toString();	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:76-if (out == null) {	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:79-if (input == null) {	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:82-int pos = 0;	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:83-int len = Character.codePointCount(input, 0, input.length());	1
org.apache.commons.lang3.text.translate.CharSequenceTranslator:84-while (pos < len) {	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:85-int consumed = translate(input, pos, out);	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:86-if (consumed == 0) {	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:102-pos++;	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:103-}	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:104-}	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:32-public abstract class CharSequenceTranslator {	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:114-CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1];	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:115-newArray[0] = this;	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:116-System.arraycopy(translators, 0, newArray, 1, translators.length);	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:117-return new AggregateTranslator(newArray);	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:55-return null;	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:61-} catch (IOException ioe) {	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:63-throw new RuntimeException(ioe);	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:77-throw new IllegalArgumentException("The Writer must not be null");	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:80-return;	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:93-for (int pt = 0; pt < consumed; pt++) {	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:94-if (pos < len - 2) {	1
org.apache.commons.lang3.text.translate.CharSequenceTranslator:95-pos += Character.charCount(Character.codePointAt(input, pos));	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:97-pos++;	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:100-pos--;	0
org.apache.commons.lang3.text.translate.CharSequenceTranslator:128-return Integer.toHexString(codepoint).toUpperCase(Locale.ENGLISH);	0
org.apache.commons.lang3.time.FastDateFormat:492-rule = new TextField(Calendar.ERA, ERAs);	0
org.apache.commons.lang3.time.FastDateFormat:493-break;	0
org.apache.commons.lang3.time.FastDateFormat:505-rule = new TextField(Calendar.MONTH, shortMonths);	0
org.apache.commons.lang3.time.FastDateFormat:556-rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);	0
org.apache.commons.lang3.time.FastDateFormat:562-if (tokenLen == 1) {	0
org.apache.commons.lang3.time.FastDateFormat:563-rule = TimeZoneNumberRule.INSTANCE_NO_COLON;	0
org.apache.commons.lang3.time.FastDateFormat:565-rule = TimeZoneNumberRule.INSTANCE_COLON;	0
org.apache.commons.lang3.time.FastDateFormat:567-break;	0
org.apache.commons.lang3.time.FastDateFormat:696-return format(new Date(millis));	0
org.apache.commons.lang3.time.FastDateFormat:409-TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);	0
org.apache.commons.lang3.time.FastDateFormat:410-String value = cTimeZoneDisplayCache.get(key);	0
org.apache.commons.lang3.time.FastDateFormat:411-if (value == null) {	0
org.apache.commons.lang3.time.FastDateFormat:413-value = tz.getDisplayName(daylight, style, locale);	0
org.apache.commons.lang3.time.FastDateFormat:414-String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);	0
org.apache.commons.lang3.time.FastDateFormat:415-if (prior != null) {	0
org.apache.commons.lang3.time.FastDateFormat:419-return value;	0
org.apache.commons.lang3.time.FastDateFormat:555-if (tokenLen >= 4) {	0
org.apache.commons.lang3.time.FastDateFormat:558-rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);	0
org.apache.commons.lang3.time.FastDateFormat:560-break;	0
org.apache.commons.lang3.time.FastDateFormat:498-rule = TwoDigitYearField.INSTANCE;	0
org.apache.commons.lang3.time.FastDateFormat:500-break;	0
org.apache.commons.lang3.time.FastDateFormat:503-rule = new TextField(Calendar.MONTH, months);	0
org.apache.commons.lang3.time.FastDateFormat:509-rule = UnpaddedMonthField.INSTANCE;	0
org.apache.commons.lang3.time.FastDateFormat:511-break;	0
org.apache.commons.lang3.time.FastDateFormat:519-rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);	0
org.apache.commons.lang3.time.FastDateFormat:520-break;	0
org.apache.commons.lang3.time.FastDateFormat:525-rule = selectNumberRule(Calendar.SECOND, tokenLen);	0
org.apache.commons.lang3.time.FastDateFormat:526-break;	0
org.apache.commons.lang3.time.FastDateFormat:546-rule = new TextField(Calendar.AM_PM, AmPmStrings);	0
org.apache.commons.lang3.time.FastDateFormat:547-break;	0
org.apache.commons.lang3.time.FastDateFormat:706-Calendar c = new GregorianCalendar(mTimeZone, mLocale);// hard code GregorianCalendar	0
org.apache.commons.lang3.time.FastDateFormat:707-c.setTime(date);	0
org.apache.commons.lang3.time.FastDateFormat:708-return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();	0
org.apache.commons.lang3.time.FastDateFormat:522-rule = selectNumberRule(Calendar.MINUTE, tokenLen);	0
org.apache.commons.lang3.time.FastDateFormat:523-break;	0
org.apache.commons.lang3.time.FastDateFormat:531-rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);	0
org.apache.commons.lang3.time.FastDateFormat:532-break;	0
org.apache.commons.lang3.time.FastDateFormat:624-if (i + 1 < length && pattern.charAt(i + 1) == '\'') {	0
org.apache.commons.lang3.time.FastDateFormat:629-inLiteral = !inLiteral;	0
org.apache.commons.lang3.time.FastDateFormat:655-return new UnpaddedNumberField(field);	0
org.apache.commons.lang3.time.FastDateFormat:534-rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);	0
org.apache.commons.lang3.time.FastDateFormat:535-break;	0
org.apache.commons.lang3.time.FastDateFormat:718-return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();	0
org.apache.commons.lang3.time.FastDateFormat:757-return applyRules(calendar, buf);	0
org.apache.commons.lang3.time.FastDateFormat:159-return cache.getInstance(pattern, null, null);	0
org.apache.commons.lang3.time.FastDateFormat:769-for (Rule rule : mRules) {	0
org.apache.commons.lang3.time.FastDateFormat:770-rule.appendTo(buf, calendar);	0
org.apache.commons.lang3.time.FastDateFormat:772-return buf;	0
org.apache.commons.lang3.time.FastDateFormat:513-rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);	0
org.apache.commons.lang3.time.FastDateFormat:514-break;	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:82-return 0;	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:31-public class NumericEntityUnescaper extends CharSequenceTranslator {	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:38-int seqEnd = input.length();	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:40-if(input.charAt(index) == '&' && index < seqEnd - 1 && input.charAt(index + 1) == '#') {	1
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:41-int start = index + 2;	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:42-boolean isHex = false;	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:44-char firstChar = input.charAt(start);	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:46-start++;	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:47-isHex = true;	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:45-if(firstChar == 'x' || firstChar == 'X') {	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:52-int end = start;	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:54-while(input.charAt(end) != ';')	1
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:56-end++;	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:61-if(isHex) {	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:62-entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 16);	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:64-entityValue = Integer.parseInt(input.subSequence(start, end).toString(), 10);	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:69-}	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:66-} catch(NumberFormatException nfe) {	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:67-System.err.println("FAIL: " + input.subSequence(start, end) + "[" + start +"]["+ end +"]");	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:68-return 0;	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:71-if(entityValue > 0xFFFF) {	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:72-char[] chrs = Character.toChars(entityValue);	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:73-out.write(chrs[0]);	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:74-out.write(chrs[1]);	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:75-} else {	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:76-out.write(entityValue);	0
org.apache.commons.lang3.text.translate.NumericEntityUnescaper:80-return 2 + (end - start) + (isHex ? 1 : 0) + 1;	0
org.apache.commons.lang3.StringUtils:3257-return null;	0
org.apache.commons.lang3.StringUtils:3230-return join(elements, null);	0
org.apache.commons.lang3.StringUtils:3256-if (array == null) {	0
org.apache.commons.lang3.StringUtils:3260-return join(array, separator, 0, array.length);	0
org.apache.commons.lang3.StringUtils:3290-if (array == null) {	0
org.apache.commons.lang3.StringUtils:3293-int noOfItems = (endIndex - startIndex);	0
org.apache.commons.lang3.StringUtils:3294-if (noOfItems <= 0) {	0
org.apache.commons.lang3.StringUtils:3295-return EMPTY;	0
org.apache.commons.lang3.StringUtils:3298-StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);	1
org.apache.commons.lang3.StringUtils:3300-for (int i = startIndex; i < endIndex; i++) {	0
org.apache.commons.lang3.StringUtils:3301-if (i > startIndex) {	0
org.apache.commons.lang3.StringUtils:3302-buf.append(separator);	0
org.apache.commons.lang3.StringUtils:3304-if (array[i] != null) {	0
org.apache.commons.lang3.StringUtils:3305-buf.append(array[i]);	0
org.apache.commons.lang3.StringUtils:3308-return buf.toString();	0
org.apache.commons.lang3.StringUtils:3380-return EMPTY;	0
org.apache.commons.lang3.StringUtils:3335-if (array == null) {	0
org.apache.commons.lang3.StringUtils:3336-return null;	0
org.apache.commons.lang3.StringUtils:3338-return join(array, separator, 0, array.length);	0
org.apache.commons.lang3.StringUtils:3369-if (array == null) {	0
org.apache.commons.lang3.StringUtils:3372-if (separator == null) {	0
org.apache.commons.lang3.StringUtils:3373-separator = EMPTY;	0
org.apache.commons.lang3.StringUtils:3378-int noOfItems = (endIndex - startIndex);	0
org.apache.commons.lang3.StringUtils:3379-if (noOfItems <= 0) {	0
org.apache.commons.lang3.StringUtils:3383-StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());	1
org.apache.commons.lang3.StringUtils:3385-for (int i = startIndex; i < endIndex; i++) {	0
org.apache.commons.lang3.StringUtils:3386-if (i > startIndex) {	0
org.apache.commons.lang3.StringUtils:3389-if (array[i] != null) {	0
org.apache.commons.lang3.StringUtils:3393-return buf.toString();	0
org.apache.commons.lang3.StringUtils:147-private static final Pattern WHITESPACE_BLOCK = Pattern.compile("\\s+");	0
org.apache.commons.lang3.StringUtils:704-private static boolean sunAvailable = false;	0
org.apache.commons.lang3.StringUtils:705-private static MethodsunDecomposeMethod = null;	0
org.apache.commons.lang3.StringUtils:706-private static final Pattern sunPattern = Pattern.compile("\\p{InCombiningDiacriticalMarks}+");//$NON-NLS-1$	0
org.apache.commons.lang3.StringUtils:708-private static boolean java6Available = false;	0
org.apache.commons.lang3.StringUtils:709-private static Methodjava6NormalizeMethod = null;	0
org.apache.commons.lang3.StringUtils:710-private static Objectjava6NormalizerFormNFD = null;	0
org.apache.commons.lang3.StringUtils:711-private static final Pattern java6Pattern = sunPattern;	0
org.apache.commons.lang3.StringUtils:717-Class<?> normalizerFormClass = Thread.currentThread().getContextClassLoader()	0
org.apache.commons.lang3.StringUtils:719-java6NormalizerFormNFD = normalizerFormClass.getField("NFD").get(null);//$NON-NLS-1$	0
org.apache.commons.lang3.StringUtils:720-Class<?> normalizerClass = Thread.currentThread().getContextClassLoader()	0
org.apache.commons.lang3.StringUtils:722-java6NormalizeMethod = normalizerClass.getMethod("normalize",	0
org.apache.commons.lang3.StringUtils:724-java6Available = true;	0
org.apache.commons.lang3.StringUtils:733-}	0
org.apache.commons.lang3.StringUtils:737-Class<?> normalizerClass = Thread.currentThread().getContextClassLoader()	0
org.apache.commons.lang3.StringUtils:739-sunDecomposeMethod = normalizerClass.getMethod("decompose",	0
org.apache.commons.lang3.StringUtils:744-} catch (NoSuchMethodException e) {	0
org.apache.commons.lang3.StringUtils:745-sunAvailable = false;	0
org.apache.commons.lang3.StringUtils:747-}	0
org.apache.commons.lang3.StringUtils:158-super();	0
org.apache.commons.lang3.StringUtils:159-}	0
org.apache.commons.lang3.time.DateUtils:259-if (cal1 == null || cal2 == null) {	0
org.apache.commons.lang3.time.DateUtils:262-return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&	0
org.apache.commons.lang3.time.DateUtils:60-public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone("GMT");	0
org.apache.commons.lang3.time.DateUtils:88-private static final int[][] fields = {	0
org.apache.commons.lang3.time.DateUtils:158-super();	0
org.apache.commons.lang3.time.DateUtils:159-}	0
org.apache.commons.lang3.time.DateUtils:176-if (date1 == null || date2 == null) {	0
org.apache.commons.lang3.time.DateUtils:177-throw new IllegalArgumentException("The date must not be null");	0
org.apache.commons.lang3.time.DateUtils:179-Calendar cal1 = Calendar.getInstance();	0
org.apache.commons.lang3.time.DateUtils:180-cal1.setTime(date1);	0
org.apache.commons.lang3.time.DateUtils:181-Calendar cal2 = Calendar.getInstance();	0
org.apache.commons.lang3.time.DateUtils:182-cal2.setTime(date2);	0
org.apache.commons.lang3.time.DateUtils:183-return isSameDay(cal1, cal2);	0
org.apache.commons.lang3.time.DateUtils:200-if (cal1 == null || cal2 == null) {	0
org.apache.commons.lang3.time.DateUtils:201-throw new IllegalArgumentException("The date must not be null");	0
org.apache.commons.lang3.time.DateUtils:203-return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&	0
org.apache.commons.lang3.time.DateUtils:221-if (date1 == null || date2 == null) {	0
org.apache.commons.lang3.time.DateUtils:222-throw new IllegalArgumentException("The date must not be null");	0
org.apache.commons.lang3.time.DateUtils:224-return date1.getTime() == date2.getTime();	0
org.apache.commons.lang3.time.DateUtils:239-if (cal1 == null || cal2 == null) {	0
org.apache.commons.lang3.time.DateUtils:240-throw new IllegalArgumentException("The date must not be null");	0
org.apache.commons.lang3.time.DateUtils:242-return cal1.getTime().getTime() == cal2.getTime().getTime();	0
org.apache.commons.lang3.time.DateUtils:260-throw new IllegalArgumentException("The date must not be null");	0
org.apache.commons.lang3.time.DateUtils:288-return parseDateWithLeniency(str, parsePatterns, true);	0
org.apache.commons.lang3.time.DateUtils:308-return parseDateWithLeniency(str, parsePatterns, false);	0
org.apache.commons.lang3.time.DateUtils:328-if (str == null || parsePatterns == null) {	0
org.apache.commons.lang3.time.DateUtils:329-throw new IllegalArgumentException("Date and Patterns must not be null");	0
org.apache.commons.lang3.time.DateUtils:332-SimpleDateFormat parser = new SimpleDateFormat();	0
org.apache.commons.lang3.time.DateUtils:333-parser.setLenient(lenient);	0
org.apache.commons.lang3.time.DateUtils:334-ParsePosition pos = new ParsePosition(0);	0
org.apache.commons.lang3.time.DateUtils:335-for (int i = 0; i < parsePatterns.length; i++) {	0
org.apache.commons.lang3.time.DateUtils:337-String pattern = parsePatterns[i];	0
org.apache.commons.lang3.time.DateUtils:340-if (parsePatterns[i].endsWith("ZZ")) {	0
org.apache.commons.lang3.time.DateUtils:341-pattern = pattern.substring(0, pattern.length() - 1);	0
org.apache.commons.lang3.time.DateUtils:344-parser.applyPattern(pattern);	0
org.apache.commons.lang3.time.DateUtils:345-pos.setIndex(0);	0
org.apache.commons.lang3.time.DateUtils:347-String str2 = str;	0
org.apache.commons.lang3.time.DateUtils:349-if (parsePatterns[i].endsWith("ZZ")) {	0
org.apache.commons.lang3.time.DateUtils:350-str2 = str.replaceAll("([-+][0-9][0-9]):([0-9][0-9])$", "$1$2");	0
org.apache.commons.lang3.time.DateUtils:353-Date date = parser.parse(str2, pos);	0
org.apache.commons.lang3.time.DateUtils:354-if (date != null && pos.getIndex() == str2.length()) {	0
org.apache.commons.lang3.time.DateUtils:355-return date;	0
org.apache.commons.lang3.time.DateUtils:358-throw new ParseException("Unable to parse the date: " + str, -1);	0
org.apache.commons.lang3.time.DateUtils:372-return add(date, Calendar.YEAR, amount);	0
org.apache.commons.lang3.time.DateUtils:386-return add(date, Calendar.MONTH, amount);	0
org.apache.commons.lang3.time.DateUtils:400-return add(date, Calendar.WEEK_OF_YEAR, amount);	0
org.apache.commons.lang3.time.DateUtils:414-return add(date, Calendar.DAY_OF_MONTH, amount);	0
org.apache.commons.lang3.time.DateUtils:428-return add(date, Calendar.HOUR_OF_DAY, amount);	0
org.apache.commons.lang3.time.DateUtils:442-return add(date, Calendar.MINUTE, amount);	0
org.apache.commons.lang3.time.DateUtils:456-return add(date, Calendar.SECOND, amount);	0
org.apache.commons.lang3.math.Fraction:216-throw new ArithmeticException("The denominator must not be zero");	0
org.apache.commons.lang3.math.Fraction:223-numerator/=2; denominator/=2;	0
org.apache.commons.lang3.math.Fraction:226-if (numerator==Integer.MIN_VALUE ||	0
org.apache.commons.lang3.math.Fraction:228-throw new ArithmeticException("overflow: can't negate");	0
org.apache.commons.lang3.math.Fraction:230-numerator = -numerator;	0
org.apache.commons.lang3.math.Fraction:231-denominator = -denominator;	0
org.apache.commons.lang3.math.Fraction:475-if (numerator == 0) {	0
org.apache.commons.lang3.math.Fraction:476-return equals(ZERO) ? this : ZERO;	0
org.apache.commons.lang3.math.Fraction:478-int gcd = greatestCommonDivisor(Math.abs(numerator), denominator);	0
org.apache.commons.lang3.math.Fraction:479-if (gcd == 1) {	0
org.apache.commons.lang3.math.Fraction:480-return this;	0
org.apache.commons.lang3.math.Fraction:482-return Fraction.getFraction(numerator / gcd, denominator / gcd);	0
org.apache.commons.lang3.math.Fraction:591-if (u>0) { u=-u; } // make u negative	0
org.apache.commons.lang3.math.Fraction:592-if (v>0) { v=-v; } // make v negative	0
org.apache.commons.lang3.math.Fraction:594-int k=0;	0
org.apache.commons.lang3.math.Fraction:595-while ((u&1)==0 && (v&1)==0 && k<31) { // while u and v are both even...	0
org.apache.commons.lang3.math.Fraction:598-if (k==31) {	0
org.apache.commons.lang3.math.Fraction:603-int t = ((u&1)==1) ? v : -(u/2)/*B3*/;	0
org.apache.commons.lang3.math.Fraction:609-while ((t&1)==0) { // while t is even..	0
org.apache.commons.lang3.math.Fraction:613-if (t>0) {	0
org.apache.commons.lang3.math.Fraction:614-u = -t;	0
org.apache.commons.lang3.math.Fraction:616-v = t;	0
org.apache.commons.lang3.math.Fraction:619-t = (v - u)/2;	0
org.apache.commons.lang3.math.Fraction:622-} while (t!=0);	0
org.apache.commons.lang3.math.Fraction:623-return -u*(1<<k); // gcd is u*2^k	0
org.apache.commons.lang3.math.Fraction:584-if (Math.abs(u) <= 1 || Math.abs(v) <= 1) {	0
org.apache.commons.lang3.math.Fraction:585-return 1;	0
org.apache.commons.lang3.math.Fraction:219-return ZERO; // normalize zero.	0
org.apache.commons.lang3.math.Fraction:844-if (obj == this) {	0
org.apache.commons.lang3.math.Fraction:847-if (obj instanceof Fraction == false) {	0
org.apache.commons.lang3.math.Fraction:850-Fraction other = (Fraction) obj;	0
org.apache.commons.lang3.math.Fraction:851-return (getNumerator() == other.getNumerator() &&	0
org.apache.commons.lang3.math.Fraction:151-if (numerator==Integer.MIN_VALUE ||	0
org.apache.commons.lang3.math.Fraction:155-numerator = -numerator;	0
org.apache.commons.lang3.math.Fraction:156-denominator = -denominator;	0
org.apache.commons.lang3.math.Fraction:596-u/=2; v/=2; k++; // cast out twos.	0
org.apache.commons.lang3.math.Fraction:373-return numerator;	0
org.apache.commons.lang3.math.Fraction:382-return denominator;	0
org.apache.commons.lang3.math.Fraction:129-super();	0
org.apache.commons.lang3.math.Fraction:111-private transient int hashCode = 0;	0
org.apache.commons.lang3.math.Fraction:115-private transient String toString = null;	0
org.apache.commons.lang3.math.Fraction:119-private transient String toProperString = null;	0
org.apache.commons.lang3.math.Fraction:130-this.numerator = numerator;	0
org.apache.commons.lang3.math.Fraction:131-this.denominator = denominator;	0
org.apache.commons.lang3.math.Fraction:132-}	0
org.apache.commons.lang3.math.Fraction:52-public static final Fraction ZERO = new Fraction(0, 1);	0
org.apache.commons.lang3.math.Fraction:56-public static final Fraction ONE = new Fraction(1, 1);	0
org.apache.commons.lang3.math.Fraction:60-public static final Fraction ONE_HALF = new Fraction(1, 2);	0
org.apache.commons.lang3.math.Fraction:64-public static final Fraction ONE_THIRD = new Fraction(1, 3);	0
org.apache.commons.lang3.math.Fraction:68-public static final Fraction TWO_THIRDS = new Fraction(2, 3);	0
org.apache.commons.lang3.text.ExtendedMessageFormat:151-ArrayList<Format> foundFormats = new ArrayList<Format>();	0
org.apache.commons.lang3.text.ExtendedMessageFormat:152-ArrayList<String> foundDescriptions = new ArrayList<String>();	0
org.apache.commons.lang3.text.ExtendedMessageFormat:153-StringBuilder stripCustom = new StringBuilder(pattern.length());	0
org.apache.commons.lang3.text.ExtendedMessageFormat:155-ParsePosition pos = new ParsePosition(0);	0
org.apache.commons.lang3.text.ExtendedMessageFormat:156-char[] c = pattern.toCharArray();	0
org.apache.commons.lang3.text.ExtendedMessageFormat:157-int fmtCount = 0;	0
org.apache.commons.lang3.text.ExtendedMessageFormat:158-while (pos.getIndex() < pattern.length()) {	0
org.apache.commons.lang3.text.ExtendedMessageFormat:159-switch (c[pos.getIndex()]) {	0
org.apache.commons.lang3.text.ExtendedMessageFormat:164-fmtCount++;	0
org.apache.commons.lang3.text.ExtendedMessageFormat:165-seekNonWs(pattern, pos);	0
org.apache.commons.lang3.text.ExtendedMessageFormat:166-int start = pos.getIndex();	0
org.apache.commons.lang3.text.ExtendedMessageFormat:167-int index = readArgumentIndex(pattern, next(pos));	0
org.apache.commons.lang3.text.ExtendedMessageFormat:168-stripCustom.append(START_FE).append(index);	0
org.apache.commons.lang3.text.ExtendedMessageFormat:169-seekNonWs(pattern, pos);	0
org.apache.commons.lang3.text.ExtendedMessageFormat:170-Format format = null;	0
org.apache.commons.lang3.text.ExtendedMessageFormat:171-String formatDescription = null;	0
org.apache.commons.lang3.text.ExtendedMessageFormat:172-if (c[pos.getIndex()] == START_FMT) {	0
org.apache.commons.lang3.text.ExtendedMessageFormat:173-formatDescription = parseFormatDescription(pattern,	0
org.apache.commons.lang3.text.ExtendedMessageFormat:175-format = getFormat(formatDescription);	0
org.apache.commons.lang3.text.ExtendedMessageFormat:176-if (format == null) {	0
org.apache.commons.lang3.text.ExtendedMessageFormat:180-foundFormats.add(format);	0
org.apache.commons.lang3.text.ExtendedMessageFormat:181-foundDescriptions.add(format == null ? null : formatDescription);	0
org.apache.commons.lang3.text.ExtendedMessageFormat:182-Validate.isTrue(foundFormats.size() == fmtCount);	0
org.apache.commons.lang3.text.ExtendedMessageFormat:183-Validate.isTrue(foundDescriptions.size() == fmtCount);	0
org.apache.commons.lang3.text.ExtendedMessageFormat:184-if (c[pos.getIndex()] != END_FE) {	0
org.apache.commons.lang3.text.ExtendedMessageFormat:190-stripCustom.append(c[pos.getIndex()]);	0
org.apache.commons.lang3.text.ExtendedMessageFormat:191-next(pos);	0
org.apache.commons.lang3.text.ExtendedMessageFormat:194-super.applyPattern(stripCustom.toString());	0
org.apache.commons.lang3.text.ExtendedMessageFormat:195-toPattern = insertFormats(super.toPattern(), foundDescriptions);	0
org.apache.commons.lang3.text.ExtendedMessageFormat:196-if (containsElements(foundFormats)) {	0
org.apache.commons.lang3.text.ExtendedMessageFormat:197-Format[] origFormats = getFormats();	0
org.apache.commons.lang3.text.ExtendedMessageFormat:200-int i = 0;	0
org.apache.commons.lang3.text.ExtendedMessageFormat:201-for (Iterator<Format> it = foundFormats.iterator(); it.hasNext(); i++) {	0
org.apache.commons.lang3.text.ExtendedMessageFormat:202-Format f = it.next();	0
org.apache.commons.lang3.text.ExtendedMessageFormat:203-if (f != null) {	0
org.apache.commons.lang3.text.ExtendedMessageFormat:204-origFormats[i] = f;	0
org.apache.commons.lang3.text.ExtendedMessageFormat:207-super.setFormats(origFormats);	0
org.apache.commons.lang3.text.ExtendedMessageFormat:209-}	0
org.apache.commons.lang3.text.ExtendedMessageFormat:277-if (registry != null) {	0
org.apache.commons.lang3.text.ExtendedMessageFormat:278-String name = desc;	0
org.apache.commons.lang3.text.ExtendedMessageFormat:279-String args = null;	0
org.apache.commons.lang3.text.ExtendedMessageFormat:280-int i = desc.indexOf(START_FMT);	0
org.apache.commons.lang3.text.ExtendedMessageFormat:281-if (i > 0) {	0
org.apache.commons.lang3.text.ExtendedMessageFormat:285-FormatFactory factory = registry.get(name);	0
org.apache.commons.lang3.text.ExtendedMessageFormat:286-if (factory != null) {	0
org.apache.commons.lang3.text.ExtendedMessageFormat:287-return factory.getFormat(name, args, getLocale());	0
org.apache.commons.lang3.text.ExtendedMessageFormat:301-int start = pos.getIndex();	0
org.apache.commons.lang3.text.ExtendedMessageFormat:302-seekNonWs(pattern, pos);	0
org.apache.commons.lang3.text.ExtendedMessageFormat:303-StringBuffer result = new StringBuffer();	0
org.apache.commons.lang3.text.ExtendedMessageFormat:304-boolean error = false;	0
org.apache.commons.lang3.math.NumberUtils:457-throw new NumberFormatException("A blank string is not a valid number");	0
org.apache.commons.lang3.math.NumberUtils:464-return null;	0
org.apache.commons.lang3.math.NumberUtils:480-throw new NumberFormatException(str + " is not a valid number.");	0
org.apache.commons.lang3.math.NumberUtils:492-mant = str.substring(0, expPos);	0
org.apache.commons.lang3.math.NumberUtils:521-throw new NumberFormatException(str + " is not a valid number.");	0
org.apache.commons.lang3.math.NumberUtils:532-} catch (NumberFormatException nfe) {	0
org.apache.commons.lang3.math.NumberUtils:543-} catch (NumberFormatException nfe) {	0
org.apache.commons.lang3.math.NumberUtils:548-} catch (NumberFormatException e) {	0
org.apache.commons.lang3.math.NumberUtils:553-throw new NumberFormatException(str + " is not a valid number.");	0
org.apache.commons.lang3.math.NumberUtils:586-} catch (NumberFormatException nfe) {	0
org.apache.commons.lang3.math.NumberUtils:594-} catch (NumberFormatException nfe) {	0
org.apache.commons.lang3.math.NumberUtils:598-return createBigDecimal(str);	0
org.apache.commons.lang3.math.NumberUtils:621-return str.length() > 0;	0
org.apache.commons.lang3.math.NumberUtils:1320-if (StringUtils.isEmpty(str)) {	0
org.apache.commons.lang3.math.NumberUtils:1321-return false;	0
org.apache.commons.lang3.math.NumberUtils:1323-char[] chars = str.toCharArray();	0
org.apache.commons.lang3.math.NumberUtils:1324-int sz = chars.length;	0
org.apache.commons.lang3.math.NumberUtils:1325-boolean hasExp = false;	0
org.apache.commons.lang3.math.NumberUtils:1326-boolean hasDecPoint = false;	0
org.apache.commons.lang3.math.NumberUtils:1327-boolean allowSigns = false;	0
org.apache.commons.lang3.math.NumberUtils:1328-boolean foundDigit = false;	0
org.apache.commons.lang3.math.NumberUtils:1330-int start = (chars[0] == '-') ? 1 : 0;	0
org.apache.commons.lang3.math.NumberUtils:1331-if (sz > start + 1) {	0
org.apache.commons.lang3.math.NumberUtils:1332-if (chars[start] == '0' && chars[start + 1] == 'x') {	0
org.apache.commons.lang3.math.NumberUtils:1333-int i = start + 2;	0
org.apache.commons.lang3.math.NumberUtils:1334-if (i == sz) {	0
org.apache.commons.lang3.math.NumberUtils:1338-for (; i < chars.length; i++) {	0
org.apache.commons.lang3.math.NumberUtils:1339-if ((chars[i] < '0' || chars[i] > '9')	0
org.apache.commons.lang3.math.NumberUtils:1342-return false;	0
org.apache.commons.lang3.math.NumberUtils:1345-return true;	0
org.apache.commons.lang3.math.NumberUtils:1348-sz--; // don't want to loop to the last char, check it afterwords	0
org.apache.commons.lang3.math.NumberUtils:1350-int i = start;	0
org.apache.commons.lang3.math.NumberUtils:1353-while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {	0
org.apache.commons.lang3.math.NumberUtils:1354-if (chars[i] >= '0' && chars[i] <= '9') {	0
org.apache.commons.lang3.math.NumberUtils:1355-foundDigit = true;	0
org.apache.commons.lang3.math.NumberUtils:1356-allowSigns = false;	0
org.apache.commons.lang3.math.NumberUtils:1358-} else if (chars[i] == '.') {	0
org.apache.commons.lang3.math.NumberUtils:1359-if (hasDecPoint || hasExp) {	0
org.apache.commons.lang3.math.NumberUtils:1361-return false;	0
org.apache.commons.lang3.math.NumberUtils:1363-hasDecPoint = true;	0
org.apache.commons.lang3.math.NumberUtils:1364-} else if (chars[i] == 'e' || chars[i] == 'E') {	0
org.apache.commons.lang3.math.NumberUtils:1366-if (hasExp) {	0
org.apache.commons.lang3.math.NumberUtils:1370-if (!foundDigit) {	0
org.apache.commons.lang3.math.NumberUtils:1373-hasExp = true;	0
org.apache.commons.lang3.math.NumberUtils:1374-allowSigns = true;	0
org.apache.commons.lang3.math.NumberUtils:1375-} else if (chars[i] == '+' || chars[i] == '-') {	0
org.apache.commons.lang3.math.NumberUtils:1376-if (!allowSigns) {	0
org.apache.commons.lang3.math.NumberUtils:1377-return false;	0
org.apache.commons.lang3.math.NumberUtils:1379-allowSigns = false;	0
org.apache.commons.lang3.math.NumberUtils:1380-foundDigit = false; // we need a digit after the E	0
org.apache.commons.lang3.SystemUtils:1672-static float toJavaVersionInt(String version) {	1
org.apache.commons.lang3.SystemUtils:1673-return toVersionInt(toJavaVersionIntArray(version, JAVA_VERSION_TRIM_SIZE));	0
org.apache.commons.lang3.SystemUtils:1717-return ArrayUtils.EMPTY_INT_ARRAY;	0
org.apache.commons.lang3.SystemUtils:104-public static final String AWT_TOOLKIT = getSystemProperty("awt.toolkit");	0
org.apache.commons.lang3.SystemUtils:127-public static final String FILE_ENCODING = getSystemProperty("file.encoding");	0
org.apache.commons.lang3.SystemUtils:146-public static final String FILE_SEPARATOR = getSystemProperty("file.separator");	0
org.apache.commons.lang3.SystemUtils:165-public static final String JAVA_AWT_FONTS = getSystemProperty("java.awt.fonts");	0
org.apache.commons.lang3.SystemUtils:184-public static final String JAVA_AWT_GRAPHICSENV = getSystemProperty("java.awt.graphicsenv");	0
org.apache.commons.lang3.SystemUtils:206-public static final String JAVA_AWT_HEADLESS = getSystemProperty("java.awt.headless");	0
org.apache.commons.lang3.SystemUtils:225-public static final String JAVA_AWT_PRINTERJOB = getSystemProperty("java.awt.printerjob");	0
org.apache.commons.lang3.SystemUtils:244-public static final String JAVA_CLASS_PATH = getSystemProperty("java.class.path");	0
org.apache.commons.lang3.SystemUtils:263-public static final String JAVA_CLASS_VERSION = getSystemProperty("java.class.version");	0
org.apache.commons.lang3.SystemUtils:283-public static final String JAVA_COMPILER = getSystemProperty("java.compiler");	0
org.apache.commons.lang3.SystemUtils:302-public static final String JAVA_ENDORSED_DIRS = getSystemProperty("java.endorsed.dirs");	0
org.apache.commons.lang3.SystemUtils:321-public static final String JAVA_EXT_DIRS = getSystemProperty("java.ext.dirs");	0
org.apache.commons.lang3.SystemUtils:340-public static final String JAVA_HOME = getSystemProperty(JAVA_HOME_KEY);	0
org.apache.commons.lang3.SystemUtils:359-public static final String JAVA_IO_TMPDIR = getSystemProperty(JAVA_IO_TMPDIR_KEY);	0
org.apache.commons.lang3.SystemUtils:378-public static final String JAVA_LIBRARY_PATH = getSystemProperty("java.library.path");	0
org.apache.commons.lang3.SystemUtils:398-public static final String JAVA_RUNTIME_NAME = getSystemProperty("java.runtime.name");	0
org.apache.commons.lang3.SystemUtils:418-public static final String JAVA_RUNTIME_VERSION = getSystemProperty("java.runtime.version");	0
org.apache.commons.lang3.SystemUtils:437-public static final String JAVA_SPECIFICATION_NAME = getSystemProperty("java.specification.name");	0
org.apache.commons.lang3.SystemUtils:456-public static final String JAVA_SPECIFICATION_VENDOR = getSystemProperty("java.specification.vendor");	0
org.apache.commons.lang3.SystemUtils:475-public static final String JAVA_SPECIFICATION_VERSION = getSystemProperty("java.specification.version");	0
org.apache.commons.lang3.SystemUtils:495-public static final String JAVA_UTIL_PREFS_PREFERENCES_FACTORY = getSystemProperty("java.util.prefs.PreferencesFactory");	0
org.apache.commons.lang3.SystemUtils:514-public static final String JAVA_VENDOR = getSystemProperty("java.vendor");	0
org.apache.commons.lang3.SystemUtils:533-public static final String JAVA_VENDOR_URL = getSystemProperty("java.vendor.url");	0
org.apache.commons.lang3.SystemUtils:552-public static final String JAVA_VERSION = getSystemProperty("java.version");	0
org.apache.commons.lang3.SystemUtils:572-public static final String JAVA_VM_INFO = getSystemProperty("java.vm.info");	0
org.apache.commons.lang3.SystemUtils:591-public static final String JAVA_VM_NAME = getSystemProperty("java.vm.name");	0
org.apache.commons.lang3.SystemUtils:610-public static final String JAVA_VM_SPECIFICATION_NAME = getSystemProperty("java.vm.specification.name");	0
org.apache.commons.lang3.SystemUtils:629-public static final String JAVA_VM_SPECIFICATION_VENDOR = getSystemProperty("java.vm.specification.vendor");	0
org.apache.commons.lang3.SystemUtils:648-public static final String JAVA_VM_SPECIFICATION_VERSION = getSystemProperty("java.vm.specification.version");	0
org.apache.commons.lang3.SystemUtils:667-public static final String JAVA_VM_VENDOR = getSystemProperty("java.vm.vendor");	0
org.apache.commons.lang3.SystemUtils:686-public static final String JAVA_VM_VERSION = getSystemProperty("java.vm.version");	0
org.apache.commons.lang3.SystemUtils:705-public static final String LINE_SEPARATOR = getSystemProperty("line.separator");	0
org.apache.commons.lang3.SystemUtils:724-public static final String OS_ARCH = getSystemProperty("os.arch");	0
org.apache.commons.lang3.SystemUtils:743-public static final String OS_NAME = getSystemProperty("os.name");	0
org.apache.commons.lang3.SystemUtils:762-public static final String OS_VERSION = getSystemProperty("os.version");	0
org.apache.commons.lang3.SystemUtils:781-public static final String PATH_SEPARATOR = getSystemProperty("path.separator");	0
org.apache.commons.lang3.SystemUtils:802-public static final String USER_COUNTRY = getSystemProperty("user.country") == null ? getSystemProperty("user.region")	0
org.apache.commons.lang3.SystemUtils:822-public static final String USER_DIR = getSystemProperty(USER_DIR_KEY);	0
org.apache.commons.lang3.SystemUtils:841-public static final String USER_HOME = getSystemProperty(USER_HOME_KEY);	0
org.apache.commons.lang3.SystemUtils:861-public static final String USER_LANGUAGE = getSystemProperty("user.language");	0
org.apache.commons.lang3.SystemUtils:880-public static final String USER_NAME = getSystemProperty("user.name");	0
org.apache.commons.lang3.SystemUtils:899-public static final String USER_TIMEZONE = getSystemProperty("user.timezone");	0
org.apache.commons.lang3.SystemUtils:917-public static final String JAVA_VERSION_TRIMMED = getJavaVersionTrimmed();	0
org.apache.commons.lang3.SystemUtils:943-public static final float JAVA_VERSION_FLOAT = getJavaVersionAsFloat();	0
org.apache.commons.lang3.SystemUtils:964-public static final int JAVA_VERSION_INT = getJavaVersionAsInt();	0
org.apache.commons.lang3.SystemUtils:980-public static final boolean IS_JAVA_1_1 = getJavaVersionMatches("1.1");	0
org.apache.commons.lang3.SystemUtils:991-public static final boolean IS_JAVA_1_2 = getJavaVersionMatches("1.2");	0
org.apache.commons.lang3.StringUtils:1674-if (cs == null || searchChars == null) {	0
org.apache.commons.lang3.StringUtils:1677-int csLen = cs.length();	0
org.apache.commons.lang3.StringUtils:1678-int searchLen = searchChars.length;	1
org.apache.commons.lang3.StringUtils:1679-for (int i = 0; i < csLen; i++) {	0
org.apache.commons.lang3.StringUtils:1680-char ch = cs.charAt(i);	0
org.apache.commons.lang3.StringUtils:1681-for (int j = 0; j < searchLen; j++) {	0
org.apache.commons.lang3.StringUtils:1682-if (searchChars[j] == ch) {	0
org.apache.commons.lang3.StringUtils:1685-return false;	0
org.apache.commons.lang3.StringUtils:194-return cs == null || cs.length() == 0;	0
org.apache.commons.lang3.StringUtils:1715-if (cs == null || invalidChars == null) {	0
org.apache.commons.lang3.StringUtils:1718-return containsNone(cs, invalidChars.toCharArray());	0
org.apache.commons.lang3.StringUtils:1372-if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {	0
org.apache.commons.lang3.StringUtils:1375-int csLen = cs.length();	0
org.apache.commons.lang3.StringUtils:1376-int searchLen = searchChars.length;	1
org.apache.commons.lang3.StringUtils:1377-for (int i = 0; i < csLen; i++) {	0
org.apache.commons.lang3.StringUtils:1378-char ch = cs.charAt(i);	0
org.apache.commons.lang3.StringUtils:1379-for (int j = 0; j < searchLen; j++) {	0
org.apache.commons.lang3.StringUtils:1380-if (searchChars[j] == ch) {	0
org.apache.commons.lang3.StringUtils:1382-return i;	0
org.apache.commons.lang3.StringUtils:1689-return true;	0
org.apache.commons.lang3.StringUtils:1462-return true;	0
org.apache.commons.lang3.StringUtils:1444-if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {	0
org.apache.commons.lang3.StringUtils:1447-int csLength = cs.length();	0
org.apache.commons.lang3.StringUtils:1448-int searchLength = searchChars.length;	0
org.apache.commons.lang3.StringUtils:1449-int csLast = csLength - 1;	0
org.apache.commons.lang3.StringUtils:1450-int searchLast = searchLength - 1;	0
org.apache.commons.lang3.StringUtils:1451-for (int i = 0; i < csLength; i++) {	0
org.apache.commons.lang3.StringUtils:1452-char ch = cs.charAt(i);	0
org.apache.commons.lang3.StringUtils:1453-for (int j = 0; j < searchLength; j++) {	0
org.apache.commons.lang3.StringUtils:1454-if (searchChars[j] == ch) {	0
org.apache.commons.lang3.StringUtils:1455-if (i < csLast && j < searchLast && ch >= Character.MIN_HIGH_SURROGATE && ch <= Character.MAX_HIGH_SURROGATE) {	1
org.apache.commons.lang3.StringUtils:1467-return false;	0
org.apache.commons.lang3.StringUtils:1412-if (isEmpty(cs) || isEmpty(searchChars)) {	0
org.apache.commons.lang3.StringUtils:1415-return indexOfAny(cs, searchChars.toCharArray());	0
org.apache.commons.lang3.StringUtils:1570-if (isEmpty(str) || isEmpty(searchChars)) {	0
org.apache.commons.lang3.StringUtils:1573-int strLen = str.length();	0
org.apache.commons.lang3.StringUtils:1574-for (int i = 0; i < strLen; i++) {	0
org.apache.commons.lang3.StringUtils:1575-char ch = str.charAt(i);	0
org.apache.commons.lang3.StringUtils:1576-if (searchChars.indexOf(ch) < 0) {	1
org.apache.commons.lang3.StringUtils:1577-return i;	0
org.apache.commons.lang3.StringUtils:1498-if (searchChars == null) {	0
org.apache.commons.lang3.StringUtils:1501-return containsAny(cs, searchChars.toCharArray());	0
org.apache.commons.lang3.StringUtils:1529-if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {	0
org.apache.commons.lang3.StringUtils:1532-int csLen = cs.length();	0
org.apache.commons.lang3.StringUtils:1533-int searchLen = searchChars.length;	1
org.apache.commons.lang3.StringUtils:1535-for (int i = 0; i < csLen; i++) {	0
org.apache.commons.lang3.StringUtils:1536-char ch = cs.charAt(i);	0
org.apache.commons.lang3.StringUtils:1537-for (int j = 0; j < searchLen; j++) {	0
org.apache.commons.lang3.StringUtils:1538-if (searchChars[j] == ch) {	0
org.apache.commons.lang3.StringUtils:1539-continue outer;	1
org.apache.commons.lang3.StringUtils:1441-if (isEmpty(cs) || ArrayUtils.isEmpty(searchChars)) {	0
org.apache.commons.lang3.StringUtils:1444-int csLength = cs.length();	0
org.apache.commons.lang3.StringUtils:1445-int searchLength = searchChars.length;	0
org.apache.commons.lang3.StringUtils:1446-for (int i = 0; i < csLength; i++) {	1
org.apache.commons.lang3.StringUtils:1447-char ch = cs.charAt(i);	0
org.apache.commons.lang3.StringUtils:1448-for (int j = 0; j < searchLength; j++) {	0
org.apache.commons.lang3.StringUtils:1449-if (searchChars[j] == ch) {	0
org.apache.commons.lang3.StringUtils:1452-return true;	0
org.apache.commons.lang3.StringUtils:1487-if (searchChars == null) {	0
org.apache.commons.lang3.StringUtils:1490-return containsAny(cs, searchChars.toCharArray());	0
org.apache.commons.lang3.StringUtils:194-return cs == null || cs.length() == 0;	0
org.apache.commons.lang3.StringUtils:170-super();	0
org.apache.commons.lang3.StringUtils:171-}	0
org.apache.commons.lang3.StringUtils:212-return !StringUtils.isEmpty(cs);	0
org.apache.commons.lang3.StringUtils:232-if (cs == null || (strLen = cs.length()) == 0) {	0
org.apache.commons.lang3.StringUtils:233-return true;	0
org.apache.commons.lang3.StringUtils:235-for (int i = 0; i < strLen; i++) {	0
org.apache.commons.lang3.StringUtils:236-if ((Character.isWhitespace(cs.charAt(i)) == false)) {	0
org.apache.commons.lang3.StringUtils:237-return false;	0
org.apache.commons.lang3.StringUtils:240-return true;	0
org.apache.commons.lang3.StringUtils:260-return !StringUtils.isBlank(cs);	0
org.apache.commons.lang3.StringUtils:289-return str == null ? null : str.trim();	0
org.apache.commons.lang3.StringUtils:315-String ts = trim(str);	0
org.apache.commons.lang3.StringUtils:316-return isEmpty(ts) ? null : ts;	0
org.apache.commons.lang3.StringUtils:341-return str == null ? EMPTY : str.trim();	0
org.apache.commons.lang3.StringUtils:369-return strip(str, null);	0
org.apache.commons.lang3.StringUtils:396-if (str == null) {	0
org.apache.commons.lang3.StringUtils:397-return null;	0
org.apache.commons.lang3.StringUtils:399-str = strip(str, null);	0
org.apache.commons.lang3.StringUtils:400-return str.length() == 0 ? null : str;	0
org.apache.commons.lang3.StringUtils:426-return str == null ? EMPTY : strip(str, null);	0
org.apache.commons.lang3.StringUtils:456-if (isEmpty(str)) {	0
org.apache.commons.lang3.StringUtils:457-return str;	0
org.apache.commons.lang3.StringUtils:459-str = stripStart(str, stripChars);	0
org.apache.commons.lang3.StringUtils:460-return stripEnd(str, stripChars);	0
org.apache.commons.lang3.StringUtils:489-if (str == null || (strLen = str.length()) == 0) {	0
org.apache.commons.lang3.StringUtils:490-return str;	0
org.apache.commons.lang3.StringUtils:492-int start = 0;	0
org.apache.commons.lang3.StringUtils:493-if (stripChars == null) {	0
org.apache.commons.lang3.StringUtils:494-while ((start != strLen) && Character.isWhitespace(str.charAt(start))) {	0
org.apache.commons.lang3.StringUtils:495-start++;	0
org.apache.commons.lang3.StringUtils:497-} else if (stripChars.length() == 0) {	0
org.apache.commons.lang3.StringUtils:498-return str;	0
org.apache.commons.lang3.StringUtils:500-while ((start != strLen) && (stripChars.indexOf(str.charAt(start)) != INDEX_NOT_FOUND)) {	0
org.apache.commons.lang3.StringUtils:501-start++;	0
org.apache.commons.lang3.StringUtils:504-return str.substring(start);	0
org.apache.commons.lang3.StringUtils:533-if (str == null || (end = str.length()) == 0) {	0
org.apache.commons.lang3.StringUtils:534-return str;	0
org.apache.commons.lang3.StringUtils:537-if (stripChars == null) {	0
org.apache.commons.lang3.StringUtils:538-while ((end != 0) && Character.isWhitespace(str.charAt(end - 1))) {	0
org.apache.commons.lang3.builder.HashCodeBuilder:174-return;	0
org.apache.commons.lang3.builder.HashCodeBuilder:137-return REGISTRY.get();	0
org.apache.commons.lang3.builder.HashCodeBuilder:152-return getRegistry().contains(new IDKey(value));	1
org.apache.commons.lang3.builder.HashCodeBuilder:173-if (isRegistered(object)) {	0
org.apache.commons.lang3.builder.HashCodeBuilder:177-register(object);	0
org.apache.commons.lang3.builder.HashCodeBuilder:178-Field[] fields = clazz.getDeclaredFields();	0
org.apache.commons.lang3.builder.HashCodeBuilder:179-AccessibleObject.setAccessible(fields, true);	0
org.apache.commons.lang3.builder.HashCodeBuilder:180-for (Field field : fields) {	0
org.apache.commons.lang3.builder.HashCodeBuilder:181-if (!ArrayUtils.contains(excludeFields, field.getName())	0
org.apache.commons.lang3.builder.HashCodeBuilder:186-Object fieldValue = field.get(object);	0
org.apache.commons.lang3.builder.HashCodeBuilder:187-builder.append(fieldValue);	0
org.apache.commons.lang3.builder.HashCodeBuilder:192-}	0
org.apache.commons.lang3.builder.HashCodeBuilder:196-unregister(object);	0
org.apache.commons.lang3.builder.HashCodeBuilder:197-}	0
org.apache.commons.lang3.builder.HashCodeBuilder:198-}	0
org.apache.commons.lang3.builder.HashCodeBuilder:360-Class<?> clazz = object.getClass();	0
org.apache.commons.lang3.builder.HashCodeBuilder:361-reflectionAppend(object, clazz, builder, testTransients, excludeFields);	0
org.apache.commons.lang3.builder.HashCodeBuilder:362-while (clazz.getSuperclass() != null && clazz != reflectUpToClass) {	0
org.apache.commons.lang3.builder.HashCodeBuilder:363-clazz = clazz.getSuperclass();	0
org.apache.commons.lang3.builder.HashCodeBuilder:364-reflectionAppend(object, clazz, builder, testTransients, excludeFields);	0
org.apache.commons.lang3.builder.HashCodeBuilder:366-return builder.toHashCode();	0
org.apache.commons.lang3.builder.HashCodeBuilder:400-return reflectionHashCode(17, 37, object, false, null, null);	0
org.apache.commons.lang3.builder.HashCodeBuilder:522-getRegistry().add(new IDKey(value));	1
org.apache.commons.lang3.builder.HashCodeBuilder:523-}	0
org.apache.commons.lang3.builder.HashCodeBuilder:538-getRegistry().remove(new IDKey(value));	1
org.apache.commons.lang3.builder.HashCodeBuilder:539-}	0
org.apache.commons.lang3.builder.HashCodeBuilder:359-HashCodeBuilder builder = new HashCodeBuilder(initialNonZeroOddNumber, multiplierNonZeroOddNumber);	0
org.apache.commons.lang3.builder.HashCodeBuilder:356-if (object == null) {	0
org.apache.commons.lang3.builder.HashCodeBuilder:883-iTotal = iTotal * iConstant + object.hashCode();	0
org.apache.commons.lang3.builder.HashCodeBuilder:855-if (object == null) {	0
org.apache.commons.lang3.builder.HashCodeBuilder:859-if(object.getClass().isArray()) {	0
org.apache.commons.lang3.builder.HashCodeBuilder:886-return this;	0
org.apache.commons.lang3.builder.HashCodeBuilder:585-if (multiplierNonZeroOddNumber == 0) {	0
org.apache.commons.lang3.builder.HashCodeBuilder:588-if (multiplierNonZeroOddNumber % 2 == 0) {	0
org.apache.commons.lang3.builder.HashCodeBuilder:591-iConstant = multiplierNonZeroOddNumber;	0
org.apache.commons.lang3.builder.HashCodeBuilder:592-iTotal = initialNonZeroOddNumber;	0
org.apache.commons.lang3.builder.HashCodeBuilder:593-}	0
org.apache.commons.lang3.builder.HashCodeBuilder:966-return iTotal;	0
org.apache.commons.lang3.builder.HashCodeBuilder:582-if (initialNonZeroOddNumber % 2 == 0) {	0
org.apache.commons.lang3.builder.HashCodeBuilder:578-public HashCodeBuilder(int initialNonZeroOddNumber, int multiplierNonZeroOddNumber) {	0
org.apache.commons.lang3.builder.HashCodeBuilder:549-private int iTotal = 0;	0
org.apache.commons.lang3.builder.HashCodeBuilder:579-if (initialNonZeroOddNumber == 0) {	0
org.apache.commons.lang3.builder.HashCodeBuilder:104-private static final ThreadLocal<Set<IDKey>> REGISTRY = new ThreadLocal<Set<IDKey>>() {	1
org.apache.commons.lang3.builder.HashCodeBuilder:556-public HashCodeBuilder() {	0
org.apache.commons.lang3.builder.HashCodeBuilder:549-private int iTotal = 0;	0
org.apache.commons.lang3.builder.HashCodeBuilder:557-iConstant = 37;	0
org.apache.commons.lang3.builder.HashCodeBuilder:558-iTotal = 17;	0
org.apache.commons.lang3.builder.HashCodeBuilder:559-}	0
org.apache.commons.lang3.builder.HashCodeBuilder:580-throw new IllegalArgumentException("HashCodeBuilder requires a non zero initial value");	0
org.apache.commons.lang3.builder.HashCodeBuilder:583-throw new IllegalArgumentException("HashCodeBuilder requires an odd initial value");	0
org.apache.commons.lang3.ClassUtils:903-if (array == null) {	0
org.apache.commons.lang3.ClassUtils:904-return null;	0
org.apache.commons.lang3.ClassUtils:905-} else if (array.length == 0) {	0
org.apache.commons.lang3.ClassUtils:906-return ArrayUtils.EMPTY_CLASS_ARRAY;	0
org.apache.commons.lang3.ClassUtils:908-Class<?>[] classes = new Class[array.length];	0
org.apache.commons.lang3.ClassUtils:909-for (int i = 0; i < array.length; i++) {	0
org.apache.commons.lang3.ClassUtils:910-classes[i] = array[i].getClass();	1
org.apache.commons.lang3.ClassUtils:912-return classes;	0
org.apache.commons.lang3.ClassUtils:58-public static final String PACKAGE_SEPARATOR = String.valueOf(PACKAGE_SEPARATOR_CHAR);	0
org.apache.commons.lang3.ClassUtils:68-public static final String INNER_CLASS_SEPARATOR = String.valueOf(INNER_CLASS_SEPARATOR_CHAR);	0
org.apache.commons.lang3.ClassUtils:73-private static final Map<Class<?>, Class<?>> primitiveWrapperMap = new HashMap<Class<?>, Class<?>>();	0
org.apache.commons.lang3.ClassUtils:75-primitiveWrapperMap.put(Boolean.TYPE, Boolean.class);	0
org.apache.commons.lang3.ClassUtils:76-primitiveWrapperMap.put(Byte.TYPE, Byte.class);	0
org.apache.commons.lang3.ClassUtils:77-primitiveWrapperMap.put(Character.TYPE, Character.class);	0
org.apache.commons.lang3.ClassUtils:78-primitiveWrapperMap.put(Short.TYPE, Short.class);	0
org.apache.commons.lang3.ClassUtils:79-primitiveWrapperMap.put(Integer.TYPE, Integer.class);	0
org.apache.commons.lang3.ClassUtils:80-primitiveWrapperMap.put(Long.TYPE, Long.class);	0
org.apache.commons.lang3.ClassUtils:81-primitiveWrapperMap.put(Double.TYPE, Double.class);	0
org.apache.commons.lang3.ClassUtils:82-primitiveWrapperMap.put(Float.TYPE, Float.class);	0
org.apache.commons.lang3.ClassUtils:83-primitiveWrapperMap.put(Void.TYPE, Void.TYPE);	0
org.apache.commons.lang3.ClassUtils:89-private static final Map<Class<?>, Class<?>> wrapperPrimitiveMap = new HashMap<Class<?>, Class<?>>();	0
org.apache.commons.lang3.ClassUtils:91-for (Class<?> primitiveClass : primitiveWrapperMap.keySet()) {	0
org.apache.commons.lang3.ClassUtils:92-Class<?> wrapperClass = primitiveWrapperMap.get(primitiveClass);	0
org.apache.commons.lang3.ClassUtils:93-if (!primitiveClass.equals(wrapperClass)) {	0
org.apache.commons.lang3.ClassUtils:94-wrapperPrimitiveMap.put(wrapperClass, primitiveClass);	0
org.apache.commons.lang3.ClassUtils:96-}	0
org.apache.commons.lang3.ClassUtils:102-private static final Map<String, String> abbreviationMap = new HashMap<String, String>();	0
org.apache.commons.lang3.ClassUtils:107-private static final Map<String, String> reverseAbbreviationMap = new HashMap<String, String>();	0
org.apache.commons.lang3.ClassUtils:124-addAbbreviation("int", "I");	0
org.apache.commons.lang3.ClassUtils:125-addAbbreviation("boolean", "Z");	0
org.apache.commons.lang3.ClassUtils:126-addAbbreviation("float", "F");	0
org.apache.commons.lang3.ClassUtils:127-addAbbreviation("long", "J");	0
org.apache.commons.lang3.ClassUtils:128-addAbbreviation("short", "S");	0
org.apache.commons.lang3.ClassUtils:129-addAbbreviation("byte", "B");	0
org.apache.commons.lang3.ClassUtils:130-addAbbreviation("double", "D");	0
org.apache.commons.lang3.ClassUtils:131-addAbbreviation("char", "C");	0
org.apache.commons.lang3.ClassUtils:132-}	0
org.apache.commons.lang3.ClassUtils:116-abbreviationMap.put(primitive, abbreviation);	0
org.apache.commons.lang3.ClassUtils:117-reverseAbbreviationMap.put(abbreviation, primitive);	0
org.apache.commons.lang3.ClassUtils:118-}	0
org.apache.commons.lang3.ClassUtils:143-super();	0
org.apache.commons.lang3.ClassUtils:144-}	0
org.apache.commons.lang3.ClassUtils:156-if (object == null) {	0
org.apache.commons.lang3.ClassUtils:157-return valueIfNull;	0
org.apache.commons.lang3.ClassUtils:159-return getShortClassName(object.getClass());	0
org.apache.commons.lang3.ClassUtils:169-if (cls == null) {	0
org.apache.commons.lang3.ClassUtils:170-return StringUtils.EMPTY;	0
org.apache.commons.lang3.ClassUtils:172-return getShortClassName(cls.getName());	0
org.apache.commons.lang3.ClassUtils:184-if (className == null) {	0
org.apache.commons.lang3.ClassUtils:185-return StringUtils.EMPTY;	0
org.apache.commons.lang3.math.NumberUtils:450-return null;	0
org.apache.commons.lang3.math.NumberUtils:463-return createInteger(str);	0
org.apache.commons.lang3.math.NumberUtils:474-if (expPos > -1) {	0
org.apache.commons.lang3.math.NumberUtils:475-if (expPos < decPos) {	0
org.apache.commons.lang3.math.NumberUtils:478-dec = str.substring(decPos + 1, expPos);	0
org.apache.commons.lang3.math.NumberUtils:480-dec = str.substring(decPos + 1);	0
org.apache.commons.lang3.math.NumberUtils:482-mant = str.substring(0, decPos);	0
org.apache.commons.lang3.math.NumberUtils:493-exp = str.substring(expPos + 1, str.length() - 1);	0
org.apache.commons.lang3.math.NumberUtils:518-Float f = NumberUtils.createFloat(numeric);	0
org.apache.commons.lang3.math.NumberUtils:519-if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {	0
org.apache.commons.lang3.math.NumberUtils:522-return f;	0
org.apache.commons.lang3.math.NumberUtils:532-Double d = NumberUtils.createDouble(numeric);	0
org.apache.commons.lang3.math.NumberUtils:533-if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {	0
org.apache.commons.lang3.math.NumberUtils:534-return d;	0
org.apache.commons.lang3.math.NumberUtils:540-return createBigDecimal(numeric);	0
org.apache.commons.lang3.math.NumberUtils:546-throw new NumberFormatException(str + " is not a valid number.");	0
org.apache.commons.lang3.math.NumberUtils:552-if (expPos > -1 && expPos < str.length() - 1) {	0
org.apache.commons.lang3.math.NumberUtils:553-exp = str.substring(expPos + 1, str.length());	0
org.apache.commons.lang3.math.NumberUtils:555-exp = null;	0
org.apache.commons.lang3.math.NumberUtils:557-if (dec == null && exp == null) {	0
org.apache.commons.lang3.math.NumberUtils:560-return createInteger(str);	0
org.apache.commons.lang3.math.NumberUtils:561-} catch (NumberFormatException nfe) {	0
org.apache.commons.lang3.math.NumberUtils:565-return createLong(str);	0
org.apache.commons.lang3.math.NumberUtils:566-} catch (NumberFormatException nfe) {	0
org.apache.commons.lang3.math.NumberUtils:569-return createBigInteger(str);	0
org.apache.commons.lang3.math.NumberUtils:573-boolean allZeros = isAllZeros(mant) && isAllZeros(exp);	0
org.apache.commons.lang3.math.NumberUtils:575-Float f = createFloat(str);	0
org.apache.commons.lang3.math.NumberUtils:576-if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {	0
org.apache.commons.lang3.math.NumberUtils:577-return f;	0
org.apache.commons.lang3.math.NumberUtils:583-Double d = createDouble(str);	0
org.apache.commons.lang3.math.NumberUtils:449-if (str == null) {	0
org.apache.commons.lang3.math.NumberUtils:452-if (StringUtils.isBlank(str)) {	0
org.apache.commons.lang3.math.NumberUtils:455-if (str.startsWith("--")) {	0
org.apache.commons.lang3.math.NumberUtils:462-if (str.startsWith("0x") || str.startsWith("-0x")) {	0
org.apache.commons.lang3.math.NumberUtils:465-char lastChar = str.charAt(str.length() - 1);	0
org.apache.commons.lang3.math.NumberUtils:469-int decPos = str.indexOf('.');	0
org.apache.commons.lang3.math.NumberUtils:470-int expPos = str.indexOf('e') + str.indexOf('E') + 1;	0
org.apache.commons.lang3.math.NumberUtils:472-if (decPos > -1) {	0
org.apache.commons.lang3.math.NumberUtils:484-if (expPos > -1) {	0
org.apache.commons.lang3.math.NumberUtils:487-mant = str;	0
org.apache.commons.lang3.math.NumberUtils:489-dec = null;	0
org.apache.commons.lang3.math.NumberUtils:491-if (!Character.isDigit(lastChar)) {	1
org.apache.commons.lang3.math.NumberUtils:492-if (expPos > -1 && expPos < str.length() - 1) {	0
org.apache.commons.lang3.math.NumberUtils:495-exp = null;	0
org.apache.commons.lang3.math.NumberUtils:498-String numeric = str.substring(0, str.length() - 1);	0
org.apache.commons.lang3.math.NumberUtils:499-boolean allZeros = isAllZeros(mant) && isAllZeros(exp);	0
org.apache.commons.lang3.math.NumberUtils:500-switch (lastChar) {	0
org.apache.commons.lang3.math.NumberUtils:503-if (dec == null	0
org.apache.commons.lang3.math.NumberUtils:507-return createLong(numeric);	0
org.apache.commons.lang3.math.NumberUtils:606-if (str == null) {	0
org.apache.commons.lang3.ArrayUtils:2954-if (array1 == null) {	0
org.apache.commons.lang3.ArrayUtils:2956-} else if (array2 == null) {	0
org.apache.commons.lang3.ArrayUtils:2959-final Class<?> type1 = array1.getClass().getComponentType();	0
org.apache.commons.lang3.ArrayUtils:2960-T[] joinedArray = (T[]) Array.newInstance(type1, array1.length + array2.length);	0
org.apache.commons.lang3.ArrayUtils:2961-System.arraycopy(array1, 0, joinedArray, 0, array1.length);	0
org.apache.commons.lang3.ArrayUtils:2962-System.arraycopy(array2, 0, joinedArray, array1.length, array2.length);	1
org.apache.commons.lang3.ArrayUtils:2964-return joinedArray;	0
org.apache.commons.lang3.ArrayUtils:54-public static final Object[] EMPTY_OBJECT_ARRAY = new Object[0];	0
org.apache.commons.lang3.ArrayUtils:58-public static final Class<?>[] EMPTY_CLASS_ARRAY = new Class[0];	0
org.apache.commons.lang3.ArrayUtils:62-public static final String[] EMPTY_STRING_ARRAY = new String[0];	0
org.apache.commons.lang3.ArrayUtils:66-public static final long[] EMPTY_LONG_ARRAY = new long[0];	0
org.apache.commons.lang3.ArrayUtils:70-public static final Long[] EMPTY_LONG_OBJECT_ARRAY = new Long[0];	0
org.apache.commons.lang3.ArrayUtils:74-public static final int[] EMPTY_INT_ARRAY = new int[0];	0
org.apache.commons.lang3.ArrayUtils:78-public static final Integer[] EMPTY_INTEGER_OBJECT_ARRAY = new Integer[0];	0
org.apache.commons.lang3.ArrayUtils:82-public static final short[] EMPTY_SHORT_ARRAY = new short[0];	0
org.apache.commons.lang3.ArrayUtils:86-public static final Short[] EMPTY_SHORT_OBJECT_ARRAY = new Short[0];	0
org.apache.commons.lang3.ArrayUtils:90-public static final byte[] EMPTY_BYTE_ARRAY = new byte[0];	0
org.apache.commons.lang3.ArrayUtils:94-public static final Byte[] EMPTY_BYTE_OBJECT_ARRAY = new Byte[0];	0
org.apache.commons.lang3.ArrayUtils:98-public static final double[] EMPTY_DOUBLE_ARRAY = new double[0];	0
org.apache.commons.lang3.ArrayUtils:102-public static final Double[] EMPTY_DOUBLE_OBJECT_ARRAY = new Double[0];	0
org.apache.commons.lang3.ArrayUtils:106-public static final float[] EMPTY_FLOAT_ARRAY = new float[0];	0
org.apache.commons.lang3.ArrayUtils:110-public static final Float[] EMPTY_FLOAT_OBJECT_ARRAY = new Float[0];	0
org.apache.commons.lang3.ArrayUtils:114-public static final boolean[] EMPTY_BOOLEAN_ARRAY = new boolean[0];	0
org.apache.commons.lang3.ArrayUtils:118-public static final Boolean[] EMPTY_BOOLEAN_OBJECT_ARRAY = new Boolean[0];	0
org.apache.commons.lang3.ArrayUtils:122-public static final char[] EMPTY_CHAR_ARRAY = new char[0];	0
org.apache.commons.lang3.ArrayUtils:126-public static final Character[] EMPTY_CHARACTER_OBJECT_ARRAY = new Character[0];	0
org.apache.commons.lang3.ArrayUtils:143-super();	0
org.apache.commons.lang3.ArrayUtils:144-}	0
org.apache.commons.lang3.ArrayUtils:160-return toString(array, "{}");	0
org.apache.commons.lang3.ArrayUtils:176-if (array == null) {	0
org.apache.commons.lang3.ArrayUtils:177-return stringIfNull;	0
org.apache.commons.lang3.ArrayUtils:179-return new ToStringBuilder(array, ToStringStyle.SIMPLE_STYLE).append(array).toString();	0
org.apache.commons.lang3.ArrayUtils:193-return new EqualsBuilder().append(array1, array2).isEquals();	0
org.apache.commons.lang3.ArrayUtils:224-if (array == null) {	0
org.apache.commons.lang3.ArrayUtils:225-return null;	0
org.apache.commons.lang3.ArrayUtils:227-final Map<Object, Object> map = new HashMap<Object, Object>((int) (array.length * 1.5));	0
org.apache.commons.lang3.ArrayUtils:228-for (int i = 0; i < array.length; i++) {	0
org.apache.commons.lang3.ArrayUtils:229-Object object = array[i];	0
org.apache.commons.lang3.ArrayUtils:230-if (object instanceof Map.Entry<?, ?>) {	0
org.apache.commons.lang3.ArrayUtils:231-Map.Entry<?,?> entry = (Map.Entry<?,?>) object;	0
org.apache.commons.lang3.ArrayUtils:232-map.put(entry.getKey(), entry.getValue());	0
org.apache.commons.lang3.ArrayUtils:233-} else if (object instanceof Object[]) {	0
org.apache.commons.lang3.ArrayUtils:234-Object[] entry = (Object[]) object;	0
org.apache.commons.lang3.ArrayUtils:235-if (entry.length < 2) {	0
org.apache.commons.lang3.ArrayUtils:236-throw new IllegalArgumentException("Array element " + i + ", '"	0
org.apache.commons.lang3.ArrayUtils:240-map.put(entry[0], entry[1]);	0
org.apache.commons.lang3.ArrayUtils:241-} else {	0
org.apache.commons.lang3.ArrayUtils:242-throw new IllegalArgumentException("Array element " + i + ", '"	0
org.apache.commons.lang3.ArrayUtils:247-return map;	0
org.apache.commons.lang3.ArrayUtils:265-if (array == null) {	0
org.apache.commons.lang3.time.FastDateFormat:642-rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);	0
org.apache.commons.lang3.time.FastDateFormat:643-break;	0
org.apache.commons.lang3.time.FastDateFormat:872-calendar = (Calendar) calendar.clone();	1
org.apache.commons.lang3.time.FastDateFormat:873-calendar.setTimeZone(mTimeZone);	0
org.apache.commons.lang3.time.FastDateFormat:182-return getInstance(pattern, timeZone, null);	0
org.apache.commons.lang3.time.FastDateFormat:633-rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);	0
org.apache.commons.lang3.time.FastDateFormat:634-break;	0
org.apache.commons.lang3.time.FastDateFormat:639-rule = selectNumberRule(Calendar.SECOND, tokenLen);	0
org.apache.commons.lang3.time.FastDateFormat:640-break;	0
org.apache.commons.lang3.time.FastDateFormat:738-if (i + 1 < length && pattern.charAt(i + 1) == '\'') {	0
org.apache.commons.lang3.time.FastDateFormat:743-inLiteral = !inLiteral;	0
org.apache.commons.lang3.time.FastDateFormat:636-rule = selectNumberRule(Calendar.MINUTE, tokenLen);	0
org.apache.commons.lang3.time.FastDateFormat:637-break;	0
org.apache.commons.lang3.time.FastDateFormat:832-return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();	0
org.apache.commons.lang3.time.FastDateFormat:871-if (mTimeZoneForced) {	0
org.apache.commons.lang3.time.FastDateFormat:875-return applyRules(calendar, buf);	0
org.apache.commons.lang3.time.FastDateFormat:887-Rule[] rules = mRules;	0
org.apache.commons.lang3.time.FastDateFormat:888-int len = mRules.length;	0
org.apache.commons.lang3.time.FastDateFormat:889-for (int i = 0; i < len; i++) {	0
org.apache.commons.lang3.time.FastDateFormat:890-rules[i].appendTo(buf, calendar);	0
org.apache.commons.lang3.time.FastDateFormat:892-return buf;	0
org.apache.commons.lang3.time.FastDateFormat:627-rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);	0
org.apache.commons.lang3.time.FastDateFormat:628-break;	0
org.apache.commons.lang3.time.FastDateFormat:549-locale = Locale.getDefault();	0
org.apache.commons.lang3.time.FastDateFormat:621-rule = TwoDigitMonthField.INSTANCE;	0
org.apache.commons.lang3.time.FastDateFormat:618-} else if (tokenLen == 3) {	0
org.apache.commons.lang3.time.FastDateFormat:620-} else if (tokenLen == 2) {	0
org.apache.commons.lang3.time.FastDateFormat:610-rule = selectNumberRule(Calendar.YEAR, tokenLen);	0
org.apache.commons.lang3.time.FastDateFormat:771-return new TwoDigitNumberField(field);	0
org.apache.commons.lang3.time.FastDateFormat:773-return new PaddedNumberField(field, padding);	0
org.apache.commons.lang3.time.FastDateFormat:535-super();	0
org.apache.commons.lang3.time.FastDateFormat:536-if (pattern == null) {	0
org.apache.commons.lang3.time.FastDateFormat:539-mPattern = pattern;	0
org.apache.commons.lang3.time.FastDateFormat:541-mTimeZoneForced = (timeZone != null);	0
org.apache.commons.lang3.time.FastDateFormat:542-if (timeZone == null) {	0
org.apache.commons.lang3.time.FastDateFormat:545-mTimeZone = timeZone;	0
org.apache.commons.lang3.time.FastDateFormat:547-mLocaleForced = (locale != null);	0
org.apache.commons.lang3.time.FastDateFormat:548-if (locale == null) {	0
org.apache.commons.lang3.time.FastDateFormat:551-mLocale = locale;	0
org.apache.commons.lang3.time.FastDateFormat:552-}	0
org.apache.commons.lang3.time.FastDateFormat:111-private static final Map<FastDateFormat, FastDateFormat> cInstanceCache = new HashMap<FastDateFormat, FastDateFormat>(7);	0
org.apache.commons.lang3.time.FastDateFormat:112-private static final Map<Object, FastDateFormat> cDateInstanceCache = new HashMap<Object, FastDateFormat>(7);	0
org.apache.commons.lang3.time.FastDateFormat:113-private static final Map<Object, FastDateFormat> cTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);	0
org.apache.commons.lang3.time.FastDateFormat:114-private static final Map<Object, FastDateFormat> cDateTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);	0
org.apache.commons.lang3.time.FastDateFormat:115-private static final Map<Object, String> cTimeZoneDisplayCache = new HashMap<Object, String>(7);	0
org.apache.commons.lang3.time.FastDateFormat:213-FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);	0
org.apache.commons.lang3.time.FastDateFormat:214-FastDateFormat format = cInstanceCache.get(emptyFormat);	0
org.apache.commons.lang3.time.FastDateFormat:215-if (format == null) {	0
org.apache.commons.lang3.time.FastDateFormat:216-format = emptyFormat;	0
org.apache.commons.lang3.time.FastDateFormat:217-format.init();// convert shell format into usable one	0
org.apache.commons.lang3.StringUtils:3502-return replaceEach(text, searchList, replacementList, false, 0);	0
org.apache.commons.lang3.StringUtils:3648-continue;	0
org.apache.commons.lang3.StringUtils:3727-return result;	0
org.apache.commons.lang3.StringUtils:3612-if (text == null || text.length() == 0 || searchList == null ||	0
org.apache.commons.lang3.StringUtils:3615-return text;	0
org.apache.commons.lang3.StringUtils:3619-if (timeToLive < 0) {	0
org.apache.commons.lang3.StringUtils:3623-int searchLength = searchList.length;	0
org.apache.commons.lang3.StringUtils:3624-int replacementLength = replacementList.length;	0
org.apache.commons.lang3.StringUtils:3627-if (searchLength != replacementLength) {	0
org.apache.commons.lang3.StringUtils:3635-boolean[] noMoreMatchesForReplIndex = new boolean[searchLength];	0
org.apache.commons.lang3.StringUtils:3638-int textIndex = -1;	0
org.apache.commons.lang3.StringUtils:3639-int replaceIndex = -1;	0
org.apache.commons.lang3.StringUtils:3640-int tempIndex = -1;	0
org.apache.commons.lang3.StringUtils:3644-for (int i = 0; i < searchLength; i++) {	0
org.apache.commons.lang3.StringUtils:3645-if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||	0
org.apache.commons.lang3.StringUtils:3650-tempIndex = text.indexOf(searchList[i]);	0
org.apache.commons.lang3.StringUtils:3653-if (tempIndex == -1) {	0
org.apache.commons.lang3.StringUtils:3654-noMoreMatchesForReplIndex[i] = true;	0
org.apache.commons.lang3.StringUtils:3656-if (textIndex == -1 || tempIndex < textIndex) {	0
org.apache.commons.lang3.StringUtils:3657-textIndex = tempIndex;	0
org.apache.commons.lang3.StringUtils:3658-replaceIndex = i;	0
org.apache.commons.lang3.StringUtils:3665-if (textIndex == -1) {	0
org.apache.commons.lang3.StringUtils:3666-return text;	0
org.apache.commons.lang3.StringUtils:3669-int start = 0;	0
org.apache.commons.lang3.StringUtils:3672-int increase = 0;	0
org.apache.commons.lang3.StringUtils:3675-for (int i = 0; i < searchList.length; i++) {	0
org.apache.commons.lang3.StringUtils:3676-int greater = replacementList[i].length() - searchList[i].length();	1
org.apache.commons.lang3.StringUtils:3677-if (greater > 0) {	0
org.apache.commons.lang3.StringUtils:3682-increase = Math.min(increase, text.length() / 5);	0
org.apache.commons.lang3.StringUtils:3684-StringBuilder buf = new StringBuilder(text.length() + increase);	0
org.apache.commons.lang3.StringUtils:3686-while (textIndex != -1) {	0
org.apache.commons.lang3.StringUtils:3688-for (int i = start; i < textIndex; i++) {	0
org.apache.commons.lang3.StringUtils:3689-buf.append(text.charAt(i));	0
org.apache.commons.lang3.StringUtils:3691-buf.append(replacementList[replaceIndex]);	0
org.apache.commons.lang3.StringUtils:3693-start = textIndex + searchList[replaceIndex].length();	0
org.apache.commons.lang3.StringUtils:3695-textIndex = -1;	0
org.apache.commons.lang3.StringUtils:3696-replaceIndex = -1;	0
org.apache.commons.lang3.StringUtils:3697-tempIndex = -1;	0
org.apache.commons.lang3.StringUtils:3700-for (int i = 0; i < searchLength; i++) {	0
org.apache.commons.lang3.StringUtils:3701-if (noMoreMatchesForReplIndex[i] || searchList[i] == null ||	0
org.apache.commons.lang3.StringUtils:3706-tempIndex = text.indexOf(searchList[i], start);	0
org.apache.commons.lang3.StringUtils:3709-if (tempIndex == -1) {	0
org.apache.commons.lang3.StringUtils:3710-noMoreMatchesForReplIndex[i] = true;	0
org.apache.commons.lang3.StringUtils:3712-if (textIndex == -1 || tempIndex < textIndex) {	0
org.apache.commons.lang3.StringUtils:3713-textIndex = tempIndex;	0
org.apache.commons.lang3.StringUtils:3714-replaceIndex = i;	0
org.apache.commons.lang3.StringUtils:3721-int textLength = text.length();	0
org.apache.commons.lang3.StringUtils:3722-for (int i = start; i < textLength; i++) {	0
org.apache.commons.lang3.StringUtils:3723-buf.append(text.charAt(i));	0
org.apache.commons.lang3.StringUtils:3725-String result = buf.toString();	0
org.apache.commons.lang.StringUtils:1045-if (str == null || searchStr == null) {	0
org.apache.commons.lang.StringUtils:1048-return contains(str.toUpperCase(), searchStr.toUpperCase());	1
org.apache.commons.lang.StringUtils:1018-return str.indexOf(searchStr) >= 0;	0
org.apache.commons.lang.StringUtils:1015-if (str == null || searchStr == null) {	0
org.apache.commons.lang.StringUtils:168-super();	0
org.apache.commons.lang.StringUtils:169-}	0
org.apache.commons.lang.StringUtils:192-return str == null || str.length() == 0;	0
org.apache.commons.lang.StringUtils:210-return !StringUtils.isEmpty(str);	0
org.apache.commons.lang.StringUtils:230-if (str == null || (strLen = str.length()) == 0) {	0
org.apache.commons.lang.StringUtils:231-return true;	0
org.apache.commons.lang.StringUtils:233-for (int i = 0; i < strLen; i++) {	0
org.apache.commons.lang.StringUtils:234-if ((Character.isWhitespace(str.charAt(i)) == false)) {	0
org.apache.commons.lang.StringUtils:235-return false;	0
org.apache.commons.lang.StringUtils:238-return true;	0
org.apache.commons.lang.StringUtils:258-return !StringUtils.isBlank(str);	0
org.apache.commons.lang.StringUtils:287-return str == null ? null : str.trim();	0
org.apache.commons.lang.StringUtils:313-String ts = trim(str);	0
org.apache.commons.lang.StringUtils:314-return isEmpty(ts) ? null : ts;	0
org.apache.commons.lang.StringUtils:339-return str == null ? EMPTY : str.trim();	0
org.apache.commons.lang.StringUtils:367-return strip(str, null);	0
org.apache.commons.lang.StringUtils:394-if (str == null) {	0
org.apache.commons.lang.StringUtils:395-return null;	0
org.apache.commons.lang.StringUtils:397-str = strip(str, null);	0
org.apache.commons.lang.StringUtils:398-return str.length() == 0 ? null : str;	0
org.apache.commons.lang.StringUtils:424-return str == null ? EMPTY : strip(str, null);	0
org.apache.commons.lang.StringUtils:454-if (isEmpty(str)) {	0
org.apache.commons.lang.StringUtils:455-return str;	0
org.apache.commons.lang.StringUtils:457-str = stripStart(str, stripChars);	0
org.apache.commons.lang.StringUtils:458-return stripEnd(str, stripChars);	0
org.apache.commons.lang.StringUtils:487-if (str == null || (strLen = str.length()) == 0) {	0
org.apache.commons.lang.StringUtils:488-return str;	0
org.apache.commons.lang.StringUtils:490-int start = 0;	0
org.apache.commons.lang.StringUtils:491-if (stripChars == null) {	0
org.apache.commons.lang.StringUtils:492-while ((start != strLen) && Character.isWhitespace(str.charAt(start))) {	0
org.apache.commons.lang.StringUtils:493-start++;	0
org.apache.commons.lang.StringUtils:495-} else if (stripChars.length() == 0) {	0
org.apache.commons.lang.StringUtils:496-return str;	0
org.apache.commons.lang.StringUtils:498-while ((start != strLen) && (stripChars.indexOf(str.charAt(start)) != -1)) {	0
org.apache.commons.lang.StringUtils:499-start++;	0
org.apache.commons.lang.StringUtils:502-return str.substring(start);	0
org.apache.commons.lang.StringUtils:531-if (str == null || (end = str.length()) == 0) {	0
org.apache.commons.lang.StringUtils:532-return str;	0
org.apache.commons.lang.StringUtils:535-if (stripChars == null) {	0
org.apache.commons.lang.StringUtils:536-while ((end != 0) && Character.isWhitespace(str.charAt(end - 1))) {	0
org.apache.commons.lang.StringUtils:537-end--;	0
org.apache.commons.lang.StringUtils:539-} else if (stripChars.length() == 0) {	0
org.apache.commons.lang.StringUtils:540-return str;	0
org.apache.commons.lang.StringUtils:542-while ((end != 0) && (stripChars.indexOf(str.charAt(end - 1)) != -1)) {	0
org.apache.commons.lang.StringUtils:543-end--;	0
org.apache.commons.lang.StringUtils:546-return str.substring(0, end);	0
org.apache.commons.lang.StringEscapeUtils:122-return escapeJavaStyleString(str, true);	0
org.apache.commons.lang.StringEscapeUtils:138-escapeJavaStyleString(out, str, true);	0
org.apache.commons.lang.StringEscapeUtils:224-out.write('\\');	0
org.apache.commons.lang.StringEscapeUtils:150-return null;	0
org.apache.commons.lang.StringEscapeUtils:173-throw new IllegalArgumentException("The Writer must not be null");	0
org.apache.commons.lang.StringEscapeUtils:229-out.write('\\');	0
org.apache.commons.lang.StringEscapeUtils:230-out.write('"');	0
org.apache.commons.lang.StringEscapeUtils:231-break;	0
org.apache.commons.lang.StringEscapeUtils:149-if (str == null) {	0
org.apache.commons.lang.StringEscapeUtils:153-StringWriter writer = new StringWriter(str.length() * 2);	0
org.apache.commons.lang.StringEscapeUtils:154-escapeJavaStyleString(writer, str, escapeSingleQuotes);	0
org.apache.commons.lang.StringEscapeUtils:155-return writer.toString();	0
org.apache.commons.lang.StringEscapeUtils:172-if (out == null) {	0
org.apache.commons.lang.StringEscapeUtils:175-if (str == null) {	0
org.apache.commons.lang.StringEscapeUtils:179-sz = str.length();	0
org.apache.commons.lang.StringEscapeUtils:180-for (int i = 0; i < sz; i++) {	0
org.apache.commons.lang.StringEscapeUtils:181-char ch = str.charAt(i);	0
org.apache.commons.lang.StringEscapeUtils:184-if (ch > 0xfff) {	0
org.apache.commons.lang.StringEscapeUtils:186-} else if (ch > 0xff) {	0
org.apache.commons.lang.StringEscapeUtils:188-} else if (ch > 0x7f) {	0
org.apache.commons.lang.StringEscapeUtils:190-} else if (ch < 32) {	0
org.apache.commons.lang.StringEscapeUtils:221-switch (ch) {	0
org.apache.commons.lang.StringEscapeUtils:223-if (escapeSingleQuote) {	0
org.apache.commons.lang.StringEscapeUtils:226-out.write('\'');	0
org.apache.commons.lang.StringEscapeUtils:227-break;	0
org.apache.commons.lang.StringEscapeUtils:237-out.write(ch);	0
org.apache.commons.lang.StringEscapeUtils:242-}	0
org.apache.commons.lang.StringEscapeUtils:54-super();	0
org.apache.commons.lang.StringEscapeUtils:55-}	0
org.apache.commons.lang.StringEscapeUtils:81-return escapeJavaStyleString(str, false);	0
org.apache.commons.lang.StringEscapeUtils:97-escapeJavaStyleString(out, str, false);	0
org.apache.commons.lang.StringEscapeUtils:98-}	0
org.apache.commons.lang.StringEscapeUtils:139-}	0
org.apache.commons.lang.StringEscapeUtils:156-} catch (IOException ioe) {	0
org.apache.commons.lang.StringEscapeUtils:158-ioe.printStackTrace();	0
org.apache.commons.lang.StringEscapeUtils:159-return null;	0
org.apache.commons.lang.StringEscapeUtils:176-return;	0
org.apache.commons.lang.StringEscapeUtils:185-out.write("\\u" + hex(ch));	0
org.apache.commons.lang.StringEscapeUtils:187-out.write("\\u0" + hex(ch));	0
org.apache.commons.lang.StringEscapeUtils:189-out.write("\\u00" + hex(ch));	0
org.apache.commons.lang.StringEscapeUtils:191-switch (ch) {	0
org.apache.commons.lang.StringEscapeUtils:193-out.write('\\');	0
org.apache.commons.lang.StringEscapeUtils:194-out.write('b');	0
org.apache.commons.lang.StringEscapeUtils:195-break;	0
org.apache.commons.lang.StringEscapeUtils:197-out.write('\\');	0
org.apache.commons.lang.StringEscapeUtils:198-out.write('n');	0
org.apache.commons.lang.StringEscapeUtils:199-break;	0
org.apache.commons.lang.StringEscapeUtils:201-out.write('\\');	0
org.apache.commons.lang.StringEscapeUtils:202-out.write('t');	0
org.apache.commons.lang.StringEscapeUtils:203-break;	0
org.apache.commons.lang.time.DateUtils:676-if (field == DateUtils.SEMI_MONTH) {	0
org.apache.commons.lang.time.DateUtils:689-val.add(fields[i][0], 1);	0
org.apache.commons.lang.time.DateUtils:437-if (date == null) {	0
org.apache.commons.lang.time.DateUtils:440-Calendar gval = Calendar.getInstance();	0
org.apache.commons.lang.time.DateUtils:441-gval.setTime(date);	0
org.apache.commons.lang.time.DateUtils:442-modify(gval, field, true);	0
org.apache.commons.lang.time.DateUtils:443-return gval.getTime();	0
org.apache.commons.lang.time.DateUtils:621-if (val.get(Calendar.YEAR) > 280000000) {	0
org.apache.commons.lang.time.DateUtils:625-if (field == Calendar.MILLISECOND) {	0
org.apache.commons.lang.time.DateUtils:635-Date date = val.getTime();	0
org.apache.commons.lang.time.DateUtils:636-long time = date.getTime();	0
org.apache.commons.lang.time.DateUtils:637-boolean done = false;	0
org.apache.commons.lang.time.DateUtils:640-int millisecs = val.get(Calendar.MILLISECOND);	0
org.apache.commons.lang.time.DateUtils:641-if (!round || millisecs < 500) {	0
org.apache.commons.lang.time.DateUtils:642-time = time - millisecs;	0
org.apache.commons.lang.time.DateUtils:643-if (field == Calendar.SECOND) {	1
org.apache.commons.lang.time.DateUtils:649-int seconds = val.get(Calendar.SECOND);	0
org.apache.commons.lang.time.DateUtils:650-if (!done && (!round || seconds < 30)) {	0
org.apache.commons.lang.time.DateUtils:658-int minutes = val.get(Calendar.MINUTE);	0
org.apache.commons.lang.time.DateUtils:659-if (!done && (!round || minutes < 30)) {	0
org.apache.commons.lang.time.DateUtils:660-time = time - (minutes * 60000L);	0
org.apache.commons.lang.time.DateUtils:664-if (date.getTime() != time) {	0
org.apache.commons.lang.time.DateUtils:665-date.setTime(time);	0
org.apache.commons.lang.time.DateUtils:666-val.setTime(date);	0
org.apache.commons.lang.time.DateUtils:670-boolean roundUp = false;	0
org.apache.commons.lang.time.DateUtils:671-for (int i = 0; i < fields.length; i++) {	0
org.apache.commons.lang.time.DateUtils:672-for (int j = 0; j < fields[i].length; j++) {	0
org.apache.commons.lang.time.DateUtils:673-if (fields[i][j] == field) {	0
org.apache.commons.lang.time.DateUtils:675-if (round && roundUp) {	0
org.apache.commons.lang.time.DateUtils:692-return;	0
org.apache.commons.lang.time.DateUtils:696-int offset = 0;	0
org.apache.commons.lang.time.DateUtils:697-boolean offsetSet = false;	0
org.apache.commons.lang.time.DateUtils:699-switch (field) {	0
org.apache.commons.lang.time.DateUtils:729-if (!offsetSet) {	0
org.apache.commons.lang.time.DateUtils:730-int min = val.getActualMinimum(fields[i][0]);	0
org.apache.commons.lang.time.DateUtils:731-int max = val.getActualMaximum(fields[i][0]);	0
org.apache.commons.lang.time.DateUtils:733-offset = val.get(fields[i][0]) - min;	0
org.apache.commons.lang.time.DateUtils:735-roundUp = offset > ((max - min) / 2);	0
org.apache.commons.lang.time.DateUtils:738-if (offset != 0) {	0
org.apache.commons.lang.time.DateUtils:739-val.set(fields[i][0], val.get(fields[i][0]) - offset);	0
org.apache.commons.lang.time.DateUtils:45-public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone("GMT");	0
org.apache.commons.lang.time.DateUtils:73-private static final int[][] fields = {	0
org.apache.commons.lang.time.DateUtils:124-super();	0
org.apache.commons.lang.time.DateUtils:125-}	0
org.apache.commons.lang.time.DateUtils:142-if (date1 == null || date2 == null) {	0
org.apache.commons.lang.time.DateUtils:143-throw new IllegalArgumentException("The date must not be null");	0
org.apache.commons.lang.time.DateUtils:145-Calendar cal1 = Calendar.getInstance();	0
org.apache.commons.lang.time.DateUtils:146-cal1.setTime(date1);	0
org.apache.commons.lang.time.DateUtils:147-Calendar cal2 = Calendar.getInstance();	0
org.apache.commons.lang.time.DateUtils:148-cal2.setTime(date2);	0
org.apache.commons.lang.LocaleUtils:116-throw new IllegalArgumentException("Invalid locale format: " + str);	0
org.apache.commons.lang.LocaleUtils:110-if (str.charAt(2) != '_') {	0
org.apache.commons.lang.LocaleUtils:113-char ch3 = str.charAt(3);	0
org.apache.commons.lang.LocaleUtils:114-char ch4 = str.charAt(4);	1
org.apache.commons.lang.LocaleUtils:115-if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {	0
org.apache.commons.lang.LocaleUtils:95-if (str == null) {	0
org.apache.commons.lang.LocaleUtils:98-int len = str.length();	0
org.apache.commons.lang.LocaleUtils:99-if (len != 2 && len != 5 && len < 7) {	0
org.apache.commons.lang.LocaleUtils:102-char ch0 = str.charAt(0);	0
org.apache.commons.lang.LocaleUtils:103-char ch1 = str.charAt(1);	0
org.apache.commons.lang.LocaleUtils:104-if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {	0
org.apache.commons.lang.LocaleUtils:107-if (len == 2) {	0
org.apache.commons.lang.LocaleUtils:47-private static final Map cLanguagesByCountry = Collections.synchronizedMap(new HashMap());	0
org.apache.commons.lang.LocaleUtils:49-private static final Map cCountriesByLanguage = Collections.synchronizedMap(new HashMap());	0
org.apache.commons.lang.LocaleUtils:51-List list = Arrays.asList(Locale.getAvailableLocales());	0
org.apache.commons.lang.LocaleUtils:52-cAvailableLocaleList = Collections.unmodifiableList(list);	0
org.apache.commons.lang.LocaleUtils:53-}	0
org.apache.commons.lang.LocaleUtils:192-return cAvailableLocaleList;	0
org.apache.commons.lang.LocaleUtils:223-return availableLocaleList().contains(locale);	0
org.apache.commons.lang.LocaleUtils:63-super();	0
org.apache.commons.lang.LocaleUtils:64-}	0
org.apache.commons.lang.LocaleUtils:96-return null;	0
org.apache.commons.lang.LocaleUtils:100-throw new IllegalArgumentException("Invalid locale format: " + str);	0
org.apache.commons.lang.LocaleUtils:105-throw new IllegalArgumentException("Invalid locale format: " + str);	0
org.apache.commons.lang.LocaleUtils:108-return new Locale(str, "");	0
org.apache.commons.lang.LocaleUtils:111-throw new IllegalArgumentException("Invalid locale format: " + str);	0
org.apache.commons.lang.LocaleUtils:118-if (len == 5) {	0
org.apache.commons.lang.LocaleUtils:119-return new Locale(str.substring(0, 2), str.substring(3, 5));	0
org.apache.commons.lang.LocaleUtils:121-if (str.charAt(5) != '_') {	0
org.apache.commons.lang.LocaleUtils:122-throw new IllegalArgumentException("Invalid locale format: " + str);	0
org.apache.commons.lang.LocaleUtils:124-return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));	0
org.apache.commons.lang.LocaleUtils:143-return localeLookupList(locale, locale);	0
org.apache.commons.lang.LocaleUtils:165-List list = new ArrayList(4);	0
org.apache.commons.lang.LocaleUtils:166-if (locale != null) {	0
org.apache.commons.lang.LocaleUtils:167-list.add(locale);	0
org.apache.commons.lang.LocaleUtils:168-if (locale.getVariant().length() > 0) {	0
org.apache.commons.lang.LocaleUtils:169-list.add(new Locale(locale.getLanguage(), locale.getCountry()));	0
org.apache.commons.lang.LocaleUtils:171-if (locale.getCountry().length() > 0) {	0
org.apache.commons.lang.LocaleUtils:172-list.add(new Locale(locale.getLanguage(), ""));	0
org.apache.commons.lang.LocaleUtils:174-if (list.contains(defaultLocale) == false) {	0
org.apache.commons.lang.LocaleUtils:175-list.add(defaultLocale);	0
org.apache.commons.lang.LocaleUtils:178-return Collections.unmodifiableList(list);	0
org.apache.commons.lang.LocaleUtils:206-Set set = cAvailableLocaleSet;	0
org.apache.commons.lang.LocaleUtils:207-if (set == null) {	0
org.apache.commons.lang.LocaleUtils:208-set = new HashSet(availableLocaleList());	0
org.apache.commons.lang.LocaleUtils:209-set = Collections.unmodifiableSet(set);	0
org.apache.commons.lang.LocaleUtils:210-cAvailableLocaleSet = set;	0
org.apache.commons.lang.LocaleUtils:212-return set;	0
org.apache.commons.lang.LocaleUtils:237-List langs = (List) cLanguagesByCountry.get(countryCode);//syncd	0
org.apache.commons.lang.LocaleUtils:238-if (langs == null) {	0
org.apache.commons.lang.time.StopWatch:179-stopTime = System.currentTimeMillis();	0
org.apache.commons.lang.time.StopWatch:180-this.runningState = STATE_SUSPENDED;	0
org.apache.commons.lang.time.StopWatch:181-}	0
org.apache.commons.lang.time.StopWatch:176-if(this.runningState != STATE_RUNNING) {	0
org.apache.commons.lang.time.StopWatch:210-return this.stopTime - this.startTime;	0
org.apache.commons.lang.time.StopWatch:115-if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {	0
org.apache.commons.lang.time.StopWatch:118-stopTime = System.currentTimeMillis();	1
org.apache.commons.lang.time.StopWatch:119-this.runningState = STATE_STOPPED;	0
org.apache.commons.lang.time.StopWatch:120-}	0
org.apache.commons.lang.time.StopWatch:209-if(this.runningState == STATE_STOPPED || this.runningState == STATE_SUSPENDED) {	0
org.apache.commons.lang.time.StopWatch:85-super();	0
org.apache.commons.lang.time.StopWatch:65-private int runningState = STATE_UNSTARTED;	0
org.apache.commons.lang.time.StopWatch:70-private int splitState = STATE_UNSPLIT;	0
org.apache.commons.lang.time.StopWatch:75-private long startTime = -1;	0
org.apache.commons.lang.time.StopWatch:79-private long stopTime = -1;	0
org.apache.commons.lang.time.StopWatch:86-}	0
org.apache.commons.lang.time.StopWatch:96-if(this.runningState == STATE_STOPPED) {	0
org.apache.commons.lang.time.StopWatch:99-if(this.runningState != STATE_UNSTARTED) {	0
org.apache.commons.lang.time.StopWatch:102-stopTime = -1;	0
org.apache.commons.lang.time.StopWatch:103-startTime = System.currentTimeMillis();	0
org.apache.commons.lang.time.StopWatch:104-this.runningState = STATE_RUNNING;	0
org.apache.commons.lang.time.StopWatch:105-}	0
org.apache.commons.lang.time.StopWatch:97-throw new IllegalStateException("Stopwatch must be reset before being restarted. ");	0
org.apache.commons.lang.time.StopWatch:100-throw new IllegalStateException("Stopwatch already started. ");	0
org.apache.commons.lang.time.StopWatch:116-throw new IllegalStateException("Stopwatch is not running. ");	0
org.apache.commons.lang.time.StopWatch:128-this.runningState = STATE_UNSTARTED;	0
org.apache.commons.lang.time.StopWatch:129-this.splitState = STATE_UNSPLIT;	0
org.apache.commons.lang.time.StopWatch:130-startTime = -1;	0
org.apache.commons.lang.time.StopWatch:131-stopTime = -1;	0
org.apache.commons.lang.time.StopWatch:132-}	0
org.apache.commons.lang.time.StopWatch:144-if(this.runningState != STATE_RUNNING) {	0
org.apache.commons.lang.time.StopWatch:145-throw new IllegalStateException("Stopwatch is not running. ");	0
org.apache.commons.lang.time.StopWatch:147-stopTime = System.currentTimeMillis();	0
org.apache.commons.lang.time.StopWatch:148-this.splitState = STATE_SPLIT;	0
org.apache.commons.lang.time.StopWatch:149-}	0
org.apache.commons.lang.time.StopWatch:160-if(this.splitState != STATE_SPLIT) {	0
org.apache.commons.lang.time.StopWatch:161-throw new IllegalStateException("Stopwatch has not been split. ");	0
org.apache.commons.lang.time.StopWatch:163-stopTime = -1;	0
org.apache.commons.lang.time.StopWatch:164-this.splitState = STATE_UNSPLIT;	0
org.apache.commons.lang.time.StopWatch:165-}	0
org.apache.commons.lang.time.StopWatch:177-throw new IllegalStateException("Stopwatch must be running to suspend. ");	0
org.apache.commons.lang.time.StopWatch:192-if(this.runningState != STATE_SUSPENDED) {	0
org.apache.commons.lang.time.StopWatch:193-throw new IllegalStateException("Stopwatch must be suspended to resume. ");	0
org.apache.commons.lang.time.StopWatch:195-startTime += (System.currentTimeMillis() - stopTime);	0
org.apache.commons.lang.time.StopWatch:196-stopTime = -1;	0
org.apache.commons.lang.time.StopWatch:197-this.runningState = STATE_RUNNING;	0
org.apache.commons.lang.time.StopWatch:198-}	0
org.apache.commons.lang.time.StopWatch:212-if(this.runningState == STATE_UNSTARTED) {	0
org.apache.commons.lang.time.StopWatch:213-return 0;	0
org.apache.commons.lang.time.StopWatch:215-if(this.runningState == STATE_RUNNING) {	0
org.apache.commons.lang.time.FastDateFormat:631-rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);	0
org.apache.commons.lang.time.FastDateFormat:632-break;	0
org.apache.commons.lang.time.FastDateFormat:167-return getInstance(pattern, null, null);	0
org.apache.commons.lang.time.FastDateFormat:553-locale = Locale.getDefault();	0
org.apache.commons.lang.time.FastDateFormat:614-rule = selectNumberRule(Calendar.YEAR, tokenLen);	0
org.apache.commons.lang.time.FastDateFormat:625-rule = TwoDigitMonthField.INSTANCE;	0
org.apache.commons.lang.time.FastDateFormat:777-return new PaddedNumberField(field, padding);	0
org.apache.commons.lang.time.FastDateFormat:539-super();	0
org.apache.commons.lang.time.FastDateFormat:540-if (pattern == null) {	0
org.apache.commons.lang.time.FastDateFormat:543-mPattern = pattern;	0
org.apache.commons.lang.time.FastDateFormat:545-mTimeZoneForced = (timeZone != null);	0
org.apache.commons.lang.time.FastDateFormat:546-if (timeZone == null) {	0
org.apache.commons.lang.time.FastDateFormat:547-timeZone = TimeZone.getDefault();	0
org.apache.commons.lang.time.FastDateFormat:549-mTimeZone = timeZone;	0
org.apache.commons.lang.time.FastDateFormat:551-mLocaleForced = (locale != null);	0
org.apache.commons.lang.time.FastDateFormat:552-if (locale == null) {	0
org.apache.commons.lang.time.FastDateFormat:555-mLocale = locale;	0
org.apache.commons.lang.time.FastDateFormat:556-}	0
org.apache.commons.lang.time.FastDateFormat:111-private static Map cInstanceCache = new HashMap(7);	0
org.apache.commons.lang.time.FastDateFormat:112-private static Map cDateInstanceCache = new HashMap(7);	0
org.apache.commons.lang.time.FastDateFormat:113-private static Map cTimeInstanceCache = new HashMap(7);	0
org.apache.commons.lang.time.FastDateFormat:114-private static Map cDateTimeInstanceCache = new HashMap(7);	0
org.apache.commons.lang.time.FastDateFormat:115-private static Map cTimeZoneDisplayCache = new HashMap(7);	0
org.apache.commons.lang.time.FastDateFormat:213-FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);	0
org.apache.commons.lang.time.FastDateFormat:214-FastDateFormat format = (FastDateFormat) cInstanceCache.get(emptyFormat);	0
org.apache.commons.lang.time.FastDateFormat:215-if (format == null) {	0
org.apache.commons.lang.time.FastDateFormat:216-format = emptyFormat;	0
org.apache.commons.lang.time.FastDateFormat:217-format.init();// convert shell format into usable one	0
org.apache.commons.lang.time.FastDateFormat:218-cInstanceCache.put(format, format);// this is OK!	0
org.apache.commons.lang.time.FastDateFormat:220-return format;	0
org.apache.commons.lang.time.FastDateFormat:562-List rulesList = parsePattern();	0
org.apache.commons.lang.time.FastDateFormat:563-mRules = (Rule[]) rulesList.toArray(new Rule[rulesList.size()]);	0
org.apache.commons.lang.time.FastDateFormat:565-int len = 0;	0
org.apache.commons.lang.time.FastDateFormat:566-for (int i=mRules.length; --i >= 0; ) {	0
org.apache.commons.lang.time.FastDateFormat:567-len += mRules[i].estimateLength();	0
org.apache.commons.lang.time.FastDateFormat:570-mMaxLengthEstimate = len;	0
org.apache.commons.lang.time.FastDateFormat:571-}	0
org.apache.commons.lang.time.FastDateFormat:582-DateFormatSymbols symbols = new DateFormatSymbols(mLocale);	0
org.apache.commons.lang.time.FastDateFormat:583-List rules = new ArrayList();	0
org.apache.commons.lang.time.FastDateFormat:585-String[] ERAs = symbols.getEras();	0
org.apache.commons.lang.time.FastDateFormat:586-String[] months = symbols.getMonths();	0
org.apache.commons.lang.time.FastDateFormat:587-String[] shortMonths = symbols.getShortMonths();	0
org.apache.commons.lang.time.FastDateFormat:588-String[] weekdays = symbols.getWeekdays();	0
org.apache.commons.lang.time.FastDateFormat:589-String[] shortWeekdays = symbols.getShortWeekdays();	0
org.apache.commons.lang.time.FastDateFormat:590-String[] AmPmStrings = symbols.getAmPmStrings();	0
org.apache.commons.lang.time.FastDateFormat:592-int length = mPattern.length();	0
org.apache.commons.lang.time.FastDateFormat:593-int[] indexRef = new int[1];	0
org.apache.commons.lang.time.FastDateFormat:595-for (int i = 0; i < length; i++) {	0
org.apache.commons.lang.time.FastDateFormat:596-indexRef[0] = i;	0
org.apache.commons.lang.time.FastDateFormat:597-String token = parseToken(mPattern, indexRef);	0
org.apache.commons.lang.LocaleUtils:47-private static final Map cLanguagesByCountry = Collections.synchronizedMap(new HashMap());	0
org.apache.commons.lang.LocaleUtils:49-private static final Map cCountriesByLanguage = Collections.synchronizedMap(new HashMap());	0
org.apache.commons.lang.LocaleUtils:51-List list = Arrays.asList(Locale.getAvailableLocales());	0
org.apache.commons.lang.LocaleUtils:52-cAvailableLocaleList = Collections.unmodifiableList(list);	0
org.apache.commons.lang.LocaleUtils:53-}	0
org.apache.commons.lang.LocaleUtils:223-return cAvailableLocaleSet.contains(locale);	1
org.apache.commons.lang.LocaleUtils:63-super();	0
org.apache.commons.lang.LocaleUtils:64-}	0
org.apache.commons.lang.LocaleUtils:95-if (str == null) {	0
org.apache.commons.lang.LocaleUtils:96-return null;	0
org.apache.commons.lang.LocaleUtils:98-int len = str.length();	0
org.apache.commons.lang.LocaleUtils:99-if (len != 2 && len != 5 && len < 7) {	0
org.apache.commons.lang.LocaleUtils:100-throw new IllegalArgumentException("Invalid locale format: " + str);	0
org.apache.commons.lang.LocaleUtils:102-char ch0 = str.charAt(0);	0
org.apache.commons.lang.LocaleUtils:103-char ch1 = str.charAt(1);	0
org.apache.commons.lang.LocaleUtils:104-if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {	0
org.apache.commons.lang.LocaleUtils:105-throw new IllegalArgumentException("Invalid locale format: " + str);	0
org.apache.commons.lang.LocaleUtils:107-if (len == 2) {	0
org.apache.commons.lang.LocaleUtils:108-return new Locale(str, "");	0
org.apache.commons.lang.LocaleUtils:110-if (str.charAt(2) != '_') {	0
org.apache.commons.lang.LocaleUtils:111-throw new IllegalArgumentException("Invalid locale format: " + str);	0
org.apache.commons.lang.LocaleUtils:113-char ch3 = str.charAt(3);	0
org.apache.commons.lang.LocaleUtils:114-char ch4 = str.charAt(4);	0
org.apache.commons.lang.LocaleUtils:115-if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {	0
org.apache.commons.lang.LocaleUtils:116-throw new IllegalArgumentException("Invalid locale format: " + str);	0
org.apache.commons.lang.LocaleUtils:118-if (len == 5) {	0
org.apache.commons.lang.LocaleUtils:119-return new Locale(str.substring(0, 2), str.substring(3, 5));	0
org.apache.commons.lang.LocaleUtils:121-if (str.charAt(5) != '_') {	0
org.apache.commons.lang.LocaleUtils:122-throw new IllegalArgumentException("Invalid locale format: " + str);	0
org.apache.commons.lang.LocaleUtils:124-return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));	0
org.apache.commons.lang.LocaleUtils:143-return localeLookupList(locale, locale);	0
org.apache.commons.lang.LocaleUtils:165-List list = new ArrayList(4);	0
org.apache.commons.lang.LocaleUtils:166-if (locale != null) {	0
org.apache.commons.lang.LocaleUtils:167-list.add(locale);	0
org.apache.commons.lang.LocaleUtils:168-if (locale.getVariant().length() > 0) {	0
org.apache.commons.lang.LocaleUtils:169-list.add(new Locale(locale.getLanguage(), locale.getCountry()));	0
org.apache.commons.lang.LocaleUtils:171-if (locale.getCountry().length() > 0) {	0
org.apache.commons.lang.LocaleUtils:172-list.add(new Locale(locale.getLanguage(), ""));	0
org.apache.commons.lang.LocaleUtils:174-if (list.contains(defaultLocale) == false) {	0
org.apache.commons.lang.LocaleUtils:175-list.add(defaultLocale);	0
org.apache.commons.lang.LocaleUtils:178-return Collections.unmodifiableList(list);	0
org.apache.commons.lang.LocaleUtils:192-return cAvailableLocaleList;	0
org.apache.commons.lang.LocaleUtils:206-Set set = cAvailableLocaleSet;	0
org.apache.commons.lang.LocaleUtils:207-if (set == null) {	0
org.apache.commons.lang.LocaleUtils:208-set = new HashSet(availableLocaleList());	0
org.apache.commons.lang.LocaleUtils:209-set = Collections.unmodifiableSet(set);	0
org.apache.commons.lang.LocaleUtils:210-cAvailableLocaleSet = set;	0
org.apache.commons.lang.LocaleUtils:212-return set;	0
org.apache.commons.lang.LocaleUtils:237-List langs = (List) cLanguagesByCountry.get(countryCode);//syncd	0
org.apache.commons.lang.LocaleUtils:238-if (langs == null) {	0
org.apache.commons.lang.math.NumberUtils:464-throw new NumberFormatException(str + " is not a valid number.");	0
org.apache.commons.lang.math.NumberUtils:1508-return false;	0
org.apache.commons.lang.math.NumberUtils:398-if (str == null) {	0
org.apache.commons.lang.math.NumberUtils:401-if (StringUtils.isBlank(str)) {	0
org.apache.commons.lang.math.NumberUtils:404-if (str.startsWith("--")) {	0
org.apache.commons.lang.math.NumberUtils:411-if (str.startsWith("0x") || str.startsWith("-0x")) {	0
org.apache.commons.lang.math.NumberUtils:414-char lastChar = str.charAt(str.length() - 1);	0
org.apache.commons.lang.math.NumberUtils:418-int decPos = str.indexOf('.');	0
org.apache.commons.lang.math.NumberUtils:419-int expPos = str.indexOf('e') + str.indexOf('E') + 1;	0
org.apache.commons.lang.math.NumberUtils:421-if (decPos > -1) {	0
org.apache.commons.lang.math.NumberUtils:433-if (expPos > -1) {	0
org.apache.commons.lang.math.NumberUtils:436-mant = str;	0
org.apache.commons.lang.math.NumberUtils:438-dec = null;	0
org.apache.commons.lang.math.NumberUtils:440-if (!Character.isDigit(lastChar)) {	0
org.apache.commons.lang.math.NumberUtils:441-if (expPos > -1 && expPos < str.length() - 1) {	0
org.apache.commons.lang.math.NumberUtils:444-exp = null;	0
org.apache.commons.lang.math.NumberUtils:447-String numeric = str.substring(0, str.length() - 1);	0
org.apache.commons.lang.math.NumberUtils:448-boolean allZeros = isAllZeros(mant) && isAllZeros(exp);	0
org.apache.commons.lang.math.NumberUtils:449-switch (lastChar) {	0
org.apache.commons.lang.math.NumberUtils:452-if (dec == null	0
org.apache.commons.lang.math.NumberUtils:457-return createLong(numeric);	0
org.apache.commons.lang.math.NumberUtils:556-if (str == null) {	0
org.apache.commons.lang.math.NumberUtils:559-for (int i = str.length() - 1; i >= 0; i--) {	0
org.apache.commons.lang.math.NumberUtils:560-if (str.charAt(i) != '0') {	0
org.apache.commons.lang.math.NumberUtils:561-return false;	0
org.apache.commons.lang.math.NumberUtils:628-if (str == null) {	0
org.apache.commons.lang.math.NumberUtils:631-return Long.valueOf(str);	0
org.apache.commons.lang.math.NumberUtils:1507-if (StringUtils.isEmpty(str)) {	0
org.apache.commons.lang.math.NumberUtils:1510-for (int i = 0; i < str.length(); i++) {	0
org.apache.commons.lang.math.NumberUtils:1511-if (!Character.isDigit(str.charAt(i))) {	0
org.apache.commons.lang.math.NumberUtils:1515-return true;	0
org.apache.commons.lang.math.NumberUtils:41-public static final Long LONG_ZERO = new Long(0L);	0
org.apache.commons.lang.math.NumberUtils:43-public static final Long LONG_ONE = new Long(1L);	0
org.apache.commons.lang.math.NumberUtils:45-public static final Long LONG_MINUS_ONE = new Long(-1L);	0
org.apache.commons.lang.math.NumberUtils:47-public static final Integer INTEGER_ZERO = new Integer(0);	0
org.apache.commons.lang.math.NumberUtils:49-public static final Integer INTEGER_ONE = new Integer(1);	0
org.apache.commons.lang.math.NumberUtils:51-public static final Integer INTEGER_MINUS_ONE = new Integer(-1);	0
org.apache.commons.lang.math.NumberUtils:53-public static final Short SHORT_ZERO = new Short((short) 0);	0
org.apache.commons.lang.math.NumberUtils:55-public static final Short SHORT_ONE = new Short((short) 1);	0
org.apache.commons.lang.math.NumberUtils:57-public static final Short SHORT_MINUS_ONE = new Short((short) -1);	0
org.apache.commons.lang.math.NumberUtils:59-public static final Byte BYTE_ZERO = new Byte((byte) 0);	0
org.apache.commons.lang.math.NumberUtils:61-public static final Byte BYTE_ONE = new Byte((byte) 1);	0
org.apache.commons.lang.math.NumberUtils:63-public static final Byte BYTE_MINUS_ONE = new Byte((byte) -1);	0
org.apache.commons.lang.math.NumberUtils:65-public static final Double DOUBLE_ZERO = new Double(0.0d);	0
org.apache.commons.lang.math.NumberUtils:67-public static final Double DOUBLE_ONE = new Double(1.0d);	0
org.apache.commons.lang.math.NumberUtils:69-public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);	0
org.apache.commons.lang.math.NumberUtils:71-public static final Float FLOAT_ZERO = new Float(0.0f);	0
org.apache.commons.lang.math.NumberUtils:73-public static final Float FLOAT_ONE = new Float(1.0f);	0
org.apache.commons.lang.math.NumberUtils:75-public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);	0
org.apache.commons.lang.math.NumberUtils:85-super();	0
org.apache.commons.lang.text.StrBuilder:879-if (width > 0) {	0
org.apache.commons.lang.text.StrBuilder:880-ensureCapacity(size + width);	0
org.apache.commons.lang.text.StrBuilder:881-String str = (obj == null ? getNullText() : obj.toString());	0
org.apache.commons.lang.text.StrBuilder:882-int strLen = str.length();	0
org.apache.commons.lang.text.StrBuilder:883-if (strLen >= width) {	0
org.apache.commons.lang.text.StrBuilder:884-str.getChars(0, strLen, buffer, size);	1
org.apache.commons.lang.text.StrBuilder:107-super();	0
org.apache.commons.lang.text.StrBuilder:108-if (initialCapacity <= 0) {	0
org.apache.commons.lang.text.StrBuilder:111-buffer = new char[initialCapacity];	0
org.apache.commons.lang.text.StrBuilder:112-}	0
org.apache.commons.lang.text.StrBuilder:228-if (capacity > buffer.length) {	0
org.apache.commons.lang.text.StrBuilder:233-return this;	0
org.apache.commons.lang.text.StrBuilder:98-this(CAPACITY);	0
org.apache.commons.lang.text.StrBuilder:99-}	0
org.apache.commons.lang.text.StrBuilder:109-initialCapacity = CAPACITY;	0
org.apache.commons.lang.text.StrBuilder:121-super();	0
org.apache.commons.lang.text.StrBuilder:122-if (str == null) {	0
org.apache.commons.lang.text.StrBuilder:123-buffer = new char[CAPACITY];	0
org.apache.commons.lang.text.StrBuilder:125-buffer = new char[str.length() + CAPACITY];	0
org.apache.commons.lang.text.StrBuilder:126-append(str);	0
org.apache.commons.lang.text.StrBuilder:128-}	0
org.apache.commons.lang.text.StrBuilder:137-return newLine;	0
org.apache.commons.lang.text.StrBuilder:147-this.newLine = newLine;	0
org.apache.commons.lang.text.StrBuilder:148-return this;	0
org.apache.commons.lang.text.StrBuilder:158-return nullText;	0
org.apache.commons.lang.text.StrBuilder:168-if (nullText != null && nullText.length() == 0) {	0
org.apache.commons.lang.text.StrBuilder:169-nullText = null;	0
org.apache.commons.lang.text.StrBuilder:171-this.nullText = nullText;	0
org.apache.commons.lang.text.StrBuilder:172-return this;	0
org.apache.commons.lang.text.StrBuilder:182-return size;	0
org.apache.commons.lang.text.StrBuilder:194-if (length < 0) {	0
org.apache.commons.lang.text.StrBuilder:195-throw new StringIndexOutOfBoundsException(length);	0
org.apache.commons.lang.text.StrBuilder:197-if (length < size) {	0
org.apache.commons.lang.text.StrBuilder:198-size = length;	0
org.apache.commons.lang.text.StrBuilder:199-} else if (length > size) {	0
org.apache.commons.lang.text.StrBuilder:200-ensureCapacity(length);	0
org.apache.commons.lang.text.StrBuilder:201-int oldEnd = size;	0
org.apache.commons.lang.text.StrBuilder:202-int newEnd = length;	0
org.apache.commons.lang.text.StrBuilder:203-size = length;	0
org.apache.commons.lang.text.StrBuilder:204-for (int i = oldEnd; i < newEnd; i++) {	0
org.apache.commons.lang.text.StrBuilder:205-buffer[i] = '\0';	0
org.apache.commons.lang.text.StrBuilder:208-return this;	0
org.apache.commons.lang.text.StrBuilder:218-return buffer.length;	0
org.apache.commons.lang.text.StrBuilder:229-char[] old = buffer;	0
org.apache.commons.lang.text.StrBuilder:230-buffer = new char[capacity];	0
org.apache.commons.lang.text.StrBuilder:231-System.arraycopy(old, 0, buffer, 0, size);	0
org.apache.commons.lang.text.StrBuilder:242-if (buffer.length > length()) {	0
org.apache.commons.lang.text.StrBuilder:243-char[] old = buffer;	0
org.apache.commons.lang.text.StrBuilder:244-buffer = new char[length()];	0
org.apache.commons.lang.text.StrBuilder:245-System.arraycopy(old, 0, buffer, 0, size);	0
org.apache.commons.lang.text.StrBuilder:1184-int len = (str == null ? 0 : str.length());	0
org.apache.commons.lang.text.StrBuilder:1185-if (len > 0) {	0
org.apache.commons.lang.text.StrBuilder:1186-int index = indexOf(str, 0);	0
org.apache.commons.lang.text.StrBuilder:1187-while (index >= 0) {	0
org.apache.commons.lang.text.StrBuilder:1188-deleteImpl(index, index + len, len);	0
org.apache.commons.lang.text.StrBuilder:1189-index = indexOf(str, index);	0
org.apache.commons.lang.text.StrBuilder:1202-int len = (str == null ? 0 : str.length());	0
org.apache.commons.lang.text.StrBuilder:1203-if (len > 0) {	0
org.apache.commons.lang.text.StrBuilder:1204-int index = indexOf(str, 0);	0
org.apache.commons.lang.text.StrBuilder:1205-if (index >= 0) {	0
org.apache.commons.lang.text.StrBuilder:1206-deleteImpl(index, index + len, len);	0
org.apache.commons.lang.text.StrBuilder:1209-return this;	0
org.apache.commons.lang.text.StrBuilder:1747-return indexOf(str, 0);	0
org.apache.commons.lang.text.StrBuilder:1114-System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);	0
org.apache.commons.lang.text.StrBuilder:1115-size -= len;	0
org.apache.commons.lang.text.StrBuilder:1116-}	0
org.apache.commons.lang.text.StrBuilder:1761-startIndex = (startIndex < 0 ? 0 : startIndex);	0
org.apache.commons.lang.text.StrBuilder:1762-if (str == null || startIndex >= size) {	0
org.apache.commons.lang.text.StrBuilder:1765-int strLen = str.length();	0
org.apache.commons.lang.text.StrBuilder:1766-if (strLen == 1) {	0
org.apache.commons.lang.text.StrBuilder:1769-if (strLen == 0) {	0
org.apache.commons.lang.text.StrBuilder:1772-if (strLen > size) {	0
org.apache.commons.lang.text.StrBuilder:1775-char[] thisBuf = buffer;	0
org.apache.commons.lang.text.StrBuilder:1776-int len = thisBuf.length - strLen;	1
org.apache.commons.lang.text.StrBuilder:1778-for (int i = startIndex; i < len; i++) {	0
org.apache.commons.lang.text.StrBuilder:1779-for (int j = 0; j < strLen; j++) {	0
org.apache.commons.lang.text.StrBuilder:1780-if (str.charAt(j) != thisBuf[i + j]) {	0
org.apache.commons.lang.text.StrBuilder:1781-continue outer;	0
org.apache.commons.lang.text.StrBuilder:1784-return i;	0
org.apache.commons.lang.text.StrBuilder:121-super();	0
org.apache.commons.lang.text.StrBuilder:122-if (str == null) {	0
org.apache.commons.lang.text.StrBuilder:125-buffer = new char[str.length() + CAPACITY];	0
org.apache.commons.lang.text.StrBuilder:126-append(str);	0
org.apache.commons.lang.text.StrBuilder:128-}	0
org.apache.commons.lang.text.StrBuilder:469-if (str == null) {	0
org.apache.commons.lang.text.StrBuilder:472-int strLen = str.length();	0
org.apache.commons.lang.text.StrBuilder:473-if (strLen > 0) {	0
org.apache.commons.lang.text.StrBuilder:474-int len = length();	0
org.apache.commons.lang.text.StrBuilder:475-ensureCapacity(len + strLen);	0
org.apache.commons.lang.text.StrBuilder:476-str.getChars(0, strLen, buffer, len);	0
org.apache.commons.lang.text.StrBuilder:477-size += strLen;	0
org.apache.commons.lang.text.StrBuilder:479-return this;	0
org.apache.commons.lang.text.StrBuilder:182-return size;	0
org.apache.commons.lang.text.StrBuilder:228-if (capacity > buffer.length) {	0
org.apache.commons.lang.text.StrBuilder:233-return this;	0
org.apache.commons.lang.text.StrBuilder:98-this(CAPACITY);	0
org.apache.commons.lang.text.StrBuilder:99-}	0
org.apache.commons.lang.text.StrBuilder:107-super();	0
org.apache.commons.lang.text.StrBuilder:108-if (initialCapacity <= 0) {	0
org.apache.commons.lang.text.StrBuilder:109-initialCapacity = CAPACITY;	0
org.apache.commons.lang.time.DurationFormatUtils:306-days += 31;	1
org.apache.commons.lang.time.DurationFormatUtils:312-months -= 1;	0
org.apache.commons.lang.time.DurationFormatUtils:315-months += 12;	0
org.apache.commons.lang.time.DurationFormatUtils:316-years -= 1;	0
org.apache.commons.lang.time.DurationFormatUtils:437-int newdiff = startValue - endValue;	0
org.apache.commons.lang.time.DurationFormatUtils:438-end.add( field, newdiff );	0
org.apache.commons.lang.time.DurationFormatUtils:439-return newdiff;	0
org.apache.commons.lang.time.DurationFormatUtils:247-return formatPeriod(startMillis, endMillis, format, true, TimeZone.getDefault());	0
org.apache.commons.lang.time.DurationFormatUtils:330-if (Token.containsTokenWithValue(tokens, M)) {	0
org.apache.commons.lang.time.DurationFormatUtils:331-months += 12 * years;	0
org.apache.commons.lang.time.DurationFormatUtils:332-years = 0;	0
org.apache.commons.lang.time.DurationFormatUtils:344-hours += 24 * days;	0
org.apache.commons.lang.time.DurationFormatUtils:345-days = 0;	0
org.apache.commons.lang.time.DurationFormatUtils:348-minutes += 60 * hours;	0
org.apache.commons.lang.time.DurationFormatUtils:349-hours = 0;	0
org.apache.commons.lang.time.DurationFormatUtils:352-seconds += 60 * minutes;	0
org.apache.commons.lang.time.DurationFormatUtils:353-minutes = 0;	0
org.apache.commons.lang.time.DurationFormatUtils:356-milliseconds += 1000 * seconds;	0
org.apache.commons.lang.time.DurationFormatUtils:357-seconds = 0;	0
org.apache.commons.lang.time.DurationFormatUtils:265-long millis = endMillis - startMillis;	0
org.apache.commons.lang.time.DurationFormatUtils:266-if (millis < 28 * DateUtils.MILLIS_PER_DAY) {	0
org.apache.commons.lang.time.DurationFormatUtils:270-Token[] tokens = lexx(format);	0
org.apache.commons.lang.time.DurationFormatUtils:274-Calendar start = Calendar.getInstance(timezone);	0
org.apache.commons.lang.time.DurationFormatUtils:275-start.setTime(new Date(startMillis));	0
org.apache.commons.lang.time.DurationFormatUtils:276-Calendar end = Calendar.getInstance(timezone);	0
org.apache.commons.lang.time.DurationFormatUtils:277-end.setTime(new Date(endMillis));	0
org.apache.commons.lang.time.DurationFormatUtils:280-int milliseconds = end.get(Calendar.MILLISECOND) - start.get(Calendar.MILLISECOND);	0
org.apache.commons.lang.time.DurationFormatUtils:281-int seconds = end.get(Calendar.SECOND) - start.get(Calendar.SECOND);	0
org.apache.commons.lang.time.DurationFormatUtils:282-int minutes = end.get(Calendar.MINUTE) - start.get(Calendar.MINUTE);	0
org.apache.commons.lang.time.DurationFormatUtils:283-int hours = end.get(Calendar.HOUR_OF_DAY) - start.get(Calendar.HOUR_OF_DAY);	0
org.apache.commons.lang.time.DurationFormatUtils:284-int days = end.get(Calendar.DAY_OF_MONTH) - start.get(Calendar.DAY_OF_MONTH);	0
org.apache.commons.lang.time.DurationFormatUtils:285-int months = end.get(Calendar.MONTH) - start.get(Calendar.MONTH);	0
org.apache.commons.lang.time.DurationFormatUtils:286-int years = end.get(Calendar.YEAR) - start.get(Calendar.YEAR);	0
org.apache.commons.lang.time.DurationFormatUtils:289-while (milliseconds < 0) {	0
org.apache.commons.lang.time.DurationFormatUtils:293-while (seconds < 0) {	0
org.apache.commons.lang.time.DurationFormatUtils:297-while (minutes < 0) {	0
org.apache.commons.lang.time.DurationFormatUtils:301-while (hours < 0) {	0
org.apache.commons.lang.time.DurationFormatUtils:305-while (days < 0) {	0
org.apache.commons.lang.time.DurationFormatUtils:314-while (months < 0) {	0
org.apache.commons.lang.time.DurationFormatUtils:318-milliseconds -= reduceAndCorrect(start, end, Calendar.MILLISECOND, milliseconds);	1
org.apache.commons.lang.time.DurationFormatUtils:319-seconds -= reduceAndCorrect(start, end, Calendar.SECOND, seconds);	0
org.apache.commons.lang.time.DurationFormatUtils:320-minutes -= reduceAndCorrect(start, end, Calendar.MINUTE, minutes);	0
org.apache.commons.lang.time.DurationFormatUtils:321-hours -= reduceAndCorrect(start, end, Calendar.HOUR_OF_DAY, hours);	0
org.apache.commons.lang.time.DurationFormatUtils:322-days -= reduceAndCorrect(start, end, Calendar.DAY_OF_MONTH, days);	0
org.apache.commons.lang.time.DurationFormatUtils:323-months -= reduceAndCorrect(start, end, Calendar.MONTH, months);	0
org.apache.commons.lang.time.DurationFormatUtils:324-years -= reduceAndCorrect(start, end, Calendar.YEAR, years);	0
org.apache.commons.lang.time.DurationFormatUtils:329-if (!Token.containsTokenWithValue(tokens, y)) {	0
org.apache.commons.lang.time.DurationFormatUtils:339-if (!Token.containsTokenWithValue(tokens, M)) {	0
org.apache.commons.lang.time.DurationFormatUtils:343-if (!Token.containsTokenWithValue(tokens, d)) {	0
org.apache.commons.lang.time.DurationFormatUtils:347-if (!Token.containsTokenWithValue(tokens, H)) {	0
org.apache.commons.lang.enums.ValuedEnum:183-return iValue - ((ValuedEnum) other).iValue;	1
org.apache.commons.lang.enums.ValuedEnum:126-super(name);	0
org.apache.commons.lang.enums.ValuedEnum:127-iValue = value;	0
org.apache.commons.lang.enums.ValuedEnum:128-}	0
org.apache.commons.lang.enums.ValuedEnum:143-if (enumClass == null) {	0
org.apache.commons.lang.enums.ValuedEnum:144-throw new IllegalArgumentException("The Enum Class must not be null");	0
org.apache.commons.lang.enums.ValuedEnum:146-List list = Enum.getEnumList(enumClass);	0
org.apache.commons.lang.enums.ValuedEnum:147-for (Iterator it = list.iterator(); it.hasNext();) {	0
org.apache.commons.lang.enums.ValuedEnum:148-ValuedEnum enumeration = (ValuedEnum) it.next();	0
org.apache.commons.lang.enums.ValuedEnum:149-if (enumeration.getValue() == value) {	0
org.apache.commons.lang.enums.ValuedEnum:150-return enumeration;	0
org.apache.commons.lang.enums.ValuedEnum:152-}	0
org.apache.commons.lang.enums.ValuedEnum:153-return null;	0
org.apache.commons.lang.enums.ValuedEnum:162-return iValue;	0
org.apache.commons.lang.enums.ValuedEnum:204-if (iToString == null) {	0
org.apache.commons.lang.enums.ValuedEnum:205-String shortName = ClassUtils.getShortClassName(getEnumClass());	0
org.apache.commons.lang.enums.ValuedEnum:206-iToString = shortName + "[" + getName() + "=" + getValue() + "]";	0
org.apache.commons.lang.enums.ValuedEnum:208-return iToString;	0
org.apache.commons.lang.time.DateUtils:543-if (date == null) {	0
org.apache.commons.lang.time.DateUtils:546-Calendar gval = Calendar.getInstance();	0
org.apache.commons.lang.time.DateUtils:547-gval.setTime(date);	0
org.apache.commons.lang.time.DateUtils:548-modify(gval, field, false);	0
org.apache.commons.lang.time.DateUtils:549-return gval.getTime();	0
org.apache.commons.lang.time.DateUtils:620-if (val.get(Calendar.YEAR) > 280000000) {	0
org.apache.commons.lang.time.DateUtils:641-boolean roundUp = false;	0
org.apache.commons.lang.time.DateUtils:642-for (int i = 0; i < fields.length; i++) {	0
org.apache.commons.lang.time.DateUtils:643-for (int j = 0; j < fields[i].length; j++) {	0
org.apache.commons.lang.time.DateUtils:644-if (fields[i][j] == field) {	0
org.apache.commons.lang.time.DateUtils:646-if (round && roundUp) {	0
org.apache.commons.lang.time.DateUtils:663-return;	0
org.apache.commons.lang.time.DateUtils:667-int offset = 0;	0
org.apache.commons.lang.time.DateUtils:668-boolean offsetSet = false;	0
org.apache.commons.lang.time.DateUtils:670-switch (field) {	0
org.apache.commons.lang.time.DateUtils:700-if (!offsetSet) {	0
org.apache.commons.lang.time.DateUtils:701-int min = val.getActualMinimum(fields[i][0]);	0
org.apache.commons.lang.time.DateUtils:702-int max = val.getActualMaximum(fields[i][0]);	0
org.apache.commons.lang.time.DateUtils:704-offset = val.get(fields[i][0]) - min;	0
org.apache.commons.lang.time.DateUtils:706-roundUp = offset > ((max - min) / 2);	0
org.apache.commons.lang.time.DateUtils:709-val.set(fields[i][0], val.get(fields[i][0]) - offset);	1
org.apache.commons.lang.time.DateUtils:44-public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone("GMT");	0
org.apache.commons.lang.time.DateUtils:72-private static final int[][] fields = {	0
org.apache.commons.lang.time.DateUtils:123-super();	0
org.apache.commons.lang.time.DateUtils:124-}	0
org.apache.commons.lang.time.DateUtils:141-if (date1 == null || date2 == null) {	0
org.apache.commons.lang.time.DateUtils:142-throw new IllegalArgumentException("The date must not be null");	0
org.apache.commons.lang.time.DateUtils:144-Calendar cal1 = Calendar.getInstance();	0
org.apache.commons.lang.time.DateUtils:145-cal1.setTime(date1);	0
org.apache.commons.lang.time.DateUtils:146-Calendar cal2 = Calendar.getInstance();	0
org.apache.commons.lang.time.DateUtils:147-cal2.setTime(date2);	0
org.apache.commons.lang.time.DateUtils:148-return isSameDay(cal1, cal2);	0
org.apache.commons.lang.time.DateUtils:165-if (cal1 == null || cal2 == null) {	0
org.apache.commons.lang.time.DateUtils:166-throw new IllegalArgumentException("The date must not be null");	0
org.apache.commons.lang.time.DateUtils:168-return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&	0
org.apache.commons.lang.time.DateUtils:186-if (date1 == null || date2 == null) {	0
org.apache.commons.lang.time.DateUtils:187-throw new IllegalArgumentException("The date must not be null");	0
org.apache.commons.lang.time.DateUtils:189-return date1.getTime() == date2.getTime();	0
org.apache.commons.lang.time.DateUtils:204-if (cal1 == null || cal2 == null) {	0
org.apache.commons.lang.time.DateUtils:205-throw new IllegalArgumentException("The date must not be null");	0
org.apache.commons.lang.time.DateUtils:207-return cal1.getTime().getTime() == cal2.getTime().getTime();	0
org.apache.commons.lang.time.DateUtils:224-if (cal1 == null || cal2 == null) {	0
org.apache.commons.lang.time.DateUtils:225-throw new IllegalArgumentException("The date must not be null");	0
org.apache.commons.lang.time.DateUtils:227-return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&	0
org.apache.commons.lang.time.DateUtils:252-if (str == null || parsePatterns == null) {	0
org.apache.commons.lang.time.DateUtils:253-throw new IllegalArgumentException("Date and Patterns must not be null");	0
org.apache.commons.lang.time.DateUtils:256-SimpleDateFormat parser = null;	0
org.apache.commons.lang.time.DateUtils:257-ParsePosition pos = new ParsePosition(0);	0
org.apache.commons.lang.time.DateUtils:258-for (int i = 0; i < parsePatterns.length; i++) {	0
org.apache.commons.lang.time.DateUtils:259-if (i == 0) {	0
org.apache.commons.math3.distribution.HypergeometricDistribution:268-return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();	1
org.apache.commons.math3.distribution.HypergeometricDistribution:279-if (!numericalVarianceIsCalculated) {	0
org.apache.commons.math3.distribution.HypergeometricDistribution:280-numericalVariance = calculateNumericalVariance();	0
org.apache.commons.math3.distribution.HypergeometricDistribution:281-numericalVarianceIsCalculated = true;	0
org.apache.commons.math3.distribution.HypergeometricDistribution:283-return numericalVariance;	0
org.apache.commons.math3.distribution.HypergeometricDistribution:292-final double N = getPopulationSize();	0
org.apache.commons.math3.distribution.HypergeometricDistribution:293-final double m = getNumberOfSuccesses();	0
org.apache.commons.math3.distribution.HypergeometricDistribution:294-final double n = getSampleSize();	0
org.apache.commons.math3.distribution.HypergeometricDistribution:295-return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));	0
org.apache.commons.math3.distribution.HypergeometricDistribution:308-return FastMath.max(0,	0
org.apache.commons.math3.distribution.HypergeometricDistribution:321-return FastMath.min(getNumberOfSuccesses(), getSampleSize());	0
org.apache.commons.math3.distribution.HypergeometricDistribution:161-return numberOfSuccesses;	0
org.apache.commons.math3.distribution.HypergeometricDistribution:170-return populationSize;	0
org.apache.commons.math3.distribution.HypergeometricDistribution:179-return sampleSize;	0
org.apache.commons.math3.distribution.HypergeometricDistribution:63-this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize);	0
org.apache.commons.math3.distribution.HypergeometricDistribution:64-}	0
org.apache.commons.math3.distribution.HypergeometricDistribution:84-super(rng);	0
org.apache.commons.math3.distribution.HypergeometricDistribution:45-private double numericalVariance = Double.NaN;	0
org.apache.commons.math3.distribution.HypergeometricDistribution:47-private boolean numericalVarianceIsCalculated = false;	0
org.apache.commons.math3.distribution.HypergeometricDistribution:86-if (populationSize <= 0) {	0
org.apache.commons.math3.distribution.HypergeometricDistribution:90-if (numberOfSuccesses < 0) {	0
org.apache.commons.math3.distribution.HypergeometricDistribution:94-if (sampleSize < 0) {	0
org.apache.commons.math3.distribution.HypergeometricDistribution:99-if (numberOfSuccesses > populationSize) {	0
org.apache.commons.math3.distribution.HypergeometricDistribution:103-if (sampleSize > populationSize) {	0
org.apache.commons.math3.distribution.HypergeometricDistribution:108-this.numberOfSuccesses = numberOfSuccesses;	0
org.apache.commons.math3.distribution.HypergeometricDistribution:109-this.populationSize = populationSize;	0
org.apache.commons.math3.distribution.HypergeometricDistribution:110-this.sampleSize = sampleSize;	0
org.apache.commons.math3.distribution.HypergeometricDistribution:111-}	0
org.apache.commons.math3.distribution.HypergeometricDistribution:87-throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,	0
org.apache.commons.math3.distribution.HypergeometricDistribution:91-throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,	0
org.apache.commons.math3.distribution.HypergeometricDistribution:95-throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,	0
org.apache.commons.math3.distribution.HypergeometricDistribution:100-throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,	0
org.apache.commons.math3.distribution.HypergeometricDistribution:104-throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,	0
org.apache.commons.math3.distribution.HypergeometricDistribution:117-int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);	0
org.apache.commons.math3.distribution.HypergeometricDistribution:118-if (x < domain[0]) {	0
org.apache.commons.math3.distribution.HypergeometricDistribution:119-ret = 0.0;	0
org.apache.commons.math3.distribution.HypergeometricDistribution:120-} else if (x >= domain[1]) {	0
org.apache.commons.math3.distribution.HypergeometricDistribution:121-ret = 1.0;	0
org.apache.commons.math3.distribution.HypergeometricDistribution:123-ret = innerCumulativeProbability(domain[0], x, 1);	0
org.apache.commons.math3.distribution.HypergeometricDistribution:126-return ret;	0
org.apache.commons.math3.distribution.HypergeometricDistribution:139-return new int[] { getLowerDomain(n, m, k), getUpperDomain(m, k) };	0
org.apache.commons.math3.distribution.HypergeometricDistribution:152-return FastMath.max(0, m - (n - k));	0
org.apache.commons.math3.distribution.HypergeometricDistribution:191-return FastMath.min(k, m);	0
org.apache.commons.math3.distribution.HypergeometricDistribution:198-int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);	0
org.apache.commons.math3.distribution.HypergeometricDistribution:199-if (x < domain[0] || x > domain[1]) {	0
org.apache.commons.math3.distribution.HypergeometricDistribution:200-ret = 0.0;	0
org.apache.commons.math3.distribution.HypergeometricDistribution:202-double p = (double) sampleSize / (double) populationSize;	0
org.apache.commons.math3.distribution.HypergeometricDistribution:203-double q = (double) (populationSize - sampleSize) / (double) populationSize;	0
org.apache.commons.math3.distribution.HypergeometricDistribution:204-double p1 = SaddlePointExpansion.logBinomialProbability(x,	0
org.apache.commons.math3.distribution.HypergeometricDistribution:206-double p2 =	0
org.apache.commons.math3.util.MathArrays:816-final int len = a.length;	0
org.apache.commons.math3.util.MathArrays:817-if (len != b.length) {	0
org.apache.commons.math3.util.MathArrays:823-final double[] prodHigh = new double[len];	0
org.apache.commons.math3.util.MathArrays:824-double prodLowSum = 0;	0
org.apache.commons.math3.util.MathArrays:826-for (int i = 0; i < len; i++) {	0
org.apache.commons.math3.util.MathArrays:827-final double ai = a[i];	0
org.apache.commons.math3.util.MathArrays:828-final double ca = SPLIT_FACTOR * ai;	0
org.apache.commons.math3.util.MathArrays:829-final double aHigh = ca - (ca - ai);	0
org.apache.commons.math3.util.MathArrays:830-final double aLow = ai - aHigh;	0
org.apache.commons.math3.util.MathArrays:832-final double bi = b[i];	0
org.apache.commons.math3.util.MathArrays:833-final double cb = SPLIT_FACTOR * bi;	0
org.apache.commons.math3.util.MathArrays:834-final double bHigh = cb - (cb - bi);	0
org.apache.commons.math3.util.MathArrays:835-final double bLow = bi - bHigh;	0
org.apache.commons.math3.util.MathArrays:836-prodHigh[i] = ai * bi;	0
org.apache.commons.math3.util.MathArrays:837-final double prodLow = aLow * bLow - (((prodHigh[i] -	0
org.apache.commons.math3.util.MathArrays:841-prodLowSum += prodLow;	0
org.apache.commons.math3.util.MathArrays:845-final double prodHighCur = prodHigh[0];	0
org.apache.commons.math3.util.MathArrays:846-double prodHighNext = prodHigh[1];	0
org.apache.commons.math3.util.MathArrays:52-private MathArrays() {}	0
org.apache.commons.math3.util.MathArrays:86-double[] newArr = new double[arr.length];	0
org.apache.commons.math3.util.MathArrays:87-for (int i = 0; i < arr.length; i++) {	0
org.apache.commons.math3.util.MathArrays:88-newArr[i] = arr[i] * val;	0
org.apache.commons.math3.util.MathArrays:90-return newArr;	0
org.apache.commons.math3.util.MathArrays:103-for (int i = 0; i < arr.length; i++) {	0
org.apache.commons.math3.util.MathArrays:104-arr[i] *= val;	0
org.apache.commons.math3.util.MathArrays:106-}	0
org.apache.commons.math3.util.MathArrays:120-if (a.length != b.length) {	0
org.apache.commons.math3.util.MathArrays:121-throw new DimensionMismatchException(a.length, b.length);	0
org.apache.commons.math3.util.MathArrays:124-final double[] result = a.clone();	0
org.apache.commons.math3.util.MathArrays:125-for (int i = 0; i < a.length; i++) {	0
org.apache.commons.math3.util.MathArrays:126-result[i] += b[i];	0
org.apache.commons.math3.util.MathArrays:128-return result;	0
org.apache.commons.math3.util.MathArrays:142-if (a.length != b.length) {	0
org.apache.commons.math3.util.MathArrays:143-throw new DimensionMismatchException(a.length, b.length);	0
org.apache.commons.math3.util.MathArrays:146-final double[] result = a.clone();	0
org.apache.commons.math3.util.MathArrays:147-for (int i = 0; i < a.length; i++) {	0
org.apache.commons.math3.util.MathArrays:148-result[i] -= b[i];	0
org.apache.commons.math3.util.MathArrays:150-return result;	0
org.apache.commons.math3.util.MathArrays:164-if (a.length != b.length) {	0
org.apache.commons.math3.util.MathArrays:165-throw new DimensionMismatchException(a.length, b.length);	0
org.apache.commons.math3.util.MathArrays:168-final double[] result = a.clone();	0
org.apache.commons.math3.util.MathArrays:169-for (int i = 0; i < a.length; i++) {	0
org.apache.commons.math3.util.MathArrays:170-result[i] *= b[i];	0
org.apache.commons.math3.util.MathArrays:172-return result;	0
org.apache.commons.math3.util.MathArrays:186-if (a.length != b.length) {	0
org.apache.commons.math3.util.MathArrays:187-throw new DimensionMismatchException(a.length, b.length);	0
org.apache.commons.math3.util.MathArrays:190-final double[] result = a.clone();	0
org.apache.commons.math3.util.MathArrays:191-for (int i = 0; i < a.length; i++) {	0
org.apache.commons.math3.util.MathArrays:192-result[i] /= b[i];	0
org.apache.commons.math3.util.MathArrays:194-return result;	0
org.apache.commons.math3.complex.Complex:305-return NaN;	1
org.apache.commons.math3.complex.Complex:1228-return "(" + real + ", " + imaginary + ")";	0
org.apache.commons.math3.complex.Complex:304-if (real == 0.0 && imaginary == 0.0) {	0
org.apache.commons.math3.complex.Complex:300-if (isNaN) {	0
org.apache.commons.math3.complex.Complex:348-return (real == c.real) && (imaginary == c.imaginary);	0
org.apache.commons.math3.complex.Complex:344-Complex c = (Complex)other;	0
org.apache.commons.math3.complex.Complex:345-if (c.isNaN) {	0
org.apache.commons.math3.complex.Complex:343-if (other instanceof Complex){	0
org.apache.commons.math3.complex.Complex:340-if (this == other) {	0
org.apache.commons.math3.complex.Complex:98-public Complex(double real, double imaginary) {	0
org.apache.commons.math3.complex.Complex:99-this.real = real;	0
org.apache.commons.math3.complex.Complex:100-this.imaginary = imaginary;	0
org.apache.commons.math3.complex.Complex:102-isNaN = Double.isNaN(real) || Double.isNaN(imaginary);	0
org.apache.commons.math3.complex.Complex:103-isInfinite = !isNaN &&	0
org.apache.commons.math3.complex.Complex:105-}	0
org.apache.commons.math3.complex.Complex:59-public static final Complex I = new Complex(0.0, 1.0);	0
org.apache.commons.math3.complex.Complex:62-public static final Complex NaN = new Complex(Double.NaN, Double.NaN);	0
org.apache.commons.math3.complex.Complex:65-public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);	0
org.apache.commons.math3.complex.Complex:67-public static final Complex ONE = new Complex(1.0, 0.0);	0
org.apache.commons.math3.complex.Complex:69-public static final Complex ZERO = new Complex(0.0, 0.0);	0
org.apache.commons.math3.complex.Complex:89-this(real, 0.0);	0
org.apache.commons.math3.complex.Complex:90-}	0
org.apache.commons.math3.complex.Complex:116-if (isNaN) {	0
org.apache.commons.math3.complex.Complex:117-return Double.NaN;	0
org.apache.commons.math3.complex.Complex:119-if (isInfinite()) {	0
org.apache.commons.math3.complex.Complex:120-return Double.POSITIVE_INFINITY;	0
org.apache.commons.math3.complex.Complex:122-if (FastMath.abs(real) < FastMath.abs(imaginary)) {	0
org.apache.commons.math3.complex.Complex:123-if (imaginary == 0.0) {	0
org.apache.commons.math3.complex.Complex:124-return FastMath.abs(real);	0
org.apache.commons.math3.complex.Complex:126-double q = real / imaginary;	0
org.apache.commons.math3.complex.Complex:127-return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);	0
org.apache.commons.math3.complex.Complex:129-if (real == 0.0) {	0
org.apache.commons.math3.complex.Complex:130-return FastMath.abs(imaginary);	0
org.apache.commons.math3.complex.Complex:132-double q = imaginary / real;	0
org.apache.commons.math3.complex.Complex:133-return FastMath.abs(real) * FastMath.sqrt(1 + q * q);	0
org.apache.commons.math3.complex.Complex:157-MathUtils.checkNotNull(addend);	0
org.apache.commons.math3.complex.Complex:158-if (isNaN || addend.isNaN) {	0
org.apache.commons.math3.complex.Complex:159-return NaN;	0
org.apache.commons.math3.complex.Complex:162-return createComplex(real + addend.getReal(),	0
org.apache.commons.math3.complex.Complex:175-if (isNaN || Double.isNaN(addend)) {	0
org.apache.commons.math3.complex.Complex:176-return NaN;	0
org.apache.commons.math3.complex.Complex:179-return createComplex(real + addend, imaginary);	0
org.apache.commons.math3.complex.Complex:197-if (isNaN) {	0
org.apache.commons.math3.complex.Complex:198-return NaN;	0
org.apache.commons.math3.complex.Complex:201-return createComplex(real, -imaginary);	0
org.apache.commons.math3.complex.Complex:248-MathUtils.checkNotNull(divisor);	0
org.apache.commons.math3.complex.Complex:249-if (isNaN || divisor.isNaN) {	0
org.apache.commons.math3.complex.Complex:250-return NaN;	0
org.apache.commons.math3.complex.Complex:253-final double c = divisor.getReal();	0
org.apache.commons.math3.complex.Complex:254-final double d = divisor.getImaginary();	0
org.apache.commons.math3.optim.BaseOptimizer:93-return iterations.getCount();	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:451-if (bestFitness < (isMinimize ? stopFitness : -stopFitness)) {	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:1109-final double[][] d = new double[m.getRowDimension()][1];	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:1110-for (int i = 0; i < m.getColumnDimension(); i++) {	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:1111-d[i][0] = m.getEntry(i, i);	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:1113-return new Array2DRowRealMatrix(d, false);	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:370-isMinimize = getGoalType().equals(GoalType.MINIMIZE);	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:371-final FitnessFunction fitfun = new FitnessFunction();	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:372-final double[] guess = getStartPoint();	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:374-dimension = guess.length;	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:375-initializeCMA(guess);	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:376-iterations = 0;	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:377-double bestValue = fitfun.value(guess);	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:378-push(fitnessHistory, bestValue);	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:379-PointValuePair optimum	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:382-PointValuePair lastResult = null;	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:387-for (iterations = 1; iterations <= maxIterations; iterations++) {	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:390-final RealMatrix arz = randn1(dimension, lambda);	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:391-final RealMatrix arx = zeros(dimension, lambda);	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:392-final double[] fitness = new double[lambda];	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:394-for (int k = 0; k < lambda; k++) {	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:395-RealMatrix arxk = null;	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:396-for (int i = 0; i < checkFeasableCount + 1; i++) {	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:397-if (diagonalOnly <= 0) {	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:404-if (i >= checkFeasableCount ||	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:411-copyColumn(arxk, 0, arx, k);	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:413-fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:416-}	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:419-final int[] arindex = sortedIndices(fitness);	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:421-final RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:422-final RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:423-xmean = bestArx.multiply(weights);	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:424-final RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:425-final RealMatrix zmean = bestArz.multiply(weights);	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:426-final boolean hsig = updateEvolutionPaths(zmean, xold);	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:427-if (diagonalOnly <= 0) {	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:433-sigma *= Math.exp(Math.min(1, (normps/chiN - 1) * cs / damps));	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:434-final double bestFitness = fitness[arindex[0]];	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:435-final double worstFitness = fitness[arindex[arindex.length - 1]];	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:436-if (bestValue > bestFitness) {	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:437-bestValue = bestFitness;	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:438-lastResult = optimum;	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:439-optimum = new PointValuePair(fitfun.repair(bestArx.getColumn(0)),	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:441-if (getConvergenceChecker() != null &&	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:450-if (stopFitness != 0) { // only if stopFitness is defined	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:455-final double[] sqrtDiagC = sqrt(diagC).getColumn(0);	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:456-final double[] pcCol = pc.getColumn(0);	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:457-for (int i = 0; i < dimension; i++) {	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:458-if (sigma * Math.max(Math.abs(pcCol[i]), sqrtDiagC[i]) > stopTolX) {	0
org.apache.commons.math3.optim.nonlinear.scalar.noderiv.CMAESOptimizer:459-break;	0
org.apache.commons.math3.ode.AbstractIntegrator:351-handler.handleStep(interpolator, isLastStep);	0
org.apache.commons.math3.ode.AbstractIntegrator:352-}	0
org.apache.commons.math3.ode.AbstractIntegrator:367-System.arraycopy(eventY, 0, y, 0, y.length);	0
org.apache.commons.math3.ode.AbstractIntegrator:368-computeDerivatives(eventT, y, yDot);	0
org.apache.commons.math3.ode.AbstractIntegrator:369-resetOccurred = true;	0
org.apache.commons.math3.ode.AbstractIntegrator:370-for (final EventState remaining : occuringEvents) {	1
org.apache.commons.math3.ode.AbstractIntegrator:373-return eventT;	0
org.apache.commons.math3.ode.AbstractIntegrator:127-addEventHandler(handler, maxCheckInterval, convergence,	0
org.apache.commons.math3.ode.AbstractIntegrator:130-}	0
org.apache.commons.math3.ode.AbstractIntegrator:138-eventsStates.add(new EventState(handler, maxCheckInterval, convergence,	0
org.apache.commons.math3.ode.AbstractIntegrator:140-}	0
org.apache.commons.math3.ode.AbstractIntegrator:191-state.getEventHandler().init(t0, y0, t);	0
org.apache.commons.math3.ode.AbstractIntegrator:192-}	0
org.apache.commons.math3.ode.AbstractIntegrator:306-state.reinitializeBegin(interpolator);	0
org.apache.commons.math3.ode.AbstractIntegrator:307-}	0
org.apache.commons.math3.ode.AbstractIntegrator:323-if (state.evaluateStep(interpolator)) {	0
org.apache.commons.math3.ode.AbstractIntegrator:325-occuringEvents.add(state);	0
org.apache.commons.math3.ode.AbstractIntegrator:327-}	0
org.apache.commons.math3.ode.AbstractIntegrator:332-final Iterator<EventState> iterator = occuringEvents.iterator();	0
org.apache.commons.math3.ode.AbstractIntegrator:333-final EventState currentEvent = iterator.next();	0
org.apache.commons.math3.ode.AbstractIntegrator:334-iterator.remove();	0
org.apache.commons.math3.ode.AbstractIntegrator:337-final double eventT = currentEvent.getEventTime();	0
org.apache.commons.math3.ode.AbstractIntegrator:338-interpolator.setSoftPreviousTime(previousT);	0
org.apache.commons.math3.ode.AbstractIntegrator:339-interpolator.setSoftCurrentTime(eventT);	0
org.apache.commons.math3.ode.AbstractIntegrator:342-interpolator.setInterpolatedTime(eventT);	0
org.apache.commons.math3.ode.AbstractIntegrator:343-final double[] eventY = interpolator.getInterpolatedState().clone();	0
org.apache.commons.math3.ode.AbstractIntegrator:346-currentEvent.stepAccepted(eventT, eventY);	1
org.apache.commons.math3.ode.AbstractIntegrator:347-isLastStep = currentEvent.stop();	0
org.apache.commons.math3.ode.AbstractIntegrator:350-for (final StepHandler handler : stepHandlers) {	0
org.apache.commons.math3.ode.AbstractIntegrator:354-if (isLastStep) {	0
org.apache.commons.math3.ode.AbstractIntegrator:363-boolean needReset = currentEvent.reset(eventT, eventY);	1
org.apache.commons.math3.ode.AbstractIntegrator:364-if (needReset) {	0
org.apache.commons.math3.ode.AbstractIntegrator:393-state.stepAccepted(currentT, currentY);	0
org.apache.commons.math3.ode.AbstractIntegrator:394-isLastStep = isLastStep || state.stop();	0
org.apache.commons.math3.ode.AbstractIntegrator:395-}	0
org.apache.commons.math3.ode.AbstractIntegrator:400-handler.handleStep(interpolator, isLastStep);	0
org.apache.commons.math3.ode.AbstractIntegrator:401-}	0
org.apache.commons.math3.ode.AbstractIntegrator:109-stepHandlers.add(handler);	0
org.apache.commons.math3.ode.AbstractIntegrator:110-}	0
org.apache.commons.math3.ode.AbstractIntegrator:195-handler.init(t0, y0, t);	0
org.apache.commons.math3.ode.AbstractIntegrator:196-}	0
org.apache.commons.math3.ode.AbstractIntegrator:300-double previousT = interpolator.getGlobalPreviousTime();	0
org.apache.commons.math3.ode.AbstractIntegrator:301-final double currentT = interpolator.getGlobalCurrentTime();	0
org.apache.commons.math3.ode.AbstractIntegrator:304-if (! statesInitialized) {	0
org.apache.commons.math3.ode.AbstractIntegrator:305-for (EventState state : eventsStates) {	0
org.apache.commons.math3.ode.AbstractIntegrator:308-statesInitialized = true;	0
org.apache.commons.math3.ode.AbstractIntegrator:312-final int orderingSign = interpolator.isForward() ? +1 : -1;	0
org.apache.commons.math3.ode.AbstractIntegrator:313-SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {	0
org.apache.commons.math3.ode.AbstractIntegrator:322-for (final EventState state : eventsStates) {	0
org.apache.commons.math3.ode.AbstractIntegrator:329-while (!occuringEvents.isEmpty()) {	0
org.apache.commons.math3.distribution.DiscreteDistribution:69-this(new Well19937c(), samples);	0
org.apache.commons.math3.distribution.DiscreteDistribution:70-}	0
org.apache.commons.math3.distribution.DiscreteDistribution:182-if (sampleSize <= 0) {	0
org.apache.commons.math3.distribution.DiscreteDistribution:187-final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);	1
org.apache.commons.math3.distribution.DiscreteDistribution:189-for (int i = 0; i < sampleSize; i++) {	0
org.apache.commons.math3.distribution.DiscreteDistribution:190-out[i] = sample();	0
org.apache.commons.math3.distribution.DiscreteDistribution:157-final double randomValue = random.nextDouble();	0
org.apache.commons.math3.distribution.DiscreteDistribution:158-double sum = 0;	0
org.apache.commons.math3.distribution.DiscreteDistribution:160-for (int i = 0; i < probabilities.length; i++) {	0
org.apache.commons.math3.distribution.DiscreteDistribution:161-sum += probabilities[i];	0
org.apache.commons.math3.distribution.DiscreteDistribution:162-if (randomValue < sum) {	0
org.apache.commons.math3.distribution.DiscreteDistribution:163-return singletons.get(i);	0
org.apache.commons.math3.distribution.DiscreteDistribution:86-throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException {	0
org.apache.commons.math3.distribution.DiscreteDistribution:87-random = rng;	0
org.apache.commons.math3.distribution.DiscreteDistribution:89-singletons = new ArrayList<T>(samples.size());	0
org.apache.commons.math3.distribution.DiscreteDistribution:90-final double[] probs = new double[samples.size()];	0
org.apache.commons.math3.distribution.DiscreteDistribution:92-for (int i = 0; i < samples.size(); i++) {	0
org.apache.commons.math3.distribution.DiscreteDistribution:93-final Pair<T, Double> sample = samples.get(i);	0
org.apache.commons.math3.distribution.DiscreteDistribution:94-singletons.add(sample.getKey());	0
org.apache.commons.math3.distribution.DiscreteDistribution:95-if (sample.getValue() < 0) {	0
org.apache.commons.math3.distribution.DiscreteDistribution:98-probs[i] = sample.getValue();	0
org.apache.commons.math3.distribution.DiscreteDistribution:101-probabilities = MathArrays.normalizeArray(probs, 1.0);	0
org.apache.commons.math3.distribution.DiscreteDistribution:102-}	0
org.apache.commons.math3.distribution.DiscreteDistribution:96-throw new NotPositiveException(sample.getValue());	0
org.apache.commons.math3.distribution.DiscreteDistribution:110-random.setSeed(seed);	0
org.apache.commons.math3.distribution.DiscreteDistribution:111-}	0
org.apache.commons.math3.distribution.DiscreteDistribution:123-double probability = 0;	0
org.apache.commons.math3.distribution.DiscreteDistribution:125-for (int i = 0; i < probabilities.length; i++) {	0
org.apache.commons.math3.distribution.DiscreteDistribution:126-if ((x == null && singletons.get(i) == null) ||	0
org.apache.commons.math3.distribution.DiscreteDistribution:128-probability += probabilities[i];	0
org.apache.commons.math3.distribution.DiscreteDistribution:132-return probability;	0
org.apache.commons.math3.distribution.DiscreteDistribution:142-final List<Pair<T, Double>> samples = new ArrayList<Pair<T, Double>>(probabilities.length);	0
org.apache.commons.math3.distribution.DiscreteDistribution:144-for (int i = 0; i < probabilities.length; i++) {	0
org.apache.commons.math3.distribution.DiscreteDistribution:145-samples.add(new Pair<T, Double>(singletons.get(i), probabilities[i]));	0
org.apache.commons.math3.distribution.DiscreteDistribution:148-return samples;	0
org.apache.commons.math3.distribution.DiscreteDistribution:170-return singletons.get(singletons.size() - 1);	0
org.apache.commons.math3.distribution.DiscreteDistribution:183-throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,	0
org.apache.commons.math3.distribution.DiscreteDistribution:193-return out;	0
org.apache.commons.math3.geometry.euclidean.threed.Line:87-final Line reverted = new Line(zero, zero.subtract(direction));	1
org.apache.commons.math3.geometry.euclidean.threed.Line:88-return reverted;	0
org.apache.commons.math3.geometry.euclidean.threed.Line:95-return direction;	0
org.apache.commons.math3.geometry.euclidean.threed.Line:54-public Line(final Vector3D p1, final Vector3D p2) throws MathIllegalArgumentException {	0
org.apache.commons.math3.geometry.euclidean.threed.Line:55-reset(p1, p2);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:56-}	0
org.apache.commons.math3.geometry.euclidean.threed.Line:74-final Vector3D delta = p2.subtract(p1);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:75-final double norm2 = delta.getNormSq();	0
org.apache.commons.math3.geometry.euclidean.threed.Line:76-if (norm2 == 0.0) {	0
org.apache.commons.math3.geometry.euclidean.threed.Line:79-this.direction = new Vector3D(1.0 / FastMath.sqrt(norm2), delta);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:80-zero = new Vector3D(1.0, p1, -p1.dotProduct(delta) / norm2, delta);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:81-}	0
org.apache.commons.math3.geometry.euclidean.threed.Line:63-public Line(final Line line) {	0
org.apache.commons.math3.geometry.euclidean.threed.Line:64-this.direction = line.direction;	0
org.apache.commons.math3.geometry.euclidean.threed.Line:65-this.zero= line.zero;	0
org.apache.commons.math3.geometry.euclidean.threed.Line:66-}	0
org.apache.commons.math3.geometry.euclidean.threed.Line:77-throw new MathIllegalArgumentException(LocalizedFormats.ZERO_NORM);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:102-return zero;	0
org.apache.commons.math3.geometry.euclidean.threed.Line:113-return point.subtract(zero).dotProduct(direction);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:121-return new Vector3D(1.0, zero, abscissa, direction);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:128-return new Vector1D(getAbscissa((Vector3D) point));	0
org.apache.commons.math3.geometry.euclidean.threed.Line:135-return pointAt(((Vector1D) point).getX());	0
org.apache.commons.math3.geometry.euclidean.threed.Line:146-final double angle = Vector3D.angle(direction, line.direction);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:147-return ((angle < 1.0e-10) || (angle > (FastMath.PI - 1.0e-10))) && contains(line.zero);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:155-return distance(p) < 1.0e-10;	0
org.apache.commons.math3.geometry.euclidean.threed.Line:163-final Vector3D d = p.subtract(zero);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:164-final Vector3D n = new Vector3D(1.0, d, -d.dotProduct(direction), direction);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:165-return n.getNorm();	0
org.apache.commons.math3.geometry.euclidean.threed.Line:174-final Vector3D normal = Vector3D.crossProduct(direction, line.direction);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:175-final double n = normal.getNorm();	0
org.apache.commons.math3.geometry.euclidean.threed.Line:176-if (n < Precision.SAFE_MIN) {	0
org.apache.commons.math3.geometry.euclidean.threed.Line:178-return distance(line.zero);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:182-final double offset = line.zero.subtract(zero).dotProduct(normal) / n;	0
org.apache.commons.math3.geometry.euclidean.threed.Line:184-return FastMath.abs(offset);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:194-final double cos = direction.dotProduct(line.direction);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:195-final double n = 1 - cos * cos;	0
org.apache.commons.math3.geometry.euclidean.threed.Line:196-if (n < Precision.EPSILON) {	0
org.apache.commons.math3.geometry.euclidean.threed.Line:198-return zero;	0
org.apache.commons.math3.geometry.euclidean.threed.Line:201-final Vector3D delta0 = line.zero.subtract(zero);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:202-final double a= delta0.dotProduct(direction);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:203-final double b= delta0.dotProduct(line.direction);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:205-return new Vector3D(1, zero, (a - b * cos) / n, direction);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:215-final Vector3D closest = closestPoint(line);	0
org.apache.commons.math3.geometry.euclidean.threed.Line:216-return line.contains(closest) ? closest : null;	0
org.apache.commons.math3.geometry.euclidean.threed.Line:223-return new SubLine(this, new IntervalsSet());	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1387-double[] tmp1 = new double[getSize()];	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1388-multiply(x, xOffset, x, xOffset, tmp1, 0);// x^2	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1389-double[] tmp2 = new double[getSize()];	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1390-multiply(y, yOffset, y, yOffset, tmp2, 0);// y^2	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1391-add(tmp1, 0, tmp2, 0, tmp2, 0); // x^2 + y^2	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1392-rootN(tmp2, 0, 2, tmp1, 0); // r = sqrt(x^2 + y^2)	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1394-if (x[xOffset] >= 0) {	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1397-add(tmp1, 0, x, xOffset, tmp2, 0);// r + x	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1398-divide(y, yOffset, tmp2, 0, tmp1, 0); // y /(r + x)	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1399-atan(tmp1, 0, tmp2, 0); // atan(y / (r + x))	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1400-for (int i = 0; i < tmp2.length; ++i) {	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1401-result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1420-}	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1327-double[] function = new double[1 + order];	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1328-final double x = operand[operandOffset];	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1329-function[0] = FastMath.atan(x);	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1330-if (order > 0) {	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1338-final double[] q = new double[order];	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1339-q[0] = 1;	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1340-final double x2= x * x;	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1341-final double f = 1.0 / (1 + x2);	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1342-double coeff = f;	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1343-function[1] = coeff * q[0];	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1344-for (int n = 2; n <= order; ++n) {	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1347-double v = 0;	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1348-q[n - 1] = -n * q[n - 2];	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1349-for (int k = n - 1; k >= 0; k -= 2) {	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1350-v = v * x2 + q[k];	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1351-if (k > 2) {	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1353-} else if (k == 2) {	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1357-if ((n & 0x1) == 0) {	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1358-v *= x;	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1361-coeff *= f;	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1362-function[n] = coeff * v;	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1368-compose(operand, operandOffset, function, result, resultOffset);	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:1370-}	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:796-final double[] reciprocal = new double[getSize()];	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:797-pow(rhs, lhsOffset, -1, reciprocal, 0);	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:798-multiply(lhs, lhsOffset, reciprocal, 0, result, resultOffset);	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:799-}	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:950-function[0] = FastMath.sqrt(operand[operandOffset]);	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:951-xk= 0.5 / function[0];	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:894-final double inv = 1.0 / operand[operandOffset];	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:895-double xk = FastMath.pow(inv, -n);	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:896-for (int i = 0; i <= order; ++i) {	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:897-function[i] = xk;	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:898-xk *= inv;	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:947-double[] function = new double[1 + order];	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:949-if (n == 2) {	0
org.apache.commons.math3.analysis.differentiation.DSCompiler:959-final double nReciprocal = 1.0 / n;	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:178-final int dim = getDimension();	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:179-if (vals.length != dim) {	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:183-return FastMath.pow(2 * FastMath.PI, -dim / 2) *	1
org.apache.commons.math3.distribution.MultivariateNormalDistribution:229-final double[] centered = new double[values.length];	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:230-for (int i = 0; i < centered.length; i++) {	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:231-centered[i] = values[i] - getMeans()[i];	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:233-final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:234-double sum = 0;	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:235-for (int i = 0; i < preMultiplied.length; i++) {	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:236-sum += preMultiplied[i] * centered[i];	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:238-return FastMath.exp(-0.5 * sum);	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:164-return MathArrays.copyOf(means);	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:76-this(new Well19937c(), means, covariances);	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:77-}	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:103-super(rng, means.length);	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:105-final int dim = means.length;	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:107-if (covariances.length != dim) {	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:111-for (int i = 0; i < dim; i++) {	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:112-if (dim != covariances[i].length) {	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:117-this.means = MathArrays.copyOf(means);	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:119-covarianceMatrix = new Array2DRowRealMatrix(covariances);	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:122-final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:125-covarianceMatrixInverse = covMatDec.getSolver().getInverse();	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:127-covarianceMatrixDeterminant = covMatDec.getDeterminant();	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:130-final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:132-for (int i = 0; i < covMatEigenvalues.length; i++) {	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:133-if (covMatEigenvalues[i] < 0) {	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:139-final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim);	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:140-for (int v = 0; v < dim; v++) {	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:141-final double[] evec = covMatDec.getEigenvector(v).toArray();	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:142-covMatEigenvectors.setColumn(v, evec);	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:145-final RealMatrix tmpMatrix = covMatEigenvectors.transpose();	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:148-for (int row = 0; row < dim; row++) {	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:149-final double factor = FastMath.sqrt(covMatEigenvalues[row]);	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:150-for (int col = 0; col < dim; col++) {	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:151-tmpMatrix.multiplyEntry(row, col, factor);	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:155-samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:156-}	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:108-throw new DimensionMismatchException(covariances.length, dim);	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:113-throw new DimensionMismatchException(covariances[i].length, dim);	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:134-throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0);	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:173-return covarianceMatrix.copy();	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:180-throw new DimensionMismatchException(vals.length, dim);	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:195-final int dim = getDimension();	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:196-final double[] std = new double[dim];	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:197-final double[][] s = covarianceMatrix.getData();	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:198-for (int i = 0; i < dim; i++) {	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:199-std[i] = FastMath.sqrt(s[i][i]);	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:201-return std;	0
org.apache.commons.math3.distribution.MultivariateNormalDistribution:206-final int dim = getDimension();	0
org.apache.commons.math3.random.BitsStreamGenerator:87-final long high = ((long) next(26)) << 26;	0
org.apache.commons.math3.random.BitsStreamGenerator:88-final intlow= next(26);	0
org.apache.commons.math3.random.BitsStreamGenerator:89-return (high | low) * 0x1.0p-52d;	0
org.apache.commons.math3.random.BitsStreamGenerator:101-if (Double.isNaN(nextGaussian)) {	0
org.apache.commons.math3.random.BitsStreamGenerator:103-final double x = nextDouble();	0
org.apache.commons.math3.random.BitsStreamGenerator:104-final double y = nextDouble();	0
org.apache.commons.math3.random.BitsStreamGenerator:105-final double alpha = 2 * FastMath.PI * x;	0
org.apache.commons.math3.random.BitsStreamGenerator:106-final double r= FastMath.sqrt(-2 * FastMath.log(y));	0
org.apache.commons.math3.random.BitsStreamGenerator:107-random = r * FastMath.cos(alpha);	0
org.apache.commons.math3.random.BitsStreamGenerator:108-nextGaussian = r * FastMath.sin(alpha);	0
org.apache.commons.math3.random.BitsStreamGenerator:109-} else {	0
org.apache.commons.math3.random.BitsStreamGenerator:111-random = nextGaussian;	0
org.apache.commons.math3.random.BitsStreamGenerator:112-nextGaussian = Double.NaN;	0
org.apache.commons.math3.random.BitsStreamGenerator:115-return random;	0
org.apache.commons.math3.random.BitsStreamGenerator:37-public BitsStreamGenerator() {	0
org.apache.commons.math3.random.BitsStreamGenerator:38-nextGaussian = Double.NaN;	0
org.apache.commons.math3.random.BitsStreamGenerator:39-}	0
org.apache.commons.math3.random.BitsStreamGenerator:167-nextGaussian = Double.NaN;	0
org.apache.commons.math3.random.BitsStreamGenerator:168-}	0
org.apache.commons.math3.random.BitsStreamGenerator:63-return next(1) != 0;	0
org.apache.commons.math3.random.BitsStreamGenerator:68-int i = 0;	0
org.apache.commons.math3.random.BitsStreamGenerator:69-final int iEnd = bytes.length - 3;	0
org.apache.commons.math3.random.BitsStreamGenerator:70-while (i < iEnd) {	0
org.apache.commons.math3.random.BitsStreamGenerator:71-final int random = next(32);	0
org.apache.commons.math3.random.BitsStreamGenerator:72-bytes[i] = (byte) (random & 0xff);	0
org.apache.commons.math3.random.BitsStreamGenerator:73-bytes[i + 1] = (byte) ((random >>8) & 0xff);	0
org.apache.commons.math3.random.BitsStreamGenerator:74-bytes[i + 2] = (byte) ((random >> 16) & 0xff);	0
org.apache.commons.math3.random.BitsStreamGenerator:75-bytes[i + 3] = (byte) ((random >> 24) & 0xff);	0
org.apache.commons.math3.random.BitsStreamGenerator:76-i += 4;	0
org.apache.commons.math3.random.BitsStreamGenerator:77-}	0
org.apache.commons.math3.random.BitsStreamGenerator:78-int random = next(32);	0
org.apache.commons.math3.random.BitsStreamGenerator:79-while (i < bytes.length) {	0
org.apache.commons.math3.random.BitsStreamGenerator:80-bytes[i++] = (byte) (random & 0xff);	0
org.apache.commons.math3.random.BitsStreamGenerator:81-random = random >> 8;	0
org.apache.commons.math3.random.BitsStreamGenerator:83-}	0
org.apache.commons.math3.random.BitsStreamGenerator:94-return next(23) * 0x1.0p-23f;	0
org.apache.commons.math3.random.BitsStreamGenerator:121-return next(32);	0
org.apache.commons.math3.random.BitsStreamGenerator:140-if (n > 0) {	0
org.apache.commons.math3.random.BitsStreamGenerator:141-if ((n & -n) == n) {	0
org.apache.commons.math3.random.BitsStreamGenerator:142-return (int) ((n * (long) next(31)) >> 31);	0
org.apache.commons.math3.random.BitsStreamGenerator:147-bits = next(31);	0
org.apache.commons.math3.random.BitsStreamGenerator:148-val = bits % n;	0
org.apache.commons.math3.random.BitsStreamGenerator:149-} while (bits - val + (n - 1) < 0);	0
org.apache.commons.math3.random.BitsStreamGenerator:150-return val;	0
org.apache.commons.math3.random.BitsStreamGenerator:152-throw new NotStrictlyPositiveException(n);	0
org.apache.commons.math3.random.BitsStreamGenerator:157-final long high= ((long) next(32)) << 32;	0
org.apache.commons.math3.random.BitsStreamGenerator:158-final longlow= ((long) next(32)) & 0xffffffffL;	0
org.apache.commons.math3.random.BitsStreamGenerator:159-return high | low;	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:134-super(checker);	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:135-}	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:423-return optimizeInternal(maxEval,	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:496-return super.optimizeInternal(maxEval, FunctionUtils.toDifferentiableMultivariateVectorFunction(f), optData);	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:502-super.setUp();	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:505-jacobianEvaluations = 0;	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:508-weightMatrixSqrt = squareRoot(getWeight());	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:562-final EigenDecomposition dec = new EigenDecomposition(m);	1
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:128-protected AbstractLeastSquaresOptimizer() {}	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:141-return jacobianEvaluations;	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:154-final RealMatrix weightedJacobian = computeWeightedJacobian(point);	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:155-weightedResidualJacobian = weightedJacobian.scalarMultiply(-1).getData();	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:156-}	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:168-++jacobianEvaluations;	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:170-final DerivativeStructure[] dsPoint = new DerivativeStructure[params.length];	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:171-final int nC = params.length;	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:172-for (int i = 0; i < nC; ++i) {	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:173-dsPoint[i] = new DerivativeStructure(nC, 1, i, params[i]);	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:175-final DerivativeStructure[] dsValue = jF.value(dsPoint);	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:176-final int nR = getTarget().length;	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:177-if (dsValue.length != nR) {	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:178-throw new DimensionMismatchException(dsValue.length, nR);	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:180-final double[][] jacobianData = new double[nR][nC];	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:181-for (int i = 0; i < nR; ++i) {	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:182-int[] orders = new int[nC];	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:183-for (int j = 0; j < nC; ++j) {	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:184-orders[j] = 1;	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:185-jacobianData[i][j] = dsValue[i].getPartialDerivative(orders);	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:186-orders[j] = 0;	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:190-return weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(jacobianData));	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:205-objective = computeObjectiveValue(point);	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:206-final double[] res = computeResiduals(objective);	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:209-cost = computeCost(res);	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:212-final ArrayRealVector residuals = new ArrayRealVector(res);	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:213-weightedResiduals = weightMatrixSqrt.operate(residuals).toArray();	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:214-}	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:225-final ArrayRealVector r = new ArrayRealVector(residuals);	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:226-return FastMath.sqrt(r.dotProduct(getWeight().operate(r)));	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:240-return FastMath.sqrt(getChiSquare() / rows);	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:250-return cost * cost;	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:260-return weightMatrixSqrt.copy();	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:270-this.cost = cost;	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:271-}	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:285-return getCovariances(DEFAULT_SINGULARITY_THRESHOLD);	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:307-return computeCovariances(point, threshold);	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:330-final RealMatrix j = computeWeightedJacobian(params);	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:333-final RealMatrix jTj = j.transpose().multiply(j);	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:336-final DecompositionSolver solver	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:338-return solver.getInverse().getData();	0
org.apache.commons.math3.optimization.general.AbstractLeastSquaresOptimizer:372-if (rows <= cols) {	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:53-super(checker);	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:54-}	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:201-parseOptimizationData(optData);	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:250-for (OptimizationData data : optData) {	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:251-if (data instanceof Weight) {	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:252-weightMatrixSqrt = squareRoot(((Weight) data).getWeight());	0
org.apache.commons.math3.optim.nonlinear.vector.Weight:41-public Weight(double[] weight) {	0
org.apache.commons.math3.optim.nonlinear.vector.Weight:42-final int dim = weight.length;	0
org.apache.commons.math3.optim.nonlinear.vector.Weight:43-weightMatrix = org.apache.commons.math3.linear.MatrixUtils.createRealMatrix(dim, dim);	1
org.apache.commons.math3.optim.nonlinear.vector.Weight:44-for (int i = 0; i < dim; i++) {	0
org.apache.commons.math3.optim.nonlinear.vector.Weight:45-weightMatrix.setEntry(i, i, weight[i]);	0
org.apache.commons.math3.optim.nonlinear.vector.Weight:47-}	0
org.apache.commons.math3.optim.nonlinear.vector.Weight:69-return weightMatrix.copy();	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:65-return weightMatrixSqrt.multiply(MatrixUtils.createRealMatrix(computeJacobian(params)));	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:76-final ArrayRealVector r = new ArrayRealVector(residuals);	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:77-return FastMath.sqrt(r.dotProduct(getWeight().operate(r)));	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:92-return FastMath.sqrt(getChiSquare() / getTargetSize());	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:102-return cost * cost;	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:111-return weightMatrixSqrt.copy();	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:120-this.cost = cost;	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:121-}	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:142-final RealMatrix j = computeWeightedJacobian(params);	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:145-final RealMatrix jTj = j.transpose().multiply(j);	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:148-final DecompositionSolver solver	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:150-return solver.getInverse().getData();	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:169-final int nC = params.length;	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:170-final double[] sig = new double[nC];	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:171-final double[][] cov = computeCovariances(params, covarianceSingularityThreshold);	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:172-for (int i = 0; i < nC; ++i) {	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:173-sig[i] = FastMath.sqrt(cov[i][i]);	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:175-return sig;	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:203-return super.optimize(optData);	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:222-final double[] target = getTarget();	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:223-if (objectiveValue.length != target.length) {	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:224-throw new DimensionMismatchException(target.length,	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:228-final double[] residuals = new double[target.length];	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:229-for (int i = 0; i < target.length; i++) {	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:230-residuals[i] = target[i] - objectiveValue[i];	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:233-return residuals;	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:255-break;	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:258-}	0
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:267-final EigenDecomposition dec = new EigenDecomposition(m);	1
org.apache.commons.math3.optim.nonlinear.vector.jacobian.AbstractLeastSquaresOptimizer:268-return dec.getSquareRoot();	0
org.apache.commons.math3.optim.nonlinear.vector.Weight:54-public Weight(RealMatrix weight) {	0
org.apache.commons.math3.optim.nonlinear.vector.Weight:55-if (weight.getColumnDimension() != weight.getRowDimension()) {	0
org.apache.commons.math3.optim.nonlinear.vector.Weight:56-throw new NonSquareMatrixException(weight.getColumnDimension(),	0
org.apache.commons.math3.optim.nonlinear.vector.Weight:60-weightMatrix = weight.copy();	0
org.apache.commons.math3.optim.nonlinear.vector.Weight:61-}	0
org.apache.commons.math3.util.FastMath:1542-return pow(-x, y);	0
org.apache.commons.math3.util.FastMath:1541-if (y >= TWO_POWER_52 || y <= -TWO_POWER_52) {	1
org.apache.commons.math3.util.FastMath:1442-final double lns[] = new double[2];	0
org.apache.commons.math3.util.FastMath:1444-if (y == 0.0) {	0
org.apache.commons.math3.util.FastMath:1448-if (x != x) { // X is NaN	0
org.apache.commons.math3.util.FastMath:1453-if (x == 0) {	0
org.apache.commons.math3.util.FastMath:1478-if (x == Double.POSITIVE_INFINITY) {	0
org.apache.commons.math3.util.FastMath:1489-if (y == Double.POSITIVE_INFINITY) {	0
org.apache.commons.math3.util.FastMath:1501-if (x == Double.NEGATIVE_INFINITY) {	0
org.apache.commons.math3.util.FastMath:1525-if (y == Double.NEGATIVE_INFINITY) {	0
org.apache.commons.math3.util.FastMath:1539-if (x < 0) {	0
org.apache.commons.math3.util.FastMath:1556-if (y < 8e298 && y > -8e298) {	0
org.apache.commons.math3.util.FastMath:1557-double tmp1 = y * HEX_40000000;	0
org.apache.commons.math3.util.FastMath:1558-ya = y + tmp1 - tmp1;	0
org.apache.commons.math3.util.FastMath:1559-yb = y - ya;	0
org.apache.commons.math3.util.FastMath:1560-} else {	0
org.apache.commons.math3.util.FastMath:1568-final double lores = log(x, lns);	0
org.apache.commons.math3.util.FastMath:1569-if (Double.isInfinite(lores)){ // don't allow this to be converted to NaN	0
org.apache.commons.math3.util.FastMath:1573-double lna = lns[0];	0
org.apache.commons.math3.util.FastMath:1574-double lnb = lns[1];	0
org.apache.commons.math3.util.FastMath:1577-double tmp1 = lna * HEX_40000000;	0
org.apache.commons.math3.util.FastMath:1578-double tmp2 = lna + tmp1 - tmp1;	0
org.apache.commons.math3.util.FastMath:1579-lnb += lna - tmp2;	0
org.apache.commons.math3.util.FastMath:1580-lna = tmp2;	0
org.apache.commons.math3.util.FastMath:1583-final double aa = lna * ya;	0
org.apache.commons.math3.util.FastMath:1584-final double ab = lna * yb + lnb * ya + lnb * yb;	0
org.apache.commons.math3.util.FastMath:1586-lna = aa+ab;	0
org.apache.commons.math3.util.FastMath:1587-lnb = -(lna - aa - ab);	0
org.apache.commons.math3.util.FastMath:1589-double z = 1.0 / 120.0;	0
org.apache.commons.math3.util.FastMath:1590-z = z * lnb + (1.0 / 24.0);	0
org.apache.commons.math3.util.FastMath:1591-z = z * lnb + (1.0 / 6.0);	0
org.apache.commons.math3.util.FastMath:1592-z = z * lnb + 0.5;	0
org.apache.commons.math3.util.FastMath:1593-z = z * lnb + 1.0;	0
org.apache.commons.math3.util.FastMath:1594-z = z * lnb;	0
org.apache.commons.math3.util.FastMath:1596-final double result = exp(lna, z, null);	0
org.apache.commons.math3.util.FastMath:1598-return result;	0
org.apache.commons.math3.util.FastMath:1178-if (x < 1.01 && x > 0.99 && hiPrec == null) {	0
org.apache.commons.math3.util.FastMath:1245-double tmp = epsilon * HEX_40000000;	0
org.apache.commons.math3.util.FastMath:1246-double aa = epsilon + tmp - tmp;	0
org.apache.commons.math3.util.FastMath:1247-double ab = epsilon - aa;	0
org.apache.commons.math3.util.FastMath:1248-double xa = aa;	0
org.apache.commons.math3.util.FastMath:1249-double xb = ab;	0
org.apache.commons.math3.util.FastMath:1252-final double numer = bits & 0x3ffffffffffL;	0
org.apache.commons.math3.util.FastMath:1253-final double denom = TWO_POWER_52 + (bits & 0x000ffc0000000000L);	0
org.apache.commons.math3.util.FastMath:1254-aa = numer - xa*denom - xb * denom;	0
org.apache.commons.math3.util.FastMath:1255-xb += aa / denom;	0
org.apache.commons.math3.util.FastMath:1258-final double[] lnCoef_last = LN_HI_PREC_COEF[LN_HI_PREC_COEF.length-1];	0
org.apache.commons.math3.util.FastMath:1259-double ya = lnCoef_last[0];	0
org.apache.commons.math3.util.FastMath:1260-double yb = lnCoef_last[1];	0
org.apache.commons.math3.util.FastMath:1262-for (int i = LN_HI_PREC_COEF.length - 2; i >= 0; i--) {	0
org.apache.commons.math3.util.FastMath:870-if (hiPrec != null) {	0
org.apache.commons.math3.util.FastMath:874-return Double.POSITIVE_INFINITY;	0
org.apache.commons.math3.util.FastMath:3522-long bits = Double.doubleToRawLongBits(a);	0
org.apache.commons.math3.util.FastMath:3523-if (bits == 0x8000000000000000L) {	0
org.apache.commons.math3.util.FastMath:3526-return a;	0
org.apache.commons.math3.util.FastMath:384-if (x != x) {	0
org.apache.commons.math3.util.FastMath:393-if (x > 20) {	0
org.apache.commons.math3.util.FastMath:810-return exp(x, 0.0, null);	0
org.apache.commons.math3.util.FastMath:2995-return (x < 0.0) ? -x : (x == 0.0) ? 0.0 : x; // -0.0 => +0.0	0
org.apache.commons.math3.util.FastMath:3004-if (Double.isInfinite(x)) {	0
org.apache.commons.math3.util.FastMath:3007-return abs(x - Double.longBitsToDouble(Double.doubleToLongBits(x) ^ 1));	0
org.apache.commons.math3.util.FastMath:3510-if (a > b) {	0
org.apache.commons.math3.util.FastMath:3513-if (a < b) {	0
org.apache.commons.math3.util.FastMath:3514-return b;	0
org.apache.commons.math3.util.FastMath:3517-if (a != b) {	0
org.apache.commons.math3.util.FastMath:395-return 0.5 * exp(x);	0
org.apache.commons.math3.util.FastMath:399-return 0.5 * exp(-x);	0
org.apache.commons.math3.util.FastMath:925-result = tempC*z + tempB + tempA;	0
org.apache.commons.math3.util.FastMath:829-if (x < 0.0) {	0
org.apache.commons.math3.util.FastMath:867-intVal = (int) x;	0
org.apache.commons.math3.util.FastMath:869-if (intVal > 709) {	0
org.apache.commons.math3.util.FastMath:877-intPartA = ExpIntTable.EXP_INT_TABLE_A[EXP_INT_TABLE_MAX_INDEX+intVal];	0
org.apache.commons.math3.util.FastMath:878-intPartB = ExpIntTable.EXP_INT_TABLE_B[EXP_INT_TABLE_MAX_INDEX+intVal];	0
org.apache.commons.math3.util.FastMath:885-final int intFrac = (int) ((x - intVal) * 1024.0);	0
org.apache.commons.math3.util.FastMath:886-final double fracPartA = ExpFracTable.EXP_FRAC_TABLE_A[intFrac];	0
org.apache.commons.math3.util.FastMath:887-final double fracPartB = ExpFracTable.EXP_FRAC_TABLE_B[intFrac];	0
org.apache.commons.math3.util.FastMath:893-final double epsilon = x - (intVal + intFrac / 1024.0);	0
org.apache.commons.math3.util.FastMath:902-double z = 0.04168701738764507;	0
org.apache.commons.math3.util.FastMath:903-z = z * epsilon + 0.1666666505023083;	0
org.apache.commons.math3.util.FastMath:904-z = z * epsilon + 0.5000000000042687;	0
org.apache.commons.math3.util.FastMath:905-z = z * epsilon + 1.0;	0
org.apache.commons.math3.util.FastMath:906-z = z * epsilon + -3.940510424527919E-20;	0
org.apache.commons.math3.util.FastMath:913-double tempA = intPartA * fracPartA;	0
org.apache.commons.math3.util.FastMath:914-double tempB = intPartA * fracPartB + intPartB * fracPartA + intPartB * fracPartB;	0
org.apache.commons.math3.util.FastMath:920-final double tempC = tempB + tempA;	0
org.apache.commons.math3.util.FastMath:922-if (extra != 0.0) {	0
org.apache.commons.math3.util.FastMath:928-if (hiPrec != null) {	0
org.apache.commons.math3.util.FastMath:934-return result;	0
org.apache.commons.math3.util.FastMath:397-if (x < -20) {	0
org.apache.commons.math3.util.FastMath:114-private static final double LN_QUICK_COEF[][] = {	0
org.apache.commons.math3.util.FastMath:127-private static final double LN_HI_PREC_COEF[][] = {	0
org.apache.commons.math3.util.FastMath:140-private static final double SINE_TABLE_A[] =	0
org.apache.commons.math3.util.FastMath:159-private static final double SINE_TABLE_B[] =	0
org.apache.commons.math3.util.FastMath:178-private static final double COSINE_TABLE_A[] =	0
org.apache.commons.math3.util.FastMath:197-private static final double COSINE_TABLE_B[] =	0
org.apache.commons.math3.util.FastMath:217-private static final double TANGENT_TABLE_A[] =	0
org.apache.commons.math3.util.FastMath:236-private static final double TANGENT_TABLE_B[] =	0
org.apache.commons.math3.util.FastMath:255-private static final long RECIP_2PI[] = new long[] {	0
org.apache.commons.math3.util.FastMath:276-private static final long PI_O_4_BITS[] = new long[] {	0
org.apache.commons.math3.util.FastMath:284-private static final double EIGHTHS[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};	0
org.apache.commons.math3.dfp.Dfp:1510-if (isNaN()) {	0
org.apache.commons.math3.dfp.Dfp:1511-return this;	0
org.apache.commons.math3.dfp.Dfp:1514-if (x.isNaN()) {	0
org.apache.commons.math3.dfp.Dfp:1515-return x;	0
org.apache.commons.math3.dfp.Dfp:1518-if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {	0
org.apache.commons.math3.dfp.Dfp:1519-result = newInstance(this);	0
org.apache.commons.math3.dfp.Dfp:1520-result.sign = (byte) (sign * x.sign);	0
org.apache.commons.math3.dfp.Dfp:1521-return result;	0
org.apache.commons.math3.dfp.Dfp:1524-if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {	0
org.apache.commons.math3.dfp.Dfp:1525-result = newInstance(x);	0
org.apache.commons.math3.dfp.Dfp:1526-result.sign = (byte) (sign * x.sign);	0
org.apache.commons.math3.dfp.Dfp:1527-return result;	0
org.apache.commons.math3.dfp.Dfp:1530-if (x.nans == INFINITE && nans == INFINITE) {	0
org.apache.commons.math3.dfp.Dfp:1531-result = newInstance(this);	0
org.apache.commons.math3.dfp.Dfp:1532-result.sign = (byte) (sign * x.sign);	0
org.apache.commons.math3.dfp.Dfp:1533-return result;	0
org.apache.commons.math3.dfp.Dfp:1536-if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||	0
org.apache.commons.math3.dfp.Dfp:1538-field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	0
org.apache.commons.math3.dfp.Dfp:1539-result = newInstance(getZero());	0
org.apache.commons.math3.dfp.Dfp:1540-result.nans = QNAN;	0
org.apache.commons.math3.dfp.Dfp:1541-result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);	0
org.apache.commons.math3.dfp.Dfp:1542-return result;	0
org.apache.commons.math3.dfp.Dfp:1616-if (isNaN()) {	0
org.apache.commons.math3.dfp.Dfp:1617-return this;	0
org.apache.commons.math3.dfp.Dfp:1620-if (nans == INFINITE && x != 0) {	0
org.apache.commons.math3.dfp.Dfp:1621-result = newInstance(this);	0
org.apache.commons.math3.dfp.Dfp:1622-return result;	0
org.apache.commons.math3.dfp.Dfp:1625-if (nans == INFINITE && x == 0) {	0
org.apache.commons.math3.dfp.Dfp:1626-field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	0
org.apache.commons.math3.dfp.Dfp:1627-result = newInstance(getZero());	0
org.apache.commons.math3.dfp.Dfp:1628-result.nans = QNAN;	0
org.apache.commons.math3.dfp.Dfp:1629-result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);	0
org.apache.commons.math3.dfp.Dfp:1630-return result;	0
org.apache.commons.math3.dfp.Dfp:1636-field.setIEEEFlagsBits(DfpField.FLAG_INVALID);	0
org.apache.commons.math3.dfp.Dfp:1637-result = newInstance(getZero());	0
org.apache.commons.math3.dfp.Dfp:1638-result.nans = QNAN;	0
org.apache.commons.math3.dfp.Dfp:1639-result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);	0
org.apache.commons.math3.dfp.Dfp:1640-return result;	0
org.apache.commons.math3.dfp.Dfp:1652-lostdigit = result.mant[0];	0
org.apache.commons.math3.dfp.Dfp:1653-result.shiftRight();	0
org.apache.commons.math3.dfp.Dfp:1654-result.mant[mant.length-1] = rh;	0
org.apache.commons.math3.dfp.Dfp:1658-result.exp = 0;	0
org.apache.commons.math3.dfp.Dfp:1663-result = dotrap(excp, MULTIPLY_TRAP, result, result);	0
org.apache.commons.math3.dfp.Dfp:1603-return multiplyFast(x);	1
org.apache.commons.math3.dfp.Dfp:1612-Dfp result = newInstance(this);	0
org.apache.commons.math3.dfp.Dfp:1615-if (nans != FINITE) {	0
org.apache.commons.math3.dfp.Dfp:1635-if (x < 0 || x >= RADIX) {	0
org.apache.commons.math3.dfp.Dfp:1643-int rh = 0;	0
org.apache.commons.math3.dfp.Dfp:1644-for (int i = 0; i < mant.length; i++) {	0
org.apache.commons.math3.dfp.Dfp:1645-final int r = mant[i] * x + rh;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:476-break generationLoop;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:482-sigma = sigma * Math.exp(0.2+cs/damps);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:583-lambda = 4 + (int) (3. * Math.log(dimension));	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:751-negccov = negcovMax;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:246-this(0);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:247-}	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:253-this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:256-}	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:459-break generationLoop;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:535-boundaries = new double[2][];	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:536-boundaries[0] = lB;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:537-boundaries[1] = uB;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:540-for (int i = 0; i < lB.length; i++) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:541-if (Double.isInfinite(boundaries[1][i] - boundaries[0][i])) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:514-hasFiniteBounds = true;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:515-break;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:521-for (int i = 0; i < lB.length; i++) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:522-if (Double.isInfinite(lB[i]) ||	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:529-if (hasInfiniteBounds) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:358-isMinimize = getGoalType().equals(GoalType.MINIMIZE);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:359-final FitnessFunction fitfun = new FitnessFunction();	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:360-final double[] guess = fitfun.encode(getStartPoint());	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:362-dimension = guess.length;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:363-initializeCMA(guess);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:364-iterations = 0;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:365-double bestValue = fitfun.value(guess);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:366-push(fitnessHistory, bestValue);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:367-PointValuePair optimum = new PointValuePair(getStartPoint(),	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:369-PointValuePair lastResult = null;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:374-for (iterations = 1; iterations <= maxIterations; iterations++) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:376-RealMatrix arz = randn1(dimension, lambda);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:377-RealMatrix arx = zeros(dimension, lambda);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:378-double[] fitness = new double[lambda];	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:380-for (int k = 0; k < lambda; k++) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:381-RealMatrix arxk = null;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:382-for (int i = 0; i < checkFeasableCount+1; i++) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:383-if (diagonalOnly <= 0) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:384-arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:390-if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:396-copyColumn(arxk, 0, arx, k);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:398-fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:401-}	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:404-int[] arindex = sortedIndices(fitness);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:406-RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:407-RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:408-xmean = bestArx.multiply(weights);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:409-RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:410-RealMatrix zmean = bestArz.multiply(weights);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:411-boolean hsig = updateEvolutionPaths(zmean, xold);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:412-if (diagonalOnly <= 0) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:246-this(0);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:247-}	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:253-this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:256-}	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:570-lambda = 4 + (int) (3. * Math.log(dimension));	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:535-boundaries = new double[2][];	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:536-boundaries[0] = lB;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:537-boundaries[1] = uB;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:514-hasFiniteBounds = true;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:515-break;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:521-for (int i = 0; i < lB.length; i++) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:522-if (Double.isInfinite(lB[i]) ||	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:529-if (hasInfiniteBounds) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:358-isMinimize = getGoalType().equals(GoalType.MINIMIZE);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:359-final FitnessFunction fitfun = new FitnessFunction();	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:360-final double[] guess = fitfun.encode(getStartPoint());	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:362-dimension = guess.length;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:363-initializeCMA(guess);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:364-iterations = 0;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:365-double bestValue = fitfun.value(guess);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:561-}	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:569-if (lambda <= 0) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:573-double[][] sigmaArray = new double[guess.length][1];	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:574-for (int i = 0; i < guess.length; i++) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:575-final double range =(boundaries == null) ? 1.0 : boundaries[1][i] - boundaries[0][i];	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:576-sigmaArray[i][0] = ((inputSigma == null) ? 0.3 : inputSigma[i]) / range;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:578-RealMatrix insigma = new Array2DRowRealMatrix(sigmaArray, false);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:579-sigma = max(insigma); // overall standard deviation	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:582-stopTolUpX = 1e3 * max(insigma);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:583-stopTolX = 1e-11 * max(insigma);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:584-stopTolFun = 1e-12;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:585-stopTolHistFun = 1e-13;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:588-mu = lambda / 2; // number of parents/points for recombination	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:589-logMu2 = Math.log(mu + 0.5);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:590-weights = log(sequence(1, mu, 1)).scalarMultiply(-1.).scalarAdd(logMu2);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:591-double sumw = 0;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:592-double sumwq = 0;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:593-for (int i = 0; i < mu; i++) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:594-double w = weights.getEntry(i, 0);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:595-sumw += w;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:596-sumwq += w * w;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:598-weights = weights.scalarMultiply(1. / sumw);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:599-mueff = sumw * sumw / sumwq; // variance-effectiveness of sum w_i x_i	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:602-cc = (4. + mueff / dimension) /	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:604-cs = (mueff + 2.) / (dimension + mueff + 3.);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:605-damps = (1. + 2. * Math.max(0, Math.sqrt((mueff - 1.) /	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:610-ccov1 = 2. / ((dimension + 1.3) * (dimension + 1.3) + mueff);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:611-ccovmu = Math.min(1 - ccov1, 2. * (mueff - 2. + 1. / mueff) /	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:613-ccov1Sep = Math.min(1, ccov1 * (dimension + 1.5) / 3.);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:614-ccovmuSep = Math.min(1 - ccov1, ccovmu * (dimension + 1.5) / 3.);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:240-this(0);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:241-}	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:247-this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:250-}	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:423-break generationLoop;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:562-lambda = 4 + (int) (3. * Math.log(dimension));	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:529-boundaries = new double[2][];	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:530-boundaries[0] = lB;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:531-boundaries[1] = uB;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:508-hasFiniteBounds = true;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:509-break;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:515-for (int i = 0; i < lB.length; i++) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:516-if (Double.isInfinite(lB[i]) ||	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:523-if (hasInfiniteBounds) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:352-isMinimize = getGoalType().equals(GoalType.MINIMIZE);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:353-final FitnessFunction fitfun = new FitnessFunction();	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:354-final double[] guess = fitfun.encode(getStartPoint());	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:356-dimension = guess.length;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:357-initializeCMA(guess);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:358-iterations = 0;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:359-double bestValue = fitfun.value(guess);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:360-push(fitnessHistory, bestValue);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:361-PointValuePair optimum = new PointValuePair(getStartPoint(),	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:363-PointValuePair lastResult = null;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:368-for (iterations = 1; iterations <= maxIterations; iterations++) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:370-RealMatrix arz = randn1(dimension, lambda);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:371-RealMatrix arx = zeros(dimension, lambda);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:372-double[] fitness = new double[lambda];	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:374-for (int k = 0; k < lambda; k++) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:375-RealMatrix arxk = null;	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:376-for (int i = 0; i < checkFeasableCount+1; i++) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:377-if (diagonalOnly <= 0) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:378-arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:384-if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:390-copyColumn(arxk, 0, arx, k);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:392-fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:395-}	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:398-int[] arindex = sortedIndices(fitness);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:400-RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:401-RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:402-xmean = bestArx.multiply(weights);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:403-RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:404-RealMatrix zmean = bestArz.multiply(weights);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:405-boolean hsig = updateEvolutionPaths(zmean, xold);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:406-if (diagonalOnly <= 0) {	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:407-updateCovariance(hsig, bestArx, arz, arindex, xold);	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:412-sigma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:413-double bestFitness = fitness[arindex[0]];	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:414-double worstFitness = fitness[arindex[arindex.length-1]];	0
org.apache.commons.math3.optimization.direct.CMAESOptimizer:415-if (bestValue > bestFitness) {	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:63-throws NonPositiveDefiniteMatrixException {	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:65-final int order = matrix.getRowDimension();	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:66-final double[][] c = matrix.getData();	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:67-final double[][] b = new double[order][order];	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:69-int[] swap= new int[order];	1
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:70-int[] index = new int[order];	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:71-for (int i = 0; i < order; ++i) {	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:72-index[i] = i;	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:75-int r = 0;	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:76-for (boolean loop = true; loop;) {	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:79-swap[r] = r;	1
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:80-for (int i = r + 1; i < order; ++i) {	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:81-int ii= index[i];	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:82-int isi = index[swap[i]];	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:83-if (c[ii][ii] > c[isi][isi]) {	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:84-swap[r] = i;	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:90-if (swap[r] != r) {	1
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:91-int tmp = index[r];	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:92-index[r] = index[swap[r]];	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:93-index[swap[r]] = tmp;	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:97-int ir = index[r];	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:98-if (c[ir][ir] < small) {	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:121-final double sqrt = FastMath.sqrt(c[ir][ir]);	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:122-b[r][r] = sqrt;	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:123-final double inverse= 1 / sqrt;	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:124-for (int i = r + 1; i < order; ++i) {	1
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:125-final int ii = index[i];	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:126-final double e = inverse * c[ii][ir];	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:127-b[i][r] = e;	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:128-c[ii][ii] -= e * e;	1
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:129-for (int j = r + 1; j < i; ++j) {	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:130-final int ij = index[j];	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:131-final double f = c[ii][ij] - e * b[j][r];	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:132-c[ii][ij] = f;	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:133-c[ij][ii] = f;	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:138-loop = ++r < order;	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:140-}	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:143-rank = r;	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:144-root = MatrixUtils.createRealMatrix(order, r);	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:145-for (int i = 0; i < order; ++i) {	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:146-for (int j = 0; j < r; ++j) {	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:147-root.setEntry(index[i], j, b[i][j]);	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:151-}	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:160-return root;	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:100-if (r == 0) {	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:105-for (int i = r; i < order; ++i) {	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:106-if (c[index[i]][index[i]] < -small) {	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:115-++r;	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:116-loop = false;	0
org.apache.commons.math3.linear.RectangularCholeskyDecomposition:101-throw new NonPositiveDefiniteMatrixException(c[ir][ir], ir, small);	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:208-e = b - x;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:193-d = -tol1;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:190-if (x <= m) {	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:269-v = u;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:270-fv = fu;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:258-b = u;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:266-} else if (fu <= fv ||	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:185-d = p / q;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:186-u = x + d;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:189-if (u - a < tol2 || b - u < tol2) {	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:201-e = a - x;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:110-this(rel, abs, null);	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:111-}	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:173-p = -p;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:274-return	1
org.apache.commons.math3.optimization.univariate.BrentOptimizer:305-return a.getValue() <= b.getValue() ? a : b;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:81-super(checker);	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:83-if (rel < MIN_RELATIVE_TOLERANCE) {	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:86-if (abs <= 0) {	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:90-relativeThreshold = rel;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:91-absoluteThreshold = abs;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:92-}	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:48-private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:52-private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:116-final boolean isMinim = getGoalType() == GoalType.MINIMIZE;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:117-final double lo = getMin();	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:118-final double mid = getStartValue();	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:119-final double hi = getMax();	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:122-final ConvergenceChecker<UnivariatePointValuePair> checker	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:127-if (lo < hi) {	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:128-a = lo;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:129-b = hi;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:135-double x = mid;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:136-double v = x;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:137-double w = x;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:138-double d = 0;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:139-double e = 0;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:140-double fx = computeObjectiveValue(x);	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:141-if (!isMinim) {	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:144-double fv = fx;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:145-double fw = fx;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:147-UnivariatePointValuePair previous = null;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:148-UnivariatePointValuePair current	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:152-int iter = 0;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:154-final double m = 0.5 * (a + b);	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:155-final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:156-final double tol2 = 2 * tol1;	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:159-final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:160-if (!stop) {	0
org.apache.commons.math3.optimization.univariate.BrentOptimizer:161-double p = 0;	0
org.apache.commons.math3.optimization.fitting.HarmonicFitter:46-super(optimizer);	0
org.apache.commons.math3.optimization.fitting.HarmonicFitter:47-}	0
org.apache.commons.math3.optimization.fitting.HarmonicFitter:62-return fit(new HarmonicOscillator.Parametric(), initialGuess);	0
org.apache.commons.math3.optimization.fitting.HarmonicFitter:77-return fit((new ParameterGuesser(getObservations())).guess());	0
org.apache.commons.math3.fraction.Fraction:182-throw new FractionConversionException(value, a0, 1l);	0
org.apache.commons.math3.fraction.Fraction:210-throw new FractionConversionException(value, p2, q2);	0
org.apache.commons.math3.fraction.Fraction:188-this.numerator = (int) a0;	0
org.apache.commons.math3.fraction.Fraction:189-this.denominator = 1;	0
org.apache.commons.math3.fraction.Fraction:190-return;	0
org.apache.commons.math3.fraction.Fraction:122-}	0
org.apache.commons.math3.fraction.Fraction:121-this(value, epsilon, Integer.MAX_VALUE, maxIterations);	0
org.apache.commons.math3.fraction.Fraction:177-{	0
org.apache.commons.math3.fraction.Fraction:178-long overflow = Integer.MAX_VALUE;	0
org.apache.commons.math3.fraction.Fraction:179-double r0 = value;	0
org.apache.commons.math3.fraction.Fraction:180-long a0 = (long)FastMath.floor(r0);	0
org.apache.commons.math3.fraction.Fraction:181-if (a0 > overflow) {	1
org.apache.commons.math3.fraction.Fraction:187-if (FastMath.abs(a0 - value) < epsilon) {	0
org.apache.commons.math3.fraction.Fraction:193-long p0 = 1;	0
org.apache.commons.math3.fraction.Fraction:194-long q0 = 0;	0
org.apache.commons.math3.fraction.Fraction:195-long p1 = a0;	0
org.apache.commons.math3.fraction.Fraction:196-long q1 = 1;	0
org.apache.commons.math3.fraction.Fraction:198-long p2 = 0;	0
org.apache.commons.math3.fraction.Fraction:199-long q2 = 1;	0
org.apache.commons.math3.fraction.Fraction:201-int n = 0;	0
org.apache.commons.math3.fraction.Fraction:202-boolean stop = false;	0
org.apache.commons.math3.fraction.Fraction:204-++n;	0
org.apache.commons.math3.fraction.Fraction:205-double r1 = 1.0 / (r0 - a0);	0
org.apache.commons.math3.fraction.Fraction:206-long a1 = (long)FastMath.floor(r1);	0
org.apache.commons.math3.fraction.Fraction:207-p2 = (a1 * p1) + p0;	0
org.apache.commons.math3.fraction.Fraction:208-q2 = (a1 * q1) + q0;	0
org.apache.commons.math3.fraction.Fraction:209-if ((p2 > overflow) || (q2 > overflow)) {	1
org.apache.commons.math3.fraction.Fraction:213-double convergent = (double)p2 / (double)q2;	0
org.apache.commons.math3.fraction.Fraction:214-if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {	0
org.apache.commons.math3.fraction.Fraction:215-p0 = p1;	0
org.apache.commons.math3.fraction.Fraction:216-p1 = p2;	0
org.apache.commons.math3.fraction.Fraction:217-q0 = q1;	0
org.apache.commons.math3.fraction.Fraction:218-q1 = q2;	0
org.apache.commons.math3.fraction.Fraction:219-a0 = a1;	0
org.apache.commons.math3.fraction.Fraction:220-r0 = r1;	0
org.apache.commons.math3.fraction.Fraction:224-} while (!stop);	0
org.apache.commons.math3.fraction.Fraction:256-public Fraction(int num, int den) {	0
org.apache.commons.math3.fraction.Fraction:257-if (den == 0) {	0
org.apache.commons.math3.fraction.Fraction:261-if (den < 0) {	0
org.apache.commons.math3.fraction.Fraction:271-final int d = ArithmeticUtils.gcd(num, den);	0
org.apache.commons.math3.fraction.Fraction:272-if (d > 1) {	0
org.apache.commons.math3.fraction.Fraction:273-num /= d;	0
org.apache.commons.math3.fraction.Fraction:274-den /= d;	0
org.apache.commons.math3.fraction.Fraction:278-if (den < 0) {	0
org.apache.commons.math3.fraction.Fraction:282-this.numerator = num;	0
org.apache.commons.math3.fraction.Fraction:283-this.denominator = den;	0
org.apache.commons.math3.fraction.Fraction:284-}	0
org.apache.commons.math3.fraction.Fraction:42-public static final Fraction TWO = new Fraction(2, 1);	0
org.apache.commons.math3.fraction.Fraction:45-public static final Fraction ONE = new Fraction(1, 1);	0
org.apache.commons.math3.fraction.Fraction:48-public static final Fraction ZERO = new Fraction(0, 1);	0
org.apache.commons.math3.fraction.Fraction:597-return multiply(100).doubleValue();	1
org.apache.commons.math3.fraction.Fraction:555-return new Fraction(numerator * i, denominator);	0
org.apache.commons.math3.fraction.Fraction:319-return (double)numerator / (double)denominator;	0
org.apache.commons.math3.fraction.Fraction:256-public Fraction(int num, int den) {	0
org.apache.commons.math3.fraction.Fraction:257-if (den == 0) {	0
org.apache.commons.math3.fraction.Fraction:261-if (den < 0) {	0
org.apache.commons.math3.fraction.Fraction:271-final int d = ArithmeticUtils.gcd(num, den);	0
org.apache.commons.math3.fraction.Fraction:272-if (d > 1) {	0
org.apache.commons.math3.fraction.Fraction:273-num /= d;	0
org.apache.commons.math3.fraction.Fraction:274-den /= d;	0
org.apache.commons.math3.fraction.Fraction:278-if (den < 0) {	0
org.apache.commons.math3.fraction.Fraction:282-this.numerator = num;	0
org.apache.commons.math3.fraction.Fraction:283-this.denominator = den;	0
org.apache.commons.math3.fraction.Fraction:284-}	0
org.apache.commons.math3.fraction.Fraction:42-public static final Fraction TWO = new Fraction(2, 1);	0
org.apache.commons.math3.fraction.Fraction:45-public static final Fraction ONE = new Fraction(1, 1);	0
org.apache.commons.math3.fraction.Fraction:48-public static final Fraction ZERO = new Fraction(0, 1);	0
org.apache.commons.math3.fraction.Fraction:51-public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);	0
org.apache.commons.math3.fraction.Fraction:54-public static final Fraction ONE_FIFTH = new Fraction(1, 5);	0
org.apache.commons.math3.fraction.Fraction:57-public static final Fraction ONE_HALF = new Fraction(1, 2);	0
org.apache.commons.math3.fraction.Fraction:60-public static final Fraction ONE_QUARTER = new Fraction(1, 4);	0
org.apache.commons.math3.fraction.Fraction:63-public static final Fraction ONE_THIRD = new Fraction(1, 3);	0
org.apache.commons.math3.fraction.Fraction:66-public static final Fraction THREE_FIFTHS = new Fraction(3, 5);	0
org.apache.commons.math3.fraction.Fraction:69-public static final Fraction THREE_QUARTERS = new Fraction(3, 4);	0
org.apache.commons.math3.fraction.Fraction:72-public static final Fraction TWO_FIFTHS = new Fraction(2, 5);	0
org.apache.commons.math3.fraction.Fraction:75-public static final Fraction TWO_QUARTERS = new Fraction(2, 4);	0
org.apache.commons.math3.fraction.Fraction:78-public static final Fraction TWO_THIRDS = new Fraction(2, 3);	0
org.apache.commons.math3.fraction.Fraction:81-public static final Fraction MINUS_ONE = new Fraction(-1, 1);	0
org.apache.commons.math3.fraction.Fraction:99-this(value, 1.0e-5, 100);	0
org.apache.commons.math3.fraction.Fraction:100-}	0
org.apache.commons.math3.fraction.Fraction:121-this(value, epsilon, Integer.MAX_VALUE, maxIterations);	0
org.apache.commons.math3.fraction.Fraction:122-}	0
org.apache.commons.math3.fraction.Fraction:141-this(value, 0, maxDenominator, 100);	0
org.apache.commons.math3.fraction.Fraction:142-}	0
org.apache.commons.math3.fraction.Fraction:177-{	0
org.apache.commons.math3.fraction.Fraction:178-long overflow = Integer.MAX_VALUE;	0
org.apache.commons.math3.fraction.Fraction:179-double r0 = value;	0
org.apache.commons.math3.fraction.Fraction:180-long a0 = (long)FastMath.floor(r0);	0
org.apache.commons.math3.fraction.Fraction:181-if (a0 > overflow) {	0
org.apache.commons.math3.fraction.Fraction:182-throw new FractionConversionException(value, a0, 1l);	0
org.apache.commons.math3.fraction.Fraction:187-if (FastMath.abs(a0 - value) < epsilon) {	0
org.apache.commons.math3.fraction.Fraction:188-this.numerator = (int) a0;	0
org.apache.commons.math3.fraction.Fraction:189-this.denominator = 1;	0
org.apache.commons.math3.fraction.Fraction:190-return;	0
org.apache.commons.math3.fraction.Fraction:193-long p0 = 1;	0
org.apache.commons.math3.fraction.Fraction:194-long q0 = 0;	0
org.apache.commons.math3.fraction.Fraction:195-long p1 = a0;	0
org.apache.commons.math3.fraction.Fraction:196-long q1 = 1;	0
org.apache.commons.math3.fraction.Fraction:198-long p2 = 0;	0
org.apache.commons.math3.fraction.Fraction:199-long q2 = 1;	0
org.apache.commons.math3.optimization.linear.SimplexSolver:138-Integer minRow = null;	1
org.apache.commons.math3.optimization.linear.SimplexSolver:139-int minIndex = tableau.getWidth();	0
org.apache.commons.math3.optimization.linear.SimplexSolver:140-for (Integer row : minRatioPositions) {	0
org.apache.commons.math3.optimization.linear.SimplexSolver:141-int i = tableau.getNumObjectiveFunctions();	0
org.apache.commons.math3.optimization.linear.SimplexSolver:142-for (; i < tableau.getWidth() - 1 && minRow != row; i++) {	0
org.apache.commons.math3.optimization.linear.SimplexSolver:143-if (row == tableau.getBasicRow(i)) {	0
org.apache.commons.math3.optimization.linear.SimplexSolver:144-if (i < minIndex) {	0
org.apache.commons.math3.optimization.linear.SimplexSolver:145-minIndex = i;	0
org.apache.commons.math3.optimization.linear.SimplexSolver:146-minRow = row;	0
org.apache.commons.math3.optimization.linear.SimplexSolver:150-}	0
org.apache.commons.math3.optimization.linear.SimplexSolver:151-return minRow;	0
org.apache.commons.math3.optimization.linear.SimplexSolver:127-}	0
org.apache.commons.math3.optimization.linear.SimplexSolver:121-int column = i + tableau.getArtificialVariableOffset();	0
org.apache.commons.math3.optimization.linear.SimplexSolver:122-final double entry = tableau.getEntry(row, column);	0
org.apache.commons.math3.optimization.linear.SimplexSolver:123-if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {	0
org.apache.commons.math3.optimization.linear.SimplexSolver:124-return row;	0
org.apache.commons.math3.optimization.linear.SimplexSolver:104-minRatioPositions.add(i);	0
org.apache.commons.math3.optimization.linear.SimplexSolver:119-for (Integer row : minRatioPositions) {	1
org.apache.commons.math3.optimization.linear.SimplexSolver:120-for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {	0
org.apache.commons.math3.optimization.linear.SimplexSolver:227-doIteration(tableau);	0
org.apache.commons.math3.optimization.linear.SimplexSolver:209-}	0
org.apache.commons.math3.optimization.linear.SimplexSolver:202-doIteration(tableau);	0
org.apache.commons.math3.optimization.linear.SimplexSolver:201-while (!tableau.isOptimal()) {	0
org.apache.commons.math3.optimization.linear.SimplexSolver:206-if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {	0
org.apache.commons.math3.optimization.linear.SimplexSolver:224-tableau.dropPhase1Objective();	0
org.apache.commons.math3.optimization.linear.SimplexSolver:226-while (!tableau.isOptimal()) {	0
org.apache.commons.math3.optimization.linear.SimplexSolver:70-double minValue = 0;	0
org.apache.commons.math3.optimization.linear.SimplexSolver:71-Integer minPos = null;	0
org.apache.commons.math3.optimization.linear.SimplexSolver:72-for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {	0
org.apache.commons.math3.optimization.linear.SimplexSolver:73-final double entry = tableau.getEntry(0, i);	0
org.apache.commons.math3.optimization.linear.SimplexSolver:76-if (entry < minValue) {	0
org.apache.commons.math3.optimization.linear.SimplexSolver:77-minValue = entry;	0
org.apache.commons.math3.optimization.linear.SimplexSolver:78-minPos = i;	0
org.apache.commons.math3.optimization.linear.SimplexSolver:81-return minPos;	0
org.apache.commons.math3.optimization.linear.SimplexSolver:92-List<Integer> minRatioPositions = new ArrayList<Integer>();	0
org.apache.commons.math3.optimization.linear.SimplexSolver:93-double minRatio = Double.MAX_VALUE;	0
org.apache.commons.math3.optimization.linear.SimplexSolver:94-for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {	0
org.apache.commons.math3.optimization.linear.SimplexSolver:95-final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);	0
org.apache.commons.math3.optimization.linear.SimplexSolver:96-final double entry = tableau.getEntry(i, col);	0
org.apache.commons.math3.optimization.linear.SimplexSolver:98-if (Precision.compareTo(entry, 0d, maxUlps) > 0) {	0
org.apache.commons.math3.optimization.linear.SimplexSolver:99-final double ratio = rhs / entry;	0
org.apache.commons.math3.optimization.linear.SimplexSolver:102-final int cmp = Double.compare(ratio, minRatio);	0
org.apache.commons.math3.optimization.linear.SimplexSolver:103-if (cmp == 0) {	0
org.apache.commons.math3.optimization.linear.SimplexSolver:105-} else if (cmp < 0) {	0
org.apache.commons.math3.optimization.linear.SimplexSolver:106-minRatio = ratio;	0
org.apache.commons.math3.optimization.linear.SimplexSolver:107-minRatioPositions = new ArrayList<Integer>();	0
org.apache.commons.math3.optimization.linear.SimplexSolver:108-minRatioPositions.add(i);	0
org.apache.commons.math3.optimization.linear.SimplexSolver:113-if (minRatioPositions.size() == 0) {	0
org.apache.commons.math3.optimization.linear.SimplexSolver:115-} else if (minRatioPositions.size() > 1) {	0
org.apache.commons.math3.optimization.linear.SimplexSolver:153-return minRatioPositions.get(0);	0
org.apache.commons.math3.linear.OpenMapRealVector:361-OpenMapRealVector res = new OpenMapRealVector(this);	0
org.apache.commons.math3.linear.OpenMapRealVector:362-Iterator iter = entries.iterator();	0
org.apache.commons.math3.linear.OpenMapRealVector:363-while (iter.hasNext()) {	0
org.apache.commons.math3.linear.OpenMapRealVector:364-iter.advance();	0
org.apache.commons.math3.linear.OpenMapRealVector:365-res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));	0
org.apache.commons.math3.linear.OpenMapRealVector:374-return res;	1
org.apache.commons.math3.linear.OpenMapRealVector:360-checkVectorDimensions(v.getDimension());	0
org.apache.commons.math3.linear.OpenMapRealVector:592-entries.remove(index);	0
org.apache.commons.math3.linear.OpenMapRealVector:179-public OpenMapRealVector(OpenMapRealVector v) {	0
org.apache.commons.math3.linear.OpenMapRealVector:180-virtualSize = v.getDimension();	0
org.apache.commons.math3.linear.OpenMapRealVector:181-entries = new OpenIntToDoubleHashMap(v.getEntries());	0
org.apache.commons.math3.linear.OpenMapRealVector:182-epsilon = v.epsilon;	0
org.apache.commons.math3.linear.OpenMapRealVector:183-}	0
org.apache.commons.math3.linear.OpenMapRealVector:208-return entries;	0
org.apache.commons.math3.linear.OpenMapRealVector:591-} else if (entries.containsKey(index)) {	0
org.apache.commons.math3.linear.OpenMapRealVector:343-OpenMapRealVector res = new OpenMapRealVector(this);	0
org.apache.commons.math3.linear.OpenMapRealVector:349-Iterator iter = entries.iterator();	1
org.apache.commons.math3.linear.OpenMapRealVector:350-while (iter.hasNext()) {	0
org.apache.commons.math3.linear.OpenMapRealVector:351-iter.advance();	0
org.apache.commons.math3.linear.OpenMapRealVector:352-res.setEntry(iter.key(), iter.value() / v.getEntry(iter.key()));	0
org.apache.commons.math3.linear.OpenMapRealVector:354-return res;	0
org.apache.commons.math3.linear.OpenMapRealVector:342-checkVectorDimensions(v.getDimension());	0
org.apache.commons.math3.linear.OpenMapRealVector:589-if (!isDefaultValue(value)) {	0
org.apache.commons.math3.linear.OpenMapRealVector:590-entries.put(index, value);	0
org.apache.commons.math3.linear.OpenMapRealVector:594-}	0
org.apache.commons.math3.linear.OpenMapRealVector:588-checkIndex(index);	0
org.apache.commons.math3.linear.OpenMapRealVector:449-return entries.get(index);	0
org.apache.commons.math3.linear.OpenMapRealVector:448-checkIndex(index);	0
org.apache.commons.math3.linear.OpenMapRealVector:140-entries.put(key, value);	0
org.apache.commons.math3.linear.OpenMapRealVector:401-return virtualSize;	0
org.apache.commons.math3.linear.OpenMapRealVector:123-this(values, DEFAULT_ZERO_TOLERANCE);	0
org.apache.commons.math3.linear.OpenMapRealVector:124-}	0
org.apache.commons.math3.linear.OpenMapRealVector:133-public OpenMapRealVector(double[] values, double epsilon) {	0
org.apache.commons.math3.linear.OpenMapRealVector:134-virtualSize = values.length;	0
org.apache.commons.math3.linear.OpenMapRealVector:135-entries = new OpenIntToDoubleHashMap(0.0);	0
org.apache.commons.math3.linear.OpenMapRealVector:136-this.epsilon = epsilon;	0
org.apache.commons.math3.linear.OpenMapRealVector:137-for (int key = 0; key < values.length; key++) {	0
org.apache.commons.math3.linear.OpenMapRealVector:138-double value = values[key];	0
org.apache.commons.math3.linear.OpenMapRealVector:139-if (!isDefaultValue(value)) {	0
org.apache.commons.math3.linear.OpenMapRealVector:143-}	0
org.apache.commons.math3.linear.OpenMapRealVector:220-return FastMath.abs(value) < epsilon;	0
org.apache.commons.math3.linear.OpenMapRealVector:56-this(0, DEFAULT_ZERO_TOLERANCE);	0
org.apache.commons.math3.linear.OpenMapRealVector:57-}	0
org.apache.commons.math3.linear.OpenMapRealVector:65-this(dimension, DEFAULT_ZERO_TOLERANCE);	0
org.apache.commons.math3.linear.OpenMapRealVector:66-}	0
org.apache.commons.math3.linear.OpenMapRealVector:74-public OpenMapRealVector(int dimension, double epsilon) {	0
org.apache.commons.math3.linear.OpenMapRealVector:75-virtualSize = dimension;	0
org.apache.commons.math3.linear.OpenMapRealVector:76-entries = new OpenIntToDoubleHashMap(0.0);	0
org.apache.commons.math3.linear.OpenMapRealVector:77-this.epsilon = epsilon;	0
org.apache.commons.math3.linear.OpenMapRealVector:78-}	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:82-}	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:90-final double[] z = new double[x.length + y.length];	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:92-System.arraycopy(x, 0, z, 0, x.length);	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:93-System.arraycopy(y, 0, z, x.length, y.length);	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:95-return z;	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:129-ensureDataConformance(x, y);	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:131-final double[] z = concatenateSamples(x, y);	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:132-final double[] ranks = naturalRanking.rank(z);	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:134-double sumRankX = 0;	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:140-for (int i = 0; i < x.length; ++i) {	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:141-sumRankX += ranks[i];	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:148-final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:153-final double U2 = x.length * y.length - U1;	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:155-return FastMath.max(U1, U2);	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:173-final int n1n2prod = n1 * n2;	1
org.apache.commons.math3.stat.inference.MannWhitneyUTest:176-final double EU = n1n2prod / 2.0;	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:177-final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:179-final double z = (Umin - EU) / FastMath.sqrt(VarU);	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:181-final NormalDistribution standardNormal = new NormalDistribution(0, 1);	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:183-return 2 * standardNormal.cumulativeProbability(z);	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:224-final double Umax = mannWhitneyU(x, y);	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:229-final double Umin = x.length * y.length - Umax;	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:231-return calculateAsymptoticPValue(Umin, x.length, y.length);	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:44-public MannWhitneyUTest() {	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:45-naturalRanking = new NaturalRanking(NaNStrategy.FIXED,	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:47-}	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:74-if (x == null ||	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:78-if (x.length == 0 ||	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:222-ensureDataConformance(x, y);	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:59-final TiesStrategy tiesStrategy) {	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:60-naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:61-}	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:76-throw new NullArgumentException();	0
org.apache.commons.math3.stat.inference.MannWhitneyUTest:80-throw new NoDataException();	0
org.apache.commons.math3.util.ContinuedFraction:177-throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_NAN_DIVERGENCE,	0
org.apache.commons.math3.util.ContinuedFraction:185-dPrev = q1;	1
org.apache.commons.math3.util.ContinuedFraction:186-cPrev = cN / q2;	0
org.apache.commons.math3.util.ContinuedFraction:187-p0 = hPrev;	0
org.apache.commons.math3.util.ContinuedFraction:188-hPrev = cN;	0
org.apache.commons.math3.util.ContinuedFraction:189-q1 = q2;	0
org.apache.commons.math3.util.ContinuedFraction:190-n++;	0
org.apache.commons.math3.util.ContinuedFraction:191-}	0
org.apache.commons.math3.util.ContinuedFraction:45-super();	0
org.apache.commons.math3.util.ContinuedFraction:46-}	0
org.apache.commons.math3.util.ContinuedFraction:124-final double small = 1e-50;	0
org.apache.commons.math3.util.ContinuedFraction:125-double hPrev = getA(0, x);	0
org.apache.commons.math3.util.ContinuedFraction:128-if (Precision.equals(hPrev, 0.0, small)) {	0
org.apache.commons.math3.util.ContinuedFraction:132-int n = 1;	0
org.apache.commons.math3.util.ContinuedFraction:133-double dPrev = 0.0;	0
org.apache.commons.math3.util.ContinuedFraction:134-double p0 = 1.0;	1
org.apache.commons.math3.util.ContinuedFraction:135-double q1 = 1.0;	0
org.apache.commons.math3.util.ContinuedFraction:136-double cPrev = hPrev;	0
org.apache.commons.math3.util.ContinuedFraction:137-double hN = hPrev;	0
org.apache.commons.math3.util.ContinuedFraction:139-while (n < maxIterations) {	0
org.apache.commons.math3.util.ContinuedFraction:140-final double a = getA(n, x);	0
org.apache.commons.math3.util.ContinuedFraction:141-final double b = getB(n, x);	0
org.apache.commons.math3.util.ContinuedFraction:143-double cN = a * hPrev + b * p0;	1
org.apache.commons.math3.util.ContinuedFraction:144-double q2 = a * q1 + b * dPrev;	0
org.apache.commons.math3.util.ContinuedFraction:145-if (Double.isInfinite(cN) || Double.isInfinite(q2)) {	0
org.apache.commons.math3.util.ContinuedFraction:169-final double deltaN = cN / q2 / cPrev;	0
org.apache.commons.math3.util.ContinuedFraction:170-hN = cPrev * deltaN;	0
org.apache.commons.math3.util.ContinuedFraction:172-if (Double.isInfinite(hN)) {	0
org.apache.commons.math3.util.ContinuedFraction:176-if (Double.isNaN(hN)) {	0
org.apache.commons.math3.util.ContinuedFraction:181-if (FastMath.abs(deltaN - 1.0) < epsilon) {	0
org.apache.commons.math3.util.ContinuedFraction:182-break;	0
org.apache.commons.math3.util.ContinuedFraction:193-if (n >= maxIterations) {	0
org.apache.commons.math3.util.ContinuedFraction:198-return hN;	0
org.apache.commons.math3.util.ContinuedFraction:73-return evaluate(x, DEFAULT_EPSILON, Integer.MAX_VALUE);	0
org.apache.commons.math3.util.ContinuedFraction:84-return evaluate(x, epsilon, Integer.MAX_VALUE);	0
org.apache.commons.math3.util.ContinuedFraction:95-return evaluate(x, DEFAULT_EPSILON, maxIterations);	0
org.apache.commons.math3.util.ContinuedFraction:129-hPrev = small;	0
org.apache.commons.math3.util.ContinuedFraction:146-double scaleFactor = 1d;	0
org.apache.commons.math3.util.ContinuedFraction:147-double lastScaleFactor = 1d;	0
org.apache.commons.math3.util.ContinuedFraction:148-final int maxPower = 5;	0
org.apache.commons.math3.util.ContinuedFraction:149-final double scale = FastMath.max(a,b);	0
org.apache.commons.math3.util.ContinuedFraction:150-if (scale <= 0) {// Can't scale	0
org.apache.commons.math3.util.ContinuedFraction:151-throw new ConvergenceException(LocalizedFormats.CONTINUED_FRACTION_INFINITY_DIVERGENCE, x);	0
org.apache.commons.math3.util.ContinuedFraction:153-for (int i = 0; i < maxPower; i++) {	0
org.apache.commons.math3.util.ContinuedFraction:154-lastScaleFactor = scaleFactor;	0
org.apache.commons.math3.util.ContinuedFraction:155-scaleFactor *= scale;	0
org.apache.commons.math3.util.ContinuedFraction:156-if (a != 0.0 && a > b) {	0
org.apache.commons.math3.util.ContinuedFraction:157-cN = hPrev / lastScaleFactor + (b / scaleFactor * p0);	0
org.apache.commons.math3.util.ContinuedFraction:158-q2 = q1 / lastScaleFactor + (b / scaleFactor * dPrev);	0
org.apache.commons.math3.util.ContinuedFraction:159-} else if (b != 0) {	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:87-super(boundary);	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:88-}	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:135-final BSPTree<Euclidean2D> tree = getTree(false);	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:136-if ((Boolean) tree.getAttribute()) {	1
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:330-return null;	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:50-super();	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:51-}	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:63-super(tree);	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:64-}	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:125-return new PolygonsSet(tree);	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:132-final Vector2D[][] v = getVertices();	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:134-if (v.length == 0) {	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:144-} else if (v[0][0] == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:151-double sum= 0;	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:152-double sumX = 0;	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:153-double sumY = 0;	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:155-for (Vector2D[] loop : v) {	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:156-double x1 = loop[loop.length - 1].getX();	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:157-double y1 = loop[loop.length - 1].getY();	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:158-for (final Vector2D point : loop) {	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:159-final double x0 = x1;	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:160-final double y0 = y1;	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:161-x1 = point.getX();	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:162-y1 = point.getY();	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:163-final double factor = x0 * y1 - y0 * x1;	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:164-sum+= factor;	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:165-sumX += factor * (x0 + x1);	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:166-sumY += factor * (y0 + y1);	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:170-if (sum < 0) {	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:175-setSize(sum / 2);	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:176-setBarycenter(new Vector2D(sumX / (3 * sum), sumY / (3 * sum)));	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:181-}	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:207-if (vertices == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:208-if (getTree(false).getCut() == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:213-final SegmentsBuilder visitor = new SegmentsBuilder();	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:214-getTree(true).visit(visitor);	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:215-final AVLTree<ComparableSegment> sorted = visitor.getSorted();	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:219-final ArrayList<List<ComparableSegment>> loops = new ArrayList<List<ComparableSegment>>();	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:220-while (!sorted.isEmpty()) {	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:221-final AVLTree<ComparableSegment>.Node node = sorted.getSmallest();	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:222-final List<ComparableSegment> loop = followLoop(node, sorted);	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:223-if (loop != null) {	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:224-loops.add(loop);	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:226-}	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:229-vertices = new Vector2D[loops.size()][];	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:230-int i = 0;	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:232-for (final List<ComparableSegment> loop : loops) {	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:233-if (loop.size() < 2) {	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:241-} else if (loop.get(0).getStart() == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.PolygonsSet:270-final Vector2D[] array = new Vector2D[loop.size()];	0
org.apache.commons.math3.optimization.linear.SimplexTableau:406-coefficients[i] = 0;	0
org.apache.commons.math3.optimization.linear.SimplexTableau:407-continue;	0
org.apache.commons.math3.optimization.linear.SimplexTableau:339-columnsToDrop.add(i);	0
org.apache.commons.math3.optimization.linear.SimplexTableau:261-return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),	0
org.apache.commons.math3.optimization.linear.SimplexTableau:162-columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);	0
org.apache.commons.math3.optimization.linear.SimplexTableau:199-matrix.setEntry(zIndex, getSlackVariableOffset() - 1,	0
org.apache.commons.math3.optimization.linear.SimplexTableau:215-matrix.setEntry(row, getSlackVariableOffset() - 1,	0
org.apache.commons.math3.optimization.linear.SimplexTableau:298-double sum = 0;	0
org.apache.commons.math3.optimization.linear.SimplexTableau:299-for (double coefficient : coefficients.toArray()) {	0
org.apache.commons.math3.optimization.linear.SimplexTableau:300-sum -= coefficient;	0
org.apache.commons.math3.optimization.linear.SimplexTableau:302-return sum;	0
org.apache.commons.math3.optimization.linear.SimplexTableau:226-matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess	0
org.apache.commons.math3.optimization.linear.SimplexTableau:224-matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);// slack	0
org.apache.commons.math3.optimization.linear.SimplexTableau:332-List<Integer> columnsToDrop = new ArrayList<Integer>();	0
org.apache.commons.math3.optimization.linear.SimplexTableau:333-columnsToDrop.add(0);	0
org.apache.commons.math3.optimization.linear.SimplexTableau:336-for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {	0
org.apache.commons.math3.optimization.linear.SimplexTableau:337-final double entry = tableau.getEntry(0, i);	0
org.apache.commons.math3.optimization.linear.SimplexTableau:338-if (Precision.compareTo(entry, 0d, maxUlps) > 0) {	1
org.apache.commons.math3.optimization.linear.SimplexTableau:344-for (int i = 0; i < getNumArtificialVariables(); i++) {	0
org.apache.commons.math3.optimization.linear.SimplexTableau:345-int col = i + getArtificialVariableOffset();	0
org.apache.commons.math3.optimization.linear.SimplexTableau:346-if (getBasicRow(col) == null) {	0
org.apache.commons.math3.optimization.linear.SimplexTableau:347-columnsToDrop.add(col);	0
org.apache.commons.math3.optimization.linear.SimplexTableau:351-double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];	0
org.apache.commons.math3.optimization.linear.SimplexTableau:352-for (int i = 1; i < getHeight(); i++) {	0
org.apache.commons.math3.optimization.linear.SimplexTableau:353-int col = 0;	0
org.apache.commons.math3.optimization.linear.SimplexTableau:354-for (int j = 0; j < getWidth(); j++) {	0
org.apache.commons.math3.optimization.linear.SimplexTableau:355-if (!columnsToDrop.contains(j)) {	0
org.apache.commons.math3.optimization.linear.SimplexTableau:356-matrix[i - 1][col++] = tableau.getEntry(i, j);	0
org.apache.commons.math3.optimization.linear.SimplexTableau:361-for (int i = columnsToDrop.size() - 1; i >= 0; i--) {	0
org.apache.commons.math3.optimization.linear.SimplexTableau:362-columnLabels.remove((int) columnsToDrop.get(i));	0
org.apache.commons.math3.optimization.linear.SimplexTableau:365-this.tableau = new Array2DRowRealMatrix(matrix);	0
org.apache.commons.math3.optimization.linear.SimplexTableau:366-this.numArtificialVariables = 0;	0
org.apache.commons.math3.optimization.linear.SimplexTableau:367-}	0
org.apache.commons.math3.optimization.linear.SimplexTableau:320-return row;	0
org.apache.commons.math3.optimization.linear.SimplexTableau:155-columnLabels.add("W");	0
org.apache.commons.math3.optimization.linear.SimplexTableau:165-columnLabels.add("s" + i);	0
org.apache.commons.math3.optimization.linear.SimplexTableau:168-columnLabels.add("a" + i);	0
org.apache.commons.math3.optimization.linear.SimplexTableau:188-matrix.setEntry(0, 0, -1);	0
org.apache.commons.math3.optimization.linear.SimplexTableau:225-} else if (constraint.getRelationship() == Relationship.GEQ) {	0
org.apache.commons.math3.optimization.linear.SimplexTableau:232-matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);	0
org.apache.commons.math3.optimization.linear.SimplexTableau:233-matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);	0
org.apache.commons.math3.optimization.linear.SimplexTableau:234-matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));	0
org.apache.commons.math3.optimization.linear.SimplexTableau:317-return null;	0
org.apache.commons.math3.optimization.linear.SimplexTableau:397-int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);	0
org.apache.commons.math3.optimization.linear.SimplexTableau:398-Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;	0
org.apache.commons.math3.optimization.linear.SimplexTableau:399-double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());	0
org.apache.commons.math3.optimization.linear.SimplexTableau:401-Set<Integer> basicRows = new HashSet<Integer>();	0
org.apache.commons.math3.optimization.linear.SimplexTableau:402-double[] coefficients = new double[getOriginalNumDecisionVariables()];	0
org.apache.commons.math3.optimization.linear.SimplexTableau:403-for (int i = 0; i < coefficients.length; i++) {	0
org.apache.commons.math3.optimization.linear.SimplexTableau:404-int colIndex = columnLabels.indexOf("x" + i);	0
org.apache.commons.math3.genetics.ListPopulation:209-return chromosomes.iterator();	1
org.apache.commons.math3.genetics.ListPopulation:112-this.chromosomes.addAll(chromosomeColl);	0
org.apache.commons.math3.genetics.ListPopulation:113-}	0
org.apache.commons.math3.genetics.ListPopulation:108-if (chromosomes.size() + chromosomeColl.size() > populationLimit) {	0
org.apache.commons.math3.genetics.ListPopulation:53-}	0
org.apache.commons.math3.genetics.ListPopulation:52-this(Collections.<Chromosome> emptyList(), populationLimit);	0
org.apache.commons.math3.genetics.ListPopulation:75-this.populationLimit = populationLimit;	0
org.apache.commons.math3.genetics.ListPopulation:76-this.chromosomes = new ArrayList<Chromosome>(populationLimit);	0
org.apache.commons.math3.genetics.ListPopulation:77-this.chromosomes.addAll(chromosomes);	0
org.apache.commons.math3.genetics.ListPopulation:78-}	0
org.apache.commons.math3.genetics.ListPopulation:71-if (chromosomes.size() > populationLimit) {	0
org.apache.commons.math3.genetics.ListPopulation:64-public ListPopulation(final List<Chromosome> chromosomes, final int populationLimit) {	0
org.apache.commons.math3.genetics.ListPopulation:65-if (chromosomes == null) {	0
org.apache.commons.math3.genetics.ListPopulation:68-if (populationLimit <= 0) {	0
org.apache.commons.math3.genetics.ListPopulation:66-throw new NullArgumentException();	0
org.apache.commons.math3.genetics.ListPopulation:69-throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);	0
org.apache.commons.math3.genetics.ListPopulation:72-throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,	0
org.apache.commons.math3.genetics.ListPopulation:90-if (chromosomes == null) {	0
org.apache.commons.math3.genetics.ListPopulation:91-throw new NullArgumentException();	0
org.apache.commons.math3.genetics.ListPopulation:93-if (chromosomes.size() > populationLimit) {	0
org.apache.commons.math3.genetics.ListPopulation:94-throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,	0
org.apache.commons.math3.genetics.ListPopulation:97-this.chromosomes.clear();	0
org.apache.commons.math3.genetics.ListPopulation:98-this.chromosomes.addAll(chromosomes);	0
org.apache.commons.math3.genetics.ListPopulation:99-}	0
org.apache.commons.math3.genetics.ListPopulation:109-throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,	0
org.apache.commons.math3.genetics.ListPopulation:120-return Collections.unmodifiableList(chromosomes);	0
org.apache.commons.math3.genetics.ListPopulation:128-return chromosomes;	0
org.apache.commons.math3.genetics.ListPopulation:138-if (chromosomes.size() >= populationLimit) {	0
org.apache.commons.math3.genetics.ListPopulation:139-throw new NumberIsTooLargeException(LocalizedFormats.LIST_OF_CHROMOSOMES_BIGGER_THAN_POPULATION_SIZE,	0
org.apache.commons.math3.genetics.ListPopulation:142-this.chromosomes.add(chromosome);	0
org.apache.commons.math3.genetics.ListPopulation:143-}	0
org.apache.commons.math3.genetics.ListPopulation:151-Chromosome bestChromosome = this.chromosomes.get(0);	0
org.apache.commons.math3.genetics.ListPopulation:152-for (Chromosome chromosome : this.chromosomes) {	0
org.apache.commons.math3.genetics.ListPopulation:153-if (chromosome.compareTo(bestChromosome) > 0) {	0
org.apache.commons.math3.genetics.ListPopulation:155-bestChromosome = chromosome;	0
org.apache.commons.math3.genetics.ListPopulation:157-}	0
org.apache.commons.math3.genetics.ListPopulation:158-return bestChromosome;	0
org.apache.commons.math3.genetics.ListPopulation:166-return this.populationLimit;	0
org.apache.commons.math3.genetics.ListPopulation:177-if (populationLimit <= 0) {	0
org.apache.commons.math3.genetics.ListPopulation:178-throw new NotPositiveException(LocalizedFormats.POPULATION_LIMIT_NOT_POSITIVE, populationLimit);	0
org.apache.commons.math3.genetics.ListPopulation:180-if (populationLimit < chromosomes.size()) {	0
org.apache.commons.math3.genetics.ListPopulation:181-throw new NumberIsTooSmallException(populationLimit, chromosomes.size(), true);	0
org.apache.commons.math3.genetics.ListPopulation:183-this.populationLimit = populationLimit;	0
org.apache.commons.math3.genetics.ListPopulation:184-}	0
org.apache.commons.math3.genetics.ListPopulation:191-return this.chromosomes.size();	0
org.apache.commons.math3.genetics.ListPopulation:199-return this.chromosomes.toString();	0
org.apache.commons.math.fraction.BigFraction:732-float result = numerator.floatValue() / denominator.floatValue();	0
org.apache.commons.math.fraction.BigFraction:735-return result;	0
org.apache.commons.math.fraction.BigFraction:685-double result = numerator.doubleValue() / denominator.doubleValue();	0
org.apache.commons.math.fraction.BigFraction:688-return result;	0
org.apache.commons.math.fraction.BigFraction:119-public BigFraction(BigInteger num, BigInteger den) {	0
org.apache.commons.math.fraction.BigFraction:120-MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);	0
org.apache.commons.math.fraction.BigFraction:121-MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);	0
org.apache.commons.math.fraction.BigFraction:122-if (BigInteger.ZERO.equals(den)) {	0
org.apache.commons.math.fraction.BigFraction:125-if (BigInteger.ZERO.equals(num)) {	0
org.apache.commons.math.fraction.BigFraction:126-numerator = BigInteger.ZERO;	0
org.apache.commons.math.fraction.BigFraction:127-denominator = BigInteger.ONE;	0
org.apache.commons.math.fraction.BigFraction:131-final BigInteger gcd = num.gcd(den);	0
org.apache.commons.math.fraction.BigFraction:132-if (BigInteger.ONE.compareTo(gcd) < 0) {	0
org.apache.commons.math.fraction.BigFraction:133-num = num.divide(gcd);	0
org.apache.commons.math.fraction.BigFraction:134-den = den.divide(gcd);	0
org.apache.commons.math.fraction.BigFraction:138-if (BigInteger.ZERO.compareTo(den) > 0) {	0
org.apache.commons.math.fraction.BigFraction:144-numerator = num;	0
org.apache.commons.math.fraction.BigFraction:145-denominator = den;	0
org.apache.commons.math.fraction.BigFraction:148-}	0
org.apache.commons.math.fraction.BigFraction:366-this(BigInteger.valueOf(num), BigInteger.ONE);	0
org.apache.commons.math.fraction.BigFraction:367-}	0
org.apache.commons.math.fraction.BigFraction:381-this(BigInteger.valueOf(num), BigInteger.valueOf(den));	0
org.apache.commons.math.fraction.BigFraction:382-}	0
org.apache.commons.math.fraction.BigFraction:44-public static final BigFraction TWO = new BigFraction(2);	0
org.apache.commons.math.fraction.BigFraction:47-public static final BigFraction ONE = new BigFraction(1);	0
org.apache.commons.math.fraction.BigFraction:50-public static final BigFraction ZERO = new BigFraction(0);	0
org.apache.commons.math.fraction.BigFraction:53-public static final BigFraction MINUS_ONE = new BigFraction(-1);	0
org.apache.commons.math.fraction.BigFraction:56-public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);	0
org.apache.commons.math.fraction.BigFraction:59-public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);	0
org.apache.commons.math.fraction.BigFraction:62-public static final BigFraction ONE_HALF = new BigFraction(1, 2);	0
org.apache.commons.math.fraction.BigFraction:65-public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);	0
org.apache.commons.math.fraction.BigFraction:68-public static final BigFraction ONE_THIRD = new BigFraction(1, 3);	0
org.apache.commons.math.fraction.BigFraction:71-public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);	0
org.apache.commons.math.fraction.BigFraction:74-public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);	0
org.apache.commons.math.fraction.BigFraction:77-public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);	0
org.apache.commons.math.fraction.BigFraction:80-public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);	0
org.apache.commons.math.fraction.BigFraction:83-public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);	0
org.apache.commons.math.fraction.BigFraction:89-private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);	0
org.apache.commons.math.fraction.BigFraction:107-this(num, BigInteger.ONE);	0
org.apache.commons.math.fraction.BigFraction:108-}	0
org.apache.commons.math.fraction.BigFraction:123-throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);	0
org.apache.commons.math.fraction.BigFraction:139-num = num.negate();	0
org.apache.commons.math.fraction.BigFraction:140-den = den.negate();	0
org.apache.commons.math.fraction.BigFraction:171-public BigFraction(final double value) throws MathIllegalArgumentException {	0
org.apache.commons.math.fraction.BigFraction:172-if (Double.isNaN(value)) {	0
org.apache.commons.math.fraction.BigFraction:173-throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);	0
org.apache.commons.math.fraction.BigFraction:175-if (Double.isInfinite(value)) {	0
org.apache.commons.math.fraction.BigFraction:176-throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);	0
org.apache.commons.math.fraction.BigFraction:180-final long bits = Double.doubleToLongBits(value);	0
org.apache.commons.math.fraction.BigFraction:181-final long sign = bits & 0x8000000000000000L;	0
org.apache.commons.math.complex.Complex:1178-if (Double.isNaN(realPart) ||	0
org.apache.commons.math.complex.Complex:1182-return new Complex(realPart, imaginaryPart);	0
org.apache.commons.math.complex.Complex:1022-double real2 = 2.0 * real;	0
org.apache.commons.math.complex.Complex:1023-double imaginary2 = 2.0 * imaginary;	0
org.apache.commons.math.complex.Complex:1024-double d = FastMath.cos(real2) + FastMath.cosh(imaginary2);	0
org.apache.commons.math.complex.Complex:1026-return createComplex(FastMath.sin(real2) / d,	0
org.apache.commons.math.complex.Complex:1066-double real2 = 2.0 * real;	0
org.apache.commons.math.complex.Complex:1067-double imaginary2 = 2.0 * imaginary;	0
org.apache.commons.math.complex.Complex:1068-double d = FastMath.cosh(real2) + FastMath.cos(imaginary2);	0
org.apache.commons.math.complex.Complex:1070-return createComplex(FastMath.sinh(real2) / d,	0
org.apache.commons.math.complex.Complex:1018-if (isNaN) {	1
org.apache.commons.math.complex.Complex:1063-if (isNaN) {	1
org.apache.commons.math.complex.Complex:385-return real;	0
org.apache.commons.math.complex.Complex:376-return imaginary;	0
org.apache.commons.math.complex.Complex:1166-return new Complex(realPart, imaginaryPart);	0
org.apache.commons.math.complex.Complex:98-public Complex(double real, double imaginary) {	0
org.apache.commons.math.complex.Complex:99-this.real = real;	0
org.apache.commons.math.complex.Complex:100-this.imaginary = imaginary;	0
org.apache.commons.math.complex.Complex:102-isNaN = Double.isNaN(real) || Double.isNaN(imaginary);	0
org.apache.commons.math.complex.Complex:103-isInfinite = !isNaN &&	0
org.apache.commons.math.complex.Complex:105-}	0
org.apache.commons.math.complex.Complex:59-public static final Complex I = new Complex(0.0, 1.0);	0
org.apache.commons.math.complex.Complex:62-public static final Complex NaN = new Complex(Double.NaN, Double.NaN);	0
org.apache.commons.math.complex.Complex:65-public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);	0
org.apache.commons.math.complex.Complex:67-public static final Complex ONE = new Complex(1.0, 0.0);	0
org.apache.commons.math.complex.Complex:69-public static final Complex ZERO = new Complex(0.0, 0.0);	0
org.apache.commons.math.complex.Complex:89-this(real, 0.0);	0
org.apache.commons.math.complex.Complex:90-}	0
org.apache.commons.math.complex.Complex:116-if (isNaN) {	0
org.apache.commons.math.complex.Complex:117-return Double.NaN;	0
org.apache.commons.math.complex.Complex:119-if (isInfinite()) {	0
org.apache.commons.math.complex.Complex:120-return Double.POSITIVE_INFINITY;	0
org.apache.commons.math.complex.Complex:122-if (FastMath.abs(real) < FastMath.abs(imaginary)) {	0
org.apache.commons.math.complex.Complex:123-if (imaginary == 0.0) {	0
org.apache.commons.math.complex.Complex:124-return FastMath.abs(real);	0
org.apache.commons.math.complex.Complex:126-double q = real / imaginary;	0
org.apache.commons.math.complex.Complex:127-return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);	0
org.apache.commons.math.complex.Complex:129-if (real == 0.0) {	0
org.apache.commons.math.complex.Complex:130-return FastMath.abs(imaginary);	0
org.apache.commons.math.complex.Complex:132-double q = imaginary / real;	0
org.apache.commons.math.complex.Complex:133-return FastMath.abs(real) * FastMath.sqrt(1 + q * q);	0
org.apache.commons.math.complex.Complex:157-MathUtils.checkNotNull(addend);	0
org.apache.commons.math.complex.Complex:158-if (isNaN || addend.isNaN) {	0
org.apache.commons.math.complex.Complex:159-return NaN;	0
org.apache.commons.math.complex.Complex:162-return createComplex(real + addend.getReal(),	0
org.apache.commons.math.complex.Complex:175-if (isNaN || Double.isNaN(addend)) {	0
org.apache.commons.math.complex.Complex:176-return NaN;	0
org.apache.commons.math.complex.Complex:179-return createComplex(real + addend, imaginary);	0
org.apache.commons.math.complex.Complex:197-if (isNaN) {	0
org.apache.commons.math.complex.Complex:198-return NaN;	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1653-final int tmp1 = (nfm - np) / n;	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1654-jpt = nfm - tmp1 * n - n;	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1655-ipt = jpt + tmp1;	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1656-if (ipt > n) {	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1662-final int iptMinus1 = ipt;	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1663-final int jptMinus1 = jpt;	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1664-interpolationPoints.setEntry(nfm, iptMinus1, interpolationPoints.getEntry(ipt, iptMinus1));	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1665-interpolationPoints.setEntry(nfm, jptMinus1, interpolationPoints.getEntry(jpt, jptMinus1));	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1744-zMatrix.setEntry(0, nfxm, recip);	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1745-zMatrix.setEntry(nfm, nfxm, recip);	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1746-zMatrix.setEntry(ipt, nfxm, -recip);	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1747-zMatrix.setEntry(jpt, nfxm, -recip);	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1749-final int ih = ipt * (ipt - 1) / 2 + jpt - 1;	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1750-final double tmp = interpolationPoints.getEntry(nfm, ipt - 1) * interpolationPoints.getEntry(nfm, jpt - 1);	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1751-modelSecondDerivativesValues.setEntry(ih, (fbeg - fAtInterpolationPoints.getEntry(ipt) - fAtInterpolationPoints.getEntry(jpt) + f) / tmp);	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1752-throw new PathIsExploredException(); // XXX	1
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:2454-final Throwable t = new Throwable();	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:2455-final StackTraceElement[] elements = t.getStackTrace();	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:2456-final StackTraceElement e = elements[n];	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:2457-return e.getMethodName() + " (at line " + e.getLineNumber() + ")";	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:2413-initialTrustRegionRadius = minDiff / 3.0;	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1640-stepa = interpolationPoints.getEntry(nfx, nfxm);	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1641-stepb = -initialTrustRegionRadius;	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1642-if (lowerDifference.getEntry(nfxm) == ZERO) {	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1646-if (upperDifference.getEntry(nfxm) == ZERO) {	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1650-interpolationPoints.setEntry(nfm, nfxm, stepb);	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1713-final int ih = nfx * (nfx + 1) / 2 - 1;	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1714-final double tmp = (f - fbeg) / stepb;	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1715-final double diff = stepb - stepa;	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1716-modelSecondDerivativesValues.setEntry(ih, TWO * (tmp - gradientAtTrustRegionCenter.getEntry(nfxm)) / diff);	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1717-gradientAtTrustRegionCenter.setEntry(nfxm, (gradientAtTrustRegionCenter.getEntry(nfxm) * stepb - tmp * stepa) / diff);	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1718-if (stepa * stepb < ZERO) {	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1719-if (f < fAtInterpolationPoints.getEntry(nfm - n)) {	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1720-fAtInterpolationPoints.setEntry(nfm, fAtInterpolationPoints.getEntry(nfm - n));	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1721-fAtInterpolationPoints.setEntry(nfm - n, f);	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1722-if (trustRegionCenterInterpolationPointIndex == nfm) {	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1725-interpolationPoints.setEntry(nfm - n, nfxm, stepb);	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1726-interpolationPoints.setEntry(nfm, nfxm, stepa);	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1729-bMatrix.setEntry(0, nfxm, -(stepa + stepb) / (stepa * stepb));	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1730-bMatrix.setEntry(nfm, nfxm, -HALF / interpolationPoints.getEntry(nfm - n, nfxm));	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1731-bMatrix.setEntry(nfm - n, nfxm,	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1733-zMatrix.setEntry(0, nfxm, Math.sqrt(TWO) / (stepa * stepb));	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1734-zMatrix.setEntry(nfm, nfxm, Math.sqrt(HALF) / rhosq);	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1736-zMatrix.setEntry(nfm - n, nfxm,	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:1738-}	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:241-isMinimize = (getGoalType() == GoalType.MINIMIZE);	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:242-currentBest = new ArrayRealVector(getStartPoint());	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:244-final double value = bobyqa(lowerBound, upperBound);	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:287-printMethod(); // XXX	0
org.apache.commons.math.optimization.direct.BOBYQAOptimizer:289-final int n = currentBest.getDimension();	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:236-for (int i = 0; i < scale.length; ++i) {	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:237-scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:195-setEquations(equations);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:196-final boolean forward = t > equations.getTime();	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:199-final double[] y0= equations.getCompleteState();	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:200-final double[] y = y0.clone();	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:201-final int stages = c.length + 1;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:202-final double[][] yDotK = new double[stages][y.length];	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:203-final double[] yTmp= y0.clone();	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:204-final double[] yDotTmp = new double[y.length];	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:207-final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:208-interpolator.reinitialize(this, yTmp, yDotK, forward,	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:210-interpolator.storeTime(equations.getTime());	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:213-stepStart = equations.getTime();	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:214-doublehNew= 0;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:215-boolean firstTime = true;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:216-initIntegration(equations.getTime(), y0, t);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:219-isLastStep = false;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:222-interpolator.shift();	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:225-double error = 10;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:226-while (error >= 1.0) {	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:228-if (firstTime || !fsal) {	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:230-computeDerivatives(stepStart, y, yDotK[0]);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:233-if (firstTime) {	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:234-final double[] scale = new double[mainSetDimension];	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:235-if (vecAbsoluteTolerance == null) {	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:244-hNew = initializeStep(forward, getOrder(), scale,	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:246-firstTime = false;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:249-stepSize = hNew;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:252-for (int k = 1; k < stages; ++k) {	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:254-for (int j = 0; j < y0.length; ++j) {	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:255-double sum = a[k-1][0] * yDotK[0][j];	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:256-for (int l = 1; l < k; ++l) {	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:257-sum += a[k-1][l] * yDotK[l][j];	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:259-yTmp[j] = y[j] + stepSize * sum;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:262-computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:115-super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:117-this.fsal= fsal;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:118-this.c = c;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:119-this.a = a;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:120-this.b = b;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:121-this.prototype = prototype;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:123-exp = -1.0 / getOrder();	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:126-setSafety(0.9);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:127-setMinReduction(0.2);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:128-setMaxGrowth(10.0);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:130-}	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:194-sanityChecks(equations, t);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:186-this.safety = safety;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:187-}	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:393-this.allowed = allowedSolution;	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:394-return super.solve(maxEval, f, min, max, startValue);	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:128-this.maximalOrder = maximalOrder;	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:129-this.allowed = AllowedSolution.ANY_SIDE;	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:130-}	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:265---end;	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:124-super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:125-if (maximalOrder < 2) {	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:172-nbPoints= 2;	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:173-signChangeIndex = 1;	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:235-targetY = -REDUCTION_FACTOR * yB;	1
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:195-final double[] tmpX = new double[x.length];	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:198-double xA= x[signChangeIndex - 1];	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:199-double yA= y[signChangeIndex - 1];	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:200-double absYA = FastMath.abs(yA);	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:201-int agingA = 0;	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:202-double xB= x[signChangeIndex];	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:203-double yB= y[signChangeIndex];	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:204-double absYB = FastMath.abs(yB);	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:205-int agingB = 0;	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:211-final double xTol = getAbsoluteAccuracy() +	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:213-if (((xB - xA) <= xTol) || (FastMath.max(absYA, absYB) < getFunctionValueAccuracy())) {	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:233-if (agingA >= MAXIMAL_AGING) {	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:236-} else if (agingB >= MAXIMAL_AGING) {	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:241-targetY = 0;	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:246-int start = 0;	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:247-int end = nbPoints;	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:251-System.arraycopy(x, start, tmpX, start, end - start);	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:252-nextX = guessX(targetY, tmpX, y, start, end);	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:254-if (!((nextX > xA) && (nextX < xB))) {	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:260-if (signChangeIndex - start >= end - signChangeIndex) {	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:269-nextX = Double.NaN;	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:273-} while (Double.isNaN(nextX) && (end - start > 1));	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:275-if (Double.isNaN(nextX)) {	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:283-final double nextY = computeObjectiveValue(nextX);	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:284-if (Precision.equals(nextY, 0.0, 1)) {	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:290-if ((nbPoints > 2) && (end - start != nbPoints)) {	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:294-nbPoints = end - start;	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:295-System.arraycopy(x, start, x, 0, nbPoints);	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:296-System.arraycopy(y, start, y, 0, nbPoints);	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:297-signChangeIndex -= start;	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:299-} elseif (nbPoints == x.length) {	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:316-System.arraycopy(x, signChangeIndex, x, signChangeIndex + 1, nbPoints - signChangeIndex);	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:317-x[signChangeIndex] = nextX;	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:318-System.arraycopy(y, signChangeIndex, y, signChangeIndex + 1, nbPoints - signChangeIndex);	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:319-y[signChangeIndex] = nextY;	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:320-++nbPoints;	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:323-if (nextY * yA <= 0) {	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:325-xB = nextX;	0
org.apache.commons.math.analysis.solvers.BracketingNthOrderBrentSolver:326-yB = nextY;	0
org.apache.commons.math.stat.descriptive.moment.Variance:370-return evaluate(values, weights, 0, values.length);	0
org.apache.commons.math.stat.descriptive.moment.Variance:316-double var = Double.NaN;	0
org.apache.commons.math.stat.descriptive.moment.Variance:318-if (test(values, weights,begin, length)) {	0
org.apache.commons.math.stat.descriptive.moment.Variance:319-clear();	0
org.apache.commons.math.stat.descriptive.moment.Variance:320-if (length == 1) {	0
org.apache.commons.math.stat.descriptive.moment.Variance:322-} else if (length > 1) {	0
org.apache.commons.math.stat.descriptive.moment.Variance:323-Mean mean = new Mean();	0
org.apache.commons.math.stat.descriptive.moment.Variance:324-double m = mean.evaluate(values, weights, begin, length);	0
org.apache.commons.math.stat.descriptive.moment.Variance:325-var = evaluate(values, weights, m, begin, length);	0
org.apache.commons.math.stat.descriptive.moment.Variance:328-return var;	0
org.apache.commons.math.stat.descriptive.moment.Variance:504-double var = Double.NaN;	0
org.apache.commons.math.stat.descriptive.moment.Variance:506-if (test(values, weights, begin, length)) {	0
org.apache.commons.math.stat.descriptive.moment.Variance:507-if (length == 1) {	0
org.apache.commons.math.stat.descriptive.moment.Variance:509-} else if (length > 1) {	0
org.apache.commons.math.stat.descriptive.moment.Variance:510-double accum = 0.0;	0
org.apache.commons.math.stat.descriptive.moment.Variance:511-double dev = 0.0;	0
org.apache.commons.math.stat.descriptive.moment.Variance:512-double accum2 = 0.0;	0
org.apache.commons.math.stat.descriptive.moment.Variance:513-for (int i = begin; i < begin + length; i++) {	0
org.apache.commons.math.stat.descriptive.moment.Variance:514-dev = values[i] - mean;	0
org.apache.commons.math.stat.descriptive.moment.Variance:515-accum += weights[i] * (dev * dev);	0
org.apache.commons.math.stat.descriptive.moment.Variance:516-accum2 += weights[i] * dev;	0
org.apache.commons.math.stat.descriptive.moment.Variance:519-double sumWts = 0;	0
org.apache.commons.math.stat.descriptive.moment.Variance:520-for (int i = 0; i < weights.length; i++) {	1
org.apache.commons.math.stat.descriptive.moment.Variance:521-sumWts += weights[i];	0
org.apache.commons.math.stat.descriptive.moment.Variance:524-if (isBiasCorrected) {	0
org.apache.commons.math.stat.descriptive.moment.Variance:525-var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);	0
org.apache.commons.math.stat.descriptive.moment.Variance:531-return var;	0
org.apache.commons.math.stat.descriptive.moment.Variance:204-if (incMoment) {	0
org.apache.commons.math.stat.descriptive.moment.Variance:205-moment.clear();	0
org.apache.commons.math.stat.descriptive.moment.Variance:207-}	0
org.apache.commons.math.stat.descriptive.moment.Variance:97-public Variance() {	0
org.apache.commons.math.stat.descriptive.moment.Variance:75-protected SecondMoment moment = null;	0
org.apache.commons.math.stat.descriptive.moment.Variance:84-protected boolean incMoment = true;	0
org.apache.commons.math.stat.descriptive.moment.Variance:91-private boolean isBiasCorrected = true;	0
org.apache.commons.math.stat.descriptive.moment.Variance:98-moment = new SecondMoment();	0
org.apache.commons.math.stat.descriptive.moment.Variance:99-}	0
org.apache.commons.math.stat.descriptive.moment.Variance:111-public Variance(final SecondMoment m2) {	0
org.apache.commons.math.stat.descriptive.moment.Variance:75-protected SecondMoment moment = null;	0
org.apache.commons.math.stat.descriptive.moment.Variance:84-protected boolean incMoment = true;	0
org.apache.commons.math.stat.descriptive.moment.Variance:91-private boolean isBiasCorrected = true;	0
org.apache.commons.math.stat.descriptive.moment.Variance:112-incMoment = false;	0
org.apache.commons.math.stat.descriptive.moment.Variance:113-this.moment = m2;	0
org.apache.commons.math.stat.descriptive.moment.Variance:114-}	0
org.apache.commons.math.stat.descriptive.moment.Variance:124-public Variance(boolean isBiasCorrected) {	0
org.apache.commons.math.stat.descriptive.moment.Variance:75-protected SecondMoment moment = null;	0
org.apache.commons.math.stat.descriptive.moment.Variance:84-protected boolean incMoment = true;	0
org.apache.commons.math.stat.descriptive.moment.Variance:91-private boolean isBiasCorrected = true;	0
org.apache.commons.math.stat.descriptive.moment.Variance:125-moment = new SecondMoment();	0
org.apache.commons.math.stat.descriptive.moment.Variance:126-this.isBiasCorrected = isBiasCorrected;	0
org.apache.commons.math.stat.descriptive.moment.Variance:127-}	0
org.apache.commons.math.optimization.linear.SimplexTableau:332-List<Integer> columnsToDrop = new ArrayList<Integer>();	0
org.apache.commons.math.optimization.linear.SimplexTableau:333-columnsToDrop.add(0);	0
org.apache.commons.math.optimization.linear.SimplexTableau:336-for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:337-final double entry = tableau.getEntry(0, i);	0
org.apache.commons.math.optimization.linear.SimplexTableau:338-if (Precision.compareTo(entry, 0d, maxUlps) > 0) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:344-for (int i = 0; i < getNumArtificialVariables(); i++) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:345-int col = i + getArtificialVariableOffset();	0
org.apache.commons.math.optimization.linear.SimplexTableau:346-if (getBasicRow(col) == null) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:347-columnsToDrop.add(col);	0
org.apache.commons.math.optimization.linear.SimplexTableau:351-double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];	0
org.apache.commons.math.optimization.linear.SimplexTableau:352-for (int i = 1; i < getHeight(); i++) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:353-int col = 0;	0
org.apache.commons.math.optimization.linear.SimplexTableau:354-for (int j = 0; j < getWidth(); j++) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:355-if (!columnsToDrop.contains(j)) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:356-matrix[i - 1][col++] = tableau.getEntry(i, j);	0
org.apache.commons.math.optimization.linear.SimplexTableau:361-for (int i = columnsToDrop.size() - 1; i >= 0; i--) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:362-columnLabels.remove((int) columnsToDrop.get(i));	0
org.apache.commons.math.optimization.linear.SimplexTableau:365-this.tableau = new Array2DRowRealMatrix(matrix);	0
org.apache.commons.math.optimization.linear.SimplexTableau:366-this.numArtificialVariables = 0;	0
org.apache.commons.math.optimization.linear.SimplexTableau:367-}	0
org.apache.commons.math.optimization.linear.SimplexTableau:320-return row;	0
org.apache.commons.math.optimization.linear.SimplexTableau:155-columnLabels.add("W");	0
org.apache.commons.math.optimization.linear.SimplexTableau:168-columnLabels.add("a" + i);	0
org.apache.commons.math.optimization.linear.SimplexTableau:188-matrix.setEntry(0, 0, -1);	0
org.apache.commons.math.optimization.linear.SimplexTableau:225-} else if (constraint.getRelationship() == Relationship.GEQ) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:232-matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);	0
org.apache.commons.math.optimization.linear.SimplexTableau:233-matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);	0
org.apache.commons.math.optimization.linear.SimplexTableau:234-matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));	0
org.apache.commons.math.optimization.linear.SimplexTableau:317-return null;	0
org.apache.commons.math.optimization.linear.SimplexTableau:397-int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);	0
org.apache.commons.math.optimization.linear.SimplexTableau:398-Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;	0
org.apache.commons.math.optimization.linear.SimplexTableau:399-double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());	0
org.apache.commons.math.optimization.linear.SimplexTableau:401-Set<Integer> basicRows = new HashSet<Integer>();	0
org.apache.commons.math.optimization.linear.SimplexTableau:402-double[] coefficients = new double[getOriginalNumDecisionVariables()];	0
org.apache.commons.math.optimization.linear.SimplexTableau:403-for (int i = 0; i < coefficients.length; i++) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:404-int colIndex = columnLabels.indexOf("x" + i);	0
org.apache.commons.math.optimization.linear.SimplexTableau:405-if (colIndex < 0) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:409-Integer basicRow = getBasicRow(colIndex);	0
org.apache.commons.math.optimization.linear.SimplexTableau:413-if (basicRows.contains(basicRow)) {	1
org.apache.commons.math.optimization.linear.SimplexTableau:418-basicRows.add(basicRow);	0
org.apache.commons.math.optimization.linear.SimplexTableau:419-coefficients[i] =	0
org.apache.commons.math.optimization.linear.SimplexTableau:424-return new RealPointValuePair(coefficients, f.getValue(coefficients));	0
org.apache.commons.math.optimization.linear.SimplexTableau:506-return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;	0
org.apache.commons.math.optimization.linear.SimplexTableau:311-Integer row = null;	0
org.apache.commons.math.optimization.linear.SimplexTableau:312-for (int i = 0; i < getHeight(); i++) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:313-final double entry = getEntry(i, col);	0
org.apache.commons.math.optimization.linear.SimplexTableau:314-if (Precision.equals(entry, 1d, maxUlps) && (row == null)) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:315-row = i;	0
org.apache.commons.math.optimization.linear.SimplexTableau:316-} else if (!Precision.equals(entry, 0d, maxUlps)) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:328-if (getNumObjectiveFunctions() == 1) {	0
org.apache.commons.math.ode.AbstractIntegrator:85-public AbstractIntegrator(final String name) {	0
org.apache.commons.math.ode.AbstractIntegrator:86-this.name = name;	0
org.apache.commons.math.ode.AbstractIntegrator:87-stepHandlers = new ArrayList<StepHandler>();	0
org.apache.commons.math.ode.AbstractIntegrator:88-stepStart = Double.NaN;	0
org.apache.commons.math.ode.AbstractIntegrator:89-stepSize= Double.NaN;	0
org.apache.commons.math.ode.AbstractIntegrator:90-eventsStates = new ArrayList<EventState>();	0
org.apache.commons.math.ode.AbstractIntegrator:91-statesInitialized = false;	0
org.apache.commons.math.ode.AbstractIntegrator:92-evaluations = new Incrementor();	0
org.apache.commons.math.ode.AbstractIntegrator:93-setMaxEvaluations(-1);	0
org.apache.commons.math.ode.AbstractIntegrator:94-resetEvaluations();	0
org.apache.commons.math.ode.AbstractIntegrator:95-}	0
org.apache.commons.math.ode.AbstractIntegrator:128-addEventHandler(handler, maxCheckInterval, convergence,	0
org.apache.commons.math.ode.AbstractIntegrator:131-}	0
org.apache.commons.math.ode.AbstractIntegrator:139-eventsStates.add(new EventState(handler, maxCheckInterval, convergence,	0
org.apache.commons.math.ode.AbstractIntegrator:141-}	0
org.apache.commons.math.ode.AbstractIntegrator:169-evaluations.setMaximalCount((maxEvaluations < 0) ? Integer.MAX_VALUE : maxEvaluations);	0
org.apache.commons.math.ode.AbstractIntegrator:170-}	0
org.apache.commons.math.ode.AbstractIntegrator:185-evaluations.resetCount();	0
org.apache.commons.math.ode.AbstractIntegrator:186-}	0
org.apache.commons.math.ode.AbstractIntegrator:192-this.expandable = equations;	0
org.apache.commons.math.ode.AbstractIntegrator:193-}	0
org.apache.commons.math.ode.AbstractIntegrator:200-if (y0.length != equations.getDimension()) {	0
org.apache.commons.math.ode.AbstractIntegrator:203-if (y.length != equations.getDimension()) {	0
org.apache.commons.math.ode.AbstractIntegrator:208-final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations);	0
org.apache.commons.math.ode.AbstractIntegrator:209-expandableODE.setTime(t0);	0
org.apache.commons.math.ode.AbstractIntegrator:210-expandableODE.setPrimaryState(y0);	0
org.apache.commons.math.ode.AbstractIntegrator:213-integrate(expandableODE, t);	0
org.apache.commons.math.ode.AbstractIntegrator:249-evaluations.incrementCount();	0
org.apache.commons.math.ode.AbstractIntegrator:250-expandable.computeDerivatives(t, y, yDot);	0
org.apache.commons.math.ode.AbstractIntegrator:251-}	0
org.apache.commons.math.ode.AbstractIntegrator:261-this.statesInitialized = stateInitialized;	0
org.apache.commons.math.ode.AbstractIntegrator:262-}	0
org.apache.commons.math.ode.AbstractIntegrator:278-double previousT = interpolator.getGlobalPreviousTime();	0
org.apache.commons.math.ode.AbstractIntegrator:279-final double currentT = interpolator.getGlobalCurrentTime();	0
org.apache.commons.math.ode.AbstractIntegrator:280-resetOccurred = false;	1
org.apache.commons.math.ode.AbstractIntegrator:283-if (! statesInitialized) {	0
org.apache.commons.math.ode.AbstractIntegrator:284-for (EventState state : eventsStates) {	0
org.apache.commons.math.ode.AbstractIntegrator:285-state.reinitializeBegin(interpolator);	0
org.apache.commons.math.ode.AbstractIntegrator:286-}	0
org.apache.commons.math.ode.AbstractIntegrator:287-statesInitialized = true;	0
org.apache.commons.math.ode.AbstractIntegrator:291-final int orderingSign = interpolator.isForward() ? +1 : -1;	0
org.apache.commons.math.ode.AbstractIntegrator:292-SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {	0
org.apache.commons.math.ode.AbstractIntegrator:301-for (final EventState state : eventsStates) {	0
org.apache.commons.math.ode.AbstractIntegrator:302-if (state.evaluateStep(interpolator)) {	0
org.apache.commons.math.ode.AbstractIntegrator:304-occuringEvents.add(state);	0
org.apache.commons.math.ode.AbstractIntegrator:306-}	0
org.apache.commons.math.ode.AbstractIntegrator:308-while (!occuringEvents.isEmpty()) {	0
org.apache.commons.math.ode.AbstractIntegrator:311-final Iterator<EventState> iterator = occuringEvents.iterator();	0
org.apache.commons.math.ode.AbstractIntegrator:312-final EventState currentEvent = iterator.next();	0
org.apache.commons.math.ode.AbstractIntegrator:313-iterator.remove();	0
org.apache.commons.math.linear.OpenMapRealMatrix:49-super(rowDimension, columnDimension);	0
org.apache.commons.math.linear.OpenMapRealMatrix:50-this.rows = rowDimension;	1
org.apache.commons.math.linear.OpenMapRealMatrix:51-this.columns = columnDimension;	0
org.apache.commons.math.linear.OpenMapRealMatrix:52-this.entries = new OpenIntToDoubleHashMap(0.0);	0
org.apache.commons.math.linear.OpenMapRealMatrix:53-}	0
org.apache.commons.math.linear.OpenMapRealMatrix:60-public OpenMapRealMatrix(OpenMapRealMatrix matrix) {	0
org.apache.commons.math.linear.OpenMapRealMatrix:61-this.rows = matrix.rows;	0
org.apache.commons.math.linear.OpenMapRealMatrix:62-this.columns = matrix.columns;	0
org.apache.commons.math.linear.OpenMapRealMatrix:63-this.entries = new OpenIntToDoubleHashMap(matrix.entries);	0
org.apache.commons.math.linear.OpenMapRealMatrix:64-}	0
org.apache.commons.math.linear.OpenMapRealMatrix:69-return new OpenMapRealMatrix(this);	0
org.apache.commons.math.linear.OpenMapRealMatrix:75-return new OpenMapRealMatrix(rowDimension, columnDimension);	0
org.apache.commons.math.linear.OpenMapRealMatrix:81-return columns;	0
org.apache.commons.math.linear.OpenMapRealMatrix:95-MatrixUtils.checkAdditionCompatible(this, m);	0
org.apache.commons.math.linear.OpenMapRealMatrix:97-final OpenMapRealMatrix out = new OpenMapRealMatrix(this);	0
org.apache.commons.math.linear.OpenMapRealMatrix:98-for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {	0
org.apache.commons.math.linear.OpenMapRealMatrix:99-iterator.advance();	0
org.apache.commons.math.linear.OpenMapRealMatrix:100-final int row = iterator.key() / columns;	0
org.apache.commons.math.linear.OpenMapRealMatrix:101-final int col = iterator.key() - row * columns;	0
org.apache.commons.math.linear.OpenMapRealMatrix:102-out.setEntry(row, col, getEntry(row, col) + iterator.value());	0
org.apache.commons.math.linear.OpenMapRealMatrix:103-}	0
org.apache.commons.math.linear.OpenMapRealMatrix:105-return out;	0
org.apache.commons.math.linear.OpenMapRealMatrix:113-return subtract((OpenMapRealMatrix) m);	0
org.apache.commons.math.linear.OpenMapRealMatrix:114-} catch (ClassCastException cce) {	0
org.apache.commons.math.linear.OpenMapRealMatrix:115-return (OpenMapRealMatrix) super.subtract(m);	0
org.apache.commons.math.linear.OpenMapRealMatrix:129-MatrixUtils.checkAdditionCompatible(this, m);	0
org.apache.commons.math.linear.OpenMapRealMatrix:131-final OpenMapRealMatrix out = new OpenMapRealMatrix(this);	0
org.apache.commons.math.linear.OpenMapRealMatrix:132-for (OpenIntToDoubleHashMap.Iterator iterator = m.entries.iterator(); iterator.hasNext();) {	0
org.apache.commons.math.linear.OpenMapRealMatrix:133-iterator.advance();	0
org.apache.commons.math.linear.OpenMapRealMatrix:134-final int row = iterator.key() / columns;	0
org.apache.commons.math.linear.OpenMapRealMatrix:135-final int col = iterator.key() - row * columns;	0
org.apache.commons.math.linear.OpenMapRealMatrix:136-out.setEntry(row, col, getEntry(row, col) - iterator.value());	0
org.apache.commons.math.linear.OpenMapRealMatrix:137-}	0
org.apache.commons.math.linear.OpenMapRealMatrix:139-return out;	0
org.apache.commons.math.linear.OpenMapRealMatrix:146-return multiply((OpenMapRealMatrix) m);	0
org.apache.commons.math.linear.OpenMapRealMatrix:147-} catch (ClassCastException cce) {	0
org.apache.commons.math.linear.OpenMapRealMatrix:150-MatrixUtils.checkMultiplicationCompatible(this, m);	0
org.apache.commons.math.linear.OpenMapRealMatrix:152-final int outCols = m.getColumnDimension();	0
org.apache.commons.math.linear.OpenMapRealMatrix:153-final BlockRealMatrix out = new BlockRealMatrix(rows, outCols);	0
org.apache.commons.math.linear.OpenMapRealMatrix:154-for (OpenIntToDoubleHashMap.Iterator iterator = entries.iterator(); iterator.hasNext();) {	0
org.apache.commons.math.linear.OpenMapRealMatrix:155-iterator.advance();	0
org.apache.commons.math.linear.OpenMapRealMatrix:156-final double value = iterator.value();	0
org.apache.commons.math.linear.OpenMapRealMatrix:157-final int key= iterator.key();	0
org.apache.commons.math.linear.OpenMapRealMatrix:158-final int i= key / columns;	0
org.apache.commons.math.linear.OpenMapRealMatrix:159-final int k= key % columns;	0
org.apache.commons.math.linear.OpenMapRealMatrix:160-for (int j = 0; j < outCols; ++j) {	0
org.apache.commons.math.linear.OpenMapRealMatrix:161-out.addToEntry(i, j, value * m.getEntry(k, j));	0
org.apache.commons.math.linear.OpenMapRealMatrix:163-}	0
org.apache.commons.math.linear.OpenMapRealMatrix:165-return out;	0
org.apache.commons.math.linear.OpenMapRealMatrix:180-MatrixUtils.checkMultiplicationCompatible(this, m);	0
org.apache.commons.math.complex.Complex:1179-return "(" + real + ", " + imaginary + ")";	0
org.apache.commons.math.complex.Complex:257-return NaN;	0
org.apache.commons.math.complex.Complex:583-return this.add(I).divide(I.subtract(this)).log()	0
org.apache.commons.math.complex.Complex:256-if (divisor.getReal() == 0.0 && divisor.getImaginary() == 0.0) {	1
org.apache.commons.math.complex.Complex:251-MathUtils.checkNotNull(divisor);	0
org.apache.commons.math.complex.Complex:252-if (isNaN || divisor.isNaN) {	0
org.apache.commons.math.complex.Complex:579-if (isNaN) {	0
org.apache.commons.math.complex.Complex:268-double q = c / d;	0
org.apache.commons.math.complex.Complex:269-double denominator = c * q + d;	0
org.apache.commons.math.complex.Complex:270-return createComplex((real * q + imaginary) / denominator,	0
org.apache.commons.math.complex.Complex:273-double q = d / c;	0
org.apache.commons.math.complex.Complex:274-double denominator = d * q + c;	0
org.apache.commons.math.complex.Complex:275-return createComplex((imaginary * q + real) / denominator,	0
org.apache.commons.math.complex.Complex:747-return NaN;	0
org.apache.commons.math.complex.Complex:162-return createComplex(real + addend.getReal(),	0
org.apache.commons.math.complex.Complex:260-if (divisor.isInfinite() && !isInfinite()) {	0
org.apache.commons.math.complex.Complex:264-final double c = divisor.getReal();	0
org.apache.commons.math.complex.Complex:265-final double d = divisor.getImaginary();	0
org.apache.commons.math.complex.Complex:267-if (FastMath.abs(c) < FastMath.abs(d)) {	0
org.apache.commons.math.complex.Complex:419-return NaN;	0
org.apache.commons.math.complex.Complex:428-return createComplex(real * factor.real - imaginary * factor.imaginary,	0
org.apache.commons.math.complex.Complex:493-return createComplex(real - subtrahend.getReal(),	0
org.apache.commons.math.complex.Complex:132-double q = imaginary / real;	0
org.apache.commons.math.complex.Complex:133-return FastMath.abs(real) * FastMath.sqrt(1 + q * q);	0
org.apache.commons.math.complex.Complex:157-MathUtils.checkNotNull(addend);	0
org.apache.commons.math.complex.Complex:158-if (isNaN || addend.isNaN) {	0
org.apache.commons.math.complex.Complex:129-if (real == 0.0) {	0
org.apache.commons.math.complex.Complex:327-return (real == c.real) && (imaginary == c.imaginary);	0
org.apache.commons.math.complex.Complex:488-MathUtils.checkNotNull(subtrahend);	0
org.apache.commons.math.complex.Complex:489-if (isNaN || subtrahend.isNaN) {	0
org.apache.commons.math.complex.Complex:750-return createComplex(FastMath.log(abs()),	0
org.apache.commons.math.complex.Complex:323-Complex c = (Complex)other;	0
org.apache.commons.math.complex.Complex:324-if (c.isNaN) {	0
org.apache.commons.math.complex.Complex:421-if (Double.isInfinite(real) ||	0
org.apache.commons.math.complex.Complex:364-return real;	0
org.apache.commons.math.complex.Complex:355-return imaginary;	0
org.apache.commons.math.complex.Complex:322-if (other instanceof Complex){	0
org.apache.commons.math.complex.Complex:746-if (isNaN) {	0
org.apache.commons.math.complex.Complex:417-MathUtils.checkNotNull(factor);	0
org.apache.commons.math.complex.Complex:418-if (isNaN || factor.isNaN) {	0
org.apache.commons.math.complex.Complex:122-if (FastMath.abs(real) < FastMath.abs(imaginary)) {	0
org.apache.commons.math.complex.Complex:98-public Complex(double real, double imaginary) {	0
org.apache.commons.math.complex.Complex:99-this.real = real;	0
org.apache.commons.math.complex.Complex:100-this.imaginary = imaginary;	0
org.apache.commons.math.complex.Complex:102-isNaN = Double.isNaN(real) || Double.isNaN(imaginary);	0
org.apache.commons.math.complex.Complex:103-isInfinite = !isNaN &&	0
org.apache.commons.math.complex.Complex:105-}	1
org.apache.commons.math.complex.Complex:58-public static final Complex I = new Complex(0.0, 1.0);	0
org.apache.commons.math.complex.Complex:61-public static final Complex NaN = new Complex(Double.NaN, Double.NaN);	0
org.apache.commons.math.complex.Complex:64-public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:125-return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:150-final double ftol = getFunctionValueAccuracy();	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:151-final double atol = getAbsoluteAccuracy();	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:152-final double rtol = getRelativeAccuracy();	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:156-boolean inverted = false;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:161-final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:162-final double fx = computeObjectiveValue(x);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:167-if (fx == 0.0) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:172-if (f1 * fx < 0) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:175-x0 = x1;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:176-f0 = f1;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:177-inverted = !inverted;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:179-switch (method) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:189-break;	1
org.apache.commons.math.analysis.solvers.BaseSecantSolver:196-x1 = x;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:197-f1 = fx;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:202-if (FastMath.abs(f1) <= ftol) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:233-if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:250-}	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:147-verifyBracketing(x0, x1);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:69-super(absoluteAccuracy);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:70-this.allowed = AllowedSolution.ANY_SIDE;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:71-this.method = method;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:72-}	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:117-this.allowed = allowedSolution;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:118-return super.solve(maxEval, f, min, max, startValue);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:131-double x0 = getMin();	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:132-double x1 = getMax();	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:133-double f0 = computeObjectiveValue(x0);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:134-double f1 = computeObjectiveValue(x1);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:139-if (f0 == 0.0) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:142-if (f1 == 0.0) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:84-super(relativeAccuracy, absoluteAccuracy);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:85-this.allowed = AllowedSolution.ANY_SIDE;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:86-this.method = method;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:87-}	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:101-super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:102-this.allowed = AllowedSolution.ANY_SIDE;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:103-this.method = method;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:104-}	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:110-return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:140-return x0;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:143-return x1;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:168-return x;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:181-f0 *= 0.5;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:182-break;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:184-f0 *= f1 / (f1 + fx);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:185-break;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:192-throw new MathInternalError();	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:203-switch (allowed) {	0
org.apache.commons.math.linear.OpenMapRealVector:368-checkVectorDimensions(v.getDimension());	0
org.apache.commons.math.linear.OpenMapRealVector:369-OpenMapRealVector res = new OpenMapRealVector(this);	0
org.apache.commons.math.linear.OpenMapRealVector:370-Iterator iter = res.entries.iterator();	1
org.apache.commons.math.linear.OpenMapRealVector:371-while (iter.hasNext()) {	0
org.apache.commons.math.linear.OpenMapRealVector:372-iter.advance();	0
org.apache.commons.math.linear.OpenMapRealVector:373-res.setEntry(iter.key(), iter.value() * v.getEntry(iter.key()));	0
org.apache.commons.math.linear.OpenMapRealVector:74-public OpenMapRealVector(int dimension, double epsilon) {	0
org.apache.commons.math.linear.OpenMapRealVector:75-virtualSize = dimension;	0
org.apache.commons.math.linear.OpenMapRealVector:76-entries = new OpenIntToDoubleHashMap(0.0);	0
org.apache.commons.math.linear.OpenMapRealVector:77-this.epsilon = epsilon;	0
org.apache.commons.math.linear.OpenMapRealVector:78-}	0
org.apache.commons.math.linear.OpenMapRealVector:666-} else if (entries.containsKey(index)) {	0
org.apache.commons.math.linear.OpenMapRealVector:667-entries.remove(index);	0
org.apache.commons.math.linear.OpenMapRealVector:179-public OpenMapRealVector(OpenMapRealVector v) {	0
org.apache.commons.math.linear.OpenMapRealVector:180-virtualSize = v.getDimension();	0
org.apache.commons.math.linear.OpenMapRealVector:181-entries = new OpenIntToDoubleHashMap(v.getEntries());	0
org.apache.commons.math.linear.OpenMapRealVector:182-epsilon = v.epsilon;	0
org.apache.commons.math.linear.OpenMapRealVector:183-}	0
org.apache.commons.math.linear.OpenMapRealVector:663-checkIndex(index);	0
org.apache.commons.math.linear.OpenMapRealVector:664-if (!isDefaultValue(value)) {	0
org.apache.commons.math.linear.OpenMapRealVector:665-entries.put(index, value);	0
org.apache.commons.math.linear.OpenMapRealVector:669-}	0
org.apache.commons.math.linear.OpenMapRealVector:208-return entries;	0
org.apache.commons.math.linear.OpenMapRealVector:479-checkIndex(index);	0
org.apache.commons.math.linear.OpenMapRealVector:480-return entries.get(index);	0
org.apache.commons.math.linear.OpenMapRealVector:220-return FastMath.abs(value) < epsilon;	0
org.apache.commons.math.linear.OpenMapRealVector:422-return virtualSize;	0
org.apache.commons.math.linear.OpenMapRealVector:56-this(0, DEFAULT_ZERO_TOLERANCE);	0
org.apache.commons.math.linear.OpenMapRealVector:57-}	0
org.apache.commons.math.linear.OpenMapRealVector:65-this(dimension, DEFAULT_ZERO_TOLERANCE);	0
org.apache.commons.math.linear.OpenMapRealVector:66-}	0
org.apache.commons.math.linear.OpenMapRealVector:86-protected OpenMapRealVector(OpenMapRealVector v, int resize) {	0
org.apache.commons.math.linear.OpenMapRealVector:87-virtualSize = v.getDimension() + resize;	0
org.apache.commons.math.linear.OpenMapRealVector:88-entries = new OpenIntToDoubleHashMap(v.entries);	0
org.apache.commons.math.linear.OpenMapRealVector:89-epsilon = v.epsilon;	0
org.apache.commons.math.linear.OpenMapRealVector:90-}	0
org.apache.commons.math.linear.OpenMapRealVector:99-this(dimension, expectedSize, DEFAULT_ZERO_TOLERANCE);	0
org.apache.commons.math.linear.OpenMapRealVector:100-}	0
org.apache.commons.math.linear.OpenMapRealVector:110-public OpenMapRealVector(int dimension, int expectedSize, double epsilon) {	0
org.apache.commons.math.linear.OpenMapRealVector:111-virtualSize = dimension;	0
org.apache.commons.math.linear.OpenMapRealVector:112-entries = new OpenIntToDoubleHashMap(expectedSize, 0.0);	0
org.apache.commons.math.linear.OpenMapRealVector:113-this.epsilon = epsilon;	0
org.apache.commons.math.linear.OpenMapRealVector:114-}	0
org.apache.commons.math.linear.OpenMapRealVector:123-this(values, DEFAULT_ZERO_TOLERANCE);	0
org.apache.commons.math.linear.OpenMapRealVector:124-}	0
org.apache.commons.math.linear.OpenMapRealVector:133-public OpenMapRealVector(double[] values, double epsilon) {	0
org.apache.commons.math.linear.OpenMapRealVector:134-virtualSize = values.length;	0
org.apache.commons.math.linear.OpenMapRealVector:135-entries = new OpenIntToDoubleHashMap(0.0);	0
org.apache.commons.math.linear.OpenMapRealVector:136-this.epsilon = epsilon;	0
org.apache.commons.math.linear.OpenMapRealVector:137-for (int key = 0; key < values.length; key++) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:188-x0 = 0.5 * (x0 + x1 - FastMath.max(rtol * FastMath.abs(x1), atol));	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:189-f0 = computeObjectiveValue(x0);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:239-return x1;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:124-return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:237-switch (allowed) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:149-final double ftol = getFunctionValueAccuracy();	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:150-final double atol = getAbsoluteAccuracy();	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:151-final double rtol = getRelativeAccuracy();	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:155-boolean inverted = false;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:160-final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:161-final double fx = computeObjectiveValue(x);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:166-if (fx == 0.0) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:171-if (f1 * fx < 0) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:174-x0 = x1;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:175-f0 = f1;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:176-inverted = !inverted;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:178-switch (method) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:187-if (x == x1) {	1
org.apache.commons.math.analysis.solvers.BaseSecantSolver:198-x1 = x;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:199-f1 = fx;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:204-if (FastMath.abs(f1) <= ftol) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:235-if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:252-}	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:146-verifyBracketing(x0, x1);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:68-super(absoluteAccuracy);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:69-this.allowed = AllowedSolution.ANY_SIDE;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:70-this.method = method;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:71-}	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:116-this.allowed = allowedSolution;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:117-return super.solve(maxEval, f, min, max, startValue);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:130-double x0 = getMin();	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:131-double x1 = getMax();	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:132-double f0 = computeObjectiveValue(x0);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:133-double f1 = computeObjectiveValue(x1);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:138-if (f0 == 0.0) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:141-if (f1 == 0.0) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:83-super(relativeAccuracy, absoluteAccuracy);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:84-this.allowed = AllowedSolution.ANY_SIDE;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:85-this.method = method;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:86-}	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:100-super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:101-this.allowed = AllowedSolution.ANY_SIDE;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:102-this.method = method;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:103-}	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:109-return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:139-return x0;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:142-return x1;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:167-return x;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:180-f0 *= 0.5;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:181-break;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:124-return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:149-final double ftol = getFunctionValueAccuracy();	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:150-final double atol = getAbsoluteAccuracy();	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:151-final double rtol = getRelativeAccuracy();	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:155-boolean inverted = false;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:160-final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:161-final double fx = computeObjectiveValue(x);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:166-if (fx == 0.0) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:171-if (f1 * fx < 0) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:174-x0 = x1;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:175-f0 = f1;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:176-inverted = !inverted;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:178-switch (method) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:192-x1 = x;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:193-f1 = fx;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:198-if (FastMath.abs(f1) <= ftol) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:229-if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:246-}	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:146-verifyBracketing(x0, x1);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:68-super(absoluteAccuracy);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:69-this.allowed = AllowedSolution.ANY_SIDE;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:70-this.method = method;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:71-}	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:116-this.allowed = allowedSolution;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:117-return super.solve(maxEval, f, min, max, startValue);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:130-double x0 = getMin();	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:131-double x1 = getMax();	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:132-double f0 = computeObjectiveValue(x0);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:133-double f1 = computeObjectiveValue(x1);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:138-if (f0 == 0.0) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:141-if (f1 == 0.0) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:83-super(relativeAccuracy, absoluteAccuracy);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:84-this.allowed = AllowedSolution.ANY_SIDE;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:85-this.method = method;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:86-}	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:100-super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:101-this.allowed = AllowedSolution.ANY_SIDE;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:102-this.method = method;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:103-}	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:109-return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:139-return x0;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:142-return x1;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:167-return x;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:180-f0 *= 0.5;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:181-break;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:183-f0 *= f1 / (f1 + fx);	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:184-break;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:199-switch (allowed) {	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:201-return x1;	0
org.apache.commons.math.analysis.solvers.BaseSecantSolver:203-if (inverted) {	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:313-public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:316-double u1u1 = u1.getNormSq();	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:317-double u2u2 = u2.getNormSq();	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:318-double v1v1 = v1.getNormSq();	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:319-double v2v2 = v2.getNormSq();	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:320-if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:325-v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:328-double u1u2 = u1.dotProduct(u2);	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:329-double v1v2 = v1.dotProduct(v2);	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:330-double coeffU = u1u2 / u1u1;	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:331-double coeffV = v1v2 / u1u1;	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:332-double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:333-double alpha= coeffU - beta * coeffV;	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:334-v2 = new Vector3D(alpha, v1, beta, v2);	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:337-Vector3D uRef= u1;	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:338-Vector3D vRef= v1;	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:339-Vector3D v1Su1 = v1.subtract(u1);	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:340-Vector3D v2Su2 = v2.subtract(u2);	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:341-Vector3D k = v1Su1.crossProduct(v2Su2);	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:342-Vector3D u3= u1.crossProduct(u2);	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:343-double c = k.dotProduct(u3);	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:344-if (c == 0) {	1
org.apache.commons.math.geometry.euclidean.threed.Rotation:378-c = FastMath.sqrt(c);	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:379-double inv = 1.0 / (c + c);	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:380-q1 = inv * k.getX();	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:381-q2 = inv * k.getY();	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:382-q3 = inv * k.getZ();	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:385-k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:388-q0 = vRef.dotProduct(k) / (2 * k.getNormSq());	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:390-}	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:481-return q0;	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:134-boolean needsNormalization) {	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:136-if (needsNormalization) {	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:145-this.q0 = q0;	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:146-this.q1 = q1;	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:147-this.q2 = q2;	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:148-this.q3 = q3;	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:150-}	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:98-public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:138-double inv = 1.0 / FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:139-q0 *= inv;	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:140-q1 *= inv;	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:141-q2 *= inv;	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:142-q3 *= inv;	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:173-public Rotation(Vector3D axis, double angle) {	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:175-double norm = axis.getNorm();	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:176-if (norm == 0) {	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:177-throw MathRuntimeException.createArithmeticException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_AXIS);	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:180-double halfAngle = -0.5 * angle;	0
org.apache.commons.math.geometry.euclidean.threed.Rotation:181-double coeff = FastMath.sin(halfAngle) / norm;	0
org.apache.commons.math.complex.Complex:152-MathUtils.checkNotNull(rhs);	0
org.apache.commons.math.complex.Complex:153-return createComplex(real + rhs.getReal(),	1
org.apache.commons.math.complex.Complex:319-return isNaN;	0
org.apache.commons.math.complex.Complex:997-return new Complex(realPart, imaginaryPart);	0
org.apache.commons.math.complex.Complex:308-return real;	0
org.apache.commons.math.complex.Complex:299-return imaginary;	0
org.apache.commons.math.complex.Complex:90-super();	0
org.apache.commons.math.complex.Complex:91-this.real = real;	0
org.apache.commons.math.complex.Complex:92-this.imaginary = imaginary;	0
org.apache.commons.math.complex.Complex:94-isNaN = Double.isNaN(real) || Double.isNaN(imaginary);	0
org.apache.commons.math.complex.Complex:95-isInfinite = !isNaN &&	0
org.apache.commons.math.complex.Complex:97-}	0
org.apache.commons.math.complex.Complex:52-public static final Complex I = new Complex(0.0, 1.0);	0
org.apache.commons.math.complex.Complex:56-public static final Complex NaN = new Complex(Double.NaN, Double.NaN);	0
org.apache.commons.math.complex.Complex:60-public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);	0
org.apache.commons.math.complex.Complex:63-public static final Complex ONE = new Complex(1.0, 0.0);	0
org.apache.commons.math.complex.Complex:66-public static final Complex ZERO = new Complex(0.0, 0.0);	0
org.apache.commons.math.complex.Complex:110-if (isNaN) {	0
org.apache.commons.math.complex.Complex:111-return Double.NaN;	0
org.apache.commons.math.complex.Complex:114-if (isInfinite()) {	0
org.apache.commons.math.complex.Complex:115-return Double.POSITIVE_INFINITY;	0
org.apache.commons.math.complex.Complex:118-if (FastMath.abs(real) < FastMath.abs(imaginary)) {	0
org.apache.commons.math.complex.Complex:119-if (imaginary == 0.0) {	0
org.apache.commons.math.complex.Complex:120-return FastMath.abs(real);	0
org.apache.commons.math.complex.Complex:122-double q = real / imaginary;	0
org.apache.commons.math.complex.Complex:123-return FastMath.abs(imaginary) * FastMath.sqrt(1 + q * q);	0
org.apache.commons.math.complex.Complex:125-if (real == 0.0) {	0
org.apache.commons.math.complex.Complex:126-return FastMath.abs(imaginary);	0
org.apache.commons.math.complex.Complex:128-double q = imaginary / real;	0
org.apache.commons.math.complex.Complex:129-return FastMath.abs(real) * FastMath.sqrt(1 + q * q);	0
org.apache.commons.math.complex.Complex:172-if (isNaN) {	0
org.apache.commons.math.complex.Complex:173-return NaN;	0
org.apache.commons.math.complex.Complex:175-return createComplex(real, -imaginary);	0
org.apache.commons.math.complex.Complex:215-MathUtils.checkNotNull(rhs);	0
org.apache.commons.math.complex.Complex:216-if (isNaN || rhs.isNaN) {	0
org.apache.commons.math.complex.Complex:217-return NaN;	0
org.apache.commons.math.complex.Complex:220-double c = rhs.getReal();	0
org.apache.commons.math.complex.Complex:221-double d = rhs.getImaginary();	0
org.apache.commons.math.complex.Complex:222-if (c == 0.0 && d == 0.0) {	0
org.apache.commons.math.complex.Complex:223-return NaN;	0
org.apache.commons.math.complex.Complex:226-if (rhs.isInfinite() && !isInfinite()) {	0
org.apache.commons.math.complex.Complex:227-return ZERO;	0
org.apache.commons.math.complex.Complex:230-if (FastMath.abs(c) < FastMath.abs(d)) {	0
org.apache.commons.math.complex.Complex:231-double q = c / d;	0
org.apache.commons.math.complex.Complex:232-double denominator = c * q + d;	0
org.apache.commons.math.complex.Complex:233-return createComplex((real * q + imaginary) / denominator,	0
org.apache.commons.math.complex.Complex:236-double q = d / c;	0
org.apache.commons.math.complex.Complex:237-double denominator = d * q + c;	0
org.apache.commons.math.complex.Complex:238-return createComplex((imaginary * q + real) / denominator,	0
org.apache.commons.math.complex.Complex:263-if (this == other) {	0
org.apache.commons.math.dfp.Dfp:576-return new Dfp(getField(), x);	0
org.apache.commons.math.dfp.Dfp:661-return field.getTwo();	0
org.apache.commons.math.dfp.Dfp:801-return nans == INFINITE;	0
org.apache.commons.math.dfp.Dfp:2305-if (isInfinite()) {	0
org.apache.commons.math.dfp.Dfp:2313-if (isNaN()) {	0
org.apache.commons.math.dfp.Dfp:2317-Dfp y = this;	0
org.apache.commons.math.dfp.Dfp:2318-boolean negate = false;	0
org.apache.commons.math.dfp.Dfp:2319-if (lessThan(getZero())) {	1
org.apache.commons.math.dfp.Dfp:2326-int exponent = (int)(y.log10() * 3.32);	0
org.apache.commons.math.dfp.Dfp:2327-if (exponent < 0) {	0
org.apache.commons.math.dfp.Dfp:2328-exponent--;	0
org.apache.commons.math.dfp.Dfp:2331-Dfp tempDfp = DfpMath.pow(getTwo(), exponent);	0
org.apache.commons.math.dfp.Dfp:2332-while (tempDfp.lessThan(y) || tempDfp.equals(y)) {	0
org.apache.commons.math.dfp.Dfp:2336-exponent--;	0
org.apache.commons.math.dfp.Dfp:2340-y = y.divide(DfpMath.pow(getTwo(), exponent));	0
org.apache.commons.math.dfp.Dfp:2341-if (exponent > -1023) {	0
org.apache.commons.math.dfp.Dfp:2342-y = y.subtract(getOne());	0
org.apache.commons.math.dfp.Dfp:2345-if (exponent < -1074) {	0
org.apache.commons.math.dfp.Dfp:2349-if (exponent > 1023) {	0
org.apache.commons.math.dfp.Dfp:2354-y = y.multiply(newInstance(4503599627370496l)).rint();	0
org.apache.commons.math.dfp.Dfp:2355-String str = y.toString();	0
org.apache.commons.math.dfp.Dfp:2356-str = str.substring(0, str.length()-1);	0
org.apache.commons.math.dfp.Dfp:2357-long mantissa = Long.parseLong(str);	0
org.apache.commons.math.dfp.Dfp:2359-if (mantissa == 4503599627370496L) {	0
org.apache.commons.math.dfp.Dfp:2366-if (exponent <= -1023) {	0
org.apache.commons.math.dfp.Dfp:2370-while (exponent < -1023) {	0
org.apache.commons.math.dfp.Dfp:2375-long bits = mantissa | ((exponent + 1023L) << 52);	0
org.apache.commons.math.dfp.Dfp:2376-double x = Double.longBitsToDouble(bits);	0
org.apache.commons.math.dfp.Dfp:2378-if (negate) {	0
org.apache.commons.math.dfp.Dfp:2382-return x;	0
org.apache.commons.math.dfp.Dfp:1096-if (mant[mant.length-1] > 1000) {	0
org.apache.commons.math.dfp.Dfp:1099-if (mant[mant.length-1] > 100) {	0
org.apache.commons.math.dfp.Dfp:1102-if (mant[mant.length-1] > 10) {	0
org.apache.commons.math.dfp.Dfp:1105-return exp * 4 - 4;	0
org.apache.commons.math.dfp.Dfp:1041-return result;	0
org.apache.commons.math.dfp.Dfp:1234-a.exp = b.exp;	0
org.apache.commons.math.dfp.Dfp:918-return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);	0
org.apache.commons.math.dfp.Dfp:959-boolean changed = false;	0
org.apache.commons.math.dfp.Dfp:961-if (isNaN()) {	0
org.apache.commons.math.dfp.Dfp:965-if (nans == INFINITE) {	0
org.apache.commons.math.dfp.Dfp:969-if (mant[mant.length-1] == 0) {	0
org.apache.commons.math.dfp.Dfp:976-if (exp < 0) {	0
org.apache.commons.math.dfp.Dfp:987-if (exp >= mant.length) {	0
org.apache.commons.math.dfp.Dfp:994-Dfp result = newInstance(this);	0
org.apache.commons.math.dfp.Dfp:995-for (int i = 0; i < mant.length-result.exp; i++) {	0
org.apache.commons.math.dfp.Dfp:996-changed |= result.mant[i] != 0;	0
org.apache.commons.math.dfp.Dfp:997-result.mant[i] = 0;	0
org.apache.commons.math.dfp.Dfp:1000-if (changed) {	0
org.apache.commons.math.dfp.Dfp:654-return field.getOne();	0
org.apache.commons.math.dfp.Dfp:2119-buffer[--q] = '-';	0
org.apache.commons.math.geometry.Vector3D:473-return new Vector3D(v1.y * v2.z - v1.z * v2.y, v1.z * v2.x - v1.x * v2.z, v1.x * v2.y - v1.y * v2.x);	0
org.apache.commons.math.geometry.Vector3D:181-return x;	0
org.apache.commons.math.geometry.Vector3D:189-return y;	0
org.apache.commons.math.geometry.Vector3D:197-return z;	0
org.apache.commons.math.geometry.Vector3D:93-public Vector3D(double x, double y, double z) {	0
org.apache.commons.math.geometry.Vector3D:94-this.x = x;	0
org.apache.commons.math.geometry.Vector3D:95-this.y = y;	0
org.apache.commons.math.geometry.Vector3D:96-this.z = z;	0
org.apache.commons.math.geometry.Vector3D:97-}	0
org.apache.commons.math.geometry.Vector3D:35-public static final Vector3D ZERO = new Vector3D(0, 0, 0);	0
org.apache.commons.math.geometry.Vector3D:38-public static final Vector3D PLUS_I = new Vector3D(1, 0, 0);	0
org.apache.commons.math.geometry.Vector3D:41-public static final Vector3D MINUS_I = new Vector3D(-1, 0, 0);	0
org.apache.commons.math.geometry.Vector3D:44-public static final Vector3D PLUS_J = new Vector3D(0, 1, 0);	0
org.apache.commons.math.geometry.Vector3D:47-public static final Vector3D MINUS_J = new Vector3D(0, -1, 0);	0
org.apache.commons.math.geometry.Vector3D:50-public static final Vector3D PLUS_K = new Vector3D(0, 0, 1);	0
org.apache.commons.math.geometry.Vector3D:53-public static final Vector3D MINUS_K = new Vector3D(0, 0, -1);	0
org.apache.commons.math.geometry.Vector3D:57-public static final Vector3D NaN = new Vector3D(Double.NaN, Double.NaN, Double.NaN);	0
org.apache.commons.math.geometry.Vector3D:61-public static final Vector3D POSITIVE_INFINITY =	0
org.apache.commons.math.geometry.Vector3D:65-public static final Vector3D NEGATIVE_INFINITY =	0
org.apache.commons.math.geometry.Vector3D:69-private static final Vector3DFormat DEFAULT_FORMAT =	0
org.apache.commons.math.geometry.Vector3D:107-public Vector3D(double alpha, double delta) {	0
org.apache.commons.math.geometry.Vector3D:108-double cosDelta = FastMath.cos(delta);	0
org.apache.commons.math.geometry.Vector3D:109-this.x = FastMath.cos(alpha) * cosDelta;	0
org.apache.commons.math.geometry.Vector3D:110-this.y = FastMath.sin(alpha) * cosDelta;	0
org.apache.commons.math.geometry.Vector3D:111-this.z = FastMath.sin(delta);	0
org.apache.commons.math.geometry.Vector3D:112-}	0
org.apache.commons.math.geometry.Vector3D:120-public Vector3D(double a, Vector3D u) {	0
org.apache.commons.math.geometry.Vector3D:121-this.x = a * u.x;	0
org.apache.commons.math.geometry.Vector3D:122-this.y = a * u.y;	0
org.apache.commons.math.geometry.Vector3D:123-this.z = a * u.z;	0
org.apache.commons.math.geometry.Vector3D:124-}	0
org.apache.commons.math.geometry.Vector3D:134-public Vector3D(double a1, Vector3D u1, double a2, Vector3D u2) {	0
org.apache.commons.math.geometry.Vector3D:135-this.x = a1 * u1.x + a2 * u2.x;	0
org.apache.commons.math.geometry.Vector3D:136-this.y = a1 * u1.y + a2 * u2.y;	0
org.apache.commons.math.geometry.Vector3D:137-this.z = a1 * u1.z + a2 * u2.z;	0
org.apache.commons.math.geometry.Vector3D:138-}	0
org.apache.commons.math.geometry.Vector3D:151-double a3, Vector3D u3) {	0
org.apache.commons.math.geometry.Vector3D:152-this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x;	0
org.apache.commons.math.geometry.Vector3D:153-this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y;	0
org.apache.commons.math.geometry.Vector3D:154-this.z = a1 * u1.z + a2 * u2.z + a3 * u3.z;	0
org.apache.commons.math.geometry.Vector3D:155-}	0
org.apache.commons.math.geometry.Vector3D:170-double a3, Vector3D u3, double a4, Vector3D u4) {	0
org.apache.commons.math.geometry.Vector3D:171-this.x = a1 * u1.x + a2 * u2.x + a3 * u3.x + a4 * u4.x;	0
org.apache.commons.math.geometry.Vector3D:172-this.y = a1 * u1.y + a2 * u2.y + a3 * u3.y + a4 * u4.y;	0
org.apache.commons.math.geometry.Vector3D:173-this.z = a1 * u1.z + a2 * u2.z + a3 * u3.z + a4 * u4.z;	0
org.apache.commons.math.geometry.Vector3D:174-}	0
org.apache.commons.math.geometry.Vector3D:204-return FastMath.abs(x) + FastMath.abs(y) + FastMath.abs(z);	0
org.apache.commons.math.geometry.Vector3D:211-return FastMath.sqrt (x * x + y * y + z * z);	0
org.apache.commons.math.geometry.Vector3D:218-return x * x + y * y + z * z;	0
org.apache.commons.math.geometry.Vector3D:225-return FastMath.max(FastMath.max(FastMath.abs(x), FastMath.abs(y)), FastMath.abs(z));	0
org.apache.commons.math.util.MultidimensionalCounter:222-final int[] indices = new int[dimension];	0
org.apache.commons.math.util.MultidimensionalCounter:224-int count = 0;	0
org.apache.commons.math.util.MultidimensionalCounter:225-for (int i = 0; i < last; i++) {	0
org.apache.commons.math.util.MultidimensionalCounter:226-int idx = 0;	0
org.apache.commons.math.util.MultidimensionalCounter:227-final int offset = uniCounterOffset[i];	0
org.apache.commons.math.util.MultidimensionalCounter:228-while (count <= index) {	0
org.apache.commons.math.util.MultidimensionalCounter:229-count += offset;	0
org.apache.commons.math.util.MultidimensionalCounter:230-++idx;	0
org.apache.commons.math.util.MultidimensionalCounter:232---idx;	0
org.apache.commons.math.util.MultidimensionalCounter:233-count -= offset;	0
org.apache.commons.math.util.MultidimensionalCounter:234-indices[i] = idx;	0
org.apache.commons.math.util.MultidimensionalCounter:237-int idx = 1;	1
org.apache.commons.math.util.MultidimensionalCounter:238-while (count < index) {	0
org.apache.commons.math.util.MultidimensionalCounter:239-count += idx;	0
org.apache.commons.math.util.MultidimensionalCounter:240-++idx;	0
org.apache.commons.math.util.MultidimensionalCounter:242---idx;	0
org.apache.commons.math.util.MultidimensionalCounter:243-indices[last] = idx;	0
org.apache.commons.math.util.MultidimensionalCounter:245-return indices;	0
org.apache.commons.math.util.MultidimensionalCounter:281-return totalSize;	0
org.apache.commons.math.util.MultidimensionalCounter:196-return new Iterator();	0
org.apache.commons.math.util.MultidimensionalCounter:205-return dimension;	0
org.apache.commons.math.util.MultidimensionalCounter:217-if (index < 0 ||	0
org.apache.commons.math.util.MultidimensionalCounter:272-return count + c[last];	0
org.apache.commons.math.util.MultidimensionalCounter:260-if (c.length != dimension) {	0
org.apache.commons.math.util.MultidimensionalCounter:263-int count = 0;	0
org.apache.commons.math.util.MultidimensionalCounter:264-for (int i = 0; i < dimension; i++) {	0
org.apache.commons.math.util.MultidimensionalCounter:265-final int index = c[i];	0
org.apache.commons.math.util.MultidimensionalCounter:266-if (index < 0 ||	0
org.apache.commons.math.util.MultidimensionalCounter:270-count += uniCounterOffset[i] * c[i];	0
org.apache.commons.math.util.MultidimensionalCounter:165-public MultidimensionalCounter(int ... size) {	0
org.apache.commons.math.util.MultidimensionalCounter:166-dimension = size.length;	0
org.apache.commons.math.util.MultidimensionalCounter:167-this.size = MathUtils.copyOf(size);	0
org.apache.commons.math.util.MultidimensionalCounter:169-uniCounterOffset = new int[dimension];	0
org.apache.commons.math.util.MultidimensionalCounter:171-last = dimension - 1;	0
org.apache.commons.math.util.MultidimensionalCounter:172-int tS = size[last];	0
org.apache.commons.math.util.MultidimensionalCounter:173-for (int i = 0; i < last; i++) {	0
org.apache.commons.math.util.MultidimensionalCounter:174-int count = 1;	0
org.apache.commons.math.util.MultidimensionalCounter:175-for (int j = i + 1; j < dimension; j++) {	0
org.apache.commons.math.util.MultidimensionalCounter:176-count *= size[j];	0
org.apache.commons.math.util.MultidimensionalCounter:178-uniCounterOffset[i] = count;	0
org.apache.commons.math.util.MultidimensionalCounter:179-tS *= size[i];	0
org.apache.commons.math.util.MultidimensionalCounter:181-uniCounterOffset[last] = 0;	0
org.apache.commons.math.util.MultidimensionalCounter:183-if (tS <= 0) {	0
org.apache.commons.math.util.MultidimensionalCounter:187-totalSize = tS;	0
org.apache.commons.math.util.MultidimensionalCounter:188-}	0
org.apache.commons.math.util.MultidimensionalCounter:184-throw new NotStrictlyPositiveException(tS);	0
org.apache.commons.math.util.MultidimensionalCounter:219-throw new OutOfRangeException(index, 0, totalSize);	0
org.apache.commons.math.util.MultidimensionalCounter:261-throw new DimensionMismatchException(c.length, dimension);	0
org.apache.commons.math.util.MultidimensionalCounter:268-throw new OutOfRangeException(index, 0, size[i] - 1);	0
org.apache.commons.math.util.MultidimensionalCounter:289-return MathUtils.copyOf(size);	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:69-this(random, EmptyClusterStrategy.LARGEST_VARIANCE);	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:70-}	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:134-return clusters;	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:175-int sum = 0;	1
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:176-for (int i = 0; i < pointSet.size(); i++) {	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:177-final T p = pointSet.get(i);	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:178-final Cluster<T> nearest = getNearestCluster(resultSet, p);	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:179-final double d = p.distanceFrom(nearest.getCenter());	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:180-sum += d * d;	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:181-dx2[i] = sum;	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:186-final double r = random.nextDouble() * sum;	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:187-for (int i = 0 ; i < dx2.length; i++) {	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:188-if (dx2[i] >= r) {	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:189-final T p = pointSet.remove(i);	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:190-resultSet.add(new Cluster<T>(p));	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:191-break;	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:194-}	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:78-public KMeansPlusPlusClusterer(final Random random, final EmptyClusterStrategy emptyStrategy) {	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:79-this.random= random;	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:80-this.emptyStrategy = emptyStrategy;	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:81-}	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:95-List<Cluster<T>> clusters = chooseInitialCenters(points, k, random);	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:96-assignPointsToClusters(clusters, points);	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:99-final int max = (maxIterations < 0) ? Integer.MAX_VALUE : maxIterations;	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:100-for (int count = 0; count < max; count++) {	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:146-for (final T p : points) {	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:147-Cluster<T> cluster = getNearestCluster(clusters, p);	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:148-cluster.addPoint(p);	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:149-}	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:150-}	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:164-final List<T> pointSet = new ArrayList<T>(points);	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:165-final List<Cluster<T>> resultSet = new ArrayList<Cluster<T>>();	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:168-final T firstPoint = pointSet.remove(random.nextInt(pointSet.size()));	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:169-resultSet.add(new Cluster<T>(firstPoint));	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:171-final double[] dx2 = new double[pointSet.size()];	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:172-while (resultSet.size() < k) {	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:196-return resultSet;	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:321-double minDistance = Double.MAX_VALUE;	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:322-Cluster<T> minCluster = null;	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:323-for (final Cluster<T> c : clusters) {	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:324-final double distance = point.distanceFrom(c.getCenter());	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:325-if (distance < minDistance) {	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:326-minDistance = distance;	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:327-minCluster = c;	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:329-}	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:330-return minCluster;	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:101-boolean clusteringChanged = false;	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:102-List<Cluster<T>> newClusters = new ArrayList<Cluster<T>>();	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:103-for (final Cluster<T> cluster : clusters) {	0
org.apache.commons.math.stat.clustering.KMeansPlusPlusClusterer:105-if (cluster.getPoints().isEmpty()) {	0
org.apache.commons.math.optimization.fitting.GaussianFitter:121-return fit(new Gaussian.Parametric(), guess);	1
org.apache.commons.math.optimization.fitting.GaussianFitter:68-super(optimizer);	0
org.apache.commons.math.optimization.fitting.GaussianFitter:69-}	0
org.apache.commons.math.optimization.fitting.GaussianFitter:120-final double[] guess = (new ParameterGuesser(getObservations())).guess();	0
org.apache.commons.math.optimization.fitting.GaussianFitter:84-final ParametricUnivariateRealFunction f = new ParametricUnivariateRealFunction() {	0
org.apache.commons.math.optimization.fitting.GaussianFitter:110-return fit(f, initialGuess);	0
org.apache.commons.math.util.FastMath:3446-return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);	0
org.apache.commons.math.util.FastMath:3482-return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);	1
org.apache.commons.math.util.FastMath:35-private static final double EXP_INT_TABLE_A[] = new double[1500];	0
org.apache.commons.math.util.FastMath:40-private static final double EXP_INT_TABLE_B[] = new double[1500];	0
org.apache.commons.math.util.FastMath:45-private static final double EXP_FRAC_TABLE_A[] = new double[1025];	0
org.apache.commons.math.util.FastMath:50-private static final double EXP_FRAC_TABLE_B[] = new double[1025];	0
org.apache.commons.math.util.FastMath:53-private static final double FACT[] = new double[20];	0
org.apache.commons.math.util.FastMath:56-private static final double LN_MANT[][] = new double[1024][];	0
org.apache.commons.math.util.FastMath:65-private static final double LN_SPLIT_COEF[][] = {	0
org.apache.commons.math.util.FastMath:85-private static final double LN_QUICK_COEF[][] = {	0
org.apache.commons.math.util.FastMath:98-private static final double LN_HI_PREC_COEF[][] = {	0
org.apache.commons.math.util.FastMath:108-private static final double SINE_TABLE_A[] = new double[14];	0
org.apache.commons.math.util.FastMath:111-private static final double SINE_TABLE_B[] = new double[14];	0
org.apache.commons.math.util.FastMath:114-private static final double COSINE_TABLE_A[] = new double[14];	0
org.apache.commons.math.util.FastMath:117-private static final double COSINE_TABLE_B[] = new double[14];	0
org.apache.commons.math.util.FastMath:120-private static final double TANGENT_TABLE_A[] = new double[14];	0
org.apache.commons.math.util.FastMath:123-private static final double TANGENT_TABLE_B[] = new double[14];	0
org.apache.commons.math.util.FastMath:126-private static long RECIP_2PI[] = new long[] {	0
org.apache.commons.math.util.FastMath:147-private static long PI_O_4_BITS[] = new long[] {	0
org.apache.commons.math.util.FastMath:155-private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};	0
org.apache.commons.math.util.FastMath:158-private static final double CBRTTWO[] = { 0.6299605249474366,	0
org.apache.commons.math.util.FastMath:169-FACT[0] = 1.0;	0
org.apache.commons.math.util.FastMath:170-for (i = 1; i < 20; i++) {	0
org.apache.commons.math.util.FastMath:171-FACT[i] = FACT[i-1] * i;	0
org.apache.commons.math.util.FastMath:174-double tmp[] = new double[2];	0
org.apache.commons.math.util.FastMath:175-double recip[] = new double[2];	0
org.apache.commons.math.util.FastMath:178-for (i = 0; i < 750; i++) {	0
org.apache.commons.math.util.FastMath:179-expint(i, tmp);	0
org.apache.commons.math.util.FastMath:180-EXP_INT_TABLE_A[i+750] = tmp[0];	0
org.apache.commons.math.util.FastMath:181-EXP_INT_TABLE_B[i+750] = tmp[1];	0
org.apache.commons.math.util.FastMath:183-if (i != 0) {	0
org.apache.commons.math.util.FastMath:185-splitReciprocal(tmp, recip);	0
org.apache.commons.math.util.FastMath:186-EXP_INT_TABLE_A[750-i] = recip[0];	0
org.apache.commons.math.util.FastMath:187-EXP_INT_TABLE_B[750-i] = recip[1];	0
org.apache.commons.math.util.FastMath:192-for (i = 0; i < 1025; i++) {	0
org.apache.commons.math.util.FastMath:193-slowexp(i/1024.0, tmp);	0
org.apache.commons.math.util.FastMath:194-EXP_FRAC_TABLE_A[i] = tmp[0];	0
org.apache.commons.math.util.FastMath:195-EXP_FRAC_TABLE_B[i] = tmp[1];	0
org.apache.commons.math.util.FastMath:199-for (i = 0; i < 1024; i++) {	0
org.apache.commons.math.util.FastMath:200-double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );	0
org.apache.commons.math.util.FastMath:201-LN_MANT[i] = slowLog(d);	0
org.apache.commons.math.util.FastMath:205-buildSinCosTables();	0
org.apache.commons.math.util.FastMath:206-}	0
org.apache.commons.math.util.FastMath:911-final double xs[] = new double[2];	0
org.apache.commons.math.util.FastMath:912-final double ys[] = new double[2];	0
org.apache.commons.math.util.FastMath:913-final double facts[] = new double[2];	0
org.apache.commons.math.util.FastMath:914-final double as[] = new double[2];	0
org.apache.commons.math.util.FastMath:915-split(x, xs);	0
org.apache.commons.math.util.FastMath:916-ys[0] = ys[1] = 0.0;	0
org.apache.commons.math.util.FastMath:918-for (int i = 19; i >= 0; i--) {	0
org.apache.commons.math.distribution.NormalDistributionImpl:125-final double dev = x - mean;	0
org.apache.commons.math.distribution.NormalDistributionImpl:127-return 0.5 * (1.0 + Erf.erf((dev) /	0
org.apache.commons.math.distribution.NormalDistributionImpl:60-this(mean, sd, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);	0
org.apache.commons.math.distribution.NormalDistributionImpl:61-}	0
org.apache.commons.math.distribution.NormalDistributionImpl:73-public NormalDistributionImpl(double mean, double sd, double inverseCumAccuracy) {	0
org.apache.commons.math.distribution.NormalDistributionImpl:74-if (sd <= 0) {	0
org.apache.commons.math.distribution.NormalDistributionImpl:78-this.mean = mean;	0
org.apache.commons.math.distribution.NormalDistributionImpl:79-standardDeviation = sd;	0
org.apache.commons.math.distribution.NormalDistributionImpl:80-solverAbsoluteAccuracy = inverseCumAccuracy;	0
org.apache.commons.math.distribution.NormalDistributionImpl:81-}	0
org.apache.commons.math.distribution.NormalDistributionImpl:45-private static final double SQRT2PI = FastMath.sqrt(2 * FastMath.PI);	0
org.apache.commons.math.distribution.NormalDistributionImpl:75-throw new NotStrictlyPositiveException(LocalizedFormats.STANDARD_DEVIATION, sd);	0
org.apache.commons.math.distribution.NormalDistributionImpl:88-this(0, 1);	0
org.apache.commons.math.distribution.NormalDistributionImpl:89-}	0
org.apache.commons.math.distribution.NormalDistributionImpl:95-return mean;	0
org.apache.commons.math.distribution.NormalDistributionImpl:102-return standardDeviation;	0
org.apache.commons.math.distribution.NormalDistributionImpl:110-final double x0 = x - mean;	0
org.apache.commons.math.distribution.NormalDistributionImpl:111-final double x1 = x0 / standardDeviation;	0
org.apache.commons.math.distribution.NormalDistributionImpl:112-return FastMath.exp(-0.5 * x1 * x1) / (standardDeviation * SQRT2PI);	0
org.apache.commons.math.distribution.NormalDistributionImpl:129-} catch (MaxIterationsExceededException ex) {	0
org.apache.commons.math.distribution.NormalDistributionImpl:130-if (x < (mean - 20 * standardDeviation)) { // JDK 1.5 blows at 38	0
org.apache.commons.math.distribution.NormalDistributionImpl:131-return 0;	0
org.apache.commons.math.distribution.NormalDistributionImpl:132-} else if (x > (mean + 20 * standardDeviation)) {	0
org.apache.commons.math.distribution.NormalDistributionImpl:133-return 1;	0
org.apache.commons.math.distribution.NormalDistributionImpl:135-throw ex;	0
org.apache.commons.math.distribution.NormalDistributionImpl:149-return solverAbsoluteAccuracy;	0
org.apache.commons.math.distribution.NormalDistributionImpl:168-if (p == 0) {	0
org.apache.commons.math.distribution.NormalDistributionImpl:169-return Double.NEGATIVE_INFINITY;	0
org.apache.commons.math.distribution.NormalDistributionImpl:171-if (p == 1) {	0
org.apache.commons.math.distribution.NormalDistributionImpl:172-return Double.POSITIVE_INFINITY;	0
org.apache.commons.math.distribution.NormalDistributionImpl:174-return super.inverseCumulativeProbability(p);	0
org.apache.commons.math.distribution.NormalDistributionImpl:186-return randomData.nextGaussian(mean, standardDeviation);	0
org.apache.commons.math.distribution.NormalDistributionImpl:201-if (p < 0.5) {	0
org.apache.commons.math.distribution.NormalDistributionImpl:202-ret = -Double.MAX_VALUE;	0
org.apache.commons.math.distribution.NormalDistributionImpl:204-ret = mean;	0
org.apache.commons.math.distribution.NormalDistributionImpl:207-return ret;	0
org.apache.commons.math.distribution.NormalDistributionImpl:222-if (p < 0.5) {	0
org.apache.commons.math.distribution.NormalDistributionImpl:223-ret = mean;	0
org.apache.commons.math.distribution.NormalDistributionImpl:225-ret = Double.MAX_VALUE;	0
org.apache.commons.math.distribution.NormalDistributionImpl:228-return ret;	0
org.apache.commons.math.distribution.NormalDistributionImpl:243-if (p < 0.5) {	0
org.apache.commons.math.distribution.NormalDistributionImpl:244-ret = mean - standardDeviation;	0
org.apache.commons.math.distribution.NormalDistributionImpl:245-} else if (p > 0.5) {	0
org.apache.commons.math.distribution.NormalDistributionImpl:246-ret = mean + standardDeviation;	0
org.apache.commons.math.distribution.NormalDistributionImpl:248-ret = mean;	0
org.apache.commons.math.distribution.NormalDistributionImpl:251-return ret;	0
org.apache.commons.math.distribution.PoissonDistributionImpl:94-throw MathRuntimeException.createIllegalArgumentException(LocalizedFormats.NOT_POSITIVE_POISSON_MEAN, p);	1
org.apache.commons.math.distribution.PoissonDistributionImpl:80-this(p, DEFAULT_EPSILON, DEFAULT_MAX_ITERATIONS);	0
org.apache.commons.math.distribution.PoissonDistributionImpl:81-}	0
org.apache.commons.math.distribution.PoissonDistributionImpl:92-public PoissonDistributionImpl(double p, double epsilon, int maxIterations) {	0
org.apache.commons.math.distribution.PoissonDistributionImpl:65-private int maxIterations = DEFAULT_MAX_ITERATIONS;	0
org.apache.commons.math.distribution.PoissonDistributionImpl:70-private double epsilon = DEFAULT_EPSILON;	0
org.apache.commons.math.distribution.PoissonDistributionImpl:93-if (p <= 0) {	0
org.apache.commons.math.distribution.PoissonDistributionImpl:96-mean = p;	0
org.apache.commons.math.distribution.PoissonDistributionImpl:97-normal = new NormalDistributionImpl(p, FastMath.sqrt(p));	0
org.apache.commons.math.distribution.PoissonDistributionImpl:98-this.epsilon = epsilon;	0
org.apache.commons.math.distribution.PoissonDistributionImpl:99-this.maxIterations = maxIterations;	0
org.apache.commons.math.distribution.PoissonDistributionImpl:100-}	0
org.apache.commons.math.distribution.PoissonDistributionImpl:110-this(p, epsilon, DEFAULT_MAX_ITERATIONS);	0
org.apache.commons.math.distribution.PoissonDistributionImpl:111-}	0
org.apache.commons.math.distribution.PoissonDistributionImpl:121-this(p, DEFAULT_EPSILON, maxIterations);	0
org.apache.commons.math.distribution.PoissonDistributionImpl:122-}	0
org.apache.commons.math.distribution.PoissonDistributionImpl:130-return mean;	0
org.apache.commons.math.distribution.PoissonDistributionImpl:142-if (x < 0 || x == Integer.MAX_VALUE) {	0
org.apache.commons.math.distribution.PoissonDistributionImpl:143-ret = 0.0;	0
org.apache.commons.math.distribution.PoissonDistributionImpl:144-} else if (x == 0) {	0
org.apache.commons.math.distribution.PoissonDistributionImpl:145-ret = FastMath.exp(-mean);	0
org.apache.commons.math.distribution.PoissonDistributionImpl:147-ret = FastMath.exp(-SaddlePointExpansion.getStirlingError(x) -	0
org.apache.commons.math.distribution.PoissonDistributionImpl:151-return ret;	0
org.apache.commons.math.distribution.PoissonDistributionImpl:165-if (x < 0) {	0
org.apache.commons.math.distribution.PoissonDistributionImpl:166-return 0;	0
org.apache.commons.math.distribution.PoissonDistributionImpl:168-if (x == Integer.MAX_VALUE) {	0
org.apache.commons.math.distribution.PoissonDistributionImpl:169-return 1;	0
org.apache.commons.math.distribution.PoissonDistributionImpl:171-return Gamma.regularizedGammaQ((double) x + 1, mean, epsilon, maxIterations);	0
org.apache.commons.math.distribution.PoissonDistributionImpl:191-return normal.cumulativeProbability(x + 0.5);	0
org.apache.commons.math.distribution.PoissonDistributionImpl:213-return (int) FastMath.min(randomData.nextPoisson(mean), Integer.MAX_VALUE);	0
org.apache.commons.math.distribution.PoissonDistributionImpl:226-return 0;	0
org.apache.commons.math.distribution.PoissonDistributionImpl:239-return Integer.MAX_VALUE;	0
org.apache.commons.math.util.MathUtils:417-return (Double.isNaN(x) && Double.isNaN(y)) || x == y;	1
org.apache.commons.math.util.MathUtils:523-if ((x == null) || (y == null)) {	0
org.apache.commons.math.util.MathUtils:524-return !((x == null) ^ (y == null));	0
org.apache.commons.math.util.MathUtils:526-if (x.length != y.length) {	0
org.apache.commons.math.util.MathUtils:527-return false;	0
org.apache.commons.math.util.MathUtils:529-for (int i = 0; i < x.length; ++i) {	0
org.apache.commons.math.util.MathUtils:530-if (!equals(x[i], y[i])) {	0
org.apache.commons.math.util.MathUtils:534-return true;	0
org.apache.commons.math.util.MathUtils:33-public final class MathUtils {	0
org.apache.commons.math.util.MathUtils:75-private static final long[] FACTORIALS = new long[] {	0
org.apache.commons.math.util.MathUtils:88-super();	0
org.apache.commons.math.util.MathUtils:89-}	0
org.apache.commons.math.util.MathUtils:102-long s = (long)x + (long)y;	0
org.apache.commons.math.util.MathUtils:103-if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {	0
org.apache.commons.math.util.MathUtils:104-throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);	0
org.apache.commons.math.util.MathUtils:106-return (int)s;	0
org.apache.commons.math.util.MathUtils:120-return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);	0
org.apache.commons.math.util.MathUtils:136-if (a > b) {	0
org.apache.commons.math.util.MathUtils:138-ret = addAndCheck(b, a, pattern);	0
org.apache.commons.math.util.MathUtils:142-if (a < 0) {	0
org.apache.commons.math.util.MathUtils:143-if (b < 0) {	0
org.apache.commons.math.util.MathUtils:145-if (Long.MIN_VALUE - b <= a) {	0
org.apache.commons.math.util.MathUtils:146-ret = a + b;	0
org.apache.commons.math.util.MathUtils:148-throw MathRuntimeException.createArithmeticException(pattern, a, b);	0
org.apache.commons.math.util.MathUtils:152-ret = a + b;	0
org.apache.commons.math.util.MathUtils:159-if (a <= Long.MAX_VALUE - b) {	0
org.apache.commons.math.util.MathUtils:160-ret = a + b;	0
org.apache.commons.math.util.MathUtils:162-throw MathRuntimeException.createArithmeticException(pattern, a, b);	0
org.apache.commons.math.util.MathUtils:166-return ret;	0
org.apache.commons.math.util.MathUtils:195-checkBinomial(n, k);	0
org.apache.commons.math.util.MathUtils:196-if ((n == k) || (k == 0)) {	0
org.apache.commons.math.util.MathUtils:197-return 1;	0
org.apache.commons.math.util.MathUtils:199-if ((k == 1) || (k == n - 1)) {	0
org.apache.commons.math.util.MathUtils:200-return n;	0
org.apache.commons.math.util.MathUtils:203-if (k > n / 2)	0
org.apache.commons.math.util.MathUtils:204-return binomialCoefficient(n, n - k);	0
org.apache.commons.math.util.MathUtils:211-long result = 1;	0
org.apache.commons.math.util.MathUtils:212-if (n <= 61) {	0
org.apache.commons.math.util.MathUtils:214-int i = n - k + 1;	0
org.apache.commons.math.util.MathUtils:215-for (int j = 1; j <= k; j++) {	0
org.apache.commons.math.util.MathUtils:216-result = result * i / j;	0
org.apache.commons.math.util.MathUtils:217-i++;	0
org.apache.commons.math.util.MathUtils:219-} else if (n <= 66) {	0
org.apache.commons.math.util.MathUtils:222-int i = n - k + 1;	0
org.apache.commons.math.util.MathUtils:223-for (int j = 1; j <= k; j++) {	0
org.apache.commons.math.util.MathUtils:230-final long d = gcd(i, j);	0
org.apache.commons.math.util.MathUtils:231-result = (result / (j / d)) * (i / d);	0
org.apache.commons.math.util.MathUtils:232-i++;	0
org.apache.commons.math.util.MathUtils:234-} else {	0
org.apache.commons.math.util.MathUtils:238-int i = n - k + 1;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:530-for (int j = 0; j < solvedCols; ++j) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:531-int pj = permutation[j];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:532-work1[pj] *= diag[pj] / dxNorm;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:534-sum2 = 0;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:535-for (int j = 0; j < solvedCols; ++j) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:536-int pj = permutation[j];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:537-double sum = 0;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:538-for (int i = 0; i < j; ++i) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:539-sum += jacobian[i][pj] * work1[permutation[i]];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:541-double s = (work1[pj] - sum) / diagR[pj];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:542-work1[pj] = s;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:543-sum2 += s * s;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:545-parl = fp / (delta * sum2);	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:402-tmp = 0.1;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:426-cost = previousCost;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:427-for (int j = 0; j < solvedCols; ++j) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:428-int pj = permutation[j];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:429-point[pj] = oldX[pj];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:431-tmpVec= residuals;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:432-residuals = oldRes;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:433-oldRes= tmpVec;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:528-double parl = 0;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:529-if (rank == solvedCols) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:549-sum2 = 0;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:550-for (int j = 0; j < solvedCols; ++j) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:551-int pj = permutation[j];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:552-double sum = 0;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:553-for (int i = 0; i <= j; ++i) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:554-sum += jacobian[i][pj] * qy[i];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:556-sum /= diag[pj];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:557-sum2 += sum * sum;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:559-double gNorm = Math.sqrt(sum2);	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:560-double paru = gNorm / delta;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:561-if (paru == 0) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:568-lmPar = Math.min(paru, Math.max(lmPar, parl));	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:569-if (lmPar == 0) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:573-for (int countdown = 10; countdown >= 0; --countdown) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:576-if (lmPar == 0) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:579-double sPar = Math.sqrt(lmPar);	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:580-for (int j = 0; j < solvedCols; ++j) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:581-int pj = permutation[j];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:582-work1[pj] = sPar * diag[pj];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:584-determineLMDirection(qy, work1, work2, work3);	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:586-dxNorm = 0;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:587-for (int j = 0; j < solvedCols; ++j) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:588-int pj = permutation[j];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:589-double s = diag[pj] * lmDir[pj];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:590-work3[pj] = s;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:591-dxNorm += s * s;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:593-dxNorm = Math.sqrt(dxNorm);	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:158-d = p / q;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:159-u = x + d;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:162-if (u - a < tol2	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:175-e = a - x;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:43-public BrentOptimizer() {	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:44-setMaxEvaluations(Integer.MAX_VALUE);	1
org.apache.commons.math.optimization.univariate.BrentOptimizer:45-setMaximalIterationCount(100);	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:46-setAbsoluteAccuracy(1E-10);	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:47-setRelativeAccuracy(1.0e-14);	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:48-}	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:38-private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:60-clearResult();	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:61-return localMin(getGoalType() == GoalType.MINIMIZE,	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:99-if (eps <= 0) {	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:102-if (t <= 0) {	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:106-if (lo < hi) {	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:107-a = lo;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:108-b = hi;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:114-double x = mid;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:115-double v = x;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:116-double w = x;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:117-double d = 0;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:118-double e = 0;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:119-double fx = computeObjectiveValue(f, x);	1
org.apache.commons.math.optimization.univariate.BrentOptimizer:120-if (goalType == GoalType.MAXIMIZE) {	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:123-double fv = fx;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:124-double fw = fx;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:126-int count = 0;	1
org.apache.commons.math.optimization.univariate.BrentOptimizer:127-while (count < maximalIterationCount) {	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:128-double m = 0.5 * (a + b);	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:129-final double tol1 = eps * Math.abs(x) + t;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:130-final double tol2 = 2 * tol1;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:133-if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:134-double p = 0;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:135-double q = 0;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:136-double r = 0;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:137-double u = 0;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:139-if (Math.abs(e) > tol1) { // Fit parabola.	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:140-r = (x - w) * (fx - fv);	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:141-q = (x - v) * (fx - fw);	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:142-p = (x - v) * q - (x - w) * r;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:143-q = 2 * (q - r);	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:145-if (q > 0) {	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:146-p = -p;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:148-q = -q;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:151-r = e;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:152-e = d;	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:154-if (p > q * (a - x)	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:172-if (x < m) {	0
org.apache.commons.math.optimization.univariate.BrentOptimizer:173-e = b - x;	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:97-return optimizer.getResult();	1
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:102-return optimizer.getAbsoluteAccuracy();	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:127-return optimizer.getRelativeAccuracy();	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:147-optimizer.setAbsoluteAccuracy(accuracy);	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:148-}	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:162-optimizer.setRelativeAccuracy(accuracy);	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:163-}	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:194-throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:220-throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:280-int i = j - 1;	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:281-double mIX = optima[i];	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:282-double mIY = optimaValues[i];	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:283-while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:284-optima[i + 1] = mIX;	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:285-optimaValues[i + 1] = mIY;	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:286-if (i-- != 0) {	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:287-mIX = optima[i];	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:288-mIY = optimaValues[i];	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:294-optima[i + 1] = currX;	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:295-optimaValues[i + 1] = currY;	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:296-currX = optima[j];	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:297-currY = optimaValues[j];	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:80-final RandomGenerator generator) {	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:81-this.optimizer= optimizer;	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:82-this.totalIterations= 0;	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:83-this.starts = starts;	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:84-this.generator= generator;	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:85-this.optima = null;	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:86-setMaximalIterationCount(Integer.MAX_VALUE);	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:87-setMaxEvaluations(Integer.MAX_VALUE);	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:88-}	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:152-this.maxIterations = count;	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:153-}	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:157-this.maxEvaluations = maxEvaluations;	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:158-}	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:193-if (optima == null) {	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:219-if (optimaValues == null) {	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:231-optima = new double[starts];	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:232-optimaValues = new double[starts];	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:233-totalIterations= 0;	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:234-totalEvaluations = 0;	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:237-for (int i = 0; i < starts; ++i) {	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:240-optimizer.setMaximalIterationCount(maxIterations - totalIterations);	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:241-optimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:242-final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:243-final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:244-optima[i] = optimizer.optimize(f, goalType,	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:247-optimaValues[i] = optimizer.getFunctionValue();	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:254-}	0
org.apache.commons.math.optimization.MultiStartUnivariateRealOptimizer:256-totalIterations+= optimizer.getIterationCount();	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:510-for (int j = 0; j < solvedCols; ++j) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:511-int pj = permutation[j];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:512-work1[pj] *= diag[pj] / dxNorm;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:514-sum2 = 0;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:515-for (int j = 0; j < solvedCols; ++j) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:516-int pj = permutation[j];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:517-double sum = 0;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:518-for (int i = 0; i < j; ++i) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:519-sum += jacobian[i][pj] * work1[permutation[i]];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:521-double s = (work1[pj] - sum) / diagR[pj];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:522-work1[pj] = s;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:523-sum2 += s * s;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:525-parl = fp / (delta * sum2);	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:381-tmp = 0.1;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:402-cost = previousCost;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:403-for (int j = 0; j < solvedCols; ++j) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:404-int pj = permutation[j];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:405-point[pj] = oldX[pj];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:407-tmpVec= residuals;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:408-residuals = oldRes;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:409-oldRes= tmpVec;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:508-double parl = 0;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:509-if (rank == solvedCols) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:529-sum2 = 0;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:530-for (int j = 0; j < solvedCols; ++j) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:531-int pj = permutation[j];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:532-double sum = 0;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:533-for (int i = 0; i <= j; ++i) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:534-sum += jacobian[i][pj] * qy[i];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:536-sum /= diag[pj];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:537-sum2 += sum * sum;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:539-double gNorm = Math.sqrt(sum2);	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:540-double paru = gNorm / delta;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:541-if (paru == 0) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:548-lmPar = Math.min(paru, Math.max(lmPar, parl));	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:549-if (lmPar == 0) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:553-for (int countdown = 10; countdown >= 0; --countdown) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:556-if (lmPar == 0) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:559-double sPar = Math.sqrt(lmPar);	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:560-for (int j = 0; j < solvedCols; ++j) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:561-int pj = permutation[j];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:562-work1[pj] = sPar * diag[pj];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:564-determineLMDirection(qy, work1, work2, work3);	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:566-dxNorm = 0;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:567-for (int j = 0; j < solvedCols; ++j) {	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:568-int pj = permutation[j];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:569-double s = diag[pj] * lmDir[pj];	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:570-work3[pj] = s;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:571-dxNorm += s * s;	0
org.apache.commons.math.optimization.general.LevenbergMarquardtOptimizer:573-dxNorm = Math.sqrt(dxNorm);	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:68-this(new BlockRealMatrix(data));	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:69-}	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:161-TDistribution tDistribution = new TDistributionImpl(nObs - 2);	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:162-int nVars = correlationMatrix.getColumnDimension();	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:163-double[][] out = new double[nVars][nVars];	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:164-for (int i = 0; i < nVars; i++) {	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:165-for (int j = 0; j < nVars; j++) {	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:166-if (i == j) {	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:167-out[i][j] = 0d;	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:169-double r = correlationMatrix.getEntry(i, j);	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:170-double t = Math.abs(r * Math.sqrt((nObs - 2)/(1 - r * r)));	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:171-out[i][j] = 2 * (1 - tDistribution.cumulativeProbability(t));	1
org.apache.commons.math.stat.correlation.PearsonsCorrelation:175-return new BlockRealMatrix(out);	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:79-nObs = matrix.getRowDimension();	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:80-correlationMatrix = computeCorrelationMatrix(matrix);	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:81-}	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:187-int nVars = matrix.getColumnDimension();	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:188-RealMatrix outMatrix = new BlockRealMatrix(nVars, nVars);	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:189-for (int i = 0; i < nVars; i++) {	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:190-for (int j = 0; j < i; j++) {	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:191-double corr = correlation(matrix.getColumn(i), matrix.getColumn(j));	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:192-outMatrix.setEntry(i, j, corr);	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:193-outMatrix.setEntry(j, i, corr);	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:195-outMatrix.setEntry(i, i, 1d);	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:197-return outMatrix;	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:280-}	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:77-public PearsonsCorrelation(RealMatrix matrix) {	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:78-checkSufficientData(matrix);	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:227-for(int i=0; i<xArray.length; i++) {	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:228-regression.addData(xArray[i], yArray[i]);	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:230-return regression.getR();	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:273-int nRows = matrix.getRowDimension();	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:274-int nCols = matrix.getColumnDimension();	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:275-if (nRows < 2 || nCols < 2) {	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:225-SimpleRegression regression = new SimpleRegression();	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:226-if(xArray.length == yArray.length && xArray.length > 1) {	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:54-super();	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:55-correlationMatrix = null;	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:56-nObs = 0;	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:57-}	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:91-public PearsonsCorrelation(Covariance covariance) {	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:92-RealMatrix covarianceMatrix = covariance.getCovarianceMatrix();	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:93-if (covarianceMatrix == null) {	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:94-throw MathRuntimeException.createIllegalArgumentException("covariance matrix is null");	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:96-nObs = covariance.getN();	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:97-correlationMatrix = covarianceToCorrelation(covarianceMatrix);	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:98-}	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:108-public PearsonsCorrelation(RealMatrix covarianceMatrix, int numberOfObservations) {	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:109-nObs = numberOfObservations;	0
org.apache.commons.math.stat.correlation.PearsonsCorrelation:110-correlationMatrix = covarianceToCorrelation(covarianceMatrix);	0
org.apache.commons.math.analysis.solvers.BisectionSolver:72-return solve(min, max);	1
org.apache.commons.math.analysis.solvers.BisectionSolver:66-return solve(f, min, max);	0
org.apache.commons.math.analysis.solvers.BisectionSolver:79-clearResult();	0
org.apache.commons.math.analysis.solvers.BisectionSolver:80-verifyInterval(min,max);	0
org.apache.commons.math.analysis.solvers.BisectionSolver:85-int i = 0;	0
org.apache.commons.math.analysis.solvers.BisectionSolver:86-while (i < maximalIterationCount) {	0
org.apache.commons.math.analysis.solvers.BisectionSolver:87-m = UnivariateRealSolverUtils.midpoint(min, max);	0
org.apache.commons.math.analysis.solvers.BisectionSolver:88-fmin = f.value(min);	0
org.apache.commons.math.analysis.solvers.BisectionSolver:52-super(100, 1E-6);	0
org.apache.commons.math.analysis.solvers.BisectionSolver:53-}	0
org.apache.commons.math.analysis.solvers.BisectionSolver:44-super(f, 100, 1E-6);	0
org.apache.commons.math.analysis.solvers.BisectionSolver:45-}	0
org.apache.commons.math.analysis.solvers.BisectionSolver:59-return solve(f, min, max);	0
org.apache.commons.math.analysis.solvers.BisectionSolver:89-fm = f.value(m);	0
org.apache.commons.math.analysis.solvers.BisectionSolver:91-if (fm * fmin > 0.0) {	0
org.apache.commons.math.analysis.solvers.BisectionSolver:93-min = m;	0
org.apache.commons.math.analysis.solvers.BisectionSolver:96-max = m;	0
org.apache.commons.math.analysis.solvers.BisectionSolver:99-if (Math.abs(max - min) <= absoluteAccuracy) {	0
org.apache.commons.math.analysis.solvers.BisectionSolver:100-m = UnivariateRealSolverUtils.midpoint(min, max);	0
org.apache.commons.math.analysis.solvers.BisectionSolver:101-setResult(m, i);	0
org.apache.commons.math.analysis.solvers.BisectionSolver:102-return m;	0
org.apache.commons.math.analysis.solvers.BisectionSolver:104-++i;	0
org.apache.commons.math.analysis.solvers.BisectionSolver:107-throw new MaxIterationsExceededException(maximalIterationCount);	0
org.apache.commons.math.analysis.solvers.BrentSolver:115-setResult(yMin, 0);	1
org.apache.commons.math.analysis.solvers.BrentSolver:116-return result;	0
org.apache.commons.math.analysis.solvers.BrentSolver:184-setResult(max, 0);	0
org.apache.commons.math.analysis.solvers.BrentSolver:185-ret = max;	0
org.apache.commons.math.analysis.solvers.BrentSolver:180-if (Math.abs(yMin) <= functionValueAccuracy) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:183-} else if (Math.abs(yMax) <= functionValueAccuracy) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:102-clearResult();	0
org.apache.commons.math.analysis.solvers.BrentSolver:103-verifySequence(min, initial, max);	0
org.apache.commons.math.analysis.solvers.BrentSolver:106-double yInitial = f.value(initial);	0
org.apache.commons.math.analysis.solvers.BrentSolver:107-if (Math.abs(yInitial) <= functionValueAccuracy) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:113-double yMin = f.value(min);	0
org.apache.commons.math.analysis.solvers.BrentSolver:114-if (Math.abs(yMin) <= functionValueAccuracy) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:247-setResult(x1, i);	0
org.apache.commons.math.analysis.solvers.BrentSolver:248-return result;	0
org.apache.commons.math.analysis.solvers.BrentSolver:61-super(100, 1E-6);	0
org.apache.commons.math.analysis.solvers.BrentSolver:62-}	0
org.apache.commons.math.analysis.solvers.BrentSolver:191-} else if (sign < 0){	0
org.apache.commons.math.analysis.solvers.BrentSolver:193-ret = solve(f, min, yMin, max, yMax, min, yMin);	0
org.apache.commons.math.analysis.solvers.BrentSolver:203-return ret;	0
org.apache.commons.math.analysis.solvers.BrentSolver:229-double delta = x1 - x0;	0
org.apache.commons.math.analysis.solvers.BrentSolver:230-double oldDelta = delta;	0
org.apache.commons.math.analysis.solvers.BrentSolver:232-int i = 0;	0
org.apache.commons.math.analysis.solvers.BrentSolver:233-while (i < maximalIterationCount) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:234-if (Math.abs(y2) < Math.abs(y1)) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:236-x0 = x1;	0
org.apache.commons.math.analysis.solvers.BrentSolver:237-x1 = x2;	0
org.apache.commons.math.analysis.solvers.BrentSolver:238-x2 = x0;	0
org.apache.commons.math.analysis.solvers.BrentSolver:239-y0 = y1;	0
org.apache.commons.math.analysis.solvers.BrentSolver:240-y1 = y2;	0
org.apache.commons.math.analysis.solvers.BrentSolver:241-y2 = y0;	0
org.apache.commons.math.analysis.solvers.BrentSolver:243-if (Math.abs(y1) <= functionValueAccuracy) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:168-clearResult();	0
org.apache.commons.math.analysis.solvers.BrentSolver:169-verifyInterval(min, max);	0
org.apache.commons.math.analysis.solvers.BrentSolver:171-double ret = Double.NaN;	0
org.apache.commons.math.analysis.solvers.BrentSolver:173-double yMin = f.value(min);	0
org.apache.commons.math.analysis.solvers.BrentSolver:174-double yMax = f.value(max);	0
org.apache.commons.math.analysis.solvers.BrentSolver:177-double sign = yMin * yMax;	0
org.apache.commons.math.analysis.solvers.BrentSolver:178-if (sign > 0) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:54-super(f, 100, 1E-6);	0
org.apache.commons.math.analysis.solvers.BrentSolver:55-}	0
org.apache.commons.math.analysis.solvers.BrentSolver:68-return solve(f, min, max);	0
org.apache.commons.math.analysis.solvers.BrentSolver:75-return solve(f, min, max, initial);	0
org.apache.commons.math.analysis.solvers.BrentSolver:108-setResult(initial, 0);	0
org.apache.commons.math.analysis.solvers.BrentSolver:109-return result;	0
org.apache.commons.math.analysis.solvers.BrentSolver:120-if (yInitial * yMin < 0) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:121-return solve(f, min, yMin, initial, yInitial, min, yMin);	0
org.apache.commons.math.analysis.solvers.BrentSolver:125-double yMax = f.value(max);	0
org.apache.commons.math.analysis.solvers.BrentSolver:126-if (Math.abs(yMax) <= functionValueAccuracy) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:127-setResult(yMax, 0);	1
org.apache.commons.math.analysis.solvers.BrentSolver:128-return result;	0
org.apache.commons.math.analysis.solvers.BrentSolver:138-return solve(f, min, yMin, max, yMax, initial, yInitial);	0
org.apache.commons.math.analysis.solvers.BrentSolver:184-throw MathRuntimeException.createIllegalArgumentException(	0
org.apache.commons.math.analysis.solvers.BrentSolver:102-clearResult();	0
org.apache.commons.math.analysis.solvers.BrentSolver:103-verifySequence(min, initial, max);	0
org.apache.commons.math.analysis.solvers.BrentSolver:106-double yInitial = f.value(initial);	0
org.apache.commons.math.analysis.solvers.BrentSolver:107-if (Math.abs(yInitial) <= functionValueAccuracy) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:113-double yMin = f.value(min);	0
org.apache.commons.math.analysis.solvers.BrentSolver:114-if (Math.abs(yMin) <= functionValueAccuracy) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:120-if (yInitial * yMin < 0) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:125-double yMax = f.value(max);	0
org.apache.commons.math.analysis.solvers.BrentSolver:126-if (Math.abs(yMax) <= functionValueAccuracy) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:132-if (yInitial * yMax < 0) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:176-if (Math.abs(yMin) <= functionValueAccuracy) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:179-} else if (Math.abs(yMax) <= functionValueAccuracy) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:286-delta = 0.5 * dx;	0
org.apache.commons.math.analysis.solvers.BrentSolver:287-oldDelta = delta;	0
org.apache.commons.math.analysis.solvers.BrentSolver:300-x1 = x1 + 0.5 * tolerance;	0
org.apache.commons.math.analysis.solvers.BrentSolver:61-super(100, 1E-6);	0
org.apache.commons.math.analysis.solvers.BrentSolver:62-}	0
org.apache.commons.math.analysis.solvers.BrentSolver:246-double dx = x2 - x1;	0
org.apache.commons.math.analysis.solvers.BrentSolver:247-double tolerance =	0
org.apache.commons.math.analysis.solvers.BrentSolver:249-if (Math.abs(dx) <= tolerance) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:250-setResult(x1, i);	0
org.apache.commons.math.analysis.solvers.BrentSolver:251-return result;	0
org.apache.commons.math.analysis.solvers.BrentSolver:253-if ((Math.abs(oldDelta) < tolerance) ||	0
org.apache.commons.math.analysis.solvers.BrentSolver:259-double r3 = y1 / y0;	0
org.apache.commons.math.analysis.solvers.BrentSolver:265-if (x0 == x2) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:267-p = dx * r3;	0
org.apache.commons.math.analysis.solvers.BrentSolver:268-p1 = 1.0 - r3;	0
org.apache.commons.math.analysis.solvers.BrentSolver:276-if (p > 0.0) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:277-p1 = -p1;	0
org.apache.commons.math.analysis.solvers.BrentSolver:281-if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||	0
org.apache.commons.math.analysis.solvers.BrentSolver:294-x0 = x1;	0
org.apache.commons.math.analysis.solvers.BrentSolver:295-y0 = y1;	0
org.apache.commons.math.analysis.solvers.BrentSolver:297-if (Math.abs(delta) > tolerance) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:298-x1 = x1 + delta;	0
org.apache.commons.math.analysis.solvers.BrentSolver:299-} else if (dx > 0.0) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:304-y1 = f.value(x1);	0
org.apache.commons.math.analysis.solvers.BrentSolver:305-if ((y1 > 0) == (y2 > 0)) {	0
org.apache.commons.math.analysis.solvers.BrentSolver:306-x2 = x0;	0
org.apache.commons.math.analysis.solvers.BrentSolver:307-y2 = y0;	0
org.apache.commons.math.analysis.solvers.BrentSolver:308-delta = x1 - x0;	0
org.apache.commons.math.analysis.solvers.BrentSolver:309-oldDelta = delta;	0
org.apache.commons.math.analysis.solvers.BrentSolver:311-i++;	0
org.apache.commons.math.analysis.solvers.BrentSolver:312-}	0
org.apache.commons.math.analysis.solvers.BrentSolver:164-clearResult();	0
org.apache.commons.math.analysis.solvers.BrentSolver:165-verifyInterval(min, max);	0
org.apache.commons.math.analysis.solvers.BrentSolver:167-double ret = Double.NaN;	0
org.apache.commons.math.analysis.solvers.BrentSolver:169-double yMin = f.value(min);	0
org.apache.commons.math.analysis.solvers.BrentSolver:170-double yMax = f.value(max);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:247-scale = new double[y0.length];	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:248-java.util.Arrays.fill(scale, scalAbsoluteTolerance);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:288-interpolator.storeTime(stepStart + stepSize);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:289-if (manager.evaluateStep(interpolator)) {	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:300-loop = false;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:314-final double nextStep = stepStart + stepSize;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:315-System.arraycopy(yTmp, 0, y, 0, y0.length);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:316-manager.stepAccepted(nextStep, y);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:317-lastStep = manager.stop();	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:320-interpolator.storeTime(nextStep);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:321-for (StepHandler handler : stepHandlers) {	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:322-handler.handleStep(interpolator, lastStep);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:116-super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:118-this.fsal= fsal;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:119-this.c = c;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:120-this.a = a;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:121-this.b = b;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:122-this.prototype = prototype;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:124-exp = -1.0 / getOrder();	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:127-setSafety(0.9);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:128-setMinReduction(0.2);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:129-setMaxGrowth(10.0);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:131-}	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:197-sanityChecks(equations, t0, y0, t, y);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:198-setEquations(equations);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:199-resetEvaluations();	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:200-final boolean forward = t > t0;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:203-final int stages = c.length + 1;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:204-if (y != y0) {	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:205-System.arraycopy(y0, 0, y, 0, y0.length);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:207-final double[][] yDotK = new double[stages][y0.length];	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:208-final double[] yTmp = new double[y0.length];	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:212-if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:213-final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:214-rki.reinitialize(this, yTmp, yDotK, forward);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:215-interpolator = rki;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:216-} else {	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:219-interpolator.storeTime(t0);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:222-stepStart = t0;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:223-doublehNew= 0;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:224-boolean firstTime = true;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:225-for (StepHandler handler : stepHandlers) {	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:226-handler.reset();	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:227-}	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:228-CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:229-boolean lastStep = false;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:232-while (!lastStep) {	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:234-interpolator.shift();	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:236-double error = 0;	0
org.apache.commons.math.ode.nonstiff.EmbeddedRungeKuttaIntegrator:237-for (boolean loop = true; loop;) {	0
org.apache.commons.math.stat.Frequency:303-return getCumPct((Comparable<?>) v);	1
org.apache.commons.math.stat.Frequency:342-return getPct(Long.valueOf(v));	0
org.apache.commons.math.stat.Frequency:331-return getPct(Long.valueOf(v));	0
org.apache.commons.math.stat.Frequency:386-return getCumFreq(((Integer) v).longValue());	0
org.apache.commons.math.stat.Frequency:444-return getCumFreq(Long.valueOf(v));	0
org.apache.commons.math.stat.Frequency:177-addValue(Long.valueOf(v));	0
org.apache.commons.math.stat.Frequency:178-}	0
org.apache.commons.math.stat.Frequency:320-return (double) getCount(v) / (double) sumFreq;	0
org.apache.commons.math.stat.Frequency:408-return getSumFreq();// v is comparable, but greater than the last value	0
org.apache.commons.math.stat.Frequency:142-freqTable.put(obj, Long.valueOf(count.longValue() + 1));	0
org.apache.commons.math.stat.Frequency:218-result += iterator.next().longValue();	0
org.apache.commons.math.stat.Frequency:251-result = count.longValue();	0
org.apache.commons.math.stat.Frequency:316-final long sumFreq = getSumFreq();	0
org.apache.commons.math.stat.Frequency:317-if (sumFreq == 0) {	0
org.apache.commons.math.stat.Frequency:385-if (v instanceof Integer) {	0
org.apache.commons.math.stat.Frequency:388-Comparator<Comparable<?>> c = (Comparator<Comparable<?>>) freqTable.comparator();	0
org.apache.commons.math.stat.Frequency:389-if (c == null) {	0
org.apache.commons.math.stat.Frequency:390-c = new NaturalComparator();	0
org.apache.commons.math.stat.Frequency:392-long result = 0;	0
org.apache.commons.math.stat.Frequency:395-Long value = freqTable.get(v);	0
org.apache.commons.math.stat.Frequency:396-if (value != null) {	0
org.apache.commons.math.stat.Frequency:397-result = value.longValue();	0
org.apache.commons.math.stat.Frequency:401-}	0
org.apache.commons.math.stat.Frequency:403-if (c.compare(v, freqTable.firstKey()) < 0) {	0
org.apache.commons.math.stat.Frequency:407-if (c.compare(v, freqTable.lastKey()) >= 0) {	0
org.apache.commons.math.stat.Frequency:495-return (double) getCumFreq(v) / (double) sumFreq;	0
org.apache.commons.math.stat.Frequency:159-}	0
org.apache.commons.math.stat.Frequency:215-long result = 0;	0
org.apache.commons.math.stat.Frequency:216-Iterator<Long> iterator = freqTable.values().iterator();	0
org.apache.commons.math.stat.Frequency:217-while (iterator.hasNext()){	0
org.apache.commons.math.stat.Frequency:220-return result;	0
org.apache.commons.math.stat.Frequency:244-if (v instanceof Integer) {	0
org.apache.commons.math.stat.Frequency:247-long result = 0;	0
org.apache.commons.math.stat.Frequency:249-Long count =freqTable.get(v);	0
org.apache.commons.math.stat.Frequency:250-if (count != null) {	0
org.apache.commons.math.stat.Frequency:255-}	0
org.apache.commons.math.stat.Frequency:256-return result;	0
org.apache.commons.math.stat.Frequency:382-if (getSumFreq() == 0) {	0
org.apache.commons.math.stat.Frequency:491-final long sumFreq = getSumFreq();	0
org.apache.commons.math.stat.Frequency:492-if (sumFreq == 0) {	0
org.apache.commons.math.stat.Frequency:133-Comparable<?> obj = v;	0
org.apache.commons.math.stat.Frequency:134-if (v instanceof Integer) {	0
org.apache.commons.math.stat.Frequency:138-Long count = freqTable.get(obj);	0
org.apache.commons.math.stat.Frequency:139-if (count == null) {	0
org.apache.commons.math.stat.Frequency:140-freqTable.put(obj, Long.valueOf(1));	0
org.apache.commons.math.stat.Frequency:149-}	0
org.apache.commons.math.stat.Frequency:150-}	0
org.apache.commons.math.stat.Frequency:158-addValue(Long.valueOf(v));	0
org.apache.commons.math.stat.Frequency:59-public Frequency() {	0
org.apache.commons.math.stat.Frequency:60-freqTable = new TreeMap<Comparable<?>, Long>();	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:143---p;	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:217-if (cachedS == null) {	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:220-cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:223-return cachedS;	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:283-if (cachedVt == null) {	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:284-cachedVt = getV().transpose();	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:288-return cachedVt;	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:182-wData[i] = new double[p];	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:98-this(matrix, Math.min(matrix.getRowDimension(), matrix.getColumnDimension()));	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:99-}	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:156-if (cachedU == null) {	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:158-final int p = singularValues.length;	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:159-if (m >= n) {	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:161-final RealMatrix e =	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:163-final double[][] eData = e.getData();	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:164-final double[][] wData = new double[m][p];	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:165-double[] ei1 = eData[0];	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:166-for (int i = 0; i < p - 1; ++i) {	1
org.apache.commons.math.linear.SingularValueDecompositionImpl:177-for (int j = 0; j < p; ++j) {	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:178-wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:181-for (int i = p; i < m; ++i) {	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:184-cachedU =	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:186-} else {	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:196-return cachedU;	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:236-if (cachedV == null) {	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:238-final int p = singularValues.length;	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:239-if (m >= n) {	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:241-final RealMatrix e =	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:243-cachedV = transformer.getV().multiply(e);	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:244-} else {	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:275-return cachedV;	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:109-throws InvalidMatrixException {	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:111-m = matrix.getRowDimension();	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:112-n = matrix.getColumnDimension();	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:114-cachedU= null;	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:115-cachedS= null;	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:116-cachedV= null;	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:117-cachedVt = null;	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:120-transformer = new BiDiagonalTransformer(matrix);	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:121-mainBidiagonal= transformer.getMainDiagonalRef();	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:122-secondaryBidiagonal = transformer.getSecondaryDiagonalRef();	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:125-mainTridiagonal= new double[mainBidiagonal.length];	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:126-secondaryTridiagonal = new double[mainBidiagonal.length - 1];	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:127-double a = mainBidiagonal[0];	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:128-mainTridiagonal[0] = a * a;	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:129-for (int i = 1; i < mainBidiagonal.length; ++i) {	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:130-final double b= secondaryBidiagonal[i - 1];	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:131-secondaryTridiagonal[i - 1] = a * b;	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:132-a = mainBidiagonal[i];	0
org.apache.commons.math.linear.SingularValueDecompositionImpl:133-mainTridiagonal[i] = a * a + b * b;	0
org.apache.commons.math.ode.events.EventState:95-final double convergence, final int maxIterationCount) {	0
org.apache.commons.math.ode.events.EventState:96-this.handler = handler;	0
org.apache.commons.math.ode.events.EventState:97-this.maxCheckInterval= maxCheckInterval;	0
org.apache.commons.math.ode.events.EventState:98-this.convergence = Math.abs(convergence);	0
org.apache.commons.math.ode.events.EventState:99-this.maxIterationCount = maxIterationCount;	0
org.apache.commons.math.ode.events.EventState:102-t0= Double.NaN;	0
org.apache.commons.math.ode.events.EventState:103-g0= Double.NaN;	0
org.apache.commons.math.ode.events.EventState:104-g0Positive= true;	0
org.apache.commons.math.ode.events.EventState:105-pendingEvent= false;	0
org.apache.commons.math.ode.events.EventState:106-pendingEventTime= Double.NaN;	0
org.apache.commons.math.ode.events.EventState:107-previousEventTime = Double.NaN;	0
org.apache.commons.math.ode.events.EventState:108-increasing= true;	0
org.apache.commons.math.ode.events.EventState:109-nextAction= EventHandler.CONTINUE;	0
org.apache.commons.math.ode.events.EventState:111-}	0
org.apache.commons.math.ode.events.EventState:151-t0 = tStart;	0
org.apache.commons.math.ode.events.EventState:152-g0 = handler.g(tStart, yStart);	0
org.apache.commons.math.ode.events.EventState:153-g0Positive = g0 >= 0;	0
org.apache.commons.math.ode.events.EventState:154-}	0
org.apache.commons.math.ode.events.EventState:172-forward = interpolator.isForward();	0
org.apache.commons.math.ode.events.EventState:173-final double t1 = interpolator.getCurrentTime();	0
org.apache.commons.math.ode.events.EventState:174-final intn= Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));	0
org.apache.commons.math.ode.events.EventState:175-final double h= (t1 - t0) / n;	0
org.apache.commons.math.ode.events.EventState:177-double ta = t0;	0
org.apache.commons.math.ode.events.EventState:178-double ga = g0;	0
org.apache.commons.math.ode.events.EventState:179-double tb = t0 + (interpolator.isForward() ? convergence : -convergence);	0
org.apache.commons.math.ode.events.EventState:180-for (int i = 0; i < n; ++i) {	0
org.apache.commons.math.ode.events.EventState:183-tb += h;	0
org.apache.commons.math.ode.events.EventState:184-interpolator.setInterpolatedTime(tb);	0
org.apache.commons.math.ode.events.EventState:185-final double gb = handler.g(tb, interpolator.getInterpolatedState());	0
org.apache.commons.math.ode.events.EventState:188-if (g0Positive ^ (gb >= 0)) {	0
org.apache.commons.math.ode.events.EventState:201-increasing = gb >= ga;	0
org.apache.commons.math.ode.events.EventState:203-final UnivariateRealFunction f = new UnivariateRealFunction() {	0
org.apache.commons.math.ode.events.EventState:215-final BrentSolver solver = new BrentSolver();	0
org.apache.commons.math.ode.events.EventState:216-solver.setAbsoluteAccuracy(convergence);	0
org.apache.commons.math.ode.events.EventState:217-solver.setMaximalIterationCount(maxIterationCount);	0
org.apache.commons.math.ode.events.EventState:218-final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);	0
org.apache.commons.math.ode.events.EventState:219-if ((Math.abs(root - ta) <= convergence) &&	0
org.apache.commons.math.ode.events.EventState:224-} else if (Double.isNaN(previousEventTime) ||	0
org.apache.commons.math.ode.events.EventState:226-pendingEventTime = root;	0
org.apache.commons.math.ode.events.EventState:227-if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {	0
org.apache.commons.math.ode.events.EventState:236-pendingEvent = true;	0
org.apache.commons.math.ode.events.EventState:237-return true;	0
org.apache.commons.math.ode.events.EventState:271-return pendingEventTime;	0
org.apache.commons.math.ode.events.EventState:285-t0 = t;	0
org.apache.commons.math.ode.events.EventState:286-g0 = handler.g(t, y);	0
org.apache.commons.math.ode.events.EventState:288-if (pendingEvent) {	0
org.apache.commons.math.ode.events.EventState:290-previousEventTime = t;	0
org.apache.commons.math.ode.events.EventState:291-g0Positive= increasing;	0
org.apache.commons.math.ode.events.EventState:292-nextAction= handler.eventOccurred(t, y, !(increasing ^ forward));	0
org.apache.commons.math.ode.events.EventState:297-}	0
org.apache.commons.math.linear.EigenDecompositionImpl:871-i0 = 1 + i / 4;	0
org.apache.commons.math.linear.EigenDecompositionImpl:872-break;	0
org.apache.commons.math.linear.EigenDecompositionImpl:944-work[i + 2] = -0.0;	0
org.apache.commons.math.linear.EigenDecompositionImpl:945-d = work[i];	0
org.apache.commons.math.linear.EigenDecompositionImpl:957-work[i] = -0.0;	0
org.apache.commons.math.linear.EigenDecompositionImpl:958-work[j] = d;	0
org.apache.commons.math.linear.EigenDecompositionImpl:959-work[j + 2] = 0.0;	0
org.apache.commons.math.linear.EigenDecompositionImpl:960-d = work[i + 2];	0
org.apache.commons.math.linear.EigenDecompositionImpl:1055-dMin2 = Math.min(dMin2, work[l - 1]);	0
org.apache.commons.math.linear.EigenDecompositionImpl:1056-work[l - 1] =	0
org.apache.commons.math.linear.EigenDecompositionImpl:1059-work[l - 2 * pingPong] =	0
org.apache.commons.math.linear.EigenDecompositionImpl:1062-qMax= Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));	0
org.apache.commons.math.linear.EigenDecompositionImpl:1063-dMin= -0.0;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1135-int j = 4 * n - 1;	1
org.apache.commons.math.linear.EigenDecompositionImpl:1136-for (int i = 0; i < j; i += 4) {	0
org.apache.commons.math.linear.EigenDecompositionImpl:1137-for (int k = 0; k < 4; k += step) {	0
org.apache.commons.math.linear.EigenDecompositionImpl:1138-final double tmp = work[i + k];	0
org.apache.commons.math.linear.EigenDecompositionImpl:1139-work[i + k] = work[j - k];	0
org.apache.commons.math.linear.EigenDecompositionImpl:1140-work[j - k] = tmp;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1142-j -= 4;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1144-return true;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1384-work[j4] = 0.0;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1385-dN1= work[j4p2 + 2];	0
org.apache.commons.math.linear.EigenDecompositionImpl:1386-dMin = dN1;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1387-eMin = 0.0;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1404-work[j4] = 0.0;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1405-dN = work[j4p2 + 2];	0
org.apache.commons.math.linear.EigenDecompositionImpl:1406-dMin = dN;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1407-eMin = 0.0;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1414-work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);	0
org.apache.commons.math.linear.EigenDecompositionImpl:1415-dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);	0
org.apache.commons.math.linear.EigenDecompositionImpl:1090-work[4 * deflatedEnd - 3 - pingPong] = 0.0;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1091-dMin = 0.0;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1092-updateSigma(tau);	0
org.apache.commons.math.linear.EigenDecompositionImpl:1093-return deflatedEnd;	0
org.apache.commons.math.linear.EigenDecompositionImpl:191-throws InvalidMatrixException {	0
org.apache.commons.math.linear.EigenDecompositionImpl:193-this.main= main.clone();	0
org.apache.commons.math.linear.EigenDecompositionImpl:194-this.secondary = secondary.clone();	0
org.apache.commons.math.linear.EigenDecompositionImpl:195-transformer= null;	0
org.apache.commons.math.linear.EigenDecompositionImpl:198-squaredSecondary = new double[secondary.length];	0
org.apache.commons.math.linear.EigenDecompositionImpl:199-for (int i = 0; i < squaredSecondary.length; ++i) {	0
org.apache.commons.math.linear.EigenDecompositionImpl:200-final double s = secondary[i];	0
org.apache.commons.math.linear.EigenDecompositionImpl:201-squaredSecondary[i] = s * s;	0
org.apache.commons.math.linear.EigenDecompositionImpl:204-this.splitTolerance = splitTolerance;	0
org.apache.commons.math.linear.EigenDecompositionImpl:205-decompose();	0
org.apache.commons.math.linear.EigenDecompositionImpl:207-}	0
org.apache.commons.math.linear.EigenDecompositionImpl:336-if (eigenvectors == null) {	0
org.apache.commons.math.linear.EigenDecompositionImpl:337-findEigenVectors();	0
org.apache.commons.math.linear.EigenDecompositionImpl:339-return eigenvectors[i].copy();	0
org.apache.commons.math.linear.EigenDecompositionImpl:1105-tau *= 0.25;	0
org.apache.commons.math.linear.EigenDecompositionImpl:191-throws InvalidMatrixException {	0
org.apache.commons.math.linear.EigenDecompositionImpl:193-this.main= main.clone();	0
org.apache.commons.math.linear.EigenDecompositionImpl:194-this.secondary = secondary.clone();	0
org.apache.commons.math.linear.EigenDecompositionImpl:195-transformer= null;	0
org.apache.commons.math.linear.EigenDecompositionImpl:198-squaredSecondary = new double[secondary.length];	0
org.apache.commons.math.linear.EigenDecompositionImpl:199-for (int i = 0; i < squaredSecondary.length; ++i) {	0
org.apache.commons.math.linear.EigenDecompositionImpl:200-final double s = secondary[i];	0
org.apache.commons.math.linear.EigenDecompositionImpl:201-squaredSecondary[i] = s * s;	0
org.apache.commons.math.linear.EigenDecompositionImpl:204-this.splitTolerance = splitTolerance;	0
org.apache.commons.math.linear.EigenDecompositionImpl:205-decompose();	0
org.apache.commons.math.linear.EigenDecompositionImpl:1479-gam = dN;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1480-a2 = 0.0;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1481-if (work[nn - 5]>work[nn - 7]) {	0
org.apache.commons.math.linear.EigenDecompositionImpl:1484-b2 = work[nn - 5] / work[nn - 7];	0
org.apache.commons.math.linear.EigenDecompositionImpl:1485-np = nn - 9;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1504-if(b2 == 0.0) {	0
org.apache.commons.math.linear.EigenDecompositionImpl:1507-b1 = b2;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1508-if (work[i4]>work[i4 - 2]) {	0
org.apache.commons.math.linear.EigenDecompositionImpl:1509-return;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1511-b2 = b2 * (work[i4] / work[i4 - 2]);	0
org.apache.commons.math.linear.EigenDecompositionImpl:1512-a2 = a2 + b2;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1513-if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {	0
org.apache.commons.math.linear.EigenDecompositionImpl:1529-tType = -5;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1530-double s = 0.25 * dMin;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1533-final int np = nn - 2 * pingPong;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1534-double b1 = work[np - 2];	0
org.apache.commons.math.linear.EigenDecompositionImpl:1535-double b2 = work[np - 6];	0
org.apache.commons.math.linear.EigenDecompositionImpl:1536-final double gam = dN2;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1537-if (work[np - 8] > b2 || work[np - 4] > b1) {	0
org.apache.commons.math.linear.EigenDecompositionImpl:1540-double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);	0
org.apache.commons.math.linear.EigenDecompositionImpl:1543-if (end - start > 2) {	1
org.apache.commons.math.linear.EigenDecompositionImpl:1544-b2 = work[nn - 13] / work[nn - 15];	0
org.apache.commons.math.linear.EigenDecompositionImpl:1586-if (dMin1 == dN1 && dMin2 == dN2) {	0
org.apache.commons.math.linear.EigenDecompositionImpl:1621-tau = 0.25 * dMin1;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1622-if (dMin1 == dN1) {	0
org.apache.commons.math.linear.EigenDecompositionImpl:1625-tType = -9;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1627-break;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1084-} else if ((dMin < 0.0) &&	0
org.apache.commons.math.linear.EigenDecompositionImpl:1093-} else if (dMin < 0.0) {	0
org.apache.commons.math.linear.EigenDecompositionImpl:1095-if (tType < -22) {	0
org.apache.commons.math.linear.EigenDecompositionImpl:1098-} else if (dMin1 > 0.0) {	0
org.apache.commons.math.linear.EigenDecompositionImpl:1100-tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);	0
org.apache.commons.math.linear.EigenDecompositionImpl:1101-tType -= 11;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1474-tType = -4;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1475-double s = 0.25 * dMin;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1478-if (dMin == dN) {	0
org.apache.commons.math.linear.EigenDecompositionImpl:1502-a2 = a2 + b2;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1503-for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {	0
org.apache.commons.math.linear.EigenDecompositionImpl:1517-a2 = cnst3 * a2;	0
org.apache.commons.math.linear.EigenDecompositionImpl:1520-if (a2 < cnst1) {	0
org.apache.commons.math.optimization.linear.SimplexSolver:169-return;	0
org.apache.commons.math.optimization.linear.SimplexSolver:152-return false;	0
org.apache.commons.math.optimization.linear.SimplexSolver:191-doIteration(tableau);	0
org.apache.commons.math.optimization.linear.SimplexSolver:155-return true;	0
org.apache.commons.math.optimization.linear.SimplexSolver:193-return tableau.getSolution();	0
org.apache.commons.math.optimization.linear.SimplexSolver:147-if (tableau.getNumArtificialVariables() > 0) {	0
org.apache.commons.math.optimization.linear.SimplexSolver:150-for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {	0
org.apache.commons.math.optimization.linear.SimplexSolver:151-if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {	0
org.apache.commons.math.optimization.linear.SimplexSolver:189-tableau.discardArtificialVariables();	0
org.apache.commons.math.optimization.linear.SimplexSolver:190-while (!isOptimal(tableau)) {	0
org.apache.commons.math.optimization.linear.SimplexSolver:42-this(DEFAULT_EPSILON);	0
org.apache.commons.math.optimization.linear.SimplexSolver:43-}	0
org.apache.commons.math.optimization.linear.SimplexSolver:49-public SimplexSolver(final double epsilon) {	0
org.apache.commons.math.optimization.linear.SimplexSolver:50-this.epsilon = epsilon;	0
org.apache.commons.math.optimization.linear.SimplexSolver:51-}	0
org.apache.commons.math.optimization.linear.SimplexSolver:59-double minValue = 0;	0
org.apache.commons.math.optimization.linear.SimplexSolver:60-Integer minPos = null;	0
org.apache.commons.math.optimization.linear.SimplexSolver:61-for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {	0
org.apache.commons.math.optimization.linear.SimplexSolver:62-if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {	0
org.apache.commons.math.optimization.linear.SimplexSolver:63-minValue = tableau.getEntry(0, i);	0
org.apache.commons.math.optimization.linear.SimplexSolver:64-minPos = i;	0
org.apache.commons.math.optimization.linear.SimplexSolver:67-return minPos;	0
org.apache.commons.math.optimization.linear.SimplexSolver:77-double minRatio = Double.MAX_VALUE;	0
org.apache.commons.math.optimization.linear.SimplexSolver:78-Integer minRatioPos = null;	0
org.apache.commons.math.optimization.linear.SimplexSolver:79-for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {	0
org.apache.commons.math.optimization.linear.SimplexSolver:80-final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);	0
org.apache.commons.math.optimization.linear.SimplexSolver:81-final double entry = tableau.getEntry(i, col);	0
org.apache.commons.math.optimization.linear.SimplexSolver:82-if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {	1
org.apache.commons.math.optimization.linear.SimplexSolver:83-final double ratio = rhs / entry;	0
org.apache.commons.math.optimization.linear.SimplexSolver:84-if (ratio < minRatio) {	0
org.apache.commons.math.optimization.linear.SimplexSolver:85-minRatio = ratio;	0
org.apache.commons.math.optimization.linear.SimplexSolver:86-minRatioPos = i;	0
org.apache.commons.math.optimization.linear.SimplexSolver:90-return minRatioPos;	0
org.apache.commons.math.optimization.linear.SimplexSolver:103-incrementIterationsCounter();	0
org.apache.commons.math.optimization.linear.SimplexSolver:105-Integer pivotCol = getPivotColumn(tableau);	0
org.apache.commons.math.optimization.linear.SimplexSolver:106-Integer pivotRow = getPivotRow(pivotCol, tableau);	0
org.apache.commons.math.optimization.linear.SimplexSolver:107-if (pivotRow == null) {	0
org.apache.commons.math.optimization.linear.SimplexSolver:112-double pivotVal = tableau.getEntry(pivotRow, pivotCol);	0
org.apache.commons.math.optimization.linear.SimplexSolver:113-tableau.divideRow(pivotRow, pivotVal);	0
org.apache.commons.math.optimization.linear.SimplexSolver:116-for (int i = 0; i < tableau.getHeight(); i++) {	0
org.apache.commons.math.optimization.linear.SimplexSolver:117-if (i != pivotRow) {	0
org.apache.commons.math.optimization.linear.SimplexSolver:118-double multiplier = tableau.getEntry(i, pivotCol);	0
org.apache.commons.math.optimization.linear.SimplexSolver:119-tableau.subtractRow(i, pivotRow, multiplier);	0
org.apache.commons.math.optimization.linear.SimplexSolver:122-}	0
org.apache.commons.math.optimization.linear.SimplexSolver:168-if (tableau.getNumArtificialVariables() == 0) {	0
org.apache.commons.math.optimization.linear.SimplexSolver:186-final SimplexTableau tableau =	0
org.apache.commons.math.optimization.linear.SimplexSolver:188-solvePhase1(tableau);	0
org.apache.commons.math.optimization.linear.SimplexSolver:108-throw new UnboundedSolutionException();	0
org.apache.commons.math.optimization.linear.SimplexSolver:130-if (tableau.getNumArtificialVariables() == 0) {	0
org.apache.commons.math.optimization.linear.SimplexSolver:131-return true;	0
org.apache.commons.math.optimization.linear.SimplexTableau:349-coefficients[i] = 0;	0
org.apache.commons.math.optimization.linear.SimplexTableau:297-return null;	0
org.apache.commons.math.optimization.linear.SimplexTableau:310-int width = getWidth() - numArtificialVariables - 1;	0
org.apache.commons.math.optimization.linear.SimplexTableau:311-int height = getHeight() - 1;	0
org.apache.commons.math.optimization.linear.SimplexTableau:312-double[][] matrix = new double[height][width];	0
org.apache.commons.math.optimization.linear.SimplexTableau:313-for (int i = 0; i < height; i++) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:314-for (int j = 0; j < width - 1; j++) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:315-matrix[i][j] = getEntry(i + 1, j + 1);	0
org.apache.commons.math.optimization.linear.SimplexTableau:317-matrix[i][width - 1] = getEntry(i + 1, getRhsOffset());	0
org.apache.commons.math.optimization.linear.SimplexTableau:319-this.tableau = new Array2DRowRealMatrix(matrix);	0
org.apache.commons.math.optimization.linear.SimplexTableau:320-this.numArtificialVariables = 0;	0
org.apache.commons.math.optimization.linear.SimplexTableau:321-}	0
org.apache.commons.math.optimization.linear.SimplexTableau:134-matrix[0][0] = -1;	0
org.apache.commons.math.optimization.linear.SimplexTableau:171-} else if (constraint.getRelationship() == Relationship.GEQ) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:178-matrix[0][getArtificialVariableOffset() + artificialVar] = 1;	0
org.apache.commons.math.optimization.linear.SimplexTableau:179-matrix[row][getArtificialVariableOffset() + artificialVar++] = 1;	0
org.apache.commons.math.optimization.linear.SimplexTableau:249-int row = getBasicRow(getArtificialVariableOffset() + artificialVar);	0
org.apache.commons.math.optimization.linear.SimplexTableau:250-subtractRow(0, row, 1.0);	0
org.apache.commons.math.optimization.linear.SimplexTableau:340-double[] coefficients = new double[getOriginalNumDecisionVariables()];	0
org.apache.commons.math.optimization.linear.SimplexTableau:341-Integer negativeVarBasicRow = getBasicRow(getNegativeDecisionVariableOffset());	1
org.apache.commons.math.optimization.linear.SimplexTableau:342-double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());	0
org.apache.commons.math.optimization.linear.SimplexTableau:343-Set<Integer> basicRows = new HashSet<Integer>();	0
org.apache.commons.math.optimization.linear.SimplexTableau:344-for (int i = 0; i < coefficients.length; i++) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:345-Integer basicRow = getBasicRow(getNumObjectiveFunctions() + i);	1
org.apache.commons.math.optimization.linear.SimplexTableau:346-if (basicRows.contains(basicRow)) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:351-basicRows.add(basicRow);	0
org.apache.commons.math.optimization.linear.SimplexTableau:352-coefficients[i] =	0
org.apache.commons.math.optimization.linear.SimplexTableau:357-return new RealPointValuePair(coefficients, f.getValue(coefficients));	0
org.apache.commons.math.optimization.linear.SimplexTableau:441-return getNumObjectiveFunctions() + numDecisionVariables + numSlackVariables;	0
org.apache.commons.math.optimization.linear.SimplexTableau:458-return getNumObjectiveFunctions() + getOriginalNumDecisionVariables();	0
org.apache.commons.math.optimization.linear.SimplexTableau:481-return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;	0
org.apache.commons.math.optimization.linear.SimplexTableau:296-} else if (!MathUtils.equals(getEntry(i, col), 0.0, epsilon)) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:307-if (numArtificialVariables == 0) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:104-final double epsilon) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:105-this.f= f;	0
org.apache.commons.math.optimization.linear.SimplexTableau:106-this.constraints= constraints;	0
org.apache.commons.math.optimization.linear.SimplexTableau:107-this.restrictToNonNegative= restrictToNonNegative;	0
org.apache.commons.math.optimization.linear.SimplexTableau:108-this.epsilon= epsilon;	0
org.apache.commons.math.optimization.linear.SimplexTableau:109-this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1);	0
org.apache.commons.math.optimization.linear.SimplexTableau:110-this.numSlackVariables= getConstraintTypeCounts(Relationship.LEQ) +	0
org.apache.commons.math.optimization.linear.SimplexTableau:112-this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +	0
org.apache.commons.math.optimization.linear.SimplexTableau:114-this.tableau = new Array2DRowRealMatrix(createTableau(goalType == GoalType.MAXIMIZE));	0
org.apache.commons.math.optimization.linear.SimplexTableau:115-initialize();	0
org.apache.commons.math.optimization.linear.SimplexTableau:116-}	0
org.apache.commons.math.optimization.linear.SimplexTableau:126-List<LinearConstraint> constraints = getNormalizedConstraints();	0
org.apache.commons.math.optimization.linear.SimplexTableau:127-int width = numDecisionVariables + numSlackVariables +	0
org.apache.commons.math.optimization.linear.SimplexTableau:129-int height = constraints.size() + getNumObjectiveFunctions();	0
org.apache.commons.math.optimization.linear.SimplexTableau:130-double[][] matrix = new double[height][width];	0
org.apache.commons.math.optimization.linear.SimplexTableau:133-if (getNumObjectiveFunctions() == 2) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:136-int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;	0
org.apache.commons.math.optimization.direct.MultiDirectional:45-public MultiDirectional() {	0
org.apache.commons.math.optimization.direct.MultiDirectional:46-this.khi = 2.0;	0
org.apache.commons.math.optimization.direct.MultiDirectional:47-this.gamma = 0.5;	0
org.apache.commons.math.optimization.direct.MultiDirectional:48-}	0
org.apache.commons.math.optimization.direct.MultiDirectional:66-incrementIterationsCounter();	0
org.apache.commons.math.optimization.direct.MultiDirectional:69-final RealPointValuePair[] original = simplex;	0
org.apache.commons.math.optimization.direct.MultiDirectional:70-final RealPointValuePair best = original[0];	0
org.apache.commons.math.optimization.direct.MultiDirectional:73-final RealPointValuePair reflected = evaluateNewSimplex(original, 1.0, comparator);	0
org.apache.commons.math.optimization.direct.MultiDirectional:74-if (comparator.compare(reflected, best) < 0) {	0
org.apache.commons.math.optimization.direct.MultiDirectional:89-final RealPointValuePair contracted = evaluateNewSimplex(original, gamma, comparator);	0
org.apache.commons.math.optimization.direct.MultiDirectional:90-if (comparator.compare(contracted, best) < 0) {	0
org.apache.commons.math.optimization.direct.MultiDirectional:97-}	0
org.apache.commons.math.optimization.direct.MultiDirectional:115-final double[] xSmallest = original[0].getPointRef();	0
org.apache.commons.math.optimization.direct.MultiDirectional:116-final int n = xSmallest.length;	0
org.apache.commons.math.optimization.direct.MultiDirectional:119-simplex = new RealPointValuePair[n + 1];	0
org.apache.commons.math.optimization.direct.MultiDirectional:120-simplex[0] = original[0];	0
org.apache.commons.math.optimization.direct.MultiDirectional:121-for (int i = 1; i <= n; ++i) {	0
org.apache.commons.math.optimization.direct.MultiDirectional:122-final double[] xOriginal= original[i].getPointRef();	0
org.apache.commons.math.optimization.direct.MultiDirectional:123-final double[] xTransformed = new double[n];	0
org.apache.commons.math.optimization.direct.MultiDirectional:124-for (int j = 0; j < n; ++j) {	0
org.apache.commons.math.optimization.direct.MultiDirectional:125-xTransformed[j] = xSmallest[j] + coeff * (xSmallest[j] - xOriginal[j]);	0
org.apache.commons.math.optimization.direct.MultiDirectional:127-simplex[i] = new RealPointValuePair(xTransformed, Double.NaN, false);	0
org.apache.commons.math.optimization.direct.MultiDirectional:131-evaluateSimplex(comparator);	0
org.apache.commons.math.optimization.direct.MultiDirectional:132-return simplex[0];	0
org.apache.commons.math.optimization.direct.MultiDirectional:77-final RealPointValuePair[] reflectedSimplex = simplex;	0
org.apache.commons.math.optimization.direct.MultiDirectional:78-final RealPointValuePair expanded = evaluateNewSimplex(original, khi, comparator);	0
org.apache.commons.math.optimization.direct.MultiDirectional:79-if (comparator.compare(reflected, expanded) <= 0) {	0
org.apache.commons.math.optimization.direct.MultiDirectional:81-simplex = reflectedSimplex;	0
org.apache.commons.math.optimization.direct.MultiDirectional:84-return;	0
org.apache.commons.math.optimization.direct.MultiDirectional:94-return;	0
org.apache.commons.math.optimization.direct.MultiDirectional:54-public MultiDirectional(final double khi, final double gamma) {	0
org.apache.commons.math.optimization.direct.MultiDirectional:55-this.khi = khi;	0
org.apache.commons.math.optimization.direct.MultiDirectional:56-this.gamma = gamma;	0
org.apache.commons.math.optimization.direct.MultiDirectional:57-}	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:199-throw new ConvergenceException(	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:127-return bracket( function, initial, lowerBound, upperBound,	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:170-if (function == null) {	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:173-if (maximumIterations <= 0){	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:177-if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:182-double a = initial;	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:183-double b = initial;	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:186-int numIterations = 0 ;	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:189-a = Math.max(a - 1.0, lowerBound);	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:190-b = Math.min(b + 1.0, upperBound);	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:191-fa = function.value(a);	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:193-fb = function.value(b);	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:194-numIterations++ ;	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:195-} while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:198-if (fa * fb >= 0.0 ) {	1
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:34-super();	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:35-}	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:53-setup(f);	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:54-return LazyHolder.FACTORY.newDefaultSolver().solve(f, x0, x1);	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:77-setup(f);	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:78-UnivariateRealSolver solver = LazyHolder.FACTORY.newDefaultSolver();	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:79-solver.setAbsoluteAccuracy(absoluteAccuracy);	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:80-return solver.solve(f, x0, x1);	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:171-throw MathRuntimeException.createIllegalArgumentException("function is null");	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:174-throw MathRuntimeException.createIllegalArgumentException(	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:178-throw MathRuntimeException.createIllegalArgumentException(	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:207-return new double[]{a, b};	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:218-return (a + b) * .5;	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:227-if (f == null) {	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:228-throw MathRuntimeException.createIllegalArgumentException("function is null");	0
org.apache.commons.math.analysis.solvers.UnivariateRealSolverUtils:230-}	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:76-}	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:132-for (int i = 0; i < order; ++i) {	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:134-final double[] ltI = lTData[i];	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:138-ltI[i] = Math.sqrt(ltI[i]);	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:139-final double inverse = 1.0 / ltI[i];	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:141-for (int q = order - 1; q > i; --q) {	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:142-ltI[q] *= inverse;	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:143-final double[] ltQ = lTData[q];	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:144-for (int p = q; p < order; ++p) {	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:145-ltQ[p] -= ltI[q] * ltI[p];	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:151-}	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:104-final int order = matrix.getRowDimension();	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:105-lTData = matrix.getData();	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:106-cachedL= null;	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:107-cachedLT = null;	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:110-for (int i = 0; i < order; ++i) {	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:112-final double[] lI = lTData[i];	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:114-if (lTData[i][i] < absolutePositivityThreshold) {	1
org.apache.commons.math.linear.CholeskyDecompositionImpl:118-for (int j = i + 1; j < order; ++j) {	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:119-final double[] lJ = lTData[j];	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:120-final double lIJ = lI[j];	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:121-final double lJI = lJ[i];	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:122-final double maxDelta =	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:124-if (Math.abs(lIJ - lJI) > maxDelta) {	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:127-lJ[i] = 0;	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:74-this(matrix, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD,	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:97-NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:99-if (!matrix.isSquare()) {	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:155-if (cachedL == null) {	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:156-cachedL = getLT().transpose();	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:158-return cachedL;	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:164-if (cachedLT == null) {	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:165-cachedLT = MatrixUtils.createRealMatrix(lTData);	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:169-return cachedLT;	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:100-throw new NonSquareMatrixException(matrix.getRowDimension(),	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:115-throw new NotPositiveDefiniteMatrixException();	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:125-throw new NotSymmetricMatrixException();	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:175-double determinant = 1.0;	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:176-for (int i = 0; i < lTData.length; ++i) {	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:177-double lTii = lTData[i][i];	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:178-determinant *= lTii * lTii;	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:180-return determinant;	0
org.apache.commons.math.linear.CholeskyDecompositionImpl:185-return new Solver(lTData);	0
org.apache.commons.math.optimization.linear.SimplexTableau:291-return;	0
org.apache.commons.math.optimization.linear.SimplexTableau:145-matrix[zIndex][getSlackVariableOffset() - 1] =	0
org.apache.commons.math.optimization.linear.SimplexTableau:161-matrix[row][getSlackVariableOffset() - 1] =	0
org.apache.commons.math.optimization.linear.SimplexTableau:170-matrix[row][getSlackVariableOffset() + slackVar++] = 1;// slack	0
org.apache.commons.math.optimization.linear.SimplexTableau:260-double sum = 0;	0
org.apache.commons.math.optimization.linear.SimplexTableau:261-for (double coefficient : coefficients.getData()) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:262-sum -= coefficient;	0
org.apache.commons.math.optimization.linear.SimplexTableau:264-return sum;	0
org.apache.commons.math.optimization.linear.SimplexTableau:325-double[] coefficients = new double[getOriginalNumDecisionVariables()];	0
org.apache.commons.math.optimization.linear.SimplexTableau:326-Integer basicRow =	0
org.apache.commons.math.optimization.linear.SimplexTableau:328-double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());	0
org.apache.commons.math.optimization.linear.SimplexTableau:329-Set<Integer> basicRows = new HashSet<Integer>();	0
org.apache.commons.math.optimization.linear.SimplexTableau:330-for (int i = 0; i < coefficients.length; i++) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:331-basicRow = getBasicRow(getNumObjectiveFunctions() + i);	0
org.apache.commons.math.optimization.linear.SimplexTableau:332-if (basicRows.contains(basicRow)) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:337-basicRows.add(basicRow);	0
org.apache.commons.math.optimization.linear.SimplexTableau:338-coefficients[i] =	0
org.apache.commons.math.optimization.linear.SimplexTableau:343-return new RealPointValuePair(coefficients, f.getValue(coefficients));	0
org.apache.commons.math.optimization.linear.SimplexTableau:458-return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;	0
org.apache.commons.math.optimization.linear.SimplexTableau:290-if (numArtificialVariables == 0) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:419-return getNumObjectiveFunctions() + numDecisionVariables;	0
org.apache.commons.math.optimization.linear.SimplexTableau:104-final double epsilon) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:105-this.f= f;	0
org.apache.commons.math.optimization.linear.SimplexTableau:106-this.constraints= constraints;	0
org.apache.commons.math.optimization.linear.SimplexTableau:107-this.restrictToNonNegative= restrictToNonNegative;	0
org.apache.commons.math.optimization.linear.SimplexTableau:108-this.epsilon= epsilon;	0
org.apache.commons.math.optimization.linear.SimplexTableau:109-this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1);	0
org.apache.commons.math.optimization.linear.SimplexTableau:110-this.numSlackVariables= getConstraintTypeCounts(Relationship.LEQ) +	0
org.apache.commons.math.optimization.linear.SimplexTableau:112-this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +	0
org.apache.commons.math.optimization.linear.SimplexTableau:114-this.tableau = new RealMatrixImpl(createTableau(goalType == GoalType.MAXIMIZE));	0
org.apache.commons.math.optimization.linear.SimplexTableau:115-initialize();	0
org.apache.commons.math.optimization.linear.SimplexTableau:116-}	0
org.apache.commons.math.optimization.linear.SimplexTableau:126-List<LinearConstraint> constraints = getNormalizedConstraints();	0
org.apache.commons.math.optimization.linear.SimplexTableau:127-int width = numDecisionVariables + numSlackVariables +	0
org.apache.commons.math.optimization.linear.SimplexTableau:129-int height = constraints.size() + getNumObjectiveFunctions();	0
org.apache.commons.math.optimization.linear.SimplexTableau:130-double[][] matrix = new double[height][width];	0
org.apache.commons.math.optimization.linear.SimplexTableau:133-if (getNumObjectiveFunctions() == 2) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:136-int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;	0
org.apache.commons.math.optimization.linear.SimplexTableau:137-matrix[zIndex][zIndex] = maximize ? 1 : -1;	0
org.apache.commons.math.optimization.linear.SimplexTableau:138-RealVector objectiveCoefficients =	0
org.apache.commons.math.optimization.linear.SimplexTableau:140-copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());	0
org.apache.commons.math.optimization.linear.SimplexTableau:141-matrix[zIndex][width - 1] =	0
org.apache.commons.math.optimization.linear.SimplexTableau:144-if (!restrictToNonNegative) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:150-int slackVar = 0;	0
org.apache.commons.math.optimization.linear.SimplexTableau:151-int artificialVar = 0;	0
org.apache.commons.math.optimization.linear.SimplexTableau:152-for (int i = 0; i < constraints.size(); i++) {	0
org.apache.commons.math.optimization.linear.SimplexTableau:153-LinearConstraint constraint = constraints.get(i);	0
org.apache.commons.math.optimization.linear.SimplexTableau:154-int row = getNumObjectiveFunctions() + i;	0
org.apache.commons.math.optimization.linear.SimplexTableau:157-copyArray(constraint.getCoefficients().getData(), matrix[row], 1);	0
org.apache.commons.math.optimization.linear.SimplexTableau:160-if (!restrictToNonNegative) {	0
org.apache.commons.math.stat.Frequency:110-addValue((Comparable<?>) v);	1
org.apache.commons.math.stat.Frequency:57-public Frequency() {	0
org.apache.commons.math.stat.Frequency:58-freqTable = new TreeMap();	0
org.apache.commons.math.stat.Frequency:59-}	0
org.apache.commons.math.stat.Frequency:66-public Frequency(Comparator comparator) {	0
org.apache.commons.math.stat.Frequency:67-freqTable = new TreeMap(comparator);	0
org.apache.commons.math.stat.Frequency:68-}	0
org.apache.commons.math.stat.Frequency:78-NumberFormat nf = NumberFormat.getPercentInstance();	0
org.apache.commons.math.stat.Frequency:79-StringBuffer outBuffer = new StringBuffer();	0
org.apache.commons.math.stat.Frequency:80-outBuffer.append("Value \t Freq. \t Pct. \t Cum Pct. \n");	0
org.apache.commons.math.stat.Frequency:81-Iterator iter = freqTable.keySet().iterator();	0
org.apache.commons.math.stat.Frequency:82-while (iter.hasNext()) {	0
org.apache.commons.math.stat.Frequency:83-Object value = iter.next();	0
org.apache.commons.math.stat.Frequency:84-outBuffer.append(value);	0
org.apache.commons.math.stat.Frequency:85-outBuffer.append('\t');	0
org.apache.commons.math.stat.Frequency:86-outBuffer.append(getCount(value));	0
org.apache.commons.math.stat.Frequency:87-outBuffer.append('\t');	0
org.apache.commons.math.stat.Frequency:88-outBuffer.append(nf.format(getPct(value)));	0
org.apache.commons.math.stat.Frequency:89-outBuffer.append('\t');	0
org.apache.commons.math.stat.Frequency:90-outBuffer.append(nf.format(getCumPct(value)));	0
org.apache.commons.math.stat.Frequency:91-outBuffer.append('\n');	0
org.apache.commons.math.stat.Frequency:92-}	0
org.apache.commons.math.stat.Frequency:93-return outBuffer.toString();	0
org.apache.commons.math.stat.Frequency:111-}	0
org.apache.commons.math.stat.Frequency:124-Object obj = v;	0
org.apache.commons.math.stat.Frequency:125-if (v instanceof Integer) {	0
org.apache.commons.math.stat.Frequency:126-obj = Long.valueOf(((Integer) v).longValue());	0
org.apache.commons.math.stat.Frequency:129-Long count = (Long) freqTable.get(obj);	0
org.apache.commons.math.stat.Frequency:130-if (count == null) {	0
org.apache.commons.math.stat.Frequency:131-freqTable.put(obj, Long.valueOf(1));	0
org.apache.commons.math.stat.Frequency:133-freqTable.put(obj, Long.valueOf(count.longValue() + 1));	0
org.apache.commons.math.stat.Frequency:138-}	0
org.apache.commons.math.stat.Frequency:135-} catch (ClassCastException ex) {	0
org.apache.commons.math.stat.Frequency:137-throw new IllegalArgumentException("Value not comparable to existing values.");	0
org.apache.commons.math.stat.Frequency:139-}	0
org.apache.commons.math.stat.Frequency:147-addValue(Long.valueOf(v));	0
org.apache.commons.math.stat.Frequency:148-}	0
org.apache.commons.math.stat.Frequency:156-addValue(Long.valueOf(v.longValue()));	0
org.apache.commons.math.stat.Frequency:157-}	0
org.apache.commons.math.stat.Frequency:165-addValue(Long.valueOf(v));	0
org.apache.commons.math.stat.Frequency:166-}	0
org.apache.commons.math.stat.Frequency:174-addValue(Character.valueOf(v));	0
org.apache.commons.math.stat.Frequency:175-}	0
org.apache.commons.math.stat.Frequency:179-freqTable.clear();	0
org.apache.commons.math.stat.Frequency:180-}	0
org.apache.commons.math.stat.Frequency:192-return freqTable.keySet().iterator();	0
org.apache.commons.math.stat.Frequency:203-long result = 0;	0
org.apache.commons.math.stat.Frequency:204-Iterator iterator = freqTable.values().iterator();	0
org.apache.commons.math.stat.Frequency:205-while (iterator.hasNext()){	0
org.apache.commons.math.stat.Frequency:206-result += ((Long) iterator.next()).longValue();	0
org.apache.commons.math.fraction.Fraction:259-double nOd = doubleValue();	1
org.apache.commons.math.fraction.Fraction:260-double dOn = object.doubleValue();	0
org.apache.commons.math.fraction.Fraction:261-return (nOd < dOn) ? -1 : ((nOd > dOn) ? +1 : 0);	0
org.apache.commons.math.fraction.Fraction:270-return (double)numerator / (double)denominator;	0
org.apache.commons.math.fraction.Fraction:209-super();	0
org.apache.commons.math.fraction.Fraction:210-if (den == 0) {	0
org.apache.commons.math.fraction.Fraction:214-if (den < 0) {	0
org.apache.commons.math.fraction.Fraction:223-int d = MathUtils.gcd(num, den);	0
org.apache.commons.math.fraction.Fraction:224-if (d > 1) {	0
org.apache.commons.math.fraction.Fraction:230-if (den < 0) {	0
org.apache.commons.math.fraction.Fraction:234-this.numerator = num;	0
org.apache.commons.math.fraction.Fraction:235-this.denominator = den;	0
org.apache.commons.math.fraction.Fraction:236-}	0
org.apache.commons.math.fraction.Fraction:33-public static final Fraction TWO = new Fraction(2, 1);	0
org.apache.commons.math.fraction.Fraction:36-public static final Fraction ONE = new Fraction(1, 1);	0
org.apache.commons.math.fraction.Fraction:39-public static final Fraction ZERO = new Fraction(0, 1);	0
org.apache.commons.math.fraction.Fraction:42-public static final Fraction MINUS_ONE = new Fraction(-1, 1);	0
org.apache.commons.math.fraction.Fraction:60-this(value, 1.0e-5, 100);	0
org.apache.commons.math.fraction.Fraction:61-}	0
org.apache.commons.math.fraction.Fraction:82-this(value, epsilon, Integer.MAX_VALUE, maxIterations);	0
org.apache.commons.math.fraction.Fraction:83-}	0
org.apache.commons.math.fraction.Fraction:102-this(value, 0, maxDenominator, 100);	0
org.apache.commons.math.fraction.Fraction:103-}	0
org.apache.commons.math.fraction.Fraction:138-{	0
org.apache.commons.math.fraction.Fraction:139-long overflow = Integer.MAX_VALUE;	0
org.apache.commons.math.fraction.Fraction:140-double r0 = value;	0
org.apache.commons.math.fraction.Fraction:141-long a0 = (long)Math.floor(r0);	0
org.apache.commons.math.fraction.Fraction:142-if (a0 > overflow) {	0
org.apache.commons.math.fraction.Fraction:143-throw new FractionConversionException(value, a0, 1l);	0
org.apache.commons.math.fraction.Fraction:148-if (Math.abs(a0 - value) < epsilon) {	0
org.apache.commons.math.fraction.Fraction:149-this.numerator = (int) a0;	0
org.apache.commons.math.fraction.Fraction:150-this.denominator = 1;	0
org.apache.commons.math.fraction.Fraction:151-return;	0
org.apache.commons.math.fraction.Fraction:154-long p0 = 1;	0
org.apache.commons.math.fraction.Fraction:155-long q0 = 0;	0
org.apache.commons.math.fraction.Fraction:156-long p1 = a0;	0
org.apache.commons.math.fraction.Fraction:157-long q1 = 1;	0
org.apache.commons.math.fraction.Fraction:159-long p2 = 0;	0
org.apache.commons.math.fraction.Fraction:160-long q2 = 1;	0
org.apache.commons.math.fraction.Fraction:162-int n = 0;	0
org.apache.commons.math.fraction.Fraction:163-boolean stop = false;	0
org.apache.commons.math.fraction.Fraction:165-++n;	0
org.apache.commons.math.fraction.Fraction:166-double r1 = 1.0 / (r0 - a0);	0
org.apache.commons.math.fraction.Fraction:167-long a1 = (long)Math.floor(r1);	0
org.apache.commons.math.fraction.Fraction:168-p2 = (a1 * p1) + p0;	0
org.apache.commons.math.fraction.Fraction:169-q2 = (a1 * q1) + q0;	0
org.apache.commons.math.fraction.Fraction:170-if ((p2 > overflow) || (q2 > overflow)) {	0
org.apache.commons.math.fraction.Fraction:171-throw new FractionConversionException(value, p2, q2);	0
org.apache.commons.math.fraction.Fraction:174-double convergent = (double)p2 / (double)q2;	0
org.apache.commons.math.fraction.Fraction:175-if (n < maxIterations && Math.abs(convergent - value) > epsilon && q2 < maxDenominator) {	0
org.apache.commons.math.util.MathUtils:182-return n;	0
org.apache.commons.math.util.MathUtils:208-return result;	1
org.apache.commons.math.util.MathUtils:95-return addAndCheck(a, b, "overflow: add");	0
org.apache.commons.math.util.MathUtils:179-return 1;	0
org.apache.commons.math.util.MathUtils:181-if ((k == 1) || (k == n - 1)) {	0
org.apache.commons.math.util.MathUtils:184-long result = Math.round(binomialCoefficientDouble(n, k));	1
org.apache.commons.math.util.MathUtils:185-if (result == Long.MAX_VALUE) {	0
org.apache.commons.math.util.MathUtils:269-if ((k == 1) || (k == n - 1)) {	0
org.apache.commons.math.util.MathUtils:286-double logSum = 0;	0
org.apache.commons.math.util.MathUtils:289-for (int i = k + 1; i <= n; i++) {	0
org.apache.commons.math.util.MathUtils:290-logSum += Math.log((double)i);	0
org.apache.commons.math.util.MathUtils:294-for (int i = 2; i <= n - k; i++) {	0
org.apache.commons.math.util.MathUtils:295-logSum -= Math.log((double)i);	0
org.apache.commons.math.util.MathUtils:298-return logSum;	0
org.apache.commons.math.util.MathUtils:111-if (a > b) {	0
org.apache.commons.math.util.MathUtils:113-ret = addAndCheck(b, a, msg);	0
org.apache.commons.math.util.MathUtils:117-if (a < 0) {	0
org.apache.commons.math.util.MathUtils:134-if (a <= Long.MAX_VALUE - b) {	0
org.apache.commons.math.util.MathUtils:135-ret = a + b;	0
org.apache.commons.math.util.MathUtils:141-return ret;	0
org.apache.commons.math.util.MathUtils:170-if (n < k) {	0
org.apache.commons.math.util.MathUtils:174-if (n < 0) {	0
org.apache.commons.math.util.MathUtils:178-if ((n == k) || (k == 0)) {	0
org.apache.commons.math.util.MathUtils:236-return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);	0
org.apache.commons.math.util.MathUtils:258-if (n < k) {	0
org.apache.commons.math.util.MathUtils:262-if (n < 0) {	0
org.apache.commons.math.util.MathUtils:266-if ((n == k) || (k == 0)) {	0
org.apache.commons.math.util.MathUtils:350-private static final long[] factorials = new long[]	0
org.apache.commons.math.util.MathUtils:63-super();	0
org.apache.commons.math.util.MathUtils:64-}	0
org.apache.commons.math.util.MathUtils:77-long s = (long)x + (long)y;	0
org.apache.commons.math.util.MathUtils:78-if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {	0
org.apache.commons.math.util.MathUtils:79-throw new ArithmeticException("overflow: add");	0
org.apache.commons.math.util.MathUtils:81-return (int)s;	0
org.apache.commons.math.util.MathUtils:118-if (b < 0) {	0
org.apache.commons.math.util.MathUtils:120-if (Long.MIN_VALUE - b <= a) {	0
org.apache.commons.math.util.MathUtils:121-ret = a + b;	0
org.apache.commons.math.util.MathUtils:123-throw new ArithmeticException(msg);	0
org.apache.commons.math.util.MathUtils:127-ret = a + b;	0
org.apache.commons.math.util.MathUtils:137-throw new ArithmeticException(msg);	0
org.apache.commons.math.util.MathUtils:171-throw new IllegalArgumentException(	0
org.apache.commons.math.util.MathUtils:175-throw new IllegalArgumentException(	0
org.apache.commons.math.util.MathUtils:186-throw new ArithmeticException(	0
org.apache.commons.math.util.MathUtils:259-throw new IllegalArgumentException(	0
org.apache.commons.math.util.MathUtils:263-throw new IllegalArgumentException(	0
org.apache.commons.math.util.MathUtils:267-return 0;	0
org.apache.commons.math.util.MathUtils:270-return Math.log((double) n);	0
org.apache.commons.math.util.MathUtils:309-return (Math.exp(x) + Math.exp(-x)) / 2.0;	0
org.apache.commons.math.util.MathUtils:321-return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);	0
org.apache.commons.math.util.MathUtils:335-if ((x == null) || (y == null)) {	0
org.apache.commons.math.util.MathUtils:412-if (u * v == 0) {	1
org.apache.commons.math.util.MathUtils:413-return (Math.abs(u) + Math.abs(v));	0
org.apache.commons.math.util.MathUtils:420-if (u > 0) {	0
org.apache.commons.math.util.MathUtils:421-u = -u;	0
org.apache.commons.math.util.MathUtils:423-if (v > 0) {	0
org.apache.commons.math.util.MathUtils:424-v = -v;	0
org.apache.commons.math.util.MathUtils:427-int k = 0;	0
org.apache.commons.math.util.MathUtils:428-while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are	0
org.apache.commons.math.util.MathUtils:430-u /= 2;	0
org.apache.commons.math.util.MathUtils:431-v /= 2;	0
org.apache.commons.math.util.MathUtils:432-k++; // cast out twos.	0
org.apache.commons.math.util.MathUtils:434-if (k == 31) {	0
org.apache.commons.math.util.MathUtils:439-int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;	0
org.apache.commons.math.util.MathUtils:445-while ((t & 1) == 0) { // while t is even..	0
org.apache.commons.math.util.MathUtils:446-t /= 2; // cast out twos	0
org.apache.commons.math.util.MathUtils:449-if (t > 0) {	0
org.apache.commons.math.util.MathUtils:450-u = -t;	0
org.apache.commons.math.util.MathUtils:452-v = t;	0
org.apache.commons.math.util.MathUtils:455-t = (v - u) / 2;	0
org.apache.commons.math.util.MathUtils:458-} while (t != 0);	0
org.apache.commons.math.util.MathUtils:459-return -u * (1 << k); // gcd is u*2^k	0
org.apache.commons.math.util.MathUtils:63-super();	0
org.apache.commons.math.util.MathUtils:64-}	0
org.apache.commons.math.util.MathUtils:77-long s = (long)x + (long)y;	0
org.apache.commons.math.util.MathUtils:78-if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {	0
org.apache.commons.math.util.MathUtils:79-throw new ArithmeticException("overflow: add");	0
org.apache.commons.math.util.MathUtils:81-return (int)s;	0
org.apache.commons.math.util.MathUtils:95-return addAndCheck(a, b, "overflow: add");	0
org.apache.commons.math.util.MathUtils:111-if (a > b) {	0
org.apache.commons.math.util.MathUtils:113-ret = addAndCheck(b, a, msg);	0
org.apache.commons.math.util.MathUtils:117-if (a < 0) {	0
org.apache.commons.math.util.MathUtils:118-if (b < 0) {	0
org.apache.commons.math.util.MathUtils:120-if (Long.MIN_VALUE - b <= a) {	0
org.apache.commons.math.util.MathUtils:121-ret = a + b;	0
org.apache.commons.math.util.MathUtils:123-throw new ArithmeticException(msg);	0
org.apache.commons.math.util.MathUtils:127-ret = a + b;	0
org.apache.commons.math.util.MathUtils:134-if (a <= Long.MAX_VALUE - b) {	0
org.apache.commons.math.util.MathUtils:135-ret = a + b;	0
org.apache.commons.math.util.MathUtils:137-throw new ArithmeticException(msg);	0
org.apache.commons.math.util.MathUtils:141-return ret;	0
org.apache.commons.math.util.MathUtils:171-if (n < k) {	0
org.apache.commons.math.util.MathUtils:172-throw new IllegalArgumentException(	0
org.apache.commons.math.util.MathUtils:175-if (n < 0) {	0
org.apache.commons.math.util.MathUtils:176-throw new IllegalArgumentException(	0
org.apache.commons.math.util.MathUtils:179-if ((n == k) || (k == 0)) {	0
org.apache.commons.math.util.MathUtils:180-return 1;	0
org.apache.commons.math.util.MathUtils:182-if ((k == 1) || (k == n - 1)) {	0
org.apache.commons.math.util.MathUtils:183-return n;	0
org.apache.commons.math.util.MathUtils:186-long result = Math.round(binomialCoefficientDouble(n, k));	0
org.apache.commons.math.util.MathUtils:187-if (result == Long.MAX_VALUE) {	0
org.apache.commons.math.distribution.FDistributionImpl:119-return 0.0;	0
org.apache.commons.math.distribution.FDistributionImpl:132-return Double.MAX_VALUE;	0
org.apache.commons.math.distribution.FDistributionImpl:145-double d = getDenominatorDegreesOfFreedom();	0
org.apache.commons.math.distribution.FDistributionImpl:147-ret = d / (d - 2.0);	0
org.apache.commons.math.distribution.FDistributionImpl:148-return ret;	0
org.apache.commons.math.distribution.FDistributionImpl:106-return super.inverseCumulativeProbability(p);	0
org.apache.commons.math.distribution.FDistributionImpl:75-double n = getNumeratorDegreesOfFreedom();	0
org.apache.commons.math.distribution.FDistributionImpl:76-double m = getDenominatorDegreesOfFreedom();	0
org.apache.commons.math.distribution.FDistributionImpl:78-ret = Beta.regularizedBeta((n * x) / (m + n * x),	0
org.apache.commons.math.distribution.FDistributionImpl:100-if (p == 0) {	0
org.apache.commons.math.distribution.FDistributionImpl:103-if (p == 1) {	0
org.apache.commons.math.distribution.FDistributionImpl:72-if (x <= 0.0) {	0
org.apache.commons.math.distribution.FDistributionImpl:82-return ret;	0
org.apache.commons.math.distribution.FDistributionImpl:170-return numeratorDegreesOfFreedom;	0
org.apache.commons.math.distribution.FDistributionImpl:192-return denominatorDegreesOfFreedom;	0
org.apache.commons.math.distribution.FDistributionImpl:50-super();	0
org.apache.commons.math.distribution.FDistributionImpl:51-setNumeratorDegreesOfFreedom(numeratorDegreesOfFreedom);	0
org.apache.commons.math.distribution.FDistributionImpl:52-setDenominatorDegreesOfFreedom(denominatorDegreesOfFreedom);	0
org.apache.commons.math.distribution.FDistributionImpl:53-}	0
org.apache.commons.math.distribution.FDistributionImpl:158-if (degreesOfFreedom <= 0.0) {	0
org.apache.commons.math.distribution.FDistributionImpl:162-this.numeratorDegreesOfFreedom = degreesOfFreedom;	0
org.apache.commons.math.distribution.FDistributionImpl:163-}	0
org.apache.commons.math.distribution.FDistributionImpl:180-if (degreesOfFreedom <= 0.0) {	0
org.apache.commons.math.distribution.FDistributionImpl:184-this.denominatorDegreesOfFreedom = degreesOfFreedom;	0
org.apache.commons.math.distribution.FDistributionImpl:185-}	0
org.apache.commons.math.distribution.FDistributionImpl:73-ret = 0.0;	0
org.apache.commons.math.distribution.FDistributionImpl:101-return 0d;	0
org.apache.commons.math.distribution.FDistributionImpl:104-return Double.POSITIVE_INFINITY;	0
org.apache.commons.math.distribution.FDistributionImpl:159-throw new IllegalArgumentException(	0
org.apache.commons.math.distribution.FDistributionImpl:181-throw new IllegalArgumentException(	0
org.apache.commons.math.complex.Complex:277-if (isNaN()) {	0
org.apache.commons.math.complex.Complex:280-return 37 * (17 * MathUtils.hash(imaginary) +	0
org.apache.commons.math.complex.Complex:258-ret = (Double.doubleToRawLongBits(real) == Double.doubleToRawLongBits(rhs.getReal())) && (Double.doubleToRawLongBits(imaginary) == Double.doubleToRawLongBits(rhs.getImaginary()));	1
org.apache.commons.math.complex.Complex:255-if (rhs.isNaN()) {	0
org.apache.commons.math.complex.Complex:263-}	0
org.apache.commons.math.complex.Complex:254-Complex rhs = (Complex)other;	0
org.apache.commons.math.complex.Complex:250-} else if (other == null) {	0
org.apache.commons.math.complex.Complex:363-return createComplex(real * rhs.real - imaginary * rhs.imaginary,	0
org.apache.commons.math.complex.Complex:248-if (this == other) {	0
org.apache.commons.math.complex.Complex:266-return ret;	0
org.apache.commons.math.complex.Complex:358-if (Double.isInfinite(real) || Double.isInfinite(imaginary) ||	0
org.apache.commons.math.complex.Complex:355-if (isNaN() || rhs.isNaN()) {	0
org.apache.commons.math.complex.Complex:872-return new Complex(real, imaginary);	0
org.apache.commons.math.complex.Complex:299-return real;	0
org.apache.commons.math.complex.Complex:310-return Double.isNaN(real) || Double.isNaN(imaginary);	0
org.apache.commons.math.complex.Complex:76-super();	0
org.apache.commons.math.complex.Complex:77-this.real = real;	0
org.apache.commons.math.complex.Complex:78-this.imaginary = imaginary;	0
org.apache.commons.math.complex.Complex:79-}	0
org.apache.commons.math.complex.Complex:45-public static final Complex I = new Complex(0.0, 1.0);	0
org.apache.commons.math.complex.Complex:48-public static final Complex NaN = new Complex(Double.NaN, Double.NaN);	0
org.apache.commons.math.complex.Complex:51-public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);	0
org.apache.commons.math.complex.Complex:54-public static final Complex ONE = new Complex(1.0, 0.0);	0
org.apache.commons.math.complex.Complex:57-public static final Complex ZERO = new Complex(0.0, 0.0);	0
org.apache.commons.math.complex.Complex:92-if (isNaN()) {	0
org.apache.commons.math.complex.Complex:93-return Double.NaN;	0
org.apache.commons.math.complex.Complex:96-if (isInfinite()) {	0
org.apache.commons.math.complex.Complex:97-return Double.POSITIVE_INFINITY;	0
org.apache.commons.math.complex.Complex:100-if (Math.abs(real) < Math.abs(imaginary)) {	0
org.apache.commons.math.complex.Complex:101-if (imaginary == 0.0) {	0
org.apache.commons.math.complex.Complex:102-return Math.abs(real);	0
org.apache.commons.math.complex.Complex:104-double q = real / imaginary;	0
org.apache.commons.math.complex.Complex:105-return (Math.abs(imaginary) * Math.sqrt(1 + q*q));	0
org.apache.commons.math.complex.Complex:107-if (real == 0.0) {	0
org.apache.commons.math.complex.Complex:108-return Math.abs(imaginary);	0
org.apache.commons.math.complex.Complex:110-double q = imaginary / real;	0
org.apache.commons.math.complex.Complex:111-return (Math.abs(real) * Math.sqrt(1 + q*q));	0
org.apache.commons.math.complex.Complex:133-return createComplex(real + rhs.getReal(),	0
org.apache.commons.math.complex.Complex:152-if (isNaN()) {	0
org.apache.commons.math.complex.Complex:153-return NaN;	0
org.apache.commons.math.complex.Complex:155-return createComplex(real, -imaginary);	0
org.apache.commons.math.complex.Complex:194-if (isNaN() || rhs.isNaN()) {	0
org.apache.commons.math.complex.Complex:195-return NaN;	0
org.apache.commons.math.complex.Complex:198-double c = rhs.getReal();	0
org.apache.commons.math.complex.Complex:199-double d = rhs.getImaginary();	0
org.apache.commons.math.complex.Complex:200-if (c == 0.0 && d == 0.0) {	0
org.apache.commons.math.complex.Complex:201-return NaN;	0
org.apache.commons.math.complex.Complex:204-if (rhs.isInfinite() && !isInfinite()) {	0
org.apache.commons.math.complex.Complex:205-return ZERO;	0
org.apache.commons.math.complex.Complex:208-if (Math.abs(c) < Math.abs(d)) {	0
org.apache.commons.math.analysis.BrentSolver:141-throw new IllegalArgumentException	0
org.apache.commons.math.analysis.BrentSolver:193-setResult(x1, i);	0
org.apache.commons.math.analysis.BrentSolver:194-return result;	0
org.apache.commons.math.analysis.BrentSolver:147-ret = solve(min, yMin, max, yMax, min, yMin);	0
org.apache.commons.math.analysis.BrentSolver:151-return ret;	0
org.apache.commons.math.analysis.BrentSolver:175-double delta = x1 - x0;	0
org.apache.commons.math.analysis.BrentSolver:176-double oldDelta = delta;	0
org.apache.commons.math.analysis.BrentSolver:178-int i = 0;	0
org.apache.commons.math.analysis.BrentSolver:179-while (i < maximalIterationCount) {	0
org.apache.commons.math.analysis.BrentSolver:180-if (Math.abs(y2) < Math.abs(y1)) {	0
org.apache.commons.math.analysis.BrentSolver:182-x0 = x1;	0
org.apache.commons.math.analysis.BrentSolver:183-x1 = x2;	0
org.apache.commons.math.analysis.BrentSolver:184-x2 = x0;	0
org.apache.commons.math.analysis.BrentSolver:185-y0 = y1;	0
org.apache.commons.math.analysis.BrentSolver:186-y1 = y2;	0
org.apache.commons.math.analysis.BrentSolver:187-y2 = y0;	0
org.apache.commons.math.analysis.BrentSolver:189-if (Math.abs(y1) <= functionValueAccuracy) {	0
org.apache.commons.math.analysis.BrentSolver:42-super(f, 100, 1E-6);	0
org.apache.commons.math.analysis.BrentSolver:43-}	0
org.apache.commons.math.analysis.BrentSolver:128-clearResult();	0
org.apache.commons.math.analysis.BrentSolver:129-verifyInterval(min, max);	0
org.apache.commons.math.analysis.BrentSolver:131-double ret = Double.NaN;	0
org.apache.commons.math.analysis.BrentSolver:133-double yMin = f.value(min);	0
org.apache.commons.math.analysis.BrentSolver:134-double yMax = f.value(max);	0
org.apache.commons.math.analysis.BrentSolver:137-double sign = yMin * yMax;	0
org.apache.commons.math.analysis.BrentSolver:138-if (sign >= 0) {	1
org.apache.commons.math.analysis.BrentSolver:67-if (((initial - min) * (max -initial)) < 0) {	0
org.apache.commons.math.analysis.BrentSolver:68-throw new IllegalArgumentException("Initial guess is not in search" +	0
org.apache.commons.math.analysis.BrentSolver:74-double yInitial = f.value(initial);	0
org.apache.commons.math.analysis.BrentSolver:75-if (Math.abs(yInitial) <= functionValueAccuracy) {	0
org.apache.commons.math.analysis.BrentSolver:76-setResult(initial, 0);	0
org.apache.commons.math.analysis.BrentSolver:77-return result;	0
org.apache.commons.math.analysis.BrentSolver:81-double yMin = f.value(min);	0
org.apache.commons.math.analysis.BrentSolver:82-if (Math.abs(yMin) <= functionValueAccuracy) {	0
org.apache.commons.math.analysis.BrentSolver:83-setResult(yMin, 0);	0
org.apache.commons.math.analysis.BrentSolver:84-return result;	0
org.apache.commons.math.analysis.BrentSolver:88-if (yInitial * yMin < 0) {	0
org.apache.commons.math.analysis.BrentSolver:89-return solve(min, yMin, initial, yInitial, min, yMin);	0
org.apache.commons.math.analysis.BrentSolver:93-double yMax = f.value(max);	0
org.apache.commons.math.analysis.BrentSolver:94-if (Math.abs(yMax) <= functionValueAccuracy) {	0
org.apache.commons.math.analysis.BrentSolver:95-setResult(yMax, 0);	0
org.apache.commons.math.analysis.BrentSolver:96-return result;	0
org.apache.commons.math.analysis.BrentSolver:100-if (yInitial * yMax < 0) {	0
org.apache.commons.math.analysis.BrentSolver:101-return solve(initial, yInitial, max, yMax, initial, yInitial);	0
org.apache.commons.math.analysis.BrentSolver:105-return solve(min, yMin, max, yMax, initial, yInitial);	0
org.apache.commons.math.analysis.BrentSolver:196-double dx = (x2 - x1);	0
org.apache.commons.math.analysis.BrentSolver:197-double tolerance =	0
org.apache.commons.math.analysis.BrentSolver:199-if (Math.abs(dx) <= tolerance) {	0
org.apache.commons.math.analysis.BrentSolver:200-setResult(x1, i);	0
org.apache.commons.math.analysis.BrentSolver:201-return result;	0
org.apache.commons.math.estimation.AbstractEstimator:73-incrementJacobianEvaluationsCounter();	0
org.apache.commons.math.estimation.AbstractEstimator:74-Arrays.fill(jacobian, 0);	0
org.apache.commons.math.estimation.AbstractEstimator:75-for (int i = 0, index = 0; i < rows; i++) {	0
org.apache.commons.math.estimation.AbstractEstimator:76-WeightedMeasurement wm = measurements[i];	0
org.apache.commons.math.estimation.AbstractEstimator:77-double factor = -Math.sqrt(wm.getWeight());	0
org.apache.commons.math.estimation.AbstractEstimator:78-for (int j = 0; j < cols; ++j) {	0
org.apache.commons.math.estimation.AbstractEstimator:79-jacobian[index++] = factor * wm.getPartial(parameters[j]);	0
org.apache.commons.math.estimation.AbstractEstimator:82-}	0
org.apache.commons.math.estimation.AbstractEstimator:162-updateJacobian();	0
org.apache.commons.math.estimation.AbstractEstimator:165-final int rows = problem.getMeasurements().length;	0
org.apache.commons.math.estimation.AbstractEstimator:166-final int cols = problem.getAllParameters().length;	1
org.apache.commons.math.estimation.AbstractEstimator:167-final int max= cols * rows;	0
org.apache.commons.math.estimation.AbstractEstimator:168-double[][] jTj = new double[cols][cols];	0
org.apache.commons.math.estimation.AbstractEstimator:169-for (int i = 0; i < cols; ++i) {	0
org.apache.commons.math.estimation.AbstractEstimator:170-for (int j = i; j < cols; ++j) {	0
org.apache.commons.math.estimation.AbstractEstimator:171-double sum = 0;	0
org.apache.commons.math.estimation.AbstractEstimator:172-for (int k = 0; k < max; k += cols) {	0
org.apache.commons.math.estimation.AbstractEstimator:173-sum += jacobian[k + i] * jacobian[k + j];	0
org.apache.commons.math.estimation.AbstractEstimator:127-WeightedMeasurement[] wm = problem.getMeasurements();	0
org.apache.commons.math.estimation.AbstractEstimator:128-double criterion = 0;	0
org.apache.commons.math.estimation.AbstractEstimator:129-for (int i = 0; i < wm.length; ++i) {	0
org.apache.commons.math.estimation.AbstractEstimator:130-double residual = wm[i].getResidual();	0
org.apache.commons.math.estimation.AbstractEstimator:131-criterion += wm[i].getWeight() * residual * residual;	0
org.apache.commons.math.estimation.AbstractEstimator:133-return Math.sqrt(criterion / wm.length);	0
org.apache.commons.math.estimation.AbstractEstimator:57-return costEvaluations;	0
org.apache.commons.math.estimation.AbstractEstimator:99-if (++costEvaluations > maxCostEval) {	0
org.apache.commons.math.estimation.AbstractEstimator:104-cost = 0;	0
org.apache.commons.math.estimation.AbstractEstimator:105-for (int i = 0, index = 0; i < rows; i++, index += cols) {	0
org.apache.commons.math.estimation.AbstractEstimator:106-WeightedMeasurement wm = measurements[i];	0
org.apache.commons.math.estimation.AbstractEstimator:107-double residual = wm.getResidual();	0
org.apache.commons.math.estimation.AbstractEstimator:108-residuals[i] = Math.sqrt(wm.getWeight()) * residual;	0
org.apache.commons.math.estimation.AbstractEstimator:109-cost += wm.getWeight() * residual * residual;	0
org.apache.commons.math.estimation.AbstractEstimator:111-cost = Math.sqrt(cost);	0
org.apache.commons.math.estimation.AbstractEstimator:113-}	0
org.apache.commons.math.estimation.AbstractEstimator:38-protected AbstractEstimator() {	0
org.apache.commons.math.estimation.AbstractEstimator:39-}	0
org.apache.commons.math.estimation.AbstractEstimator:48-this.maxCostEval = maxCostEval;	0
org.apache.commons.math.estimation.AbstractEstimator:49-}	0
org.apache.commons.math.estimation.AbstractEstimator:88-++jacobianEvaluations;	0
org.apache.commons.math.estimation.AbstractEstimator:89-}	0
org.apache.commons.math.estimation.AbstractEstimator:226-costEvaluations = 0;	0
org.apache.commons.math.estimation.AbstractEstimator:227-jacobianEvaluations = 0;	0
org.apache.commons.math.estimation.AbstractEstimator:230-measurements = problem.getMeasurements();	0
org.apache.commons.math.estimation.AbstractEstimator:231-parameters = problem.getUnboundParameters();	0
org.apache.commons.math.estimation.AbstractEstimator:234-rows= measurements.length;	0
org.apache.commons.math.estimation.AbstractEstimator:235-cols= parameters.length;	0
org.apache.commons.math.estimation.AbstractEstimator:236-jacobian= new double[rows * cols];	0
org.apache.commons.math.estimation.AbstractEstimator:237-residuals = new double[rows];	0
org.apache.commons.math.estimation.AbstractEstimator:239-cost = Double.POSITIVE_INFINITY;	0
org.apache.commons.math.estimation.AbstractEstimator:241-}	0
org.apache.commons.math.complex.ComplexFormat:349-sign = 1;	0
org.apache.commons.math.complex.ComplexFormat:350-break;	0
org.apache.commons.math.complex.ComplexFormat:58-this(DEFAULT_IMAGINARY_CHARACTER, getDefaultNumberFormat());	0
org.apache.commons.math.complex.ComplexFormat:59-}	0
org.apache.commons.math.complex.ComplexFormat:237-return getDefaultNumberFormat(Locale.getDefault());	0
org.apache.commons.math.complex.ComplexFormat:361-parseAndIgnoreWhitespace(source, pos);	0
org.apache.commons.math.complex.ComplexFormat:364-Number im = parseNumber(source, getRealFormat(), pos);	0
org.apache.commons.math.complex.ComplexFormat:365-if (im == null) {	0
org.apache.commons.math.complex.ComplexFormat:374-int n = getImaginaryCharacter().length();	0
org.apache.commons.math.complex.ComplexFormat:375-startIndex = pos.getIndex();	0
org.apache.commons.math.complex.ComplexFormat:376-int endIndex = startIndex + n;	0
org.apache.commons.math.complex.ComplexFormat:377-if (	1
org.apache.commons.math.complex.ComplexFormat:321-int initialIndex = pos.getIndex();	0
org.apache.commons.math.complex.ComplexFormat:324-parseAndIgnoreWhitespace(source, pos);	0
org.apache.commons.math.complex.ComplexFormat:327-Number re = parseNumber(source, getRealFormat(), pos);	0
org.apache.commons.math.complex.ComplexFormat:328-if (re == null) {	0
org.apache.commons.math.complex.ComplexFormat:337-int startIndex = pos.getIndex();	0
org.apache.commons.math.complex.ComplexFormat:338-char c = parseNextCharacter(source, pos);	0
org.apache.commons.math.complex.ComplexFormat:339-int sign = 0;	0
org.apache.commons.math.complex.ComplexFormat:340-switch (c) {	0
org.apache.commons.math.complex.ComplexFormat:399-parseNextCharacter(source, pos);	0
org.apache.commons.math.complex.ComplexFormat:400-pos.setIndex(pos.getIndex() - 1);	0
org.apache.commons.math.complex.ComplexFormat:401-}	0
org.apache.commons.math.complex.ComplexFormat:411-int index = pos.getIndex();	0
org.apache.commons.math.complex.ComplexFormat:412-int n = source.length();	0
org.apache.commons.math.complex.ComplexFormat:413-char ret = 0;	0
org.apache.commons.math.complex.ComplexFormat:415-if (index < n) {	0
org.apache.commons.math.complex.ComplexFormat:418-c = source.charAt(index++);	0
org.apache.commons.math.complex.ComplexFormat:419-} while (Character.isWhitespace(c) && index < n);	0
org.apache.commons.math.complex.ComplexFormat:420-pos.setIndex(index);	0
org.apache.commons.math.complex.ComplexFormat:422-if (index < n) {	0
org.apache.commons.math.complex.ComplexFormat:423-ret = c;	0
org.apache.commons.math.complex.ComplexFormat:427-return ret;	0
org.apache.commons.math.complex.ComplexFormat:471-int startIndex = pos.getIndex();	0
org.apache.commons.math.complex.ComplexFormat:472-Number number = format.parse(source, pos);	0
org.apache.commons.math.complex.ComplexFormat:473-int endIndex = pos.getIndex();	0
org.apache.commons.math.complex.ComplexFormat:476-if (startIndex == endIndex) {	0
org.apache.commons.math.complex.ComplexFormat:487-return number;	0
org.apache.commons.math.complex.ComplexFormat:258-return imaginaryCharacter;	0
org.apache.commons.math.complex.ComplexFormat:292-return realFormat;	0
org.apache.commons.math.complex.ComplexFormat:67-this(DEFAULT_IMAGINARY_CHARACTER, format);	0
org.apache.commons.math.complex.ComplexFormat:68-}	0
org.apache.commons.math.complex.ComplexFormat:97-this(imaginaryCharacter, format, (NumberFormat)format.clone());	0
org.apache.commons.math.complex.ComplexFormat:98-}	0
org.apache.commons.math.complex.ComplexFormat:110-super();	0
org.apache.commons.math.complex.ComplexFormat:111-setImaginaryCharacter(imaginaryCharacter);	0
org.apache.commons.math.complex.ComplexFormat:112-setImaginaryFormat(imaginaryFormat);	0
org.apache.commons.math.complex.ComplexFormat:113-setRealFormat(realFormat);	0
org.apache.commons.math.complex.ComplexFormat:114-}	0
org.apache.commons.math.complex.ComplexFormat:248-NumberFormat nf = NumberFormat.getInstance(locale);	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:66-if ((expected.length < 2) || (expected.length != observed.length)) {	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:70-if (!isPositive(expected) || !isNonNegative(observed)) {	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:74-double sumSq = 0.0d;	1
org.apache.commons.math.stat.inference.ChiSquareTestImpl:75-double dev = 0.0d;	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:76-for (int i = 0; i < observed.length; i++) {	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:77-dev = ((double) observed[i] - expected[i]);	1
org.apache.commons.math.stat.inference.ChiSquareTestImpl:78-sumSq += dev * dev / expected[i];	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:80-return sumSq;	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:97-distribution.setDegreesOfFreedom(expected.length - 1.0);	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:98-return 1.0 - distribution.cumulativeProbability(	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:350-for (int i = 0; i < in.length; i ++) {	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:351-if (in[i] <= 0) {	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:355-return true;	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:367-for (int i = 0; i < in.length; i ++) {	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:368-if (in[i] < 0) {	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:372-return true;	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:39-this(new ChiSquaredDistributionImpl(1.0));	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:40-}	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:49-super();	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:50-setDistribution(x);	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:51-}	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:402-distribution = value;	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:403-}	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:67-throw new IllegalArgumentException(	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:71-throw new IllegalArgumentException(	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:118-if ((alpha <= 0) || (alpha > 0.5)) {	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:119-throw new IllegalArgumentException(	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:122-return (chiSquareTest(expected, observed) < alpha);	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:132-checkArray(counts);	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:133-int nRows = counts.length;	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:134-int nCols = counts[0].length;	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:137-double[] rowSum = new double[nRows];	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:138-double[] colSum = new double[nCols];	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:139-double total = 0.0d;	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:140-for (int row = 0; row < nRows; row++) {	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:141-for (int col = 0; col < nCols; col++) {	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:142-rowSum[row] += (double) counts[row][col];	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:143-colSum[col] += (double) counts[row][col];	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:144-total += (double) counts[row][col];	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:149-double sumSq = 0.0d;	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:150-double expected = 0.0d;	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:151-for (int row = 0; row < nRows; row++) {	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:152-for (int col = 0; col < nCols; col++) {	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:153-expected = (rowSum[row] * colSum[col]) / total;	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:154-sumSq += (((double) counts[row][col] - expected) *	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:158-return sumSq;	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:169-checkArray(counts);	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:170-double df = ((double) counts.length -1) * ((double) counts[0].length - 1);	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:171-distribution.setDegreesOfFreedom(df);	0
org.apache.commons.math.stat.inference.ChiSquareTestImpl:172-return 1 - distribution.cumulativeProbability(chiSquare(counts));	0
org.apache.commons.math.distribution.NormalDistributionImpl:109-return 0.5 * (1.0 + Erf.erf((x - mean) /	1
org.apache.commons.math.distribution.NormalDistributionImpl:50-super();	0
org.apache.commons.math.distribution.NormalDistributionImpl:39-private double mean = 0;	0
org.apache.commons.math.distribution.NormalDistributionImpl:42-private double standardDeviation = 1;	0
org.apache.commons.math.distribution.NormalDistributionImpl:51-setMean(mean);	0
org.apache.commons.math.distribution.NormalDistributionImpl:52-setStandardDeviation(sd);	0
org.apache.commons.math.distribution.NormalDistributionImpl:53-}	0
org.apache.commons.math.distribution.NormalDistributionImpl:76-this.mean = mean;	0
org.apache.commons.math.distribution.NormalDistributionImpl:77-}	0
org.apache.commons.math.distribution.NormalDistributionImpl:93-if (sd <= 0.0) {	0
org.apache.commons.math.distribution.NormalDistributionImpl:97-standardDeviation = sd;	0
org.apache.commons.math.distribution.NormalDistributionImpl:98-}	0
org.apache.commons.math.distribution.NormalDistributionImpl:60-this(0.0, 1.0);	0
org.apache.commons.math.distribution.NormalDistributionImpl:61-}	0
org.apache.commons.math.distribution.NormalDistributionImpl:68-return mean;	0
org.apache.commons.math.distribution.NormalDistributionImpl:84-return standardDeviation;	0
org.apache.commons.math.distribution.NormalDistributionImpl:94-throw new IllegalArgumentException(	0
org.apache.commons.math.distribution.NormalDistributionImpl:129-if (p == 0) {	0
org.apache.commons.math.distribution.NormalDistributionImpl:130-return Double.NEGATIVE_INFINITY;	0
org.apache.commons.math.distribution.NormalDistributionImpl:132-if (p == 1) {	0
org.apache.commons.math.distribution.NormalDistributionImpl:133-return Double.POSITIVE_INFINITY;	0
org.apache.commons.math.distribution.NormalDistributionImpl:135-return super.inverseCumulativeProbability(p);	0
org.apache.commons.math.distribution.NormalDistributionImpl:150-if (p < .5) {	0
org.apache.commons.math.distribution.NormalDistributionImpl:151-ret = -Double.MAX_VALUE;	0
org.apache.commons.math.distribution.NormalDistributionImpl:153-ret = getMean();	0
org.apache.commons.math.distribution.NormalDistributionImpl:156-return ret;	0
org.apache.commons.math.distribution.NormalDistributionImpl:171-if (p < .5) {	0
org.apache.commons.math.distribution.NormalDistributionImpl:172-ret = getMean();	0
org.apache.commons.math.distribution.NormalDistributionImpl:174-ret = Double.MAX_VALUE;	0
org.apache.commons.math.distribution.NormalDistributionImpl:177-return ret;	0
org.apache.commons.math.distribution.NormalDistributionImpl:191-if (p < .5) {	0
org.apache.commons.math.distribution.NormalDistributionImpl:192-ret = getMean() - getStandardDeviation();	0
org.apache.commons.math.distribution.NormalDistributionImpl:193-} else if (p > .5) {	0
org.apache.commons.math.distribution.NormalDistributionImpl:194-ret = getMean() + getStandardDeviation();	0
org.apache.commons.math.distribution.NormalDistributionImpl:196-ret = getMean();	0
org.apache.commons.math.distribution.NormalDistributionImpl:199-return ret;	0
org.apache.commons.math.special.Gamma:162-} else if (a >= 1.0 && x > a) {	0
org.apache.commons.math.special.Gamma:168-double n = 0.0; // current element index	0
org.apache.commons.math.special.Gamma:169-double an = 1.0 / a; // n-th element in the series	0
org.apache.commons.math.special.Gamma:170-double sum = an; // partial sum	0
org.apache.commons.math.special.Gamma:171-while (Math.abs(an) > epsilon && n < maxIterations) {	0
org.apache.commons.math.special.Gamma:173-n = n + 1.0;	0
org.apache.commons.math.special.Gamma:174-an = an * (x / (a + n));	0
org.apache.commons.math.special.Gamma:177-sum = sum + an;	0
org.apache.commons.math.special.Gamma:179-if (n >= maxIterations) {	0
org.apache.commons.math.special.Gamma:182-ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * sum;	0
org.apache.commons.math.special.Gamma:237-} else if (x < a || a < 1.0) {	0
org.apache.commons.math.special.Gamma:243-ContinuedFraction cf = new ContinuedFraction() {	0
org.apache.commons.math.special.Gamma:256-ret = 1.0 / cf.evaluate(x, epsilon, maxIterations);	0
org.apache.commons.math.special.Gamma:257-ret = Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * ret;	0
org.apache.commons.math.special.Gamma:93-double g = 607.0 / 128.0;	0
org.apache.commons.math.special.Gamma:95-double sum = 0.0;	0
org.apache.commons.math.special.Gamma:96-for (int i = lanczos.length - 1; i > 0; --i) {	0
org.apache.commons.math.special.Gamma:97-sum = sum + (lanczos[i] / (x + i));	0
org.apache.commons.math.special.Gamma:99-sum = sum + lanczos[0];	0
org.apache.commons.math.special.Gamma:101-double tmp = x + g + .5;	0
org.apache.commons.math.special.Gamma:102-ret = ((x + .5) * Math.log(tmp)) - tmp +	0
org.apache.commons.math.special.Gamma:160-} else if (x == 0.0) {	0
org.apache.commons.math.special.Gamma:235-} else if (x == 0.0) {	0
org.apache.commons.math.special.Gamma:90-if (Double.isNaN(x) || (x <= 0.0)) {	0
org.apache.commons.math.special.Gamma:106-return ret;	0
org.apache.commons.math.special.Gamma:120-return regularizedGammaP(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);	0
org.apache.commons.math.special.Gamma:158-if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {	0
org.apache.commons.math.special.Gamma:186-return ret;	0
org.apache.commons.math.special.Gamma:200-return regularizedGammaQ(a, x, DEFAULT_EPSILON, Integer.MAX_VALUE);	0
org.apache.commons.math.special.Gamma:233-if (Double.isNaN(a) || Double.isNaN(x) || (a <= 0.0) || (x < 0.0)) {	0
org.apache.commons.math.special.Gamma:260-return ret;	0
org.apache.commons.math.special.Gamma:40-private static double[] lanczos =	0
org.apache.commons.math.special.Gamma:60-private static final double HALF_LOG_2_PI = 0.5 * Math.log(2.0 * Math.PI);	0
org.apache.commons.math.special.Gamma:67-super();	0
org.apache.commons.math.special.Gamma:68-}	0
org.apache.commons.math.special.Gamma:91-ret = Double.NaN;	0
org.apache.commons.math.special.Gamma:159-ret = Double.NaN;	0
org.apache.commons.math.special.Gamma:161-ret = 0.0;	0
org.apache.commons.math.special.Gamma:165-ret = 1.0 - regularizedGammaQ(a, x, epsilon, maxIterations);	0
org.apache.commons.math.special.Gamma:180-throw new MaxIterationsExceededException(maxIterations);	0
org.apache.commons.math.special.Gamma:234-ret = Double.NaN;	0
org.apache.commons.math.special.Gamma:236-ret = 1.0;	0
org.apache.commons.math.special.Gamma:240-ret = 1.0 - regularizedGammaP(a, x, epsilon, maxIterations);	0
org.apache.commons.math.stat.regression.SimpleRegression:89-super();	0
org.apache.commons.math.stat.regression.SimpleRegression:60-private double sumX = 0d;	0
org.apache.commons.math.stat.regression.SimpleRegression:63-private double sumXX = 0d;	0
org.apache.commons.math.stat.regression.SimpleRegression:66-private double sumY = 0d;	0
org.apache.commons.math.stat.regression.SimpleRegression:69-private double sumYY = 0d;	0
org.apache.commons.math.stat.regression.SimpleRegression:72-private double sumXY = 0d;	0
org.apache.commons.math.stat.regression.SimpleRegression:75-private long n = 0;	0
org.apache.commons.math.stat.regression.SimpleRegression:78-private double xbar = 0;	0
org.apache.commons.math.stat.regression.SimpleRegression:81-private double ybar = 0;	0
org.apache.commons.math.stat.regression.SimpleRegression:90-}	0
org.apache.commons.math.stat.regression.SimpleRegression:106-if (n == 0) {	0
org.apache.commons.math.stat.regression.SimpleRegression:107-xbar = x;	0
org.apache.commons.math.stat.regression.SimpleRegression:108-ybar = y;	0
org.apache.commons.math.stat.regression.SimpleRegression:110-double dx = x - xbar;	0
org.apache.commons.math.stat.regression.SimpleRegression:111-double dy = y - ybar;	0
org.apache.commons.math.stat.regression.SimpleRegression:112-sumXX += dx * dx * (double) n / (double) (n + 1.0);	0
org.apache.commons.math.stat.regression.SimpleRegression:113-sumYY += dy * dy * (double) n / (double) (n + 1.0);	0
org.apache.commons.math.stat.regression.SimpleRegression:114-sumXY += dx * dy * (double) n / (double) (n + 1.0);	0
org.apache.commons.math.stat.regression.SimpleRegression:115-xbar += dx / (double) (n + 1.0);	0
org.apache.commons.math.stat.regression.SimpleRegression:116-ybar += dy / (double) (n + 1.0);	0
org.apache.commons.math.stat.regression.SimpleRegression:118-sumX += x;	0
org.apache.commons.math.stat.regression.SimpleRegression:119-sumY += y;	0
org.apache.commons.math.stat.regression.SimpleRegression:120-n++;	0
org.apache.commons.math.stat.regression.SimpleRegression:121-}	0
org.apache.commons.math.stat.regression.SimpleRegression:264-return sumYY - sumXY * sumXY / sumXX;	1
org.apache.commons.math.stat.regression.SimpleRegression:140-for (int i = 0; i < data.length; i++) {	0
org.apache.commons.math.stat.regression.SimpleRegression:141-addData(data[i][0], data[i][1]);	0
org.apache.commons.math.stat.regression.SimpleRegression:143-}	0
org.apache.commons.math.stat.regression.SimpleRegression:149-sumX = 0d;	0
org.apache.commons.math.stat.regression.SimpleRegression:150-sumXX = 0d;	0
org.apache.commons.math.stat.regression.SimpleRegression:151-sumY = 0d;	0
org.apache.commons.math.stat.regression.SimpleRegression:152-sumYY = 0d;	0
org.apache.commons.math.stat.regression.SimpleRegression:153-sumXY = 0d;	0
org.apache.commons.math.stat.regression.SimpleRegression:154-n = 0;	0
org.apache.commons.math.stat.regression.SimpleRegression:155-}	0
org.apache.commons.math.stat.regression.SimpleRegression:163-return n;	0
org.apache.commons.math.stat.regression.SimpleRegression:184-double b1 = getSlope();	0
org.apache.commons.math.stat.regression.SimpleRegression:185-return getIntercept(b1) + b1 * x;	0
org.apache.commons.math.stat.regression.SimpleRegression:205-return getIntercept(getSlope());	0
org.apache.commons.math.stat.regression.SimpleRegression:225-if (n < 2) {	0
org.apache.commons.math.stat.regression.SimpleRegression:226-return Double.NaN; //not enough data	0
org.apache.commons.math.stat.regression.SimpleRegression:228-if (Math.abs(sumXX) < 10 * Double.MIN_VALUE) {	0
org.apache.commons.math.stat.regression.SimpleRegression:229-return Double.NaN; //not enough variation in x	0
org.apache.commons.math.stat.regression.SimpleRegression:231-return sumXY / sumXX;	0
org.apache.commons.math.stat.regression.SimpleRegression:278-if (n < 2) {	0
org.apache.commons.math.stat.regression.SimpleRegression:279-return Double.NaN;	0
org.apache.commons.math.stat.regression.SimpleRegression:281-return sumYY;	0
org.apache.commons.math.stat.regression.SimpleRegression:301-return getRegressionSumSquares(getSlope());	0
org.apache.commons.math.stat.regression.SimpleRegression:315-if (n < 3) {	0
org.apache.commons.math.stat.regression.SimpleRegression:316-return Double.NaN;	0
org.apache.commons.math.fraction.ProperFractionFormat:168-int startIndex = pos.getIndex();	0
org.apache.commons.math.fraction.ProperFractionFormat:169-char c = parseNextCharacter(source, pos);	0
org.apache.commons.math.fraction.ProperFractionFormat:170-switch (c) {	0
org.apache.commons.math.fraction.ProperFractionFormat:177-break;	0
org.apache.commons.math.fraction.ProperFractionFormat:188-parseAndIgnoreWhitespace(source, pos);	0
org.apache.commons.math.fraction.ProperFractionFormat:191-Number den = getDenominatorFormat().parse(source, pos);	0
org.apache.commons.math.fraction.ProperFractionFormat:192-if (den == null) {	0
org.apache.commons.math.fraction.ProperFractionFormat:202-int w = whole.intValue();	0
org.apache.commons.math.fraction.ProperFractionFormat:203-int n = num.intValue();	0
org.apache.commons.math.fraction.ProperFractionFormat:204-int d = den.intValue();	0
org.apache.commons.math.fraction.ProperFractionFormat:205-return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);	0
org.apache.commons.math.fraction.ProperFractionFormat:153-parseAndIgnoreWhitespace(source, pos);	0
org.apache.commons.math.fraction.ProperFractionFormat:156-Number num = getNumeratorFormat().parse(source, pos);	0
org.apache.commons.math.fraction.ProperFractionFormat:157-if (num == null) {	0
org.apache.commons.math.fraction.ProperFractionFormat:137-int initialIndex = pos.getIndex();	0
org.apache.commons.math.fraction.ProperFractionFormat:140-parseAndIgnoreWhitespace(source, pos);	0
org.apache.commons.math.fraction.ProperFractionFormat:143-Number whole = getWholeFormat().parse(source, pos);	0
org.apache.commons.math.fraction.ProperFractionFormat:144-if (whole == null) {	0
org.apache.commons.math.fraction.ProperFractionFormat:115-return wholeFormat;	0
org.apache.commons.math.fraction.ProperFractionFormat:132-Fraction ret = super.parse(source, pos);	0
org.apache.commons.math.fraction.ProperFractionFormat:133-if (ret != null) {	0
org.apache.commons.math.fraction.ProperFractionFormat:58-this(format, (NumberFormat)format.clone(), (NumberFormat)format.clone());	0
org.apache.commons.math.fraction.ProperFractionFormat:59-}	0
org.apache.commons.math.fraction.ProperFractionFormat:72-super(numeratorFormat, denominatorFormat);	0
org.apache.commons.math.fraction.ProperFractionFormat:73-setWholeFormat(wholeFormat);	0
org.apache.commons.math.fraction.ProperFractionFormat:74-}	0
org.apache.commons.math.fraction.ProperFractionFormat:215-if (format == null) {	0
org.apache.commons.math.fraction.ProperFractionFormat:219-this.wholeFormat = format;	0
org.apache.commons.math.fraction.ProperFractionFormat:220-}	0
org.apache.commons.math.fraction.ProperFractionFormat:48-this(getDefaultNumberFormat());	0
org.apache.commons.math.fraction.ProperFractionFormat:49-}	0
org.apache.commons.math.fraction.ProperFractionFormat:89-pos.setBeginIndex(0);	0
org.apache.commons.math.fraction.ProperFractionFormat:90-pos.setEndIndex(0);	0
org.apache.commons.math.fraction.ProperFractionFormat:92-int num = fraction.getNumerator();	0
org.apache.commons.math.fraction.ProperFractionFormat:93-int den = fraction.getDenominator();	0
org.apache.commons.math.fraction.ProperFractionFormat:94-int whole = num / den;	0
org.apache.commons.math.fraction.ProperFractionFormat:95-num = num % den;	0
org.apache.commons.math.fraction.ProperFractionFormat:97-if (whole != 0) {	0
org.apache.commons.math.fraction.ProperFractionFormat:98-getWholeFormat().format(whole, toAppendTo, pos);	0
org.apache.commons.math.fraction.ProperFractionFormat:99-toAppendTo.append(' ');	0
org.apache.commons.math.fraction.ProperFractionFormat:100-num = Math.abs(num);	0
org.apache.commons.math.fraction.ProperFractionFormat:102-getNumeratorFormat().format(num, toAppendTo, pos);	0
org.apache.commons.math.fraction.ProperFractionFormat:103-toAppendTo.append(" / ");	0
org.apache.commons.math.fraction.ProperFractionFormat:104-getDenominatorFormat().format(den, toAppendTo,	0
org.apache.commons.math.fraction.ProperFractionFormat:107-return toAppendTo;	0
org.apache.commons.math.fraction.ProperFractionFormat:134-return ret;	0
org.apache.commons.math.fraction.ProperFractionFormat:148-pos.setIndex(initialIndex);	0
org.apache.commons.math.fraction.ProperFractionFormat:149-return null;	0
org.apache.commons.math.fraction.ProperFractionFormat:161-pos.setIndex(initialIndex);	0
org.apache.commons.math.fraction.ProperFractionFormat:162-return null;	0
org.joda.time.Partial:219-throw new IllegalArgumentException("Types array must be in order largest-smallest: " +	0
org.joda.time.field.UnsupportedDurationField:227-if (durationField.isSupported()) {	1
org.joda.time.field.UnsupportedDurationField:228-return 1;	0
org.joda.time.Partial:176-}	0
org.joda.time.Partial:250-iValues = (int[]) values.clone();	0
org.joda.time.Partial:251-}	0
org.joda.time.Partial:248-iTypes = (DateTimeFieldType[]) types.clone();	0
org.joda.time.Partial:249-chronology.validate(this, values);	0
org.joda.time.Partial:212-DurationField lastUnitField = null;	0
org.joda.time.Partial:213-for (int i = 0; i < types.length; i++) {	0
org.joda.time.Partial:214-DateTimeFieldType loopType = types[i];	0
org.joda.time.Partial:215-DurationField loopUnitField = loopType.getDurationType().getField(iChronology);	0
org.joda.time.Partial:216-if (i > 0) {	0
org.joda.time.Partial:217-int compare = lastUnitField.compareTo(loopUnitField);	1
org.joda.time.Partial:218-if (compare < 0) {	0
org.joda.time.Partial:221-} else if (compare == 0) {	1
org.joda.time.Partial:245-lastUnitField = loopUnitField;	0
org.joda.time.Partial:207-for (int i = 0; i < types.length; i++) {	0
org.joda.time.Partial:208-if (types[i] == null) {	0
org.joda.time.Partial:202-if (types.length == 0) {	0
org.joda.time.Partial:199-if (values.length != types.length) {	0
org.joda.time.Partial:335-return iTypes[index].getField(chrono);	0
org.joda.time.Partial:175-this(types, values, null);	0
org.joda.time.Partial:196-if (values == null) {	0
org.joda.time.Partial:190-super();	0
org.joda.time.Partial:191-chronology = DateTimeUtils.getChronology(chronology).withUTC();	0
org.joda.time.Partial:192-iChronology = chronology;	0
org.joda.time.Partial:193-if (types == null) {	0
org.joda.time.Partial:311-return iTypes.length;	0
org.joda.time.Partial:323-return iChronology;	0
org.joda.time.field.UnsupportedDurationField:70-private UnsupportedDurationField(DurationFieldType type) {	0
org.joda.time.field.UnsupportedDurationField:71-iType = type;	0
org.joda.time.field.UnsupportedDurationField:72-}	0
org.joda.time.field.UnsupportedDurationField:49-if (cCache == null) {	0
org.joda.time.field.UnsupportedDurationField:50-cCache = new HashMap<DurationFieldType, UnsupportedDurationField>(7);	0
org.joda.time.field.UnsupportedDurationField:51-field = null;	0
org.joda.time.field.UnsupportedDurationField:53-field = cCache.get(type);	0
org.joda.time.field.UnsupportedDurationField:55-if (field == null) {	0
org.joda.time.field.UnsupportedDurationField:56-field = new UnsupportedDurationField(type);	0
org.joda.time.field.UnsupportedDurationField:57-cCache.put(type, field);	0
org.joda.time.field.UnsupportedDurationField:59-return field;	0
org.joda.time.field.UnsupportedDurationField:92-return false;	0
org.joda.time.field.UnsupportedDurationField:218-return 0;	0
org.joda.time.field.UnsupportedDurationField:79-return iType;	0
org.joda.time.field.UnsupportedDurationField:83-return iType.getName();	0
org.joda.time.field.UnsupportedDurationField:101-return true;	0
org.joda.time.field.UnsupportedDurationField:110-throw unsupported();	0
org.joda.time.field.UnsupportedDurationField:119-throw unsupported();	0
org.joda.time.field.UnsupportedDurationField:128-throw unsupported();	0
org.joda.time.field.UnsupportedDurationField:137-throw unsupported();	0
org.joda.time.Partial:224-throw new IllegalArgumentException("Types array must not contain duplicate: " +	0
org.joda.time.field.UnsupportedDurationField:227-return 0;	1
org.joda.time.Partial:223-if (loopType.getRangeDurationType() == null) {	0
org.joda.time.Partial:222-if (types[i - 1].getRangeDurationType() == null) {	0
org.joda.time.Partial:139-this(type, value, null);	0
org.joda.time.Partial:140-}	0
org.joda.time.Partial:153-super();	0
org.joda.time.Partial:154-chronology = DateTimeUtils.getChronology(chronology).withUTC();	0
org.joda.time.Partial:155-iChronology = chronology;	0
org.joda.time.Partial:156-if (type == null) {	0
org.joda.time.Partial:159-iTypes = new DateTimeFieldType[] {type};	0
org.joda.time.Partial:160-iValues = new int[] {value};	0
org.joda.time.Partial:161-chronology.validate(this, iValues);	0
org.joda.time.Partial:162-}	0
org.joda.time.Partial:434-DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];	0
org.joda.time.Partial:435-int[] newValues = new int[newTypes.length];	0
org.joda.time.Partial:438-int i = 0;	0
org.joda.time.Partial:439-DurationField unitField = fieldType.getDurationType().getField(iChronology);	0
org.joda.time.Partial:440-if (unitField.isSupported()) {	0
org.joda.time.Partial:458-System.arraycopy(iTypes, 0, newTypes, 0, i);	0
org.joda.time.Partial:459-System.arraycopy(iValues, 0, newValues, 0, i);	0
org.joda.time.Partial:460-newTypes[i] = fieldType;	0
org.joda.time.Partial:461-newValues[i] = value;	0
org.joda.time.Partial:462-System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);	0
org.joda.time.Partial:463-System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);	0
org.joda.time.Partial:466-Partial newPartial = new Partial(newTypes, newValues, iChronology);	0
org.joda.time.Partial:432-int index = indexOf(fieldType);	0
org.joda.time.Partial:433-if (index == -1) {	0
org.joda.time.Partial:429-if (fieldType == null) {	0
org.joda.time.Partial:346-return iTypes[index];	0
org.joda.time.Partial:190-super();	0
org.joda.time.Partial:191-chronology = DateTimeUtils.getChronology(chronology).withUTC();	0
org.joda.time.Partial:192-iChronology = chronology;	0
org.joda.time.Partial:193-if (types == null) {	0
org.joda.time.Partial:196-if (values == null) {	0
org.joda.time.Partial:199-if (values.length != types.length) {	0
org.joda.time.Partial:202-if (types.length == 0) {	0
org.joda.time.Partial:207-for (int i = 0; i < types.length; i++) {	0
org.joda.time.Partial:208-if (types[i] == null) {	0
org.joda.time.Partial:212-DurationField lastUnitField = null;	0
org.joda.time.Partial:213-for (int i = 0; i < types.length; i++) {	0
org.joda.time.Partial:214-DateTimeFieldType loopType = types[i];	0
org.joda.time.Partial:215-DurationField loopUnitField = loopType.getDurationType().getField(iChronology);	0
org.joda.time.Partial:216-if (i > 0) {	0
org.joda.time.Partial:217-int compare = lastUnitField.compareTo(loopUnitField);	0
org.joda.time.Partial:218-if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {	1
org.joda.time.Partial:221-} else if (compare == 0) {	0
org.joda.time.Partial:245-lastUnitField = loopUnitField;	0
org.joda.time.Partial:323-return iChronology;	0
org.joda.time.Partial:335-return iTypes[index].getField(chrono);	0
org.joda.time.MutableDateTime:785-setMillis(getChronology().hours().add(getMillis(), hours));	1
org.joda.time.MutableDateTime:786-}	0
org.joda.time.MutableDateTime:351-super(year, monthOfYear, dayOfMonth,	0
org.joda.time.MutableDateTime:353-}	0
org.joda.time.MutableDateTime:1229-return ISODateTimeFormat.dateTime().print(this);	0
org.joda.time.MutableDateTime:454-switch (iRoundingMode) {	0
org.joda.time.MutableDateTime:456-break;	0
org.joda.time.MutableDateTime:473-super.setMillis(instant);	0
org.joda.time.MutableDateTime:474-}	0
org.joda.time.MutableDateTime:639-setMillis(type.getField(getChronology()).add(getMillis(), amount));	1
org.joda.time.MutableDateTime:640-}	0
org.joda.time.MutableDateTime:660-setMillis(getChronology().years().add(getMillis(), years));	1
org.joda.time.MutableDateTime:661-}	0
org.joda.time.MutableDateTime:702-setMillis(getChronology().months().add(getMillis(), months));	1
org.joda.time.MutableDateTime:703-}	0
org.joda.time.MutableDateTime:723-setMillis(getChronology().weeks().add(getMillis(), weeks));	1
org.joda.time.MutableDateTime:724-}	0
org.joda.time.MutableDateTime:764-setMillis(getChronology().days().add(getMillis(), days));	1
org.joda.time.MutableDateTime:765-}	0
org.joda.time.MutableDateTime:636-if (type == null) {	0
org.joda.time.MutableDateTime:172-super();	0
org.joda.time.MutableDateTime:173-}	0
org.joda.time.MutableDateTime:185-super(zone);	0
org.joda.time.MutableDateTime:186-}	0
org.joda.time.MutableDateTime:199-super(chronology);	0
org.joda.time.MutableDateTime:200-}	0
org.joda.time.MutableDateTime:210-super(instant);	0
org.joda.time.MutableDateTime:211-}	0
org.joda.time.MutableDateTime:223-super(instant, zone);	0
org.joda.time.MutableDateTime:224-}	0
org.joda.time.MutableDateTime:237-super(instant, chronology);	0
org.joda.time.MutableDateTime:238-}	0
org.joda.time.MutableDateTime:257-super(instant, (Chronology) null);	0
org.joda.time.MutableDateTime:258-}	0
org.joda.time.MutableDateTime:280-super(instant, zone);	0
org.joda.time.MutableDateTime:281-}	0
org.joda.time.MutableDateTime:300-super(instant, DateTimeUtils.getChronology(chronology));	0
org.joda.time.MutableDateTime:301-}	0
org.joda.time.MutableDateTime:324-super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);	0
org.joda.time.MutableDateTime:325-}	0
org.joda.time.MutableDateTime:380-super(year, monthOfYear, dayOfMonth,	0
org.joda.time.MutableDateTime:382-}	0
org.joda.time.MutableDateTime:106-return new MutableDateTime();	0
org.joda.time.MutableDateTime:118-if (zone == null) {	0
org.joda.time.MutableDateTime:119-throw new NullPointerException("Zone must not be null");	0
org.joda.time.MutableDateTime:121-return new MutableDateTime(zone);	0
org.joda.time.MutableDateTime:133-if (chronology == null) {	0
org.joda.time.MutableDateTime:134-throw new NullPointerException("Chronology must not be null");	0
org.joda.time.MutableDateTime:136-return new MutableDateTime(chronology);	0
org.joda.time.MutableDateTime:150-return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());	0
org.joda.time.Partial:445-break;	0
org.joda.time.Partial:447-DurationField rangeField = fieldType.getRangeDurationType().getField(iChronology);	0
org.joda.time.Partial:448-DurationField loopRangeField = loopType.getRangeDurationType().getField(iChronology);	0
org.joda.time.Partial:449-if (rangeField.compareTo(loopRangeField) > 0) {	0
org.joda.time.Partial:446-} else if (compare == 0) {	0
org.joda.time.Partial:443-int compare = unitField.compareTo(loopUnitField);	0
org.joda.time.Partial:444-if (compare > 0) {	0
org.joda.time.Partial:439-for (; i < iTypes.length; i++) {	0
org.joda.time.Partial:440-DateTimeFieldType loopType = iTypes[i];	0
org.joda.time.Partial:441-DurationField loopUnitField = loopType.getDurationType().getField(iChronology);	0
org.joda.time.Partial:442-if (loopUnitField.isSupported()) {	0
org.joda.time.Partial:432-DateTimeFieldType[] newTypes = new DateTimeFieldType[iTypes.length + 1];	0
org.joda.time.Partial:433-int[] newValues = new int[newTypes.length];	0
org.joda.time.Partial:436-int i = 0;	0
org.joda.time.Partial:437-DurationField unitField = fieldType.getDurationType().getField(iChronology);	0
org.joda.time.Partial:438-if (unitField.isSupported()) {	0
org.joda.time.Partial:456-System.arraycopy(iTypes, 0, newTypes, 0, i);	0
org.joda.time.Partial:457-System.arraycopy(iValues, 0, newValues, 0, i);	0
org.joda.time.Partial:458-newTypes[i] = fieldType;	0
org.joda.time.Partial:459-newValues[i] = value;	0
org.joda.time.Partial:460-System.arraycopy(iTypes, i, newTypes, i + 1, newTypes.length - i - 1);	0
org.joda.time.Partial:461-System.arraycopy(iValues, i, newValues, i + 1, newValues.length - i - 1);	0
org.joda.time.Partial:464-Partial newPartial = new Partial(iChronology, newTypes, newValues);	1
org.joda.time.Partial:465-iChronology.validate(newPartial, newValues);	0
org.joda.time.Partial:466-return newPartial;	0
org.joda.time.Partial:430-int index = indexOf(fieldType);	0
org.joda.time.Partial:431-if (index == -1) {	0
org.joda.time.Partial:427-if (fieldType == null) {	0
org.joda.time.Partial:296-super();	0
org.joda.time.Partial:297-iChronology = chronology;	0
org.joda.time.Partial:298-iTypes = types;	0
org.joda.time.Partial:299-iValues = values;	0
org.joda.time.Partial:300-}	0
org.joda.time.Partial:190-super();	0
org.joda.time.Partial:191-chronology = DateTimeUtils.getChronology(chronology).withUTC();	0
org.joda.time.Partial:192-iChronology = chronology;	0
org.joda.time.Partial:193-if (types == null) {	0
org.joda.time.Partial:196-if (values == null) {	0
org.joda.time.Partial:199-if (values.length != types.length) {	0
org.joda.time.Partial:202-if (types.length == 0) {	0
org.joda.time.Partial:207-for (int i = 0; i < types.length; i++) {	0
org.joda.time.Partial:208-if (types[i] == null) {	0
org.joda.time.Partial:212-DurationField lastUnitField = null;	0
org.joda.time.Partial:213-for (int i = 0; i < types.length; i++) {	0
org.joda.time.Partial:214-DateTimeFieldType loopType = types[i];	0
org.joda.time.Partial:215-DurationField loopUnitField = loopType.getDurationType().getField(iChronology);	0
org.joda.time.Partial:216-if (i > 0) {	0
org.joda.time.Partial:217-int compare = lastUnitField.compareTo(loopUnitField);	0
org.joda.time.Partial:218-if (compare < 0 || (compare != 0 && loopUnitField.isSupported() == false)) {	0
org.joda.time.Partial:221-} else if (compare == 0) {	0
org.joda.time.Period:1631-result = result.withYears(years);	0
org.joda.time.Period:895-int[] values = getValues();// cloned	0
org.joda.time.Period:896-getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);	0
org.joda.time.Period:1629-months = months % 12;	0
org.joda.time.Period:1630-if (years != 0) {	0
org.joda.time.Period:1628-years = FieldUtils.safeAdd(years, months / 12);	1
org.joda.time.Period:445-}	0
org.joda.time.Period:1625-int years = getYears();	0
org.joda.time.Period:1626-int months = getMonths();	0
org.joda.time.Period:1627-if (years != 0 || months != 0) {	0
org.joda.time.Period:444-super(duration, type, chronology);	0
org.joda.time.Period:1617-type = DateTimeUtils.getPeriodType(type);	0
org.joda.time.Period:1618-long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs	0
org.joda.time.Period:1619-millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));	0
org.joda.time.Period:1620-millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));	0
org.joda.time.Period:1621-millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));	0
org.joda.time.Period:1622-millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));	0
org.joda.time.Period:1623-millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));	0
org.joda.time.Period:1624-Period result = new Period(millis, type, ISOChronology.getInstanceUTC());	0
org.joda.time.Period:329-super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());	0
org.joda.time.Period:330-}	0
org.joda.time.Period:737-return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);	0
org.joda.time.Period:746-return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);	0
org.joda.time.Period:755-return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);	0
org.joda.time.Period:764-return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);	0
org.joda.time.Period:774-return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);	0
org.joda.time.Period:783-return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);	0
org.joda.time.Period:792-return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);	0
org.joda.time.Period:801-return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);	0
org.joda.time.Period:298-super(0L, null, null);	0
org.joda.time.Period:299-}	0
org.joda.time.Period:65-public static final Period ZERO = new Period();	0
org.joda.time.Period:312-super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.standard());	0
org.joda.time.Period:313-}	0
org.joda.time.Period:352-super(years, months, weeks, days, hours, minutes, seconds, millis, type);	0
org.joda.time.Period:353-}	0
org.joda.time.Period:382-super(duration);	0
org.joda.time.Period:383-}	0
org.joda.time.Period:402-super(duration, type, null);	0
org.joda.time.Period:403-}	0
org.joda.time.Period:423-super(duration, null, chronology);	0
org.joda.time.Period:424-}	0
org.joda.time.Period:455-super(startInstant, endInstant, null, null);	0
org.joda.time.Period:456-}	0
org.joda.time.Period:466-super(startInstant, endInstant, type, null);	0
org.joda.time.Period:467-}	0
org.joda.time.Period:478-super(startInstant, endInstant, null, chrono);	0
org.joda.time.Period:479-}	0
org.joda.time.Period:490-super(startInstant, endInstant, type, chrono);	0
org.joda.time.Period:491-}	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:206-if (valueToAdd == 0) {	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:210-if (DateTimeUtils.isContiguous(partial)) {	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:211-long instant = 0L;	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:212-for (int i = 0, isize = partial.size(); i < isize; i++) {	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:213-instant = partial.getFieldType(i).getField(iChronology).set(instant, values[i]);	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:334-return MIN;	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:339-return iMax;	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:51-super(DateTimeFieldType.monthOfYear(), chronology.getAverageMillisPerMonth());	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:52-iChronology = chronology;	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:53-iMax = iChronology.getMaxMonth();	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:54-iLeapMonth = leapMonth;	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:55-}	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:72-return iChronology.getMonthOfYear(instant);	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:293-FieldUtils.verifyValueBounds(this, month, MIN, iMax);	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:295-int thisYear = iChronology.getYear(instant);	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:297-int thisDom = iChronology.getDayOfMonth(instant, thisYear);	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:298-int maxDom = iChronology.getDaysInYearMonth(thisYear, month);	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:299-if (thisDom > maxDom) {	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:304-return iChronology.getYearMonthDayMillis(thisYear, month, thisDom) +	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:310-return iChronology.years();	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:329-return iChronology.days();	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:139-dayToUse = maxDay;	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:215-instant = add(instant, valueToAdd);	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:216-return iChronology.get(partial, instant);	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:114-yearToUse = thisYear + (monthToUse / iMax);	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:115-monthToUse = (monthToUse % iMax) + 1;	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:92-if (months == 0) {	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:98-long timePart = iChronology.getMillisOfDay(instant);	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:103-int thisYear = iChronology.getYear(instant);	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:104-int thisMonth = iChronology.getMonthOfYear(instant, thisYear);	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:112-int monthToUse = thisMonth - 1 + months;	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:113-if (monthToUse >= 0) {	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:136-int dayToUse = iChronology.getDayOfMonth(instant, thisYear, thisMonth);	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:137-int maxDay = iChronology.getDaysInYearMonth(yearToUse, monthToUse);	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:138-if (dayToUse > maxDay) {	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:144-long datePart =	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:146-return datePart + timePart;	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:59-return false;	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:93-return instant; // the easy case	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:117-yearToUse = thisYear + (monthToUse / iMax) - 1;	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:118-monthToUse = Math.abs(monthToUse);	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:119-int remMonthToUse = monthToUse % iMax;	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:121-if (remMonthToUse == 0) {	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:122-remMonthToUse = iMax;	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:124-monthToUse = iMax - remMonthToUse + 1;	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:126-if (monthToUse == 1) {	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:127-yearToUse += 1;	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:151-int i_months = (int)months;	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:152-if (i_months == months) {	0
org.joda.time.chrono.BasicMonthOfYearDateTimeField:153-return add(instant, i_months);	0
org.joda.time.field.FieldUtils:136-switch (val2) {	0
org.joda.time.field.FieldUtils:138-return -val1;	1
org.joda.time.field.FieldUtils:140-return 0L;	0
org.joda.time.field.FieldUtils:142-return val1;	0
org.joda.time.field.FieldUtils:144-long total = val1 * val2;	0
org.joda.time.field.FieldUtils:145-if (total / val2 != val1) {	0
org.joda.time.field.FieldUtils:148-return total;	0
org.joda.time.field.FieldUtils:36-super();	0
org.joda.time.field.FieldUtils:37-}	0
org.joda.time.field.FieldUtils:49-if (value == Integer.MIN_VALUE) {	0
org.joda.time.field.FieldUtils:50-throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");	0
org.joda.time.field.FieldUtils:52-return -value;	0
org.joda.time.field.FieldUtils:64-int sum = val1 + val2;	0
org.joda.time.field.FieldUtils:66-if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {	0
org.joda.time.field.FieldUtils:67-throw new ArithmeticException	0
org.joda.time.field.FieldUtils:70-return sum;	0
org.joda.time.field.FieldUtils:82-long sum = val1 + val2;	0
org.joda.time.field.FieldUtils:84-if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {	0
org.joda.time.field.FieldUtils:85-throw new ArithmeticException	0
org.joda.time.field.FieldUtils:88-return sum;	0
org.joda.time.field.FieldUtils:100-long diff = val1 - val2;	0
org.joda.time.field.FieldUtils:102-if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {	0
org.joda.time.field.FieldUtils:103-throw new ArithmeticException	0
org.joda.time.field.FieldUtils:106-return diff;	0
org.joda.time.field.FieldUtils:119-long total = (long) val1 * (long) val2;	0
org.joda.time.field.FieldUtils:120-if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {	0
org.joda.time.field.FieldUtils:121-throw new ArithmeticException("Multiplication overflows an int: " + val1 + " * " + val2);	0
org.joda.time.field.FieldUtils:123-return (int) total;	0
org.joda.time.field.FieldUtils:146-throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);	0
org.joda.time.field.FieldUtils:160-if (val2 == 1) {	0
org.joda.time.field.FieldUtils:161-return val1;	0
org.joda.time.field.FieldUtils:163-if (val1 == 1) {	0
org.joda.time.field.FieldUtils:164-return val2;	0
org.joda.time.field.FieldUtils:166-if (val1 == 0 || val2 == 0) {	0
org.joda.time.field.FieldUtils:167-return 0;	0
org.joda.time.field.FieldUtils:169-long total = val1 * val2;	0
org.joda.time.field.FieldUtils:170-if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {	0
org.joda.time.field.FieldUtils:171-throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);	0
org.joda.time.field.FieldUtils:173-return total;	0
org.joda.time.field.FieldUtils:184-if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {	0
org.joda.time.field.FieldUtils:185-return (int) value;	0
org.joda.time.field.FieldUtils:187-throw new ArithmeticException("Value cannot fit in an int: " + value);	0
org.joda.time.field.FieldUtils:199-long val = FieldUtils.safeMultiply(val1, val2);	0
org.joda.time.field.FieldUtils:200-return FieldUtils.safeToInt(val);	0
org.joda.time.field.FieldUtils:214-if ((value < lowerBound) || (value > upperBound)) {	0
org.joda.time.field.FieldUtils:215-throw new IllegalFieldValueException	0
org.joda.time.field.FieldUtils:219-}	0
org.joda.time.field.FieldUtils:232-if ((value < lowerBound) || (value > upperBound)) {	0
org.joda.time.field.FieldUtils:233-throw new IllegalFieldValueException	0
org.joda.time.field.FieldUtils:237-}	0
org.joda.time.format.DateTimeFormatter:582-StringBuffer buf = new StringBuffer(requirePrinter().estimatePrintedLength());	0
org.joda.time.format.DateTimeFormatter:583-printTo(buf, instant);	0
org.joda.time.format.DateTimeFormatter:584-return buf.toString();	0
org.joda.time.format.DateTimeFormatter:459-long millis = DateTimeUtils.getInstantMillis(instant);	0
org.joda.time.format.DateTimeFormatter:460-Chronology chrono = DateTimeUtils.getInstantChronology(instant);	0
org.joda.time.format.DateTimeFormatter:461-printTo(buf, millis, chrono);	0
org.joda.time.format.DateTimeFormatter:462-}	0
org.joda.time.format.DateTimeFormatter:698-DateTimeParser parser = requireParser();	0
org.joda.time.format.DateTimeFormatter:699-if (instant == null) {	0
org.joda.time.format.DateTimeFormatter:703-long instantMillis = instant.getMillis();	0
org.joda.time.format.DateTimeFormatter:704-Chronology chrono = instant.getChronology();	0
org.joda.time.format.DateTimeFormatter:705-long instantLocal = instantMillis + chrono.getZone().getOffset(instantMillis);	0
org.joda.time.format.DateTimeFormatter:706-chrono = selectChronology(chrono);	0
org.joda.time.format.DateTimeFormatter:708-DateTimeParserBucket bucket = new DateTimeParserBucket(	0
org.joda.time.format.DateTimeFormatter:710-int newPos = parser.parseInto(bucket, text, position);	0
org.joda.time.format.DateTimeFormatter:711-instant.setMillis(bucket.computeMillis(false, text));	0
org.joda.time.format.DateTimeFormatter:712-if (iOffsetParsed && bucket.getOffsetInteger() != null) {	0
org.joda.time.format.DateTimeFormatter:716-} else if (bucket.getZone() != null) {	0
org.joda.time.format.DateTimeFormatter:717-chrono = chrono.withZone(bucket.getZone());	0
org.joda.time.format.DateTimeFormatter:719-instant.setChronology(chrono);	0
org.joda.time.format.DateTimeFormatter:720-if (iZone != null) {	0
org.joda.time.format.DateTimeFormatter:723-return newPos;	0
org.joda.time.format.DateTimeFormatter:618-DateTimePrinter printer = requirePrinter();	0
org.joda.time.format.DateTimeFormatter:619-chrono = selectChronology(chrono);	0
org.joda.time.format.DateTimeFormatter:622-DateTimeZone zone = chrono.getZone();	0
org.joda.time.format.DateTimeFormatter:623-int offset = zone.getOffset(instant);	0
org.joda.time.format.DateTimeFormatter:624-long adjustedInstant = instant + offset;	0
org.joda.time.format.DateTimeFormatter:625-if ((instant ^ adjustedInstant) < 0 && (instant ^ offset) >= 0) {	0
org.joda.time.format.DateTimeFormatter:631-printer.printTo(buf, adjustedInstant, chrono.withUTC(), offset, zone, iLocale);	0
org.joda.time.format.DateTimeFormatter:632-}	0
org.joda.time.format.DateTimeFormatter:657-DateTimePrinter printer = iPrinter;	0
org.joda.time.format.DateTimeFormatter:658-if (printer == null) {	0
org.joda.time.format.DateTimeFormatter:661-return printer;	0
org.joda.time.format.DateTimeFormatter:188-if (locale == getLocale() || (locale != null && locale.equals(getLocale()))) {	0
org.joda.time.format.DateTimeFormatter:191-return new DateTimeFormatter(iPrinter, iParser, locale,	0
org.joda.time.format.DateTimeFormatter:202-return iLocale;	0
org.joda.time.format.DateTimeFormatter:924-DateTimeParser parser = iParser;	0
org.joda.time.format.DateTimeFormatter:925-if (parser == null) {	0
org.joda.time.format.DateTimeFormatter:928-return parser;	0
org.joda.time.format.DateTimeFormatter:127-super();	0
org.joda.time.format.DateTimeFormatter:128-iPrinter = printer;	0
org.joda.time.format.DateTimeFormatter:129-iParser = parser;	0
org.joda.time.format.DateTimeFormatter:130-iLocale = locale;	0
org.joda.time.format.DateTimeFormatter:131-iOffsetParsed = offsetParsed;	0
org.joda.time.format.DateTimeFormatter:132-iChrono = chrono;	0
org.joda.time.format.DateTimeFormatter:133-iZone = zone;	0
org.joda.time.format.DateTimeFormatter:134-iPivotYear = pivotYear;	0
org.joda.time.format.DateTimeFormatter:135-iDefaultYear = defaultYear;	0
org.joda.time.format.DateTimeFormatter:136-}	0
org.joda.time.format.DateTimeFormatter:939-chrono = DateTimeUtils.getChronology(chrono);	0
org.joda.time.DateTimeZone:900-} else if (offsetLocal > 0) {	1
org.joda.time.DateTimeZone:910-return offsetAdjusted;	0
org.joda.time.DateTimeZone:882-final int offsetLocal = getOffset(instantLocal);	0
org.joda.time.DateTimeZone:884-final long instantAdjusted = instantLocal - offsetLocal;	0
org.joda.time.DateTimeZone:885-final int offsetAdjusted = getOffset(instantAdjusted);	0
org.joda.time.DateTimeZone:887-if (offsetLocal != offsetAdjusted) {	0
org.joda.time.DateTimeZone:689-protected DateTimeZone(String id) {	0
org.joda.time.DateTimeZone:690-if (id == null) {	0
org.joda.time.DateTimeZone:693-iID = id;	0
org.joda.time.DateTimeZone:694-}	0
org.joda.time.DateTimeZone:95-public static final DateTimeZone UTC = new FixedDateTimeZone("UTC", "UTC", 0, 0);	0
org.joda.time.DateTimeZone:115-setProvider0(null);	0
org.joda.time.DateTimeZone:116-setNameProvider0(null);	0
org.joda.time.DateTimeZone:117-}	0
org.joda.time.DateTimeZone:204-if (id == null) {	0
org.joda.time.DateTimeZone:207-if (id.equals("UTC")) {	0
org.joda.time.DateTimeZone:210-DateTimeZone zone = cProvider.getZone(id);	0
org.joda.time.DateTimeZone:211-if (zone != null) {	0
org.joda.time.DateTimeZone:212-return zone;	0
org.joda.time.DateTimeZone:415-if (provider == null) {	0
org.joda.time.DateTimeZone:416-provider = getDefaultProvider();	0
org.joda.time.DateTimeZone:418-Set<String> ids = provider.getAvailableIDs();	0
org.joda.time.DateTimeZone:419-if (ids == null || ids.size() == 0) {	0
org.joda.time.DateTimeZone:423-if (!ids.contains("UTC")) {	0
org.joda.time.DateTimeZone:426-if (!UTC.equals(provider.getZone("UTC"))) {	0
org.joda.time.DateTimeZone:429-cProvider = provider;	0
org.joda.time.DateTimeZone:430-cAvailableIDs = ids;	0
org.joda.time.DateTimeZone:431-}	0
org.joda.time.DateTimeZone:443-Provider provider = null;	0
org.joda.time.DateTimeZone:446-String providerClass =	0
org.joda.time.DateTimeZone:448-if (providerClass != null) {	0
org.joda.time.DateTimeZone:458-}	0
org.joda.time.DateTimeZone:460-if (provider == null) {	0
org.joda.time.DateTimeZone:462-provider = new ZoneInfoProvider("org/joda/time/tz/data");	0
org.joda.time.DateTimeZone:466-}	0
org.joda.time.DateTimeZone:469-if (provider == null) {	0
org.joda.time.DateTimeZone:473-return provider;	0
org.joda.time.DateTimeZone:514-if (nameProvider == null) {	0
org.joda.time.DateTimeZone:515-nameProvider = getDefaultNameProvider();	0
org.joda.time.DateTimeZone:517-cNameProvider = nameProvider;	0
org.joda.time.DateTimeZone:518-}	0
org.joda.time.DateTimeZone:529-NameProvider nameProvider = null;	0
org.joda.time.DateTimeZone:531-String providerClass = System.getProperty("org.joda.time.DateTimeZone.NameProvider");	0
org.joda.time.DateTimeZone:532-if (providerClass != null) {	0
org.joda.time.DateTimeZone:542-}	0
org.joda.time.DateTimeZone:544-if (nameProvider == null) {	0
org.joda.time.DateTimeZone:545-nameProvider = new DefaultNameProvider();	0
org.joda.time.DateTimeZone:548-return nameProvider;	0
org.joda.time.DateTimeZone:706-return iID;	0
org.joda.time.DateTimeZone:1227-return 57 + getID().hashCode();	0
org.joda.time.DateTimeZone:843-return getOffset(instant) == getStandardOffset(instant);	0
org.joda.time.DateTimeZone:910-int offset = getOffset(instantUTC);	0
org.joda.time.DateTimeZone:911-long instantLocal = instantUTC + offset;	0
org.joda.time.DateTimeZone:913-if ((instantUTC ^ instantLocal) < 0 && (instantUTC ^ offset) >= 0) {	0
org.joda.time.DateTimeZone:916-return instantLocal;	0
org.joda.time.DateTimeZone:951-int offsetLocal = getOffset(instantLocal);	0
org.joda.time.DateTimeZone:953-int offset = getOffset(instantLocal - offsetLocal);	0
org.joda.time.DateTimeZone:955-if (offsetLocal != offset) {	0
org.joda.time.DateTimeZone:986-long instantUTC = instantLocal - offset;	0
org.joda.time.DateTimeZone:988-if ((instantLocal ^ instantUTC) < 0 && (instantLocal ^ offset) < 0) {	0
org.joda.time.DateTimeZone:991-return instantUTC;	0
org.joda.time.DateTimeZone:254-if (hoursOffset == 0 && minutesOffset == 0) {	0
org.joda.time.DateTimeZone:257-if (minutesOffset < 0 || minutesOffset > 59) {	0
org.joda.time.DateTimeZone:260-int offset = 0;	0
org.joda.time.DateTimeZone:262-int hoursInMinutes = FieldUtils.safeMultiply(hoursOffset, 60);	0
org.joda.time.DateTimeZone:263-if (hoursInMinutes < 0) {	0
org.joda.time.DateTimeZone:266-minutesOffset = FieldUtils.safeAdd(hoursInMinutes, minutesOffset);	0
org.joda.time.DateTimeZone:268-offset = FieldUtils.safeMultiply(minutesOffset, DateTimeConstants.MILLIS_PER_MINUTE);	0
org.joda.time.DateTimeZone:271-}	0
org.joda.time.DateTimeZone:272-return forOffsetMillis(offset);	0
org.joda.time.DateTimeZone:282-String id = printOffset(millisOffset);	0
org.joda.time.DateTimeZone:283-return fixedOffsetZone(id, millisOffset);	0
org.joda.time.DateTimeZone:349-if (offset == 0) {	0
org.joda.time.DateTimeZone:352-if (iFixedOffsetCache == null) {	0
org.joda.time.DateTimeZone:353-iFixedOffsetCache = new HashMap<String, SoftReference<DateTimeZone>>();	0
org.joda.time.DateTimeZone:356-Reference<DateTimeZone> ref = iFixedOffsetCache.get(id);	0
org.joda.time.DateTimeZone:357-if (ref != null) {	0
org.joda.time.DateTimeZone:363-zone = new FixedDateTimeZone(id, null, offset, offset);	0
org.joda.time.DateTimeZone:364-iFixedOffsetCache.put(id, new SoftReference<DateTimeZone>(zone));	0
org.joda.time.DateTimeZone:365-return zone;	0
org.joda.time.DateTimeZone:630-StringBuffer buf = new StringBuffer();	0
org.joda.time.DateTimeZone:631-if (offset >= 0) {	0
org.joda.time.DateTimeZone:632-buf.append('+');	0
org.joda.time.DateTimeZone:638-int hours = offset / DateTimeConstants.MILLIS_PER_HOUR;	0
org.joda.time.DateTimeZone:639-FormatUtils.appendPaddedInteger(buf, hours, 2);	0
org.joda.time.DateTimeZone:640-offset -= hours * (int) DateTimeConstants.MILLIS_PER_HOUR;	0
org.joda.time.DateTimeZone:642-int minutes = offset / DateTimeConstants.MILLIS_PER_MINUTE;	0
org.joda.time.DateTimeZone:643-buf.append(':');	0
org.joda.time.DateTimeZone:644-FormatUtils.appendPaddedInteger(buf, minutes, 2);	0
org.joda.time.DateTimeZone:645-offset -= minutes * DateTimeConstants.MILLIS_PER_MINUTE;	0
org.joda.time.DateTimeZone:646-if (offset == 0) {	0
org.joda.time.DateTimeZone:647-return buf.toString();	0
org.joda.time.chrono.ZonedChronology:82-super(base, zone);	0
org.joda.time.chrono.ZonedChronology:83-}	0
org.joda.time.chrono.ZonedChronology:448-return iZone.convertLocalToUTC(localInstant, false);	1
org.joda.time.DateTimeZone:688-protected DateTimeZone(String id) {	0
org.joda.time.DateTimeZone:689-if (id == null) {	0
org.joda.time.DateTimeZone:692-iID = id;	0
org.joda.time.DateTimeZone:693-}	0
org.joda.time.DateTimeZone:95-public static final DateTimeZone UTC = new FixedDateTimeZone("UTC", "UTC", 0, 0);	0
org.joda.time.format.PeriodFormatterBuilder:192-if (formatter == null) {	0
org.joda.time.format.PeriodFormatterBuilder:195-clearPrefix();	0
org.joda.time.format.PeriodFormatterBuilder:196-append0(formatter.getPrinter(), formatter.getParser());	0
org.joda.time.format.PeriodFormatterBuilder:197-return this;	0
org.joda.time.format.PeriodFormatterBuilder:500-appendField(SECONDS_OPTIONAL_MILLIS);	0
org.joda.time.format.PeriodFormatterBuilder:501-return this;	0
org.joda.time.format.PeriodFormatterBuilder:652-return appendSeparator(text, text, null, false, true);	0
org.joda.time.format.PeriodFormatterBuilder:818-return new Object[] {Literal.EMPTY, Literal.EMPTY};	0
org.joda.time.format.PeriodFormatterBuilder:463-appendField(MINUTES);	0
org.joda.time.format.PeriodFormatterBuilder:464-return this;	0
org.joda.time.format.PeriodFormatterBuilder:555-return appendSuffix(new SimpleAffix(text));	0
org.joda.time.format.PeriodFormatterBuilder:730-if (text == null || finalText == null) {	0
org.joda.time.format.PeriodFormatterBuilder:734-clearPrefix();	0
org.joda.time.format.PeriodFormatterBuilder:737-List<Object> pairs = iElementPairs;	0
org.joda.time.format.PeriodFormatterBuilder:738-if (pairs.size() == 0) {	0
org.joda.time.format.PeriodFormatterBuilder:750-Separator lastSeparator = null;	0
org.joda.time.format.PeriodFormatterBuilder:751-for (i=pairs.size(); --i>=0; ) {	0
org.joda.time.format.PeriodFormatterBuilder:752-if (pairs.get(i) instanceof Separator) {	0
org.joda.time.format.PeriodFormatterBuilder:757-i--;// element pairs	0
org.joda.time.format.PeriodFormatterBuilder:761-if (lastSeparator != null && pairs.size() == 0) {	0
org.joda.time.format.PeriodFormatterBuilder:764-Object[] comp = createComposite(pairs);	0
org.joda.time.format.PeriodFormatterBuilder:765-pairs.clear();	0
org.joda.time.format.PeriodFormatterBuilder:766-Separator separator = new Separator(	0
org.joda.time.format.PeriodFormatterBuilder:770-pairs.add(separator);	0
org.joda.time.format.PeriodFormatterBuilder:771-pairs.add(separator);	0
org.joda.time.format.PeriodFormatterBuilder:774-return this;	0
org.joda.time.format.PeriodFormatterBuilder:800-Separator sep = (Separator) elementPairs.get(0);	0
org.joda.time.format.PeriodFormatterBuilder:801-PeriodFormatter f = toFormatter(elementPairs.subList(2, size), notPrinter, notParser);	1
org.joda.time.format.PeriodFormatterBuilder:802-sep = sep.finish(f.getPrinter(), f.getParser());	0
org.joda.time.format.PeriodFormatterBuilder:803-return new PeriodFormatter(sep, sep);	0
org.joda.time.format.PeriodFormatterBuilder:552-if (text == null) {	0
org.joda.time.format.PeriodFormatterBuilder:592-originalPrinter = iElementPairs.get(iElementPairs.size() - 2);	0
org.joda.time.format.PeriodFormatterBuilder:593-originalParser = iElementPairs.get(iElementPairs.size() - 1);	0
org.joda.time.format.PeriodFormatterBuilder:605-clearPrefix();	0
org.joda.time.format.PeriodFormatterBuilder:606-FieldFormatter newField = new FieldFormatter((FieldFormatter) originalPrinter, suffix);	0
org.joda.time.format.PeriodFormatterBuilder:607-iElementPairs.set(iElementPairs.size() - 2, newField);	0
org.joda.time.format.PeriodFormatterBuilder:608-iElementPairs.set(iElementPairs.size() - 1, newField);	0
org.joda.time.format.PeriodFormatterBuilder:609-iFieldFormatters[newField.getFieldType()] = newField;	0
org.joda.time.format.PeriodFormatterBuilder:611-return this;	0
org.joda.time.format.PeriodFormatterBuilder:591-if (iElementPairs.size() > 0) {	0
org.joda.time.format.PeriodFormatterBuilder:599-if (originalPrinter == null || originalParser == null ||	0
org.joda.time.format.PeriodFormatterBuilder:437-appendField(DAYS);	0
org.joda.time.format.PeriodFormatterBuilder:438-return this;	0
org.joda.time.format.PeriodFormatterBuilder:450-appendField(HOURS);	0
org.joda.time.format.PeriodFormatterBuilder:451-return this;	0
org.joda.time.format.PeriodFormatterBuilder:411-appendField(MONTHS);	0
org.joda.time.format.PeriodFormatterBuilder:412-return this;	0
org.joda.time.format.PeriodFormatterBuilder:424-appendField(WEEKS);	0
org.joda.time.format.PeriodFormatterBuilder:425-return this;	0
org.joda.time.format.PeriodFormatterBuilder:228-if (text == null) {	0
