ObjectType implicitProto = interfaceType.getImplicitPrototype();
currentPropertyNames = implicitProto.getOwnPropertyNames();
HashMap<String, ObjectType> properties
HashMap<String, ObjectType> currentProperties
for (ObjectType interfaceType : functionType.getExtendedInterfaces()) {
currentProperties.clear();
checkInterfaceConflictProperties(t, n, functionPrivateName,
if (extInterface.getConstructor() != null
}
for (ObjectType extInterface : functionType.getExtendedInterfaces()) {
if (functionType.getExtendedInterfacesCount() > 1) {
this(compiler, reverseInterpreter, typeRegistry, null, null,
}
final Scope outerScope = t.getScope();
final String functionPrivateName = n.getFirstChild().getString();
if (functionPrivateName != null && functionPrivateName.length() > 0 &&
typeable = false;
break;
visitFunction(t, n);
FunctionType functionType = JSType.toMaybeFunctionType(n.getJSType());
String functionPrivateName = n.getFirstChild().getString();
if (functionType.isConstructor()) {
} else if (functionType.isInterface()) {
return false;
JSDocInfo info = n.getJSDocInfo();
if (info != null && info.isNoTypeCheck()) {
validator.setShouldReport(noTypeCheckSection == 0);
typeable = false;
break;
typeable = visitName(t, n, parent);
break;
int parentNodeType = parent.getType();
if (parentNodeType == Token.FUNCTION ||
CheckLevel reportUnknownTypes) {
private boolean reportMissingProperties = true;
private InferJSDocInfo inferJSDocInfo = null;
private int typedCount = 0;
private int nullCount = 0;
private int unknownCount = 0;
private int noTypeCheckSection = 0;
this.compiler = compiler;
this.validator = compiler.getTypeValidator();
this.reverseInterpreter = reverseInterpreter;
this.typeRegistry = typeRegistry;
this.topScope = topScope;
this.scopeCreator = scopeCreator;
this.reportMissingOverride = reportMissingOverride;
this.reportUnknownTypes = reportUnknownTypes;
this.inferJSDocInfo = new InferJSDocInfo(compiler);
}
