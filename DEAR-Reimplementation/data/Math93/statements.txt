return factorials[n];
long result = Math.round(factorialDouble(n));
if (result == Long.MAX_VALUE) {
if (n < 0) {
return Math.floor(Math.exp(factorialLog(n)) + 0.5);
if (n < 0) {
double logSum = 0;
for (int i = 2; i <= n; i++) {
logSum += Math.log((double)i);
return logSum;
private static final long[] factorials = new long[]
super();
}
long s = (long)x + (long)y;
if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
throw new ArithmeticException("overflow: add");
return (int)s;
return addAndCheck(a, b, "overflow: add");
if (a > b) {
ret = addAndCheck(b, a, msg);
if (a < 0) {
if (b < 0) {
if (Long.MIN_VALUE - b <= a) {
ret = a + b;
throw new ArithmeticException(msg);
ret = a + b;
if (a <= Long.MAX_VALUE - b) {
ret = a + b;
throw new ArithmeticException(msg);
return ret;
if (n < k) {
throw new IllegalArgumentException(
if (n < 0) {
throw new IllegalArgumentException(
if ((n == k) || (k == 0)) {
return 1;
if ((k == 1) || (k == n - 1)) {
return n;
long result = Math.round(binomialCoefficientDouble(n, k));
if (result == Long.MAX_VALUE) {
throw new ArithmeticException(
return result;
return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);
if (n < k) {
throw new IllegalArgumentException(
if (n < 0) {
throw new IllegalArgumentException(
if ((n == k) || (k == 0)) {
return 0;
if ((k == 1) || (k == n - 1)) {
