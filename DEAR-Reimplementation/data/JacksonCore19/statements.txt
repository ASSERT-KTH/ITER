super(ctxt, features);
_reader = r;
_inputBuffer = ctxt.allocTokenBuffer();
_inputPtr = 0;
_inputEnd = 0;
_objectCodec = codec;
_symbols = st;
_hashSeed = st.hashSeed();
_bufferRecyclable = true;
}
int count = _reader.read(_inputBuffer, 0, _inputBuffer.length);
if (count > 0) {
_inputPtr = 0;
_inputEnd = count;
return true;
return _parseNumber2(neg, startPtr);
_inputPtr = ptr;
return _parseFloat(ch, startPtr, ptr, false, intLen);
final int inputLen = _inputEnd;
int fractLen = 0;
if (ch == '.') { // yes, fraction
if (ptr >= inputLen) {
ch = (int) _inputBuffer[ptr++];
if (ch < INT_0 || ch > INT_9) {
++fractLen;
outBuf[outPtr++] = c;
if (!loadMore()) {
final int bufSize = _inputEnd;
_currInputProcessed += bufSize;
_currInputRowStart -= bufSize;
_nameStartOffset -= bufSize;
if (_reader != null) {
_inputPtr = neg ? (startPtr+1) : startPtr;
char[] outBuf = _textBuffer.emptyAndGetCurrentSegment();
int outPtr = 0;
if (neg) {
int intLen = 0;
char c = (_inputPtr < _inputEnd) ? _inputBuffer[_inputPtr++] : getNextChar("No digit following minus sign");
if (c == '0') {
boolean eof = false;
while (c >= '0' && c <= '9') {
++intLen;
if (outPtr >= outBuf.length) {
outBuf[outPtr++] = c;
if (_inputPtr >= _inputEnd && !loadMore()) {
c = _inputBuffer[_inputPtr++];
if (intLen == 0) {
int fractLen = 0;
if (c == '.') { // yes, fraction
++intLen;
