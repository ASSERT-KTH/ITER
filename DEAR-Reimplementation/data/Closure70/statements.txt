JSType type = functionNode.getJSType();
if (type != null && type instanceof FunctionType) {
FunctionType fnType = (FunctionType) type;
ObjectType fnThisType = fnType.getTypeOfThis();
if (!fnThisType.isUnknownType()) {
}
return n.getFirstChild();
newScope = new Scope(parent, root);
LocalScopeBuilder localScopeBuilder = new LocalScopeBuilder(newScope);
scopeBuilder = localScopeBuilder;
localScopeBuilder.build();
JSDocInfo info = n.getJSDocInfo();
if (info == null) {
return info;
Node parent = n.getParent();
int parentType = parent.getType();
boolean isFunctionDeclaration = NodeUtil.isFunctionDeclaration(n);
if (isFunctionDeclaration) {
if (lValue == null || lValue.getParent() == null) {
if (NodeUtil.isObjectLitKey(lValue, lValue.getParent())) {
return lValue.getQualifiedName();
return typeRegistry.getNativeType(nativeType);
this(compiler, compiler.getCodingConvention());
}
Scope newScope = null;
AbstractScopeBuilder scopeBuilder = null;
if (parent == null) {
newScope = createInitialScope(root);
GlobalScopeBuilder globalScopeBuilder = new GlobalScopeBuilder(newScope);
scopeBuilder = globalScopeBuilder;
NodeTraversal.traverse(compiler, root, scopeBuilder);
} else {
scopeBuilder.resolveStubDeclarations();
scopeBuilder.resolveTypes();
for (Node functionNode : scopeBuilder.nonExternFunctions) {
if (parent == null) {
codingConvention.defineDelegateProxyPrototypeProperties(
return newScope;
CodingConvention codingConvention) {
private final List<ObjectType> delegateProxyPrototypes = Lists.newArrayList();
this.compiler = compiler;
this.validator = compiler.getTypeValidator();
this.codingConvention = codingConvention;
this.typeRegistry = compiler.getTypeRegistry();
this.typeParsingErrorReporter = typeRegistry.getErrorReporter();
}
static final String DELEGATE_PROXY_SUFFIX =
static final DiagnosticType MALFORMED_TYPEDEF =
static final DiagnosticType ENUM_INITIALIZER =
static final DiagnosticType CTOR_INITIALIZER =
