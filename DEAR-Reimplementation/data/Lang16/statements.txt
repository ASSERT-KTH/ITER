return createInteger(str);
if (expPos > -1) {
dec = str.substring(decPos + 1);
mant = str.substring(0, decPos);
if (expPos > str.length()) {
mant = str.substring(0, expPos);
Float f = NumberUtils.createFloat(numeric);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
Double d = NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
return d;
throw new NumberFormatException(str + " is not a valid number.");
if (expPos > -1 && expPos < str.length() - 1) {
exp = null;
if (dec == null && exp == null) {
return createInteger(str);
} catch (NumberFormatException nfe) { // NOPMD
return createLong(str);
boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
Float f = createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
if (str == null) {
if (StringUtils.isBlank(str)) {
if (str.startsWith("--")) {
if (str.startsWith("0x") || str.startsWith("-0x")) {
char lastChar = str.charAt(str.length() - 1);
int decPos = str.indexOf('.');
int expPos = str.indexOf('e') + str.indexOf('E') + 1;
if (decPos > -1) {
if (expPos > -1) {
mant = str;
dec = null;
if (!Character.isDigit(lastChar) && lastChar != '.') {
if (expPos > -1 && expPos < str.length() - 1) {
exp = null;
String numeric = str.substring(0, str.length() - 1);
boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
if (dec == null
return createLong(numeric);
if (str == null) {
for (int i = str.length() - 1; i >= 0; i--) {
if (str.charAt(i) != '0') {
return false;
if (str == null) {
return Float.valueOf(str);
if (str == null) {
return Double.valueOf(str);
