return n;
removeDeadExprStatementSafely(n);
return fallThrough;
List<DiGraphEdge<Node,Branch>> outEdges = gNode.getOutEdges();
if (outEdges.size() == 1 &&
Preconditions.checkState(outEdges.get(0).getValue() == Branch.UNCOND);
Node fallThrough = tryRemoveUnconditionalBranching(computeFollowing(n));
Node nextCfgNode = outEdges.get(0).getDestination().getValue();
if (nextCfgNode == fallThrough) {
Node next = ControlFlowAnalysis.computeFollowNode(n);
return next;
return;
if (n.hasChildren()) {
Node first = n.getFirstChild();
return tryRemoveUnconditionalBranching(first);
tryRemoveUnconditionalBranching(n);
}
if (n == null) {
DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);
if (gNode == null) {
if (n.getParent() == null) {
switch (n.getType()) {
return n;
removeDeadExprStatementSafely(n);
return;
Node parent = n.getParent();
if (n.getType() == Token.EMPTY ||
switch (n.getType()) {
NodeUtil.redeclareVarsInsideBranch(n);
compiler.reportCodeChange();
if (logger.isLoggable(Level.FINE)) {
NodeUtil.removeChild(n.getParent(), n);
}
DiGraphNode<Node, Branch> gNode = curCfg.getDirectedGraphNode(n);
if (gNode == null) { // Not in CFG.
return;
if (gNode.getAnnotation() != GraphReachability.REACHABLE ||
boolean removeNoOpStatements) {
Deque<ControlFlowGraph<Node>> cfgStack =
ControlFlowGraph<Node> curCfg = null;
this.compiler = compiler;
this.removeNoOpStatements = removeNoOpStatements;
}
private static final Logger logger =
Scope scope = t.getScope();
ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, false);
cfa.process(null, scope.getRootNode());
cfgStack.push(curCfg);
curCfg = cfa.getCfg();
new GraphReachability<Node, ControlFlowGraph.Branch>(curCfg)
