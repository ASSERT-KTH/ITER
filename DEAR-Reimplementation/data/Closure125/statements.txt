if (!leftTypeRestricted.canTestForShallowEqualityWith(
} else if (right.isTypeOf() && left.isString()) {
left = n.getFirstChild();
right = n.getLastChild();
if (left.isTypeOf()) {
leftType = getJSType(left);
rightType = getJSType(right);
JSType leftTypeRestricted = leftType.restrictByNotNullOrUndefined();
JSType rightTypeRestricted = rightType.restrictByNotNullOrUndefined();
TernaryValue result = TernaryValue.UNKNOWN;
if (n.getType() == Token.EQ || n.getType() == Token.NE) {
if (result != TernaryValue.UNKNOWN) {
ensureTyped(t, n, BOOLEAN_TYPE);
break;
for (ObjectType extInterface : functionType.getExtendedInterfaces()) {
if (functionType.getExtendedInterfacesCount() > 1) {
visitParameterList(t, n, fnType);
ensureTyped(t, n, fnType.getInstanceType());
FunctionType fnType = type.toMaybeFunctionType();
if (fnType != null) {
visitNew(t, n);
Node constructor = n.getFirstChild();
JSType type = getJSType(constructor).restrictByNotNullOrUndefined();
if (type.isConstructor() || type.isEmptyType() || type.isUnknownType()) {
validator.expectCanAssignTo(
Iterator<Node> arguments = call.children().iterator();
arguments.next(); // skip the function name
Iterator<Node> parameters = functionType.getParameters().iterator();
int ordinal = 0;
Node parameter = null;
Node argument = null;
while (arguments.hasNext() &&
int numArgs = call.getChildCount() - 1;
int minArgs = functionType.getMinArguments();
int maxArgs = functionType.getMaxArguments();
if (minArgs > numArgs || maxArgs < numArgs) {
}
info = varInfo;
JSType valueType = getJSType(value);
JSType nameType = var.getType();
nameType = (nameType == null) ? getNativeType(UNKNOWN_TYPE) : nameType;
JSDocInfo info = name.getJSDocInfo();
if (info == null) {
checkEnumAlias(t, info, value);
if (var.isTypeInferred()) {
ctorType.getAllImplementedInterfaces()) {
check(externsRoot, true);
inferJSDocInfo.process(node, null);
return;
ctor = maybeSuperInstanceType.getConstructor();
