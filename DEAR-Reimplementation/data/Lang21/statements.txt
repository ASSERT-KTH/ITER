if (cal1 == null || cal2 == null) {
return (cal1.get(Calendar.MILLISECOND) == cal2.get(Calendar.MILLISECOND) &&
public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone("GMT");
private static final int[][] fields = {
super();
}
if (date1 == null || date2 == null) {
throw new IllegalArgumentException("The date must not be null");
Calendar cal1 = Calendar.getInstance();
cal1.setTime(date1);
Calendar cal2 = Calendar.getInstance();
cal2.setTime(date2);
return isSameDay(cal1, cal2);
if (cal1 == null || cal2 == null) {
throw new IllegalArgumentException("The date must not be null");
return (cal1.get(Calendar.ERA) == cal2.get(Calendar.ERA) &&
if (date1 == null || date2 == null) {
throw new IllegalArgumentException("The date must not be null");
return date1.getTime() == date2.getTime();
if (cal1 == null || cal2 == null) {
throw new IllegalArgumentException("The date must not be null");
return cal1.getTime().getTime() == cal2.getTime().getTime();
throw new IllegalArgumentException("The date must not be null");
return parseDateWithLeniency(str, parsePatterns, true);
return parseDateWithLeniency(str, parsePatterns, false);
if (str == null || parsePatterns == null) {
throw new IllegalArgumentException("Date and Patterns must not be null");
SimpleDateFormat parser = new SimpleDateFormat();
parser.setLenient(lenient);
ParsePosition pos = new ParsePosition(0);
for (int i = 0; i < parsePatterns.length; i++) {
String pattern = parsePatterns[i];
if (parsePatterns[i].endsWith("ZZ")) {
pattern = pattern.substring(0, pattern.length() - 1);
parser.applyPattern(pattern);
pos.setIndex(0);
String str2 = str;
if (parsePatterns[i].endsWith("ZZ")) {
str2 = str.replaceAll("([-+][0-9][0-9]):([0-9][0-9])$", "$1$2");
Date date = parser.parse(str2, pos);
if (date != null && pos.getIndex() == str2.length()) {
return date;
throw new ParseException("Unable to parse the date: " + str, -1);
return add(date, Calendar.YEAR, amount);
return add(date, Calendar.MONTH, amount);
return add(date, Calendar.WEEK_OF_YEAR, amount);
return add(date, Calendar.DAY_OF_MONTH, amount);
return add(date, Calendar.HOUR_OF_DAY, amount);
return add(date, Calendar.MINUTE, amount);
return add(date, Calendar.SECOND, amount);
