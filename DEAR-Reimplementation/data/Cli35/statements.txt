matchingOpts.add(longOpt);
if (longOpt.startsWith(opt))
}
opt = Util.stripLeadingHyphens(opt);
List<String> matchingOpts = new ArrayList<String>();
for (String longOpt : longOpts.keySet())
return matchingOpts;
public class Options implements Serializable
private final Map<String, Option> shortOpts = new LinkedHashMap<String, Option>();
private final Map<String, Option> longOpts = new LinkedHashMap<String, Option>();
private final List<Object> requiredOpts = new ArrayList<Object>();
private final Map<String, OptionGroup> optionGroups = new HashMap<String, OptionGroup>();
return new HashSet<OptionGroup>(optionGroups.values());
addOption(new Option(opt, longOpt, hasArg, description));
return this;
String key = opt.getKey();
if (opt.hasLongOpt())
longOpts.put(opt.getLongOpt(), opt);
if (opt.isRequired())
shortOpts.put(key, opt);
return this;
return Collections.unmodifiableList(requiredOpts);
if (group.isRequired())
requiredOpts.add(group);
for (Option option : group.getOptions())
option.setRequired(false);
addOption(option);
optionGroups.put(option.getKey(), group);
}
return this;
addOption(opt, null, false, description);
return this;
addOption(opt, null, hasArg, description);
return this;
if (requiredOpts.contains(key))
requiredOpts.remove(requiredOpts.indexOf(key));
requiredOpts.add(key);
return Collections.unmodifiableCollection(helpOptions());
return new ArrayList<Option>(shortOpts.values());
opt = Util.stripLeadingHyphens(opt);
if (shortOpts.containsKey(opt))
return shortOpts.get(opt);
return longOpts.get(opt);
opt = Util.stripLeadingHyphens(opt);
return shortOpts.containsKey(opt) || longOpts.containsKey(opt);
opt = Util.stripLeadingHyphens(opt);
return longOpts.containsKey(opt);
opt = Util.stripLeadingHyphens(opt);
return shortOpts.containsKey(opt);
return optionGroups.get(opt.getKey());
