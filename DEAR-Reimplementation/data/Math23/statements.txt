e = b - x;
d = -tol1;
if (x <= m) {
v = u;
fv = fu;
b = u;
} else if (fu <= fv ||
d = p / q;
u = x + d;
if (u - a < tol2 || b - u < tol2) {
e = a - x;
this(rel, abs, null);
}
p = -p;
return
return a.getValue() <= b.getValue() ? a : b;
super(checker);
if (rel < MIN_RELATIVE_TOLERANCE) {
if (abs <= 0) {
relativeThreshold = rel;
absoluteThreshold = abs;
}
private static final double GOLDEN_SECTION = 0.5 * (3 - FastMath.sqrt(5));
private static final double MIN_RELATIVE_TOLERANCE = 2 * FastMath.ulp(1d);
final boolean isMinim = getGoalType() == GoalType.MINIMIZE;
final double lo = getMin();
final double mid = getStartValue();
final double hi = getMax();
final ConvergenceChecker<UnivariatePointValuePair> checker
if (lo < hi) {
a = lo;
b = hi;
double x = mid;
double v = x;
double w = x;
double d = 0;
double e = 0;
double fx = computeObjectiveValue(x);
if (!isMinim) {
double fv = fx;
double fw = fx;
UnivariatePointValuePair previous = null;
UnivariatePointValuePair current
int iter = 0;
final double m = 0.5 * (a + b);
final double tol1 = relativeThreshold * FastMath.abs(x) + absoluteThreshold;
final double tol2 = 2 * tol1;
final boolean stop = FastMath.abs(x - m) <= tol2 - 0.5 * (b - a);
if (!stop) {
double p = 0;
