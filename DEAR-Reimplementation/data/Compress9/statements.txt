this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);
}
public TarArchiveOutputStream(OutputStream os, int blockSize, int recordSize) {
private int longFileMode = LONGFILE_ERROR;
private boolean closed = false;
private boolean haveUnclosedEntry = false;
private boolean finished = false;
out = new CountingOutputStream(os);
this.buffer = new TarBuffer(out, blockSize, recordSize);
this.assemLen = 0;
this.assemBuf = new byte[recordSize];
this.recordBuf = new byte[recordSize];
}
if (finished) {
if(haveUnclosedEntry) {
writeEOFRecord();
writeEOFRecord();
buffer.flushBlock();
finished = true;
}
if(!finished) {
finish();
if (!closed) {
buffer.close();
out.close();
closed = true;
}
if(finished) {
TarArchiveEntry entry = (TarArchiveEntry) archiveEntry;
if (entry.getName().length() >= TarConstants.NAMELEN) {
entry.writeEntryHeader(recordBuf);
buffer.writeRecord(recordBuf);
currBytes = 0;
if (entry.isDirectory()) {
currSize = entry.getSize();
currName = entry.getName();
haveUnclosedEntry = true;
}
if(finished) {
if (!haveUnclosedEntry){
if (assemLen > 0) {
for (int i = assemLen; i < assemBuf.length; ++i) {
assemBuf[i] = 0;
buffer.writeRecord(assemBuf);
currBytes += assemLen;
assemLen = 0;
if (currBytes < currSize) {
haveUnclosedEntry = false;
}
if ((currBytes + numToWrite) > currSize) {
