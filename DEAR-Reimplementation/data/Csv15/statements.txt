final boolean trailingDelimiter, final boolean autoFlush) {
this.delimiter = delimiter;
this.quoteCharacter = quoteChar;
this.quoteMode = quoteMode;
this.commentMarker = commentStart;
this.escapeCharacter = escape;
this.ignoreSurroundingSpaces = ignoreSurroundingSpaces;
this.allowMissingColumnNames = allowMissingColumnNames;
this.ignoreEmptyLines = ignoreEmptyLines;
this.recordSeparator = recordSeparator;
this.nullString = nullString;
this.headerComments = toStringArray(headerComments);
this.header = header == null ? null : header.clone();
this.skipHeaderRecord = skipHeaderRecord;
this.ignoreHeaderCase = ignoreHeaderCase;
this.trailingDelimiter = trailingDelimiter;
this.trim = trim;
this.autoFlush = autoFlush;
validate();
}
public static final CSVFormat DEFAULT = new CSVFormat(COMMA, DOUBLE_QUOTE_CHAR, null, null, null, false, true, CRLF,
public static final CSVFormat EXCEL = DEFAULT
public static final CSVFormat INFORMIX_UNLOAD = DEFAULT
public static final CSVFormat INFORMIX_UNLOAD_CSV = DEFAULT
public static final CSVFormat MYSQL = DEFAULT
public static final CSVFormat POSTGRESQL_CSV = DEFAULT
public static final CSVFormat POSTGRESQL_TEXT = DEFAULT
public static final CSVFormat RFC4180 = DEFAULT.withIgnoreEmptyLines(false);
public static final CSVFormat TDF = DEFAULT
return c == LF || c == CR;
return c != null && isLineBreak(c.charValue());
return recordSeparator;
if (values == null) {
return null;
if (isLineBreak(delimiter)) {
if (quoteCharacter != null && delimiter == quoteCharacter.charValue()) {
if (escapeCharacter != null && delimiter == escapeCharacter.charValue()) {
if (commentMarker != null && delimiter == commentMarker.charValue()) {
if (quoteCharacter != null && quoteCharacter.equals(commentMarker)) {
if (escapeCharacter != null && escapeCharacter.equals(commentMarker)) {
if (escapeCharacter == null && quoteMode == QuoteMode.NONE) {
if (header != null) {
}
return this.withAllowMissingColumnNames(true);
return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,
if (isLineBreak(delimiter)) {
return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escapeCharacter,
return withEscape(Character.valueOf(escape));
if (isLineBreak(escape)) {
return new CSVFormat(delimiter, quoteCharacter, quoteMode, commentMarker, escape, ignoreSurroundingSpaces,
