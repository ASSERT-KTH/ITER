longresult = 0;
boolean stillPadding = true;
int end = offset + length;
int start = offset;
for (int i = start; i < end; i++){
return result;
private TarUtils(){
}
final byte currentByte = buffer[i];
if (currentByte == 0) {
break;
if (currentByte == (byte) ' ' || currentByte == '0') {
if (stillPadding) {
continue;
if (currentByte == (byte) ' ') {
break;
stillPadding = false;
if (currentByte < '0' || currentByte > '7'){
throw new IllegalArgumentException(
result = (result << 3) + (currentByte - '0'); // convert from ASCII
String string = new String(buffer, offset, length);
string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed
final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length;
return s;
StringBuffer result = new StringBuffer(length);
intend = offset + length;
for (int i = offset; i < end; ++i) {
byte b = buffer[i];
if (b == 0) { // Trailing null
break;
result.append((char) (b & 0xFF)); // Allow for sign-extension
return result.toString();
for (i = 0; i < length && i < name.length(); ++i) {
buf[offset + i] = (byte) name.charAt(i);
for (; i < length; ++i) {
buf[offset + i] = 0;
return offset + length;
int remaining = length;
remaining--;
if (value == 0) {
buffer[offset + remaining--] = (byte) '0';
long val = value;
for (; remaining >= 0 && val != 0; --remaining) {
buffer[offset + remaining] = (byte) ((byte) '0' + (byte) (val & 7));
val = val >>> 3;
if (val != 0){
throw new IllegalArgumentException
for (; remaining >= 0; --remaining) { // leading zeros
buffer[offset + remaining] = (byte) '0';
}
