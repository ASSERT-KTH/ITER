for (int i = 0; i < scale.length; ++i) {
scale[i] = scalAbsoluteTolerance + scalRelativeTolerance * FastMath.abs(y[i]);
setEquations(equations);
final boolean forward = t > equations.getTime();
final double[] y0= equations.getCompleteState();
final double[] y = y0.clone();
final int stages = c.length + 1;
final double[][] yDotK = new double[stages][y.length];
final double[] yTmp= y0.clone();
final double[] yDotTmp = new double[y.length];
final RungeKuttaStepInterpolator interpolator = (RungeKuttaStepInterpolator) prototype.copy();
interpolator.reinitialize(this, yTmp, yDotK, forward,
interpolator.storeTime(equations.getTime());
stepStart = equations.getTime();
doublehNew= 0;
boolean firstTime = true;
initIntegration(equations.getTime(), y0, t);
isLastStep = false;
interpolator.shift();
double error = 10;
while (error >= 1.0) {
if (firstTime || !fsal) {
computeDerivatives(stepStart, y, yDotK[0]);
if (firstTime) {
final double[] scale = new double[mainSetDimension];
if (vecAbsoluteTolerance == null) {
hNew = initializeStep(forward, getOrder(), scale,
firstTime = false;
stepSize = hNew;
for (int k = 1; k < stages; ++k) {
for (int j = 0; j < y0.length; ++j) {
double sum = a[k-1][0] * yDotK[0][j];
for (int l = 1; l < k; ++l) {
sum += a[k-1][l] * yDotK[l][j];
yTmp[j] = y[j] + stepSize * sum;
computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);
super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
this.fsal= fsal;
this.c = c;
this.a = a;
this.b = b;
this.prototype = prototype;
exp = -1.0 / getOrder();
setSafety(0.9);
setMinReduction(0.2);
setMaxGrowth(10.0);
}
sanityChecks(equations, t);
this.safety = safety;
}
