}
cur = cur.getNext()) {
if (s.scope != jsScope) {
if (predicate.apply(cur)) {
c.inlineVariable();
if (predicate.apply(cur)) {
def.reachingDef.put(other, null);
computeMustDef(n.getFirstChild(), cfgNode, output, conditional);
computeMustDef(n.getLastChild(), cfgNode, output, true);
return;
for (Node cur = p.getParent().getFirstChild(); cur != p;
return false;
return false;
for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {
for (Node p = n; p != expressionRoot; p = p.getParent()) {
for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) {
return;
computeMustDef(c.getFirstChild(), cfgNode, output, conditional);
addToDefIfLocal(c.getString(), conditional ? null : cfgNode,
if (c.canInline()) {
}
return false;
return def.node;
Preconditions.checkArgument(getCfg().hasNode(useNode));
GraphNode<Node, Branch> n = getCfg().getNode(useNode);
FlowState<MustDef> state = n.getAnnotation();
Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));
for (Var s : def.depends) {
return null;
Preconditions.checkArgument(getCfg().hasNode(useNode));
GraphNode<Node, Branch> n = getCfg().getNode(useNode);
FlowState<MustDef> state = n.getAnnotation();
Definition def = state.getIn().reachingDef.get(jsScope.getVar(name));
if (def == null) {
if (node == null) {
Definition definition = new Definition(node);
if (rValue != null) {
computeDependence(definition, rValue);
def.reachingDef.put(var, definition);
NodeTraversal.traverse(compiler, rValue,
}
for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
if (c.hasChildren()) {
return;
computeMustDef(c, cfgNode, output, conditional);
public FlowSensitiveInlineVariables(AbstractCompiler compiler) {
this.compiler = compiler;
}
private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
if (t.inGlobalScope()) {
