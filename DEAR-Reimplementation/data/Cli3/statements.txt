return createValue(str, (Class) obj);
if (PatternOptionBuilder.STRING_VALUE == clazz)
return str;
else if (PatternOptionBuilder.OBJECT_VALUE == clazz)
return createObject(str);
else if (PatternOptionBuilder.NUMBER_VALUE == clazz)
return createNumber(str);
else if (PatternOptionBuilder.DATE_VALUE == clazz)
else if (PatternOptionBuilder.CLASS_VALUE == clazz)
return createClass(str);
else if (PatternOptionBuilder.FILE_VALUE == clazz)
return createFile(str);
Class cl = null;
cl = Class.forName(str);
}
Object instance = null;
instance = cl.newInstance();
}
return instance;
return NumberUtils.createNumber(str);
return Class.forName(str);
return new File(str);
public class TypeHandler {
return createDate(str);
else if (PatternOptionBuilder.EXISTING_FILE_VALUE == clazz)
return createFile(str);
else if (PatternOptionBuilder.FILES_VALUE == clazz)
return createFiles(str);
else if (PatternOptionBuilder.URL_VALUE == clazz)
return createURL(str);
return null;
catch (ClassNotFoundException cnfe)
System.err.println("Unable to find: " + str);
return null;
catch (InstantiationException cnfe)
System.err.println("InstantiationException; Unable to create: "
return null;
catch (IllegalAccessException cnfe)
System.err.println("IllegalAccessException; Unable to create: "
return null;
catch (NumberFormatException nfe)
System.err.println(nfe.getMessage());
return null;
catch (ClassNotFoundException cnfe)
System.err.println("Unable to find: " + str);
return null;
Date date = null;
if (date == null)
System.err.println("Unable to parse: " + str);
return date;
