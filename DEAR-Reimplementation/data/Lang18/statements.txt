rule = new TextField(Calendar.ERA, ERAs);
break;
rule = new TextField(Calendar.MONTH, shortMonths);
rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);
if (tokenLen == 1) {
rule = TimeZoneNumberRule.INSTANCE_NO_COLON;
rule = TimeZoneNumberRule.INSTANCE_COLON;
break;
return format(new Date(millis));
TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);
String value = cTimeZoneDisplayCache.get(key);
if (value == null) {
value = tz.getDisplayName(daylight, style, locale);
String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);
if (prior != null) {
return value;
if (tokenLen >= 4) {
rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);
break;
rule = TwoDigitYearField.INSTANCE;
break;
rule = new TextField(Calendar.MONTH, months);
rule = UnpaddedMonthField.INSTANCE;
break;
rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);
break;
rule = selectNumberRule(Calendar.SECOND, tokenLen);
break;
rule = new TextField(Calendar.AM_PM, AmPmStrings);
break;
Calendar c = new GregorianCalendar(mTimeZone, mLocale);// hard code GregorianCalendar
c.setTime(date);
return applyRules(c, new StringBuffer(mMaxLengthEstimate)).toString();
rule = selectNumberRule(Calendar.MINUTE, tokenLen);
break;
rule = new TextField(Calendar.DAY_OF_WEEK, tokenLen < 4 ? shortWeekdays : weekdays);
break;
if (i + 1 < length && pattern.charAt(i + 1) == '\'') {
inLiteral = !inLiteral;
return new UnpaddedNumberField(field);
rule = selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);
break;
return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();
return applyRules(calendar, buf);
return cache.getInstance(pattern, null, null);
for (Rule rule : mRules) {
rule.appendTo(buf, calendar);
return buf;
rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);
break;
