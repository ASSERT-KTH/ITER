if (_inputStart >= 0) {
unshare(1);
return _currentSegment;
final char[] curr = _currentSegment;
final int len = curr.length;
int newLen = (len == MAX_SEGMENT_LEN) ? (MAX_SEGMENT_LEN+1) : Math.min(MAX_SEGMENT_LEN, len + (len >> 1));
return (_currentSegment = Arrays.copyOf(curr, newLen));
public TextBuffer(BufferRecycler allocator) {
private boolean _hasSegments = false;
_allocator = allocator;
}
final static char[] NO_CHARS = new char[0];
if (_allocator != null) {
return _allocator.allocCharBuffer(BufferRecycler.CHAR_TEXT_BUFFER, needed);
int sharedLen = _inputLen;
_inputLen = 0;
char[] inputBuf = _inputBuffer;
_inputBuffer = null;
int start = _inputStart;
_inputStart = -1;
int needed = sharedLen+needExtra;
if (_currentSegment == null || needed > _currentSegment.length) {
_currentSegment = buf(needed);
if (sharedLen > 0) {
_segmentSize = 0;
_currentSize = sharedLen;
}
if (_allocator == null) {
resetWithEmpty();
if (_currentSegment != null) {
resetWithEmpty();
char[] buf = _currentSegment;
_currentSegment = null;
_allocator.releaseCharBuffer(BufferRecycler.CHAR_TEXT_BUFFER, buf);
}
_inputStart = -1; // indicates shared buffer not used
_currentSize = 0;
_inputLen = 0;
_inputBuffer = null;
_resultString = null;
_resultArray = null;
if (_hasSegments) {
clearSegments();
}
_resultString = null;
_resultArray = null;
_inputBuffer = buf;
_inputStart = start;
_inputLen = len;
if (_hasSegments) {
