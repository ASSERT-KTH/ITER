stopTime = System.currentTimeMillis();
this.runningState = STATE_SUSPENDED;
}
if(this.runningState != STATE_RUNNING) {
return this.stopTime - this.startTime;
if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {
stopTime = System.currentTimeMillis();
this.runningState = STATE_STOPPED;
}
if(this.runningState == STATE_STOPPED || this.runningState == STATE_SUSPENDED) {
super();
private int runningState = STATE_UNSTARTED;
private int splitState = STATE_UNSPLIT;
private long startTime = -1;
private long stopTime = -1;
}
if(this.runningState == STATE_STOPPED) {
if(this.runningState != STATE_UNSTARTED) {
stopTime = -1;
startTime = System.currentTimeMillis();
this.runningState = STATE_RUNNING;
}
throw new IllegalStateException("Stopwatch must be reset before being restarted. ");
throw new IllegalStateException("Stopwatch already started. ");
throw new IllegalStateException("Stopwatch is not running. ");
this.runningState = STATE_UNSTARTED;
this.splitState = STATE_UNSPLIT;
startTime = -1;
stopTime = -1;
}
if(this.runningState != STATE_RUNNING) {
throw new IllegalStateException("Stopwatch is not running. ");
stopTime = System.currentTimeMillis();
this.splitState = STATE_SPLIT;
}
if(this.splitState != STATE_SPLIT) {
throw new IllegalStateException("Stopwatch has not been split. ");
stopTime = -1;
this.splitState = STATE_UNSPLIT;
}
throw new IllegalStateException("Stopwatch must be running to suspend. ");
if(this.runningState != STATE_SUSPENDED) {
throw new IllegalStateException("Stopwatch must be suspended to resume. ");
startTime += (System.currentTimeMillis() - stopTime);
stopTime = -1;
this.runningState = STATE_RUNNING;
}
if(this.runningState == STATE_UNSTARTED) {
return 0;
if(this.runningState == STATE_RUNNING) {
stopTime = System.currentTimeMillis();
this.runningState = STATE_SUSPENDED;
}
if(this.runningState != STATE_RUNNING) {
return this.stopTime - this.startTime;
if(this.runningState != STATE_RUNNING && this.runningState != STATE_SUSPENDED) {
stopTime = System.currentTimeMillis();
this.runningState = STATE_STOPPED;
}
if(this.runningState == STATE_STOPPED || this.runningState == STATE_SUSPENDED) {
super();
private int runningState = STATE_UNSTARTED;
private int splitState = STATE_UNSPLIT;
private long startTime = -1;
private long stopTime = -1;
}
if(this.runningState == STATE_STOPPED) {
if(this.runningState != STATE_UNSTARTED) {
stopTime = -1;
startTime = System.currentTimeMillis();
this.runningState = STATE_RUNNING;
}
throw new IllegalStateException("Stopwatch must be reset before being restarted. ");
throw new IllegalStateException("Stopwatch already started. ");
throw new IllegalStateException("Stopwatch is not running. ");
this.runningState = STATE_UNSTARTED;
this.splitState = STATE_UNSPLIT;
startTime = -1;
stopTime = -1;
}
if(this.runningState != STATE_RUNNING) {
throw new IllegalStateException("Stopwatch is not running. ");
stopTime = System.currentTimeMillis();
this.splitState = STATE_SPLIT;
}
if(this.splitState != STATE_SPLIT) {
throw new IllegalStateException("Stopwatch has not been split. ");
stopTime = -1;
this.splitState = STATE_UNSPLIT;
}
throw new IllegalStateException("Stopwatch must be running to suspend. ");
if(this.runningState != STATE_SUSPENDED) {
throw new IllegalStateException("Stopwatch must be suspended to resume. ");
startTime += (System.currentTimeMillis() - stopTime);
stopTime = -1;
this.runningState = STATE_RUNNING;
}
if(this.runningState == STATE_UNSTARTED) {
return 0;
if(this.runningState == STATE_RUNNING) {
