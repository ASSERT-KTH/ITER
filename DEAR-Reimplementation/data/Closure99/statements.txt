int pType = parent.getType();
if (!(pType == Token.BLOCK ||
compiler.report(t.makeError(n, level, GLOBAL_THIS));
JSDocInfo jsDoc = getFunctionJsDocInfo(n);
if (jsDoc != null &&
JSDocInfo jsDoc = n.getJSDocInfo();
Node parent = n.getParent();
if (jsDoc == null) {
return jsDoc;
CheckGlobalThis(AbstractCompiler compiler, CheckLevel level) {
private Node assignLhsChild = null;
this.compiler = compiler;
this.level = level;
}
static final DiagnosticType GLOBAL_THIS = DiagnosticType.warning(
if (n.getType() == Token.FUNCTION) {
if (parent != null && parent.getType() == Token.ASSIGN) {
return true;
if (n.getType() == Token.THIS && shouldReportThis(n, parent)) {
if (n == assignLhsChild) {
}
if (assignLhsChild != null) {
if (lhs.getType() == Token.GETPROP &&
if (lhs.getQualifiedName() != null && lhs.getQualifiedName().contains(".prototype.")) {
Node lhs = parent.getFirstChild();
Node rhs = lhs.getNext();
if (n == lhs) {
if (assignLhsChild == null) {
assignLhsChild = lhs;
assignLhsChild = null;
jsDoc = parent.getJSDocInfo();
if (jsDoc == null && parentType == Token.NAME) {
return false;
int parentType = parent.getType();
if (parentType == Token.NAME || parentType == Token.ASSIGN) {
return true;
return parent != null && NodeUtil.isGet(parent);
return false;
return false;
return false;
Node gramps = parent.getParent();
if (gramps.getType() == Token.VAR) {
jsDoc = gramps.getJSDocInfo();
