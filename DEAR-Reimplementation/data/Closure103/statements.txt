return computeFollowNode(fromNode, parent);
return computeFollowNode(fromNode, parent);
if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
handleCatch(n);
return;
createEdge(node, Branch.UNCOND, node.getLastChild());
}
if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
if (NodeUtil.hasFinally(curHandler)) {
}
} else if (NodeUtil.getCatchBlock(parent) == node){
exceptionHandler.push(n);
return true;
if (n == parent.getFirstChild().getNext()) {
Preconditions.checkState(exceptionHandler.peek() == parent);
exceptionHandler.pop();
handleTry(n);
return;
createEdge(node, Branch.UNCOND, node.getFirstChild());
}
if (parent.getFirstChild() == node) {
nodePriorities.put(candidate, ++priorityCounter);
return n != parent.getFirstChild();
break;
connectToPossibleExceptionHandler(node, node.getFirstChild());
createEdge(node, Branch.UNCOND, computeFollowNode(node));
createEdge(node, Branch.ON_FALSE,
if (!ControlFlowGraph.isEnteringNewCfgNode(c) && mayThrowException(c)) {
return false;
if (node.getType() == Token.BLOCK && node.isSyntheticBlock()) {
}
for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
switch (parent.getType()) {
Node nextSibling = node.getNext();
while (nextSibling != null && nextSibling.getType() == Token.FUNCTION) {
if (nextSibling != null) {
return computeFollowNode(fromNode, parent);
if (mayThrowException(target) && !exceptionHandler.isEmpty()) {
switch (n.getType()) {
switch (parent.getType()) {
boolean shouldTraverseFunctions) {
private final Comparator<DiGraphNode<Node, Branch>> priorityComparator =
private final Deque<Node> exceptionHandler = new ArrayDeque<Node>();
private final Multimap<Node, Node> finallyMap = HashMultimap.create();
this.compiler = compiler;
this.shouldTraverseFunctions = shouldTraverseFunctions;
}
return cfg;
this.root = root;
astPositionCounter = 0;
