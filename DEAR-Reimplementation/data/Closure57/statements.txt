return extractClassNameIfGoog(node, parent, "goog.require");
String className = null;
if (NodeUtil.isExprCall(parent)) {
Node callee = node.getFirstChild();
if (callee != null && callee.getType() == Token.GETPROP) {
String qualifiedName = callee.getQualifiedName();
if (functionName.equals(qualifiedName)) {
Node target = callee.getNext();
if (target != null) {
className = target.getString();
return className;
public class ClosureCodingConvention extends DefaultCodingConvention {
private final Set<String> propertyTestFunctions = ImmutableSet.of(
static final DiagnosticType OBJECTLIT_EXPECTED = DiagnosticType.warning(
if (type == SubclassType.INHERITS) {
childCtor.defineDeclaredProperty("superClass_",
childCtor.getPrototype().defineDeclaredProperty("constructor",
}
Node callName = callNode.getFirstChild();
SubclassType type = typeofClassDefiningName(callName);
if (type != null) {
Node subclass = null;
Node superclass = callNode.getLastChild();
boolean isDeprecatedCall = callNode.getChildCount() == 2 &&
if (isDeprecatedCall) {
subclass = callName.getFirstChild();
} else if (callNode.getChildCount() == 3) {
subclass = callName.getNext();
return null;
if (type == SubclassType.MIXIN) {
if (!endsWithPrototype(superclass)) {
return null;
if (!isDeprecatedCall) {
if (!endsWithPrototype(subclass)) {
return null;
subclass = subclass.getFirstChild();
superclass = superclass.getFirstChild();
if (subclass != null &&
return new SubclassRelationship(type, subclass, superclass);
return null;
String methodName = null;
if (callName.getType() == Token.GETPROP) {
methodName = callName.getLastChild().getString();
} else if (callName.getType() == Token.NAME) {
String name = callName.getString();
int dollarIndex = name.lastIndexOf('$');
if (dollarIndex != -1) {
methodName = name.substring(dollarIndex + 1);
if (methodName != null) {
if (methodName.equals("inherits")) {
