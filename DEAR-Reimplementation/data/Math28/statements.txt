Integer minRow = null;
int minIndex = tableau.getWidth();
for (Integer row : minRatioPositions) {
int i = tableau.getNumObjectiveFunctions();
for (; i < tableau.getWidth() - 1 && minRow != row; i++) {
if (row == tableau.getBasicRow(i)) {
if (i < minIndex) {
minIndex = i;
minRow = row;
}
return minRow;
}
int column = i + tableau.getArtificialVariableOffset();
final double entry = tableau.getEntry(row, column);
if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
return row;
minRatioPositions.add(i);
for (Integer row : minRatioPositions) {
for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
doIteration(tableau);
}
doIteration(tableau);
while (!tableau.isOptimal()) {
if (!Precision.equals(tableau.getEntry(0, tableau.getRhsOffset()), 0d, epsilon)) {
tableau.dropPhase1Objective();
while (!tableau.isOptimal()) {
double minValue = 0;
Integer minPos = null;
for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
final double entry = tableau.getEntry(0, i);
if (entry < minValue) {
minValue = entry;
minPos = i;
return minPos;
List<Integer> minRatioPositions = new ArrayList<Integer>();
double minRatio = Double.MAX_VALUE;
for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
final double entry = tableau.getEntry(i, col);
if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
final double ratio = rhs / entry;
final int cmp = Double.compare(ratio, minRatio);
if (cmp == 0) {
} else if (cmp < 0) {
minRatio = ratio;
minRatioPositions = new ArrayList<Integer>();
minRatioPositions.add(i);
if (minRatioPositions.size() == 0) {
} else if (minRatioPositions.size() > 1) {
return minRatioPositions.get(0);
