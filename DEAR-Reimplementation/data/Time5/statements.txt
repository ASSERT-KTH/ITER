result = result.withYears(years);
int[] values = getValues();// cloned
getPeriodType().setIndexedField(this, PeriodType.YEAR_INDEX, values, years);
months = months % 12;
if (years != 0) {
years = FieldUtils.safeAdd(years, months / 12);
}
int years = getYears();
int months = getMonths();
if (years != 0 || months != 0) {
super(duration, type, chronology);
type = DateTimeUtils.getPeriodType(type);
long millis = getMillis();// no overflow can happen, even with Integer.MAX_VALUEs
millis += (((long) getSeconds()) * ((long) DateTimeConstants.MILLIS_PER_SECOND));
millis += (((long) getMinutes()) * ((long) DateTimeConstants.MILLIS_PER_MINUTE));
millis += (((long) getHours()) * ((long) DateTimeConstants.MILLIS_PER_HOUR));
millis += (((long) getDays()) * ((long) DateTimeConstants.MILLIS_PER_DAY));
millis += (((long) getWeeks()) * ((long) DateTimeConstants.MILLIS_PER_WEEK));
Period result = new Period(millis, type, ISOChronology.getInstanceUTC());
super(years, months, weeks, days, hours, minutes, seconds, millis, PeriodType.standard());
}
return getPeriodType().getIndexedField(this, PeriodType.YEAR_INDEX);
return getPeriodType().getIndexedField(this, PeriodType.MONTH_INDEX);
return getPeriodType().getIndexedField(this, PeriodType.WEEK_INDEX);
return getPeriodType().getIndexedField(this, PeriodType.DAY_INDEX);
return getPeriodType().getIndexedField(this, PeriodType.HOUR_INDEX);
return getPeriodType().getIndexedField(this, PeriodType.MINUTE_INDEX);
return getPeriodType().getIndexedField(this, PeriodType.SECOND_INDEX);
return getPeriodType().getIndexedField(this, PeriodType.MILLI_INDEX);
super(0L, null, null);
}
public static final Period ZERO = new Period();
super(0, 0, 0, 0, hours, minutes, seconds, millis, PeriodType.standard());
}
super(years, months, weeks, days, hours, minutes, seconds, millis, type);
}
super(duration);
}
super(duration, type, null);
}
super(duration, null, chronology);
}
super(startInstant, endInstant, null, null);
}
super(startInstant, endInstant, type, null);
}
super(startInstant, endInstant, null, chrono);
}
super(startInstant, endInstant, type, chrono);
}
