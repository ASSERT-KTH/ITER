public BZip2CompressorInputStream(final InputStream in, final boolean decompressConcatenated) throws IOException {
private final CRC crc = new CRC();
private int currentChar = -1;
private int currentState = START_BLOCK_STATE;
this.in = in;
this.decompressConcatenated = decompressConcatenated;
init(true);
initBlock();
setupBlock();
}
if (offs < 0) {
if (len < 0) {
if (offs + len > dest.length) {
if (this.in == null) {
final int hi = offs + len;
int destOffs = offs;
while (destOffs < hi && ((b = read0()) >= 0)) {
dest[destOffs++] = (byte) b;
count(1);
final boolean[] inUse = this.data.inUse;
final byte[] seqToUnseq = this.data.seqToUnseq;
int nInUseShadow = 0;
for (int i = 0; i < 256; i++) {
if (inUse[i]) {
seqToUnseq[nInUseShadow++] = (byte) i;
this.nInUse = nInUseShadow;
}
final int retChar = this.currentChar;
switch (currentState) {
setupNoRandPartB();
break;
return retChar;
if (null == in) {
int magic0 = this.in.read();
if (magic0 == -1 && !isFirstStream) {
int magic1 = this.in.read();
int magic2 = this.in.read();
if (magic0 != 'B' || magic1 != 'Z' || magic2 != 'h') {
int blockSize = this.in.read();
if ((blockSize < '1') || (blockSize > '9')) {
this.blockSize100k = blockSize - '0';
this.bsLive = 0;
this.computedCombinedCRC = 0;
return true;
magic0 = bsGetUByte();
magic1 = bsGetUByte();
magic2 = bsGetUByte();
magic3 = bsGetUByte();
magic4 = bsGetUByte();
magic5 = bsGetUByte();
