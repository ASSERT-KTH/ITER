return 0;
final char preHWChar = str.charAt(index - 2);
final char firstCode = this.map(preHWChar);
if (firstCode == mappedChar || 'H' == preHWChar || 'W' == preHWChar) {
return soundex(str);
final char hwChar = str.charAt(index - 1);
if ('H' == hwChar || 'W' == hwChar) {
mapped = getMappingCode(str, incount++);
if (mapped != 0) {
if (mapped != '0' && mapped != last) {
out[count++] = mapped;
last = mapped;
final char mappedChar = this.map(str.charAt(index));
if (index > 1 && mappedChar != '0') {
return mappedChar;
return this.soundexMapping;
final int index = ch - 'A';
if (index < 0 || index >= this.getSoundexMapping().length) {
return this.getSoundexMapping()[index];
final char out[] = {'0', '0', '0', '0'};
int incount = 1, count = 1;
out[0] = str.charAt(0);
last = getMappingCode(str, 0);
while (incount < str.length() && count < out.length) {
return new String(out);
str = SoundexUtils.clean(str);
if (str.length() == 0) {
if (str == null) {
public Soundex() {
@Deprecated
this.soundexMapping = US_ENGLISH_MAPPING;
}
private static final char[] US_ENGLISH_MAPPING = US_ENGLISH_MAPPING_STRING.toCharArray();
public static final Soundex US_ENGLISH = new Soundex();
public Soundex(final char[] mapping) {
@Deprecated
this.soundexMapping = new char[mapping.length];
System.arraycopy(mapping, 0, this.soundexMapping, 0, mapping.length);
}
public Soundex(final String mapping) {
@Deprecated
this.soundexMapping = mapping.toCharArray();
}
return SoundexUtils.difference(this, s1, s2);
if (!(obj instanceof String)) {
throw new EncoderException("Parameter supplied to Soundex encode is not of type java.lang.String");
return soundex((String) obj);
return this.maxLength;
throw new IllegalArgumentException("The character is not mapped: " + ch);
this.maxLength = maxLength;
