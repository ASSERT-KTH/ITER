if (assertOnChange && !c.hasChildren()) {
while (c.getFirstChild() != c.getLastChild()) {
Node next = current.getNext();
if (NodeUtil.isFunctionDeclaration(current)) {
previous = current;
current = next;
}
moveNamedFunctions(n.getLastChild());
Preconditions.checkState(
Node previous = null;
Node current = functionBody.getFirstChild();
while (current != null && NodeUtil.isFunctionDeclaration(current)) {
Node insertAfter = previous;
while (current != null) {
}
Normalize(AbstractCompiler compiler, boolean assertOnChange) {
this.compiler = compiler;
this.assertOnChange = assertOnChange;
}
NodeTraversal.traverse(compiler, root, this);
MakeDeclaredNamesUnique renamer = new MakeDeclaredNamesUnique();
NodeTraversal t = new NodeTraversal(compiler, renamer);
t.traverseRoots(externs, root);
removeDuplicateDeclarations(root);
new PropogateConstantAnnotations(compiler, assertOnChange)
}
doStatementNormalizations(t, n, parent);
return true;
switch (n.getType()) {
}
if (n.getType() == Token.LABEL) {
if (NodeUtil.isStatementBlock(n) || n.getType() == Token.LABEL) {
extractForInitializer(n, null, null);
if (NodeUtil.isStatementBlock(n)) {
splitVarDeclarations(n);
if (n.getType() == Token.FUNCTION) {
}
for (Node next, c = n.getFirstChild(); c != null; c = next) {
next = c.getNext();
Node insertBefore = (before == null) ? c : before;
Node insertBeforeParent = (before == null) ? n : beforeParent;
switch (c.getType()) {
}
for (Node next, c = n.getFirstChild(); c != null; c = next) {
next = c.getNext();
if (c.getType() == Token.VAR) {
}
Callback tickler = new ScopeTicklingCallback();
ScopeCreator scopeCreator =new SyntacticScopeCreator(
NodeTraversal t = new NodeTraversal(compiler, tickler, scopeCreator);
