return this.defaultNewLine;
sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
final String padding = createPadding(nextLineTabStop);
text = padding + text.substring(pos).trim();
pos = findWrapPos(text, width, nextLineTabStop);
if (pos == -1)
sb.append(text);
return sb;
StringBuffer sb = new StringBuffer(len);
for (int i = 0; i < len; ++i)
sb.append(' ');
return sb.toString();
pos = startPos + width;
&& (c != '\n') && (c != '\r'))
--pos;
if (pos > startPos)
return pos;
int pos = findWrapPos(text, width, 0);
if (pos == -1)
if ((s == null) || (s.length() == 0))
int pos = s.length();
while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
return s.substring(0, pos);
public class HelpFormatter {
public int defaultWidth = DEFAULT_WIDTH;
public int defaultLeftPad = DEFAULT_LEFT_PAD;
public int defaultDescPad = DEFAULT_DESC_PAD;
public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;
public String defaultNewLine = System.getProperty("line.separator");
public String defaultOptPrefix = DEFAULT_OPT_PREFIX;
public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;
public String defaultArgName = DEFAULT_ARG_NAME;
private static class OptionComparator
int pos = -1;
if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
else if ((startPos + width) >= text.length())
return -1;
this.defaultWidth = width;
}
return this.defaultWidth;
this.defaultLeftPad = padding;
}
return this.defaultLeftPad;
this.defaultDescPad = padding;
}
return this.defaultDescPad;
this.defaultSyntaxPrefix = prefix;
}
return this.defaultSyntaxPrefix;
this.defaultNewLine = newline;
