skipped += x;
}
off += 3 * WORD;
readDataDescriptor();
readFully(WORD_BUF);
ZipLong val = new ZipLong(WORD_BUF);
if (ZipLong.DD_SIG.equals(val)) {
readFully(WORD_BUF);
val = new ZipLong(WORD_BUF);
current.entry.setCrc(val.getValue());
readFully(TWO_DWORD_BUF);
final ZipLong potentialSig = new ZipLong(TWO_DWORD_BUF, DWORD);
if (potentialSig.equals(ZipLong.CFH_SIG) || potentialSig.equals(ZipLong.LFH_SIG)) {
pushback(TWO_DWORD_BUF, DWORD, DWORD);
current.entry.setCompressedSize(ZipLong.getValue(TWO_DWORD_BUF));
current.entry.setSize(ZipLong.getValue(TWO_DWORD_BUF, WORD));
}
return null;
if (!closed) {
closed = true;
in.close();
inf.end();
}
}
this(inputStream, ZipEncodingHelper.UTF8);
}
this(inputStream, encoding, true);
}
this(inputStream, encoding, useUnicodeExtraFields, false);
}
final boolean allowStoredEntriesWithDataDescriptor) {
private final Inflater inf = new Inflater(true);
private final ByteBuffer buf = ByteBuffer.allocate(ZipArchiveOutputStream.BUFFER_SIZE);
private CurrentEntry current = null;
private boolean closed = false;
private boolean hitCentralDirectory = false;
private ByteArrayInputStream lastStoredEntry = null;
private boolean allowStoredEntriesWithDataDescriptor = false;
private final byte[] LFH_BUF = new byte[LFH_LEN];
private final byte[] SKIP_BUF = new byte[1024];
private final byte[] SHORT_BUF = new byte[SHORT];
private final byte[] WORD_BUF = new byte[WORD];
private final byte[] TWO_DWORD_BUF = new byte[2 * DWORD];
private int entriesRead = 0;
this.encoding = encoding;
zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
this.useUnicodeExtraFields = useUnicodeExtraFields;
in = new PushbackInputStream(inputStream, buf.capacity());
this.allowStoredEntriesWithDataDescriptor =
buf.limit(0);
