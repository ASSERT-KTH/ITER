return autoboxObjType.findPropertyType(propertyName);
return thisType.getNativeType(JSTypeNative.NO_OBJECT_TYPE);
ObjectType autoboxObjType = ObjectType.cast(autoboxesTo());
if (autoboxObjType != null) {
} else if (thisType.isObject() && thatType.isObject()) {
} else if (thatType.isUnionType()) {
} else if (thisType.isUnionType()) {
} else if (thatType.isSubtype(thisType)) {
} else if (thisType.isSubtype(thatType)) {
} else if (thisType.isUnknownType() || thatType.isUnknownType()) {
if (that.isRecordType()) {
return getGreatestSubtype(this, that);
if (thisType.isEquivalentTo(thatType)) {
return false;
JSType(JSTypeRegistry registry) {
private boolean resolved = false;
private JSType resolveResult = null;
this.registry = registry;
}
static final Comparator<JSType> ALPHA = new Comparator<JSType>() {
return registry.getNativeType(typeId);
return false;
return false;
return false;
return isNoType() || isNoObjectType() || isNoResolvedType();
return false;
return false;
return false;
if (jsType instanceof ProxyObjectType) {
return this == jsType;
return System.identityHashCode(this);
return this instanceof ObjectType ? (ObjectType) this : null;
if (thatType.isUnknownType()) {
if (thisType.isEquivalentTo(thatType)) {
return true;
if (thatType.isAllType()) {
if (thatType instanceof UnionType) {
if (thatType instanceof NamedType) {
return false;
if (type.isNoResolvedType()) {
} else if (type instanceof UnionType) {
return type;
return getLeastSupertype(this, that);
boolean areEquivalent = thisType.isEquivalentTo(thatType);
return areEquivalent ? thisType :
if (that.isUnionType()) {
return false;
return false;
return false;
return false;
