return pArray;
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
return this.encodeTable == URL_SAFE_ENCODE_TABLE;
if (eof) {
if (inAvail < 0) {
eof = true;
if (buffer == null || buffer.length - pos < encodeSize) {
switch (modulus) {
buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
buffer[pos++] = PAD;
buffer[pos++] = PAD;
if (lineLength > 0 && pos > 0) {
for (int i = 0; i < inAvail; i++) {
if (buffer == null || buffer.length - pos < encodeSize) {
modulus = (++modulus) % 3;
int b = in[inPos++];
if (b < 0) {
b += 256;
x = (x << 8) + b;
if (0 == modulus) {
}
if (!(pObject instanceof byte[])) {
return encode((byte[]) pObject);
reset();
if (pArray == null || pArray.length == 0) {
long len = getEncodeLength(pArray, lineLength, lineSeparator);
byte[] buf = new byte[(int) len];
setInitialBuffer(buf, 0, buf.length);
encode(pArray, 0, pArray.length);
encode(pArray, 0, -1); // Notify encoder of EOF.
if (buffer != buf) {
if (isUrlSafe() && pos < buf.length) {
return buf;
chunkSize = (chunkSize / 4) * 4;
long len = (pArray.length * 4) / 3;
long mod = len % 4;
if (mod != 0) {
len += 4 - mod;
if (chunkSize > 0) {
boolean lenChunksPerfectly = len % chunkSize == 0;
len += (len / chunkSize) * chunkSeparator.length;
if (!lenChunksPerfectly) {
len += chunkSeparator.length;
return len;
this(false);
}
this(CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
