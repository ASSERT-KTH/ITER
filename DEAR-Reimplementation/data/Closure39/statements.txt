this(registry, className, implicitPrototype, false);
}
super(registry);
private FunctionType ownerFunction = null;
private boolean prettyPrint = false;
this.properties = Maps.newTreeMap();
this.className = className;
this.nativeType = nativeType;
if (nativeType || implicitPrototype != null) {
setImplicitPrototype(implicitPrototype);
setImplicitPrototype(
}
if (properties.containsKey(name)) {
return properties.get(name);
ObjectType implicitPrototype = getImplicitPrototype();
if (implicitPrototype == null) {
return this.properties.size();
int localCount = 0;
for (String property : properties.keySet()) {
return implicitPrototype.getPropertiesCount() + localCount;
return properties.get(propertyName) != null;
return properties.keySet();
StaticSlot<JSType> slot = getSlot(property);
if (slot == null) {
return slot.getType();
if (hasOwnDeclaredProperty(name)) {
Property newProp = new Property(
Property oldProp = properties.get(name);
if (oldProp != null) {
properties.put(name, newProp);
return true;
if (hasReferenceName()) {
} else if (prettyPrint) {
prettyPrint = false;
Set<String> propertyNames = Sets.newTreeSet();
for (ObjectType current = this;
current != null && !current.isNativeObjectType() &&
propertyNames.addAll(current.getOwnPropertyNames());
current = current.getImplicitPrototype()) {
StringBuilder sb = new StringBuilder();
sb.append("{");
int i = 0;
for (String property : propertyNames) {
if (i > 0) {
sb.append(", ");
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toString());
++i;
if (i == MAX_PRETTY_PRINTED_PROPERTIES) {
