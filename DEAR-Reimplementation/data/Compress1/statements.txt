public CpioArchiveOutputStream(final OutputStream out, final short format) {
private boolean closed = false;
private short entryFormat = FORMAT_NEW;
private final HashMap names = new HashMap();
private long crc = 0;
this.out = new FilterOutputStream(out);
setFormat(format);
}
this(out, FORMAT_NEW);
}
if (this.closed) {
}
switch (format) {
break;
synchronized (this) {
this.entryFormat = format;
}
}
ensureOpen();
if (this.cpioEntry != null) {
if (e.getTime() == -1) {
e.setTime(System.currentTimeMillis());
if (e.getFormat() == -1) {
if (this.names.put(e.getName(), e) != null) {
writeHeader(e);
this.cpioEntry = e;
this.written = 0;
}
switch (e.getFormat()) {
out.write(MAGIC_NEW.getBytes());
writeNewEntry(e);
break;
}
writeAsciiLong(entry.getInode(), 8, 16);
writeAsciiLong(entry.getMode(), 8, 16);
writeAsciiLong(entry.getUID(), 8, 16);
writeAsciiLong(entry.getGID(), 8, 16);
writeAsciiLong(entry.getNumberOfLinks(), 8, 16);
writeAsciiLong(entry.getTime(), 8, 16);
writeAsciiLong(entry.getSize(), 8, 16);
writeAsciiLong(entry.getDeviceMaj(), 8, 16);
writeAsciiLong(entry.getDeviceMin(), 8, 16);
writeAsciiLong(entry.getRemoteDeviceMaj(), 8, 16);
writeAsciiLong(entry.getRemoteDeviceMin(), 8, 16);
writeAsciiLong(entry.getName().length() + 1, 8, 16);
writeAsciiLong(entry.getChksum(), 8, 16);
writeCString(entry.getName());
pad(entry.getHeaderSize() + entry.getName().length() + 1, 4);
}
ensureOpen();
