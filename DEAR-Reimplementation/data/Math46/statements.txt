return isZero ? NaN : INF;
return "(" + real + ", " + imaginary + ")";
return this.add(I).divide(I.subtract(this)).log()
if (divisor.isZero) {
MathUtils.checkNotNull(divisor);
if (isNaN || divisor.isNaN) {
return isNaN;
if (isNaN) {
double q = d / c;
double denominator = d * q + c;
return createComplex((imaginary * q + real) / denominator,
return INF;
return Double.POSITIVE_INFINITY;
return createComplex(real + addend.getReal(),
if (divisor.isInfinite() && !isInfinite()) {
final double c = divisor.getReal();
final double d = divisor.getImaginary();
if (FastMath.abs(c) < FastMath.abs(d)) {
return createComplex(real - subtrahend.getReal(),
MathUtils.checkNotNull(addend);
if (isNaN || addend.isNaN) {
MathUtils.checkNotNull(subtrahend);
if (isNaN || subtrahend.isNaN) {
return createComplex(FastMath.log(abs()),
Complex c = (Complex)other;
if (c.isNaN) {
if (Double.isInfinite(real) ||
if (other instanceof Complex){
return isNaN;
if (isNaN) {
MathUtils.checkNotNull(factor);
if (isNaN || factor.isNaN) {
public Complex(double real, double imaginary) {
this.real = real;
this.imaginary = imaginary;
isNaN = Double.isNaN(real) || Double.isNaN(imaginary);
isInfinite = !isNaN &&
isZero = real == 0 && imaginary == 0;
}
public static final Complex I = new Complex(0.0, 1.0);
public static final Complex NaN = new Complex(Double.NaN, Double.NaN);
public static final Complex INF = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
public static final Complex ONE = new Complex(1.0, 0.0);
public static final Complex ZERO = new Complex(0.0, 0.0);
if (this == other) {
if (isInfinite()) {
if (isNaN) {
return isInfinite;
return real;
return imaginary;
