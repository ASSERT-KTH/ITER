final int len = a.length;
if (len != b.length) {
final double[] prodHigh = new double[len];
double prodLowSum = 0;
for (int i = 0; i < len; i++) {
final double ai = a[i];
final double ca = SPLIT_FACTOR * ai;
final double aHigh = ca - (ca - ai);
final double aLow = ai - aHigh;
final double bi = b[i];
final double cb = SPLIT_FACTOR * bi;
final double bHigh = cb - (cb - bi);
final double bLow = bi - bHigh;
prodHigh[i] = ai * bi;
final double prodLow = aLow * bLow - (((prodHigh[i] -
prodLowSum += prodLow;
final double prodHighCur = prodHigh[0];
double prodHighNext = prodHigh[1];
private MathArrays() {}
double[] newArr = new double[arr.length];
for (int i = 0; i < arr.length; i++) {
newArr[i] = arr[i] * val;
return newArr;
for (int i = 0; i < arr.length; i++) {
arr[i] *= val;
}
if (a.length != b.length) {
throw new DimensionMismatchException(a.length, b.length);
final double[] result = a.clone();
for (int i = 0; i < a.length; i++) {
result[i] += b[i];
return result;
if (a.length != b.length) {
throw new DimensionMismatchException(a.length, b.length);
final double[] result = a.clone();
for (int i = 0; i < a.length; i++) {
result[i] -= b[i];
return result;
if (a.length != b.length) {
throw new DimensionMismatchException(a.length, b.length);
final double[] result = a.clone();
for (int i = 0; i < a.length; i++) {
result[i] *= b[i];
return result;
if (a.length != b.length) {
throw new DimensionMismatchException(a.length, b.length);
final double[] result = a.clone();
for (int i = 0; i < a.length; i++) {
result[i] /= b[i];
return result;
