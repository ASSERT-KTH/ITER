ObjectType objType = ObjectType.cast(type.restrictByNotNullOrUndefined());
if (objType != null) {
var.setType(oldType == null ?
String qKeyName = qObjName + "." + memberName;
Var var = syntacticScope.getVar(qKeyName);
JSType oldType = var == null ? null : var.getType();
if (var != null && var.isTypeInferred()) {
scope.inferQualifiedSlot(name, qKeyName,
Node value = name.getFirstChild();
String memberName = NodeUtil.getObjectLitKeyName(name);
if (memberName != null) {
JSType rawValueType =name.getFirstChild().getJSType();
JSType valueType = NodeUtil.getObjectLitKeyTypeFromValueType(
if (valueType == null) {
objectType.defineInferredProperty(memberName, valueType, name);
if (qObjName != null && name.isString()) {
} else {
name = name.getNext()) {
conditionFlowScope =
objectType.defineInferredProperty(
if (conditionFlowScope == null) {
newScope =
if (condition.isAnd() ||
if ("prototype".equals(propName)) {
if (NodeUtil.isForIn(source)) {
if (condition == null) {
condition = NodeUtil.getConditionExpression(source);
if (condition == null && source.isCase()) {
if (condition != null) {
scope = traverse(name.getFirstChild(), scope);
if (objectType.hasProperty(propName) ||
ObjectType regType = ObjectType.cast(registry.getType(qualifiedName));
if (regType != null) {
String qObjName = NodeUtil.getBestLValueName(
for (Node name = n.getFirstChild(); name != null;
return scope;
JSType oldType = var.getType();
var.setType(oldType == null ?
}
scope = traverseObjectLiteral(n, scope);
break;
JSType type = n.getJSType();
Preconditions.checkNotNull(type);
for (Node name = n.getFirstChild(); name != null; name = name.getNext()) {
ObjectType objectType = ObjectType.cast(type);
if (objectType == null) {
boolean hasLendsName = n.getJSDocInfo() != null &&
if (objectType.hasReferenceName() && !hasLendsName) {
propertyType = objType.findPropertyType(propName);
JSType propertyType = null;
