rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);
break;
return getInstance(pattern, null, null);
locale = Locale.getDefault();
rule = selectNumberRule(Calendar.YEAR, tokenLen);
rule = TwoDigitMonthField.INSTANCE;
return new PaddedNumberField(field, padding);
super();
if (pattern == null) {
mPattern = pattern;
mTimeZoneForced = (timeZone != null);
if (timeZone == null) {
timeZone = TimeZone.getDefault();
mTimeZone = timeZone;
mLocaleForced = (locale != null);
if (locale == null) {
mLocale = locale;
}
private static Map cInstanceCache = new HashMap(7);
private static Map cDateInstanceCache = new HashMap(7);
private static Map cTimeInstanceCache = new HashMap(7);
private static Map cDateTimeInstanceCache = new HashMap(7);
private static Map cTimeZoneDisplayCache = new HashMap(7);
FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);
FastDateFormat format = (FastDateFormat) cInstanceCache.get(emptyFormat);
if (format == null) {
format = emptyFormat;
format.init();// convert shell format into usable one
cInstanceCache.put(format, format);// this is OK!
return format;
List rulesList = parsePattern();
mRules = (Rule[]) rulesList.toArray(new Rule[rulesList.size()]);
int len = 0;
for (int i=mRules.length; --i >= 0; ) {
len += mRules[i].estimateLength();
mMaxLengthEstimate = len;
}
DateFormatSymbols symbols = new DateFormatSymbols(mLocale);
List rules = new ArrayList();
String[] ERAs = symbols.getEras();
String[] months = symbols.getMonths();
String[] shortMonths = symbols.getShortMonths();
String[] weekdays = symbols.getWeekdays();
String[] shortWeekdays = symbols.getShortWeekdays();
String[] AmPmStrings = symbols.getAmPmStrings();
int length = mPattern.length();
int[] indexRef = new int[1];
for (int i = 0; i < length; i++) {
indexRef[0] = i;
String token = parseToken(mPattern, indexRef);
rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);
break;
return getInstance(pattern, null, null);
locale = Locale.getDefault();
rule = selectNumberRule(Calendar.YEAR, tokenLen);
rule = TwoDigitMonthField.INSTANCE;
return new PaddedNumberField(field, padding);
super();
if (pattern == null) {
mPattern = pattern;
mTimeZoneForced = (timeZone != null);
if (timeZone == null) {
timeZone = TimeZone.getDefault();
mTimeZone = timeZone;
mLocaleForced = (locale != null);
if (locale == null) {
mLocale = locale;
}
private static Map cInstanceCache = new HashMap(7);
private static Map cDateInstanceCache = new HashMap(7);
private static Map cTimeInstanceCache = new HashMap(7);
private static Map cDateTimeInstanceCache = new HashMap(7);
private static Map cTimeZoneDisplayCache = new HashMap(7);
FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);
FastDateFormat format = (FastDateFormat) cInstanceCache.get(emptyFormat);
if (format == null) {
format = emptyFormat;
format.init();// convert shell format into usable one
cInstanceCache.put(format, format);// this is OK!
return format;
List rulesList = parsePattern();
mRules = (Rule[]) rulesList.toArray(new Rule[rulesList.size()]);
int len = 0;
for (int i=mRules.length; --i >= 0; ) {
len += mRules[i].estimateLength();
mMaxLengthEstimate = len;
}
DateFormatSymbols symbols = new DateFormatSymbols(mLocale);
List rules = new ArrayList();
String[] ERAs = symbols.getEras();
String[] months = symbols.getMonths();
String[] shortMonths = symbols.getShortMonths();
String[] weekdays = symbols.getWeekdays();
String[] shortWeekdays = symbols.getShortWeekdays();
String[] AmPmStrings = symbols.getAmPmStrings();
int length = mPattern.length();
int[] indexRef = new int[1];
for (int i = 0; i < length; i++) {
indexRef[0] = i;
String token = parseToken(mPattern, indexRef);
