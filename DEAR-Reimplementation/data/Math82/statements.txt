return;
return false;
doIteration(tableau);
return true;
return tableau.getSolution();
if (tableau.getNumArtificialVariables() > 0) {
for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
if (MathUtils.compareTo(tableau.getEntry(0, i), 0, epsilon) < 0) {
tableau.discardArtificialVariables();
while (!isOptimal(tableau)) {
this(DEFAULT_EPSILON);
}
public SimplexSolver(final double epsilon) {
this.epsilon = epsilon;
}
double minValue = 0;
Integer minPos = null;
for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1; i++) {
if (MathUtils.compareTo(tableau.getEntry(0, i), minValue, epsilon) < 0) {
minValue = tableau.getEntry(0, i);
minPos = i;
return minPos;
double minRatio = Double.MAX_VALUE;
Integer minRatioPos = null;
for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getHeight(); i++) {
final double rhs = tableau.getEntry(i, tableau.getWidth() - 1);
final double entry = tableau.getEntry(i, col);
if (MathUtils.compareTo(entry, 0, epsilon) >= 0) {
final double ratio = rhs / entry;
if (ratio < minRatio) {
minRatio = ratio;
minRatioPos = i;
return minRatioPos;
incrementIterationsCounter();
Integer pivotCol = getPivotColumn(tableau);
Integer pivotRow = getPivotRow(pivotCol, tableau);
if (pivotRow == null) {
double pivotVal = tableau.getEntry(pivotRow, pivotCol);
tableau.divideRow(pivotRow, pivotVal);
for (int i = 0; i < tableau.getHeight(); i++) {
if (i != pivotRow) {
double multiplier = tableau.getEntry(i, pivotCol);
tableau.subtractRow(i, pivotRow, multiplier);
}
if (tableau.getNumArtificialVariables() == 0) {
final SimplexTableau tableau =
solvePhase1(tableau);
throw new UnboundedSolutionException();
if (tableau.getNumArtificialVariables() == 0) {
return true;
