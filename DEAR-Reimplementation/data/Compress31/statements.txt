break;
throw new IllegalArgumentException("Length "+length+" must be at least 2");
throw new IllegalArgumentException(
String string = new String(buffer, offset, length);
string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed
final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length;
return s;
longresult = 0;
int end = offset + length;
int start = offset;
if (length < 2){
if (buffer[start] == 0) {
while (start < end){
if (buffer[start] == ' '){
start++;
byte trailer = buffer[end - 1];
while (start < end && (trailer == 0 || trailer == ' ')) {
end--;
trailer = buffer[end - 1];
for ( ;start < end; start++) {
final byte currentByte = buffer[start];
if (currentByte == 0) {
if (currentByte < '0' || currentByte > '7'){
result = (result << 3) + (currentByte - '0'); // convert from ASCII
return result;
return buffer[offset] == 1;
return 0L;
static final ZipEncoding DEFAULT_ENCODING =
static final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() {
return "";
long storedSum = 0;
long unsignedSum = 0;
long signedSum = 0;
int digits = 0;
for (int i = 0; i < header.length; i++) {
byte b = header[i];
if (CHKSUM_OFFSET<= i && i < CHKSUM_OFFSET + CHKSUMLEN) {
if ('0' <= b && b <= '7' && digits++ < 6) {
storedSum = storedSum * 8 + b - '0';
} else if (digits > 0) {
digits = 6; // only look at the first octal digit sequence
b = ' ';
unsignedSum += 0xff & b;
signedSum += b;
return storedSum == unsignedSum || storedSum == signedSum
return parseOctal(buffer, offset, length);
return parseName(buffer, offset, length, DEFAULT_ENCODING);
int len = length;
for (; len > 0; len--) {
if (buffer[offset + len - 1] != 0) {
