toRead = (int) (csize - current.bytesRead);
read = readStored(buffer, offset, length);
if (current.hasDataDescriptor) {
long csize = current.entry.getSize();
if (current.bytesRead >= csize) {
return -1;
if (buf.position() >= buf.limit()) {
int toRead = Math.min(buf.remaining(), length);
if ((csize - current.bytesRead) < toRead) {
buf.get(buffer, offset, toRead);
current.bytesRead += toRead;
return toRead;
if (closed) {
if (current == null) {
if (offset > buffer.length || length < 0 || offset < 0 || buffer.length - offset < length) {
ZipUtil.checkRequestedFeatures(current.entry);
if (!supportsDataDescriptorFor(current.entry)) {
if (current.entry.getMethod() == ZipArchiveOutputStream.STORED) {
if (read >= 0) {
current.crc.update(buffer, offset, read);
return read;
return !entry.getGeneralPurposeBit().usesDataDescriptor()
} else if (current.entry.getMethod() == ZipMethod.IMPLODING.getCode()) {
if (!closed) {
closed = true;
in.close();
inf.end();
}
this(inputStream, ZipEncodingHelper.UTF8);
}
this(inputStream, encoding, true);
}
this(inputStream, encoding, useUnicodeExtraFields, false);
}
boolean allowStoredEntriesWithDataDescriptor) {
private final Inflater inf = new Inflater(true);
private final ByteBuffer buf = ByteBuffer.allocate(ZipArchiveOutputStream.BUFFER_SIZE);
private CurrentEntry current = null;
private boolean closed = false;
private boolean hitCentralDirectory = false;
private ByteArrayInputStream lastStoredEntry = null;
private boolean allowStoredEntriesWithDataDescriptor = false;
private final byte[] LFH_BUF = new byte[LFH_LEN];
private final byte[] SKIP_BUF = new byte[1024];
private final byte[] SHORT_BUF = new byte[SHORT];
private final byte[] WORD_BUF = new byte[WORD];
private final byte[] TWO_DWORD_BUF = new byte[2 * DWORD];
private int entriesRead = 0;
zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
this.useUnicodeExtraFields = useUnicodeExtraFields;
