final int[] indices = new int[dimension];
int count = 0;
for (int i = 0; i < last; i++) {
int idx = 0;
final int offset = uniCounterOffset[i];
while (count <= index) {
count += offset;
++idx;
--idx;
count -= offset;
indices[i] = idx;
int idx = 1;
while (count < index) {
count += idx;
++idx;
--idx;
indices[last] = idx;
return indices;
return totalSize;
return new Iterator();
return dimension;
if (index < 0 ||
return count + c[last];
if (c.length != dimension) {
int count = 0;
for (int i = 0; i < dimension; i++) {
final int index = c[i];
if (index < 0 ||
count += uniCounterOffset[i] * c[i];
public MultidimensionalCounter(int ... size) {
dimension = size.length;
this.size = MathUtils.copyOf(size);
uniCounterOffset = new int[dimension];
last = dimension - 1;
int tS = size[last];
for (int i = 0; i < last; i++) {
int count = 1;
for (int j = i + 1; j < dimension; j++) {
count *= size[j];
uniCounterOffset[i] = count;
tS *= size[i];
uniCounterOffset[last] = 0;
if (tS <= 0) {
totalSize = tS;
}
throw new NotStrictlyPositiveException(tS);
throw new OutOfRangeException(index, 0, totalSize);
throw new DimensionMismatchException(c.length, dimension);
throw new OutOfRangeException(index, 0, size[i] - 1);
return MathUtils.copyOf(size);
