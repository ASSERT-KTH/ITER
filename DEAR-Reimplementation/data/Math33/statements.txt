coefficients[i] = 0;
continue;
columnsToDrop.add(i);
return new LinearConstraint(constraint.getCoefficients().mapMultiply(-1),
columnLabels.add(NEGATIVE_VAR_COLUMN_LABEL);
matrix.setEntry(zIndex, getSlackVariableOffset() - 1,
matrix.setEntry(row, getSlackVariableOffset() - 1,
double sum = 0;
for (double coefficient : coefficients.toArray()) {
sum -= coefficient;
return sum;
matrix.setEntry(row, getSlackVariableOffset() + slackVar++, -1); // excess
matrix.setEntry(row, getSlackVariableOffset() + slackVar++, 1);// slack
List<Integer> columnsToDrop = new ArrayList<Integer>();
columnsToDrop.add(0);
for (int i = getNumObjectiveFunctions(); i < getArtificialVariableOffset(); i++) {
final double entry = tableau.getEntry(0, i);
if (Precision.compareTo(entry, 0d, maxUlps) > 0) {
for (int i = 0; i < getNumArtificialVariables(); i++) {
int col = i + getArtificialVariableOffset();
if (getBasicRow(col) == null) {
columnsToDrop.add(col);
double[][] matrix = new double[getHeight() - 1][getWidth() - columnsToDrop.size()];
for (int i = 1; i < getHeight(); i++) {
int col = 0;
for (int j = 0; j < getWidth(); j++) {
if (!columnsToDrop.contains(j)) {
matrix[i - 1][col++] = tableau.getEntry(i, j);
for (int i = columnsToDrop.size() - 1; i >= 0; i--) {
columnLabels.remove((int) columnsToDrop.get(i));
this.tableau = new Array2DRowRealMatrix(matrix);
this.numArtificialVariables = 0;
}
return row;
columnLabels.add("W");
columnLabels.add("s" + i);
columnLabels.add("a" + i);
matrix.setEntry(0, 0, -1);
} else if (constraint.getRelationship() == Relationship.GEQ) {
matrix.setEntry(0, getArtificialVariableOffset() + artificialVar, 1);
matrix.setEntry(row, getArtificialVariableOffset() + artificialVar++, 1);
matrix.setRowVector(0, matrix.getRowVector(0).subtract(matrix.getRowVector(row)));
return null;
int negativeVarColumn = columnLabels.indexOf(NEGATIVE_VAR_COLUMN_LABEL);
Integer negativeVarBasicRow = negativeVarColumn > 0 ? getBasicRow(negativeVarColumn) : null;
double mostNegative = negativeVarBasicRow == null ? 0 : getEntry(negativeVarBasicRow, getRhsOffset());
Set<Integer> basicRows = new HashSet<Integer>();
double[] coefficients = new double[getOriginalNumDecisionVariables()];
for (int i = 0; i < coefficients.length; i++) {
int colIndex = columnLabels.indexOf("x" + i);
