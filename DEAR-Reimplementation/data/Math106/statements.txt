int startIndex = pos.getIndex();
char c = parseNextCharacter(source, pos);
switch (c) {
break;
parseAndIgnoreWhitespace(source, pos);
Number den = getDenominatorFormat().parse(source, pos);
if (den == null) {
int w = whole.intValue();
int n = num.intValue();
int d = den.intValue();
return new Fraction(((Math.abs(w) * d) + n) * MathUtils.sign(w), d);
parseAndIgnoreWhitespace(source, pos);
Number num = getNumeratorFormat().parse(source, pos);
if (num == null) {
int initialIndex = pos.getIndex();
parseAndIgnoreWhitespace(source, pos);
Number whole = getWholeFormat().parse(source, pos);
if (whole == null) {
return wholeFormat;
Fraction ret = super.parse(source, pos);
if (ret != null) {
this(format, (NumberFormat)format.clone(), (NumberFormat)format.clone());
}
super(numeratorFormat, denominatorFormat);
setWholeFormat(wholeFormat);
}
if (format == null) {
this.wholeFormat = format;
}
this(getDefaultNumberFormat());
}
pos.setBeginIndex(0);
pos.setEndIndex(0);
int num = fraction.getNumerator();
int den = fraction.getDenominator();
int whole = num / den;
num = num % den;
if (whole != 0) {
getWholeFormat().format(whole, toAppendTo, pos);
toAppendTo.append(' ');
num = Math.abs(num);
getNumeratorFormat().format(num, toAppendTo, pos);
toAppendTo.append(" / ");
getDenominatorFormat().format(den, toAppendTo,
return toAppendTo;
return ret;
pos.setIndex(initialIndex);
return null;
pos.setIndex(initialIndex);
return null;
