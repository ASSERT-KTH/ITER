cfa.createEdge(fromNode, Branch.UNCOND, finallyNode);
}
finallyMap.put(lastJump, computeFallThrough(cur.getLastChild()));
finallyMap.put(lastJump, handler.getLastChild());
return;
} else if (parent.getLastChild() == node){
if (cfa != null) {
for (Node finallyNode : cfa.finallyMap.get(parent)) {
return computeFollowNode(fromNode, parent, cfa);
return computeFallThrough(parent.getLastChild());
if (lastJump == cfgNode) {
createEdge(cfgNode, Branch.ON_EX, handler.getLastChild());
lastJump = handler;
}
if (NodeUtil.hasFinally(parent)) { // and have FINALLY block.
} else if (NodeUtil.getCatchBlock(parent) == node){
createEdge(node, Branch.ON_FALSE,
if (lastJump == node) {
createEdge(lastJump, Branch.UNCOND, computeFallThrough(
lastJump = cur;
finallyMap.put(lastJump, computeFollowNode(cur, this));
return n != parent.getFirstChild();
exceptionHandler.push(n);
return true;
if (n == parent.getFirstChild().getNext()) {
Preconditions.checkState(exceptionHandler.peek() == parent);
exceptionHandler.pop();
handleTry(n);
return;
createEdge(node, Branch.UNCOND, node.getFirstChild());
}
if (parent.getFirstChild() == node) {
createEdge(node, Branch.UNCOND, computeFollowNode(node, this));
break;
handleStmt(n);
return;
createEdge(node, Branch.UNCOND, computeFollowNode(node, this));
connectToPossibleExceptionHandler(node, node);
}
handleIf(n);
return;
Node thenBlock = node.getFirstChild().getNext();
Node elseBlock = thenBlock.getNext();
createEdge(node, Branch.ON_TRUE, computeFallThrough(thenBlock));
if (elseBlock == null) {
connectToPossibleExceptionHandler(
}
Preconditions.checkState(handler.isTry());
Node catchBlock = NodeUtil.getCatchBlock(handler);
if (!NodeUtil.hasCatchHandler(catchBlock)) { // No catch but a FINALLY.
