com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:448-}	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:731-return CanInlineResult.NO;[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:448-}	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:730-if (hasSideEffects && NodeUtil.canBeSideEffected(cArg)) {[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {	{'label': 'NEGATIVE', 'score': 0.9999988079071045}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:448-}	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:729-if (cArg != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:448-}	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:425-} else if (type == DecompositionType.DECOMPOSABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:448-}	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999986886978149}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:426-return CallSiteType.DECOMPOSABLE_EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {	{'label': 'NEGATIVE', 'score': 0.9999988079071045}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:448-}	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.9999986886978149}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999988079071045}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:728-if (fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:448-}	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression(	{'label': 'NEGATIVE', 'score': 0.9999986886978149}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999988079071045}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:699-Preconditions.checkState(block.hasOneChild());[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999988079071045}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:448-}	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:700-Node stmt = block.getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999985694885254}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:448-}	{'label': 'NEGATIVE', 'score': 0.9999986886978149}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999988079071045}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression(	{'label': 'NEGATIVE', 'score': 0.9999986886978149}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999986886978149}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999988079071045}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999978542327881}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999988079071045}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999988079071045}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:701-if (stmt.isReturn()) {[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:448-}	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999994039535522}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:702-hasSideEffects = NodeUtil.mayHaveSideEffects(stmt.getFirstChild(), compiler);[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:448-}	{'label': 'NEGATIVE', 'score': 0.9999988079071045}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression(	{'label': 'NEGATIVE', 'score': 0.9999985694885254}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.9999988079071045}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999988079071045}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999988079071045}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:437-return new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:448-}	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999983310699463}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:446-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:448-}	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression(	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999988079071045}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:447-callSiteType.prepare(this, callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression(	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999988079071045}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:448-}[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:725-Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:726-while (cArg != null || fnParam != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression(	{'label': 'NEGATIVE', 'score': 0.9999986886978149}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999986886978149}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:419-ExpressionDecomposer decomposer = new ExpressionDecomposer([CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:421-DecompositionType type = decomposer.canExposeExpression([CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999988079071045}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999986886978149}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:423-if (type == DecompositionType.MOVABLE) {[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:424-return CallSiteType.EXPRESSION;[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);	{'label': 'NEGATIVE', 'score': 0.9999988079071045}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:599-return CanInlineResult.AFTER_PREPARATION;[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:208-return canInlineReferenceDirectly(callNode, fnNode);[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:691-if (!isDirectCallNodeReplacementPossible(fnNode)) {[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:695-Node block = fnNode.getLastChild();[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {	{'label': 'NEGATIVE', 'score': 0.9999985694885254}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999983310699463}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:697-boolean hasSideEffects = false;[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999972581863403}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:698-if (block.hasChildren()) {[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:706-Node cArg = callNode.getFirstChild().getNext();[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:555-return true;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:711-if (!callNode.getFirstChild().isName()) {[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999986886978149}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999988079071045}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:555-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:866-callCost += (numArgs * NAME_COST_ESTIMATE) + ((numArgs - 1) * COMMA_COST);[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:417-Node expressionRoot = ExpressionDecomposer.findExpressionRoot(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:418-if (expressionRoot != null) {[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {[CLS]com.google.javascript.jscomp.FunctionInjector:845-return true;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:842-if (blockInlines > 0 && costDeltaBlock > 0) {[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:845-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:845-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:845-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:845-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:845-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:845-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:845-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:845-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:845-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:845-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:845-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:845-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:845-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:845-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:845-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:845-return true;[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);[CLS]com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:247-return inlineFunction(callNode, fnNode, fnName);[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999985694885254}
com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:457-Node parent = callNode.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999988079071045}
com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999984502792358}
com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:458-Node grandParent = parent.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:462-CallSiteType callSiteType = classifyCallSite(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);[CLS]com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:463-Preconditions.checkArgument(callSiteType != CallSiteType.UNSUPPORTED);[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:465-boolean isCallInLoop = NodeUtil.isWithinLoop(callNode);[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;[CLS]com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:470-String resultName = null;[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;[CLS]com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:471-boolean needsDefaultReturnResult = true;[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {[CLS]com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {[CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {[CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:472-switch (callSiteType) {[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator([CLS]com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate(	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator([CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator([CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator([CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator([CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.999998927116394}
com.google.javascript.jscomp.FunctionInjector:498-FunctionToBlockMutator mutator = new FunctionToBlockMutator([CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate([CLS]com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate([CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate([CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate([CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:501-Node newBlock = mutator.mutate([CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999990463256836}
com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:508-Node greatGrandParent = grandParent.getParent();[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {[CLS]com.google.javascript.jscomp.FunctionInjector:535-return newBlock;	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:509-switch (callSiteType) {[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:535-return newBlock;[CLS]com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&	{'label': 'NEGATIVE', 'score': 0.9999991655349731}
com.google.javascript.jscomp.FunctionInjector:535-return newBlock;[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.9999992847442627}
com.google.javascript.jscomp.FunctionInjector:784-if (ref.module != fnModule &&[CLS]com.google.javascript.jscomp.FunctionInjector:597-if (callSiteType == CallSiteType.DECOMPOSABLE_EXPRESSION	{'label': 'NEGATIVE', 'score': 0.999998927116394}
