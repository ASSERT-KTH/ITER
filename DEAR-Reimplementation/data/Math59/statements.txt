return (a <= b) ? a : (Float.isNaN(a + b) ? Float.NaN : b);
return (a <= b) ? b : (Float.isNaN(a + b) ? Float.NaN : b);
private static final double EXP_INT_TABLE_A[] = new double[1500];
private static final double EXP_INT_TABLE_B[] = new double[1500];
private static final double EXP_FRAC_TABLE_A[] = new double[1025];
private static final double EXP_FRAC_TABLE_B[] = new double[1025];
private static final double FACT[] = new double[20];
private static final double LN_MANT[][] = new double[1024][];
private static final double LN_SPLIT_COEF[][] = {
private static final double LN_QUICK_COEF[][] = {
private static final double LN_HI_PREC_COEF[][] = {
private static final double SINE_TABLE_A[] = new double[14];
private static final double SINE_TABLE_B[] = new double[14];
private static final double COSINE_TABLE_A[] = new double[14];
private static final double COSINE_TABLE_B[] = new double[14];
private static final double TANGENT_TABLE_A[] = new double[14];
private static final double TANGENT_TABLE_B[] = new double[14];
private static long RECIP_2PI[] = new long[] {
private static long PI_O_4_BITS[] = new long[] {
private static final double EIGHTHES[] = {0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625};
private static final double CBRTTWO[] = { 0.6299605249474366,
FACT[0] = 1.0;
for (i = 1; i < 20; i++) {
FACT[i] = FACT[i-1] * i;
double tmp[] = new double[2];
double recip[] = new double[2];
for (i = 0; i < 750; i++) {
expint(i, tmp);
EXP_INT_TABLE_A[i+750] = tmp[0];
EXP_INT_TABLE_B[i+750] = tmp[1];
if (i != 0) {
splitReciprocal(tmp, recip);
EXP_INT_TABLE_A[750-i] = recip[0];
EXP_INT_TABLE_B[750-i] = recip[1];
for (i = 0; i < 1025; i++) {
slowexp(i/1024.0, tmp);
EXP_FRAC_TABLE_A[i] = tmp[0];
EXP_FRAC_TABLE_B[i] = tmp[1];
for (i = 0; i < 1024; i++) {
double d = Double.longBitsToDouble( (((long) i) << 42) | 0x3ff0000000000000L );
LN_MANT[i] = slowLog(d);
buildSinCosTables();
}
final double xs[] = new double[2];
final double ys[] = new double[2];
final double facts[] = new double[2];
final double as[] = new double[2];
split(x, xs);
ys[0] = ys[1] = 0.0;
for (int i = 19; i >= 0; i--) {
