return null;
return join(elements, null);
if (array == null) {
return join(array, separator, 0, array.length);
if (array == null) {
int noOfItems = (endIndex - startIndex);
if (noOfItems <= 0) {
return EMPTY;
StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);
for (int i = startIndex; i < endIndex; i++) {
if (i > startIndex) {
buf.append(separator);
if (array[i] != null) {
buf.append(array[i]);
return buf.toString();
return EMPTY;
if (array == null) {
return null;
return join(array, separator, 0, array.length);
if (array == null) {
if (separator == null) {
separator = EMPTY;
int noOfItems = (endIndex - startIndex);
if (noOfItems <= 0) {
StringBuilder buf = new StringBuilder((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + separator.length());
for (int i = startIndex; i < endIndex; i++) {
if (i > startIndex) {
if (array[i] != null) {
return buf.toString();
private static final Pattern WHITESPACE_BLOCK = Pattern.compile("\\s+");
private static boolean sunAvailable = false;
private static MethodsunDecomposeMethod = null;
private static final Pattern sunPattern = Pattern.compile("\\p{InCombiningDiacriticalMarks}+");//$NON-NLS-1$
private static boolean java6Available = false;
private static Methodjava6NormalizeMethod = null;
private static Objectjava6NormalizerFormNFD = null;
private static final Pattern java6Pattern = sunPattern;
Class<?> normalizerFormClass = Thread.currentThread().getContextClassLoader()
java6NormalizerFormNFD = normalizerFormClass.getField("NFD").get(null);//$NON-NLS-1$
Class<?> normalizerClass = Thread.currentThread().getContextClassLoader()
java6NormalizeMethod = normalizerClass.getMethod("normalize",
java6Available = true;
}
Class<?> normalizerClass = Thread.currentThread().getContextClassLoader()
sunDecomposeMethod = normalizerClass.getMethod("decompose",
} catch (NoSuchMethodException e) {
sunAvailable = false;
}
super();
}
