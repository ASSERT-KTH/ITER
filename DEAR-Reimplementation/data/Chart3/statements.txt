if (start < 0) {
if (end < start) {
TimeSeries copy = (TimeSeries) super.clone();
copy.minY = Double.NaN;
copy.maxY = Double.NaN;
copy.data = new java.util.ArrayList();
if (this.data.size() > 0) {
TimeSeriesDataItem item
TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
catch (SeriesException e) {
}
add(item, true);
}
return this.minY;
return this.maxY;
add(period, value, true);
}
TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);
add(item, notify);
}
this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION);
}
super(name);
this.domain = domain;
this.range = range;
this.timePeriodClass = null;
this.data = new java.util.ArrayList();
this.maximumItemCount = Integer.MAX_VALUE;
this.maximumItemAge = Long.MAX_VALUE;
this.minY = Double.NaN;
this.maxY = Double.NaN;
}
return this.data.size();
return (TimeSeriesDataItem) this.data.get(index);
return getRawDataItem(index).getPeriod();
if (item == null) {
item = (TimeSeriesDataItem) item.clone();
Class c = item.getPeriod().getClass();
if (this.timePeriodClass == null) {
this.timePeriodClass = c;
else if (!this.timePeriodClass.equals(c)) {
boolean added = false;
int count = getItemCount();
if (count == 0) {
this.data.add(item);
added = true;
RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
if (item.getPeriod().compareTo(last) > 0) {
this.data.add(item);
added = true;
if (start < 0) {
if (end < start) {
TimeSeries copy = (TimeSeries) super.clone();
copy.minY = Double.NaN;
copy.maxY = Double.NaN;
copy.data = new java.util.ArrayList();
if (this.data.size() > 0) {
TimeSeriesDataItem item
TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
catch (SeriesException e) {
}
add(item, true);
}
return this.minY;
return this.maxY;
add(period, value, true);
}
TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);
add(item, notify);
}
this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION);
}
super(name);
this.domain = domain;
this.range = range;
this.timePeriodClass = null;
this.data = new java.util.ArrayList();
this.maximumItemCount = Integer.MAX_VALUE;
this.maximumItemAge = Long.MAX_VALUE;
this.minY = Double.NaN;
this.maxY = Double.NaN;
}
return this.data.size();
return (TimeSeriesDataItem) this.data.get(index);
return getRawDataItem(index).getPeriod();
if (item == null) {
item = (TimeSeriesDataItem) item.clone();
Class c = item.getPeriod().getClass();
if (this.timePeriodClass == null) {
this.timePeriodClass = c;
else if (!this.timePeriodClass.equals(c)) {
boolean added = false;
int count = getItemCount();
if (count == 0) {
this.data.add(item);
added = true;
RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
if (item.getPeriod().compareTo(last) > 0) {
this.data.add(item);
added = true;
if (start < 0) {
if (end < start) {
TimeSeries copy = (TimeSeries) super.clone();
copy.minY = Double.NaN;
copy.maxY = Double.NaN;
copy.data = new java.util.ArrayList();
if (this.data.size() > 0) {
TimeSeriesDataItem item
TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
catch (SeriesException e) {
}
add(item, true);
}
return this.minY;
return this.maxY;
add(period, value, true);
}
TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);
add(item, notify);
}
this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION);
}
super(name);
this.domain = domain;
this.range = range;
this.timePeriodClass = null;
this.data = new java.util.ArrayList();
this.maximumItemCount = Integer.MAX_VALUE;
this.maximumItemAge = Long.MAX_VALUE;
this.minY = Double.NaN;
this.maxY = Double.NaN;
}
return this.data.size();
return (TimeSeriesDataItem) this.data.get(index);
return getRawDataItem(index).getPeriod();
if (item == null) {
item = (TimeSeriesDataItem) item.clone();
Class c = item.getPeriod().getClass();
if (this.timePeriodClass == null) {
this.timePeriodClass = c;
else if (!this.timePeriodClass.equals(c)) {
boolean added = false;
int count = getItemCount();
if (count == 0) {
this.data.add(item);
added = true;
RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
if (item.getPeriod().compareTo(last) > 0) {
this.data.add(item);
added = true;
if (start < 0) {
if (end < start) {
TimeSeries copy = (TimeSeries) super.clone();
copy.minY = Double.NaN;
copy.maxY = Double.NaN;
copy.data = new java.util.ArrayList();
if (this.data.size() > 0) {
TimeSeriesDataItem item
TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();
catch (SeriesException e) {
}
add(item, true);
}
return this.minY;
return this.maxY;
add(period, value, true);
}
TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);
add(item, notify);
}
this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION);
}
super(name);
this.domain = domain;
this.range = range;
this.timePeriodClass = null;
this.data = new java.util.ArrayList();
this.maximumItemCount = Integer.MAX_VALUE;
this.maximumItemAge = Long.MAX_VALUE;
this.minY = Double.NaN;
this.maxY = Double.NaN;
}
return this.data.size();
return (TimeSeriesDataItem) this.data.get(index);
return getRawDataItem(index).getPeriod();
if (item == null) {
item = (TimeSeriesDataItem) item.clone();
Class c = item.getPeriod().getClass();
if (this.timePeriodClass == null) {
this.timePeriodClass = c;
else if (!this.timePeriodClass.equals(c)) {
boolean added = false;
int count = getItemCount();
if (count == 0) {
this.data.add(item);
added = true;
RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
if (item.getPeriod().compareTo(last) > 0) {
this.data.add(item);
added = true;
