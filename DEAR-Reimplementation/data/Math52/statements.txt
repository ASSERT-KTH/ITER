public Rotation(Vector3D u1, Vector3D u2, Vector3D v1, Vector3D v2) {
double u1u1 = u1.getNormSq();
double u2u2 = u2.getNormSq();
double v1v1 = v1.getNormSq();
double v2v2 = v2.getNormSq();
if ((u1u1 == 0) || (u2u2 == 0) || (v1v1 == 0) || (v2v2 == 0)) {
v1 = new Vector3D(FastMath.sqrt(u1u1 / v1v1), v1);
double u1u2 = u1.dotProduct(u2);
double v1v2 = v1.dotProduct(v2);
double coeffU = u1u2 / u1u1;
double coeffV = v1v2 / u1u1;
double beta = FastMath.sqrt((u2u2 - u1u2 * coeffU) / (v2v2 - v1v2 * coeffV));
double alpha= coeffU - beta * coeffV;
v2 = new Vector3D(alpha, v1, beta, v2);
Vector3D uRef= u1;
Vector3D vRef= v1;
Vector3D v1Su1 = v1.subtract(u1);
Vector3D v2Su2 = v2.subtract(u2);
Vector3D k = v1Su1.crossProduct(v2Su2);
Vector3D u3= u1.crossProduct(u2);
double c = k.dotProduct(u3);
if (c == 0) {
c = FastMath.sqrt(c);
double inv = 1.0 / (c + c);
q1 = inv * k.getX();
q2 = inv * k.getY();
q3 = inv * k.getZ();
k = new Vector3D(uRef.getY() * q3 - uRef.getZ() * q2,
q0 = vRef.dotProduct(k) / (2 * k.getNormSq());
}
return q0;
boolean needsNormalization) {
if (needsNormalization) {
this.q0 = q0;
this.q1 = q1;
this.q2 = q2;
this.q3 = q3;
}
public static final Rotation IDENTITY = new Rotation(1.0, 0.0, 0.0, 0.0, false);
double inv = 1.0 / FastMath.sqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
q0 *= inv;
q1 *= inv;
q2 *= inv;
q3 *= inv;
public Rotation(Vector3D axis, double angle) {
double norm = axis.getNorm();
if (norm == 0) {
throw MathRuntimeException.createArithmeticException(LocalizedFormats.ZERO_NORM_FOR_ROTATION_AXIS);
double halfAngle = -0.5 * angle;
double coeff = FastMath.sin(halfAngle) / norm;
