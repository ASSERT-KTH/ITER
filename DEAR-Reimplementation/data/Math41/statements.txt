return evaluate(values, weights, 0, values.length);
double var = Double.NaN;
if (test(values, weights,begin, length)) {
clear();
if (length == 1) {
} else if (length > 1) {
Mean mean = new Mean();
double m = mean.evaluate(values, weights, begin, length);
var = evaluate(values, weights, m, begin, length);
return var;
double var = Double.NaN;
if (test(values, weights, begin, length)) {
if (length == 1) {
} else if (length > 1) {
double accum = 0.0;
double dev = 0.0;
double accum2 = 0.0;
for (int i = begin; i < begin + length; i++) {
dev = values[i] - mean;
accum += weights[i] * (dev * dev);
accum2 += weights[i] * dev;
double sumWts = 0;
for (int i = 0; i < weights.length; i++) {
sumWts += weights[i];
if (isBiasCorrected) {
var = (accum - (accum2 * accum2 / sumWts)) / (sumWts - 1.0);
return var;
if (incMoment) {
moment.clear();
}
public Variance() {
protected SecondMoment moment = null;
protected boolean incMoment = true;
private boolean isBiasCorrected = true;
moment = new SecondMoment();
}
public Variance(final SecondMoment m2) {
protected SecondMoment moment = null;
protected boolean incMoment = true;
private boolean isBiasCorrected = true;
incMoment = false;
this.moment = m2;
}
public Variance(boolean isBiasCorrected) {
protected SecondMoment moment = null;
protected boolean incMoment = true;
private boolean isBiasCorrected = true;
moment = new SecondMoment();
this.isBiasCorrected = isBiasCorrected;
}
