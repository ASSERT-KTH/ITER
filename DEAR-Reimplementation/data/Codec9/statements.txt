throw new IllegalArgumentException("Input array too big, the output array would be bigger (" +
buffer[pos++] = PAD;
buffer[pos++] = PAD;
buffer[pos++] = encodeTable[(x >> 2) & MASK_6BITS];
buffer[pos++] = encodeTable[(x << 4) & MASK_6BITS];
if (encodeTable == STANDARD_ENCODE_TABLE) {
return encodeBase64(binaryData, false);
len += 4 - mod;
len += chunkSeparator.length;
Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
return b64.encode(binaryData);
return encodeBase64(binaryData, isChunked, false);
long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
if (len > maxResultSize) {
chunkSize = (chunkSize / 4) * 4;
long len = (pArray.length * 4) / 3;
long mod = len % 4;
if (mod != 0) {
if (chunkSize > 0) {
boolean lenChunksPerfectly = len % chunkSize == 0;
len += (len / chunkSize) * chunkSeparator.length;
if (!lenChunksPerfectly) {
return len;
return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE);
if (binaryData == null || binaryData.length == 0) {
if (eof) {
if (inAvail < 0) {
eof = true;
if (buffer == null || buffer.length - pos < encodeSize) {
switch (modulus) {
byte b = lineSeparator[lineSeparator.length - 1];
if (lineLength > 0 && pos > 0 && buffer[pos-1] != b) {
} else {
for (int i = 0; i < inAvail; i++) {
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
modulus = (++modulus) % 3;
int b = in[inPos++];
if (b < 0) {
x = (x << 8) + b;
if (0 == modulus) {
}
reset();
if (pArray == null || pArray.length == 0) {
encode(pArray, 0, pArray.length);
encode(pArray, 0, -1); // Notify encoder of EOF.
byte[] buf = new byte[pos - readPos];
readResults(buf, 0, buf.length);
return buf;
this.encodeSize = 4;
