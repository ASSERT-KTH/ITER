return false;
argList.removeChild(lastArg);
compiler.reportCodeChange();
}
Var var = fnScope.getVar(lastArg.getString());
if (!referenced.contains(var)) {
traverseFunction(n, scope);
assignedToUnknownValue = true;
while ((lastArg = argList.getLastChild()) != null) {
} else {
} else {
Node argList = getFunctionArgList(function);
boolean modifyCallers = modifyCallSites
if (!modifyCallers) {
}
return function.getFirstChild().getNext();
removeUnreferencedFunctionArgs(fnScope);
}
Preconditions.checkState(n.getChildCount() == 3);
Preconditions.checkState(n.isFunction());
final Node body = n.getLastChild();
Preconditions.checkState(body.getNext() == null &&
Scope fnScope =
traverseNode(body, n, fnScope);
collectMaybeUnreferencedVars(fnScope);
allFunctionScopes.add(fnScope);
}
Node function = fnScope.getRootNode();
Preconditions.checkState(function.isFunction());
if (NodeUtil.isGetOrSetKey(function.getParent())) {
if (NodeUtil.isFunctionDeclaration(n)) {
if (var != null && isRemovableVar(var)) {
return;
var = scope.getVar(n.getFirstChild().getString());
for (Assign assign : assignsByVar.get(var)) {
}
Var var = it.next();
for (Node exprCallNode : classDefiningCalls.get(var)) {
removeAllAssigns(var);
compiler.addToDebugLog("Unreferenced var: " + var.name);
Node nameNode = var.nameNode;
Node toRemove = nameNode.getParent();
Node parent = toRemove.getParent();
Preconditions.checkState(
if (toRemove.isParamList() &&
}
maybeUnreferenced.add(var);
Var var = maybeUnreferenced.get(current);
if (referenced.contains(var)) {
boolean assignedToUnknownValue = false;
