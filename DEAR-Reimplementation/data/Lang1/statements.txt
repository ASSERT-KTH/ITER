pfxLen += pfx.length();
break;
final int hexDigits = str.length() - pfxLen;
if (hexDigits > 16) { // too many for Long
if (hexDigits > 8) { // too many for an int
return createInteger(str);
if (str == null) {
return Integer.decode(str);
if (str == null) {
if (StringUtils.isBlank(str)) {
final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
int pfxLen = 0;
for(final String pfx : hex_prefixes) {
if (str.startsWith(pfx)) {
if (pfxLen > 0) { // we have a hex number
public static final Long LONG_ZERO = Long.valueOf(0L);
public static final Long LONG_ONE = Long.valueOf(1L);
public static final Long LONG_MINUS_ONE = Long.valueOf(-1L);
public static final Integer INTEGER_ZERO = Integer.valueOf(0);
public static final Integer INTEGER_ONE = Integer.valueOf(1);
public static final Integer INTEGER_MINUS_ONE = Integer.valueOf(-1);
public static final Short SHORT_ZERO = Short.valueOf((short) 0);
public static final Short SHORT_ONE = Short.valueOf((short) 1);
public static final Short SHORT_MINUS_ONE = Short.valueOf((short) -1);
public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);
public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);
public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);
public static final Double DOUBLE_ZERO = Double.valueOf(0.0d);
public static final Double DOUBLE_ONE = Double.valueOf(1.0d);
public static final Double DOUBLE_MINUS_ONE = Double.valueOf(-1.0d);
public static final Float FLOAT_ZERO = Float.valueOf(0.0f);
public static final Float FLOAT_ONE = Float.valueOf(1.0f);
public static final Float FLOAT_MINUS_ONE = Float.valueOf(-1.0f);
super();
}
return toInt(str, 0);
if(str == null) {
return defaultValue;
return Integer.parseInt(str);
} catch (final NumberFormatException nfe) {
return defaultValue;
return toLong(str, 0L);
if (str == null) {
return defaultValue;
return Long.parseLong(str);
} catch (final NumberFormatException nfe) {
return defaultValue;
return toFloat(str, 0.0f);
if (str == null) {
return defaultValue;
