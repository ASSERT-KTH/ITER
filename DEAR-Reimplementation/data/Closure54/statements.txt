return true;
Node params = getParametersNode();
if (params == null) {
params = params.cloneTree();
Node thisTypeNode = Node.newString(Token.NAME, "thisType");
thisTypeNode.setJSType(
params.addChildToFront(thisTypeNode);
thisTypeNode.setOptionalArg(true);
defineDeclaredProperty(name,
this.setPrototypeBasedOn(objType);
return true;
ObjectType objType = type.toObjectType();
if (objType != null) {
if (objType.isEquivalentTo(prototype)) {
if ("call".equals(name)) {
} else if ("apply".equals(name)) {
if (!hasOwnProperty(name)) {
return super.getPropertyType(name);
if ("prototype".equals(name)) {
boolean treatThisTypesAsCovariant =
return treatThisTypesAsCovariant && this.call.isSubtype(other.call);
return super.defineProperty(name, type, inferred, propertyNode);
if (this.isInterface()) {
FunctionType other = that.toMaybeFunctionType();
if (other.isInterface()) {
return super.getSlot(name);
i++;
if (!n.isOptionalArg() && !n.isVarArgs()) {
}
return true;
return templateTypeName;
return kind == Kind.ORDINARY;
JSType type = functionNode.getJSType();
if (type != null && type.isFunctionType()) {
FunctionType fnType = type.toMaybeFunctionType();
ObjectType fnThisType = fnType.getTypeOfThis();
if (!fnThisType.isUnknownType()) {
}
return params.getChildCount();
NodeTraversal.traverse(compiler, functionNode.getLastChild(),
int i = 0;
int min = 0;
for (Node n : getParameters()) {
return min;
Node params = getParametersNode();
if (params != null) {
Node lastParam = params.getLastChild();
if (lastParam == null || !lastParam.isVarArgs()) {
getPrototype();
return prototypeSlot;
