compiler.report(
JSDocInfo overridingInfo = parent.getJSDocInfo();
Visibility overridingVisibility = overridingInfo == null ?
if (visibility == Visibility.PRIVATE && !sameInput) {
} else {
break;
boolean sameInput =
Visibility visibility = docInfo.getVisibility();
JSType ownerType = normalizeClassType(objectType);
if (isOverride) {
ObjectType prototype = objectType.getImplicitPrototype();
if (prototype != null) {
JSDocInfo prototypeInfo
if (prototypeInfo != null && prototypeInfo.isConstant()
ObjectType objectType =
String propertyName = getprop.getLastChild().getString();
if (objectType != null) {
ObjectType oType = objectType;
while (oType != null) {
if (oType.hasReferenceName()) {
if (initializedConstantProperties.containsEntry(
oType = oType.getImplicitPrototype();
JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName);
if (info != null && info.isConstant()
if (objectType.isInstanceType()) {
}
} else if (type.isFunctionPrototypeType()) {
return;
return ((FunctionType) type).getInstanceType();
ObjectType implicitProto = type.getImplicitPrototype();
if (implicitProto != null) {
return getPropertyDeprecationInfo(implicitProto, prop);
return null;
checkPropertyDeprecation(t, n, parent);
checkPropertyVisibility(t, n, parent);
checkConstantProperty(t, n);
break;
if (parent.getType() == Token.NEW) {
ObjectType objectType =
String propertyName = n.getLastChild().getString();
if (objectType != null) {
String deprecationInfo
if (deprecationInfo != null &&
}
Node parent = getprop.getParent();
if (!(NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == getprop)
ObjectType objectType =
String propertyName = getprop.getLastChild().getString();
if (objectType != null) {
boolean isOverride = t.inGlobalScope() &&
