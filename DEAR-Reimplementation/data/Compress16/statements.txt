TarArchiveInputStream tais = new TarArchiveInputStream(new ByteArrayInputStream(tarheader));
tais.getNextEntry();
return new TarArchiveInputStream(in);
public class ArchiveStreamFactory {
if (in == null) {
if (!in.markSupported()) {
final byte[] signature = new byte[12];
in.mark(signature.length);
int signatureLength = in.read(signature);
in.reset();
if (ZipArchiveInputStream.matches(signature, signatureLength)) {
} else if (JarArchiveInputStream.matches(signature, signatureLength)) {
} else if (ArArchiveInputStream.matches(signature, signatureLength)) {
} else if (CpioArchiveInputStream.matches(signature, signatureLength)) {
final byte[] dumpsig = new byte[32];
in.mark(dumpsig.length);
signatureLength = in.read(dumpsig);
in.reset();
if (DumpArchiveInputStream.matches(dumpsig, signatureLength)) {
final byte[] tarheader = new byte[512];
in.mark(tarheader.length);
signatureLength = in.read(tarheader);
in.reset();
if (TarArchiveInputStream.matches(tarheader, signatureLength)) {
if (signatureLength >= 512) {
if (archiverName == null) {
throw new IllegalArgumentException("Archivername must not be null.");
if (in == null) {
throw new IllegalArgumentException("InputStream must not be null.");
if (AR.equalsIgnoreCase(archiverName)) {
return new ArArchiveInputStream(in);
if (ZIP.equalsIgnoreCase(archiverName)) {
return new ZipArchiveInputStream(in);
if (TAR.equalsIgnoreCase(archiverName)) {
return new TarArchiveInputStream(in);
if (JAR.equalsIgnoreCase(archiverName)) {
return new JarArchiveInputStream(in);
if (CPIO.equalsIgnoreCase(archiverName)) {
return new CpioArchiveInputStream(in);
if (DUMP.equalsIgnoreCase(archiverName)) {
return new DumpArchiveInputStream(in);
throw new ArchiveException("Archiver: " + archiverName + " not found.");
if (archiverName == null) {
throw new IllegalArgumentException("Archivername must not be null.");
if (out == null) {
throw new IllegalArgumentException("OutputStream must not be null.");
if (AR.equalsIgnoreCase(archiverName)) {
return new ArArchiveOutputStream(out);
if (ZIP.equalsIgnoreCase(archiverName)) {
return new ZipArchiveOutputStream(out);
