public void setModifyJavaTime(final Date d) { setModifyTime(dateToZipLong(d)); }
if (d == null) { return null; }
return unixTimeToZipLong(d.getTime() / 1000);
final long TWO_TO_32 = 0x100000000L;
if (l >= TWO_TO_32) {
return new ZipLong(l);
bit0_modifyTimePresent = l != null;
flags = (byte) (l != null ? (flags | MODIFY_TIME_BIT)
this.modifyTime = l;
}
public X5455_ExtendedTimestamp() {}
private static final ZipShort HEADER_ID = new ZipShort(0x5455);
return HEADER_ID;
return new ZipShort(1 +
return new ZipShort(1 +
final byte[] data = new byte[getLocalFileDataLength().getValue()];
int pos = 0;
data[pos++] = 0;
if (bit0_modifyTimePresent) {
data[0] |= MODIFY_TIME_BIT;
System.arraycopy(modifyTime.getBytes(), 0, data, pos, 4);
pos += 4;
if (bit1_accessTimePresent && accessTime != null) {
data[0] |= ACCESS_TIME_BIT;
System.arraycopy(accessTime.getBytes(), 0, data, pos, 4);
pos += 4;
if (bit2_createTimePresent && createTime != null) {
data[0] |= CREATE_TIME_BIT;
System.arraycopy(createTime.getBytes(), 0, data, pos, 4);
pos += 4; // NOSONAR - assignment as documentation
return data;
final byte[] centralData = new byte[getCentralDirectoryLength().getValue()];
final byte[] localData = getLocalFileDataData();
System.arraycopy(localData, 0, centralData, 0, centralData.length);
return centralData;
reset();
final int len = offset + length;
setFlags(data[offset++]);
if (bit0_modifyTimePresent) {
modifyTime = new ZipLong(data, offset);
offset += 4;
if (bit1_accessTimePresent && offset + 4 <= len) {
accessTime = new ZipLong(data, offset);
offset += 4;
if (bit2_createTimePresent && offset + 4 <= len) {
createTime = new ZipLong(data, offset);
offset += 4; // NOSONAR - assignment as documentation
}
reset();
parseFromLocalFileData(buffer, offset, length);
