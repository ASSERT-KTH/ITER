return null;
if (parseDocumentation) {
return currentInfo.documentBlock(description);
public JSDocInfoBuilder(boolean parseDocumentation) {
private boolean populated = false;
private boolean parseDocumentation = false;
private JSDocInfo.Marker currentMarker = null;
this.currentInfo = new JSDocInfo(parseDocumentation);
this.parseDocumentation = parseDocumentation;
}
return populated;
return isPopulated() && currentInfo.hasFileOverview();
if (populated) {
this(compiler, null, root);
}
return s.getParent() == null;
if (!hasAnySingletonTypeTags() &&
currentInfo.setConstructor(true);
populated = true;
return true;
GlobalNamespace(AbstractCompiler compiler, Node externsRoot, Node root) {
private boolean generated = false;
private List<Name> globalNames = new ArrayList<Name>();
private Map<String, Name> nameMap = new HashMap<String, Name>();
this.compiler = compiler;
this.externsRoot = externsRoot;
this.root = root;
}
if (!generated) {
process();
return globalNames;
if (!generated) {
return nameMap;
if (externsRoot != null) {
inExterns = false;
NodeTraversal.traverse(compiler, root, new BuildGlobalNamespace());
generated = true;
}
String topVarName = getTopVarName(name);
return isGlobalVarReference(topVarName, s);
int firstDotIndex = name.indexOf('.');
return firstDotIndex == -1 ? name : name.substring(0, firstDotIndex);
Scope.Var v = s.getVar(name);
if (v == null && externsScope != null) {
return v != null && !v.isLocal();
JSDocInfo built = currentInfo;
built.setSourceName(sourceName);
populateDefaults(built);
populated = false;
currentInfo = new JSDocInfo(this.parseDocumentation);
