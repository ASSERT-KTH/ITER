switch (val2) {
return -val1;
return 0L;
return val1;
long total = val1 * val2;
if (total / val2 != val1) {
return total;
super();
}
if (value == Integer.MIN_VALUE) {
throw new ArithmeticException("Integer.MIN_VALUE cannot be negated");
return -value;
int sum = val1 + val2;
if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
throw new ArithmeticException
return sum;
long sum = val1 + val2;
if ((val1 ^ sum) < 0 && (val1 ^ val2) >= 0) {
throw new ArithmeticException
return sum;
long diff = val1 - val2;
if ((val1 ^ diff) < 0 && (val1 ^ val2) < 0) {
throw new ArithmeticException
return diff;
long total = (long) val1 * (long) val2;
if (total < Integer.MIN_VALUE || total > Integer.MAX_VALUE) {
throw new ArithmeticException("Multiplication overflows an int: " + val1 + " * " + val2);
return (int) total;
throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
if (val2 == 1) {
return val1;
if (val1 == 1) {
return val2;
if (val1 == 0 || val2 == 0) {
return 0;
long total = val1 * val2;
if (total / val2 != val1 || val1 == Long.MIN_VALUE && val2 == -1 || val2 == Long.MIN_VALUE && val1 == -1) {
throw new ArithmeticException("Multiplication overflows a long: " + val1 + " * " + val2);
return total;
if (Integer.MIN_VALUE <= value && value <= Integer.MAX_VALUE) {
return (int) value;
throw new ArithmeticException("Value cannot fit in an int: " + value);
long val = FieldUtils.safeMultiply(val1, val2);
return FieldUtils.safeToInt(val);
if ((value < lowerBound) || (value > upperBound)) {
throw new IllegalFieldValueException
}
if ((value < lowerBound) || (value > upperBound)) {
throw new IllegalFieldValueException
}
