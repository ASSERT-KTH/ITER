start++;
return TernaryValue.TRUE;
return getStringNumberValue(n.getString());
String s = trimJsWhiteSpace(rawJsString);
if (s.length() == 0) {
if (s.length() > 2
if (s.length() > 3
if (s.equals("infinity")
return Double.parseDouble(s);
int start = 0;
int end = s.length();
&& isStrWhiteSpaceChar(s.charAt(end - 1)) == TernaryValue.TRUE) {
&& isStrWhiteSpaceChar(s.charAt(start)) == TernaryValue.TRUE) {
return s.substring(start, end);
switch (c) {
return (Character.getType(c) == Character.SPACE_SEPARATOR)
case Token.POS: return "+";
case Token.NOT: return "!";
return TernaryValue.forBoolean(n.getDouble() != 0);
return true;
String res = opToStr(operator);
if (res == null) {
return res;
switch (n.getType()) {
case Token.NEG:return 13;
switch (n.getType()) {
return p.apply(n);
return valueCheck(n, NUMBERIC_RESULT_PREDICATE);
switch (n.getType()) {
switch (n.getType()) {
switch (type) {
return 15;
private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =
private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =
private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =
private static final Set<String> REGEXP_METHODS =
private static final Set<String> STRING_REGEXP_METHODS =
static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =
static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =
static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =
switch (operator) {
default: return null;
private NodeUtil() {}
switch (n.getType()) {
return getImpureBooleanValue(n.getLastChild());
TernaryValue value = getImpureBooleanValue(n.getLastChild());
return value.not();
TernaryValue lhs = getImpureBooleanValue(n.getFirstChild());
TernaryValue rhs = getImpureBooleanValue(n.getLastChild());
return lhs.and(rhs);
