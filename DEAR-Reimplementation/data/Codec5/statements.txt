if (buffer == null || buffer.length - pos < decodeSize) {
byte b = in[inPos++];
if (b == PAD) {
if (b >= 0 && b < DECODE_TABLE.length) {
int result = DECODE_TABLE[b];
if (result >= 0) {
modulus = (++modulus) % 4;
x = (x << 6) + result;
if (modulus == 0) {
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
buffer[pos++] = (byte) ((x >> 8) & MASK_8BITS);
buffer[pos++] = (byte) (x & MASK_8BITS);
x = x << 6;
switch (modulus) {
buffer[pos++] = (byte) ((x >> 16) & MASK_8BITS);
if (buffer != null) {
int len = Math.min(avail(), bAvail);
if (buffer != b) {
return len;
return buffer != null ? pos - readPos : 0;
if (eof) {
if (inAvail < 0) {
eof = true;
for (int i = 0; i < inAvail; i++) {
if (eof && modulus != 0) {
}
this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
}
buffer = null;
public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
if (lineSeparator == null) {
this.lineLength = lineLength > 0 ? (lineLength / 4) * 4 : 0;
this.lineSeparator = new byte[lineSeparator.length];
System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
if (lineLength > 0) {
this.encodeSize = 4 + lineSeparator.length;
this.decodeSize = this.encodeSize - 1;
if (containsBase64Byte(lineSeparator)) {
this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
}
static final byte[] CHUNK_SEPARATOR = {'\r', '\n'};
private static final byte[] STANDARD_ENCODE_TABLE = {
private static final byte[] URL_SAFE_ENCODE_TABLE = {
private static final byte[] DECODE_TABLE = {
return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);
for (int i = 0; i < arrayOctet.length; i++) {
if (isBase64(arrayOctet[i])) {
return false;
return this.buffer != null;
if (out != null && out.length == outAvail) {
