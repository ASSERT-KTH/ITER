scope = traverse(arg, scope);
scope = traverseNew(n, scope);
break;
Node constructor = n.getFirstChild();
scope = traverse(constructor, scope);
JSType constructorType = constructor.getJSType();
JSType type = null;
if (constructorType != null) {
constructorType = constructorType.restrictByNotNullOrUndefined();
if (constructorType.isUnknownType()) {
FunctionType ct = constructorType.toMaybeFunctionType();
if (ct == null && constructorType instanceof FunctionType) {
if (ct != null && ct.isConstructor()) {
type = ct.getInstanceType();
n.setJSType(type);
for (Node arg = constructor.getNext(); arg != null; arg = arg.getNext()) {
return scope;
scope = traverseObjectLiteral(n, scope);
break;
JSType type = n.getJSType();
Preconditions.checkNotNull(type);
for (Node name = n.getFirstChild(); name != null; name = name.getNext()) {
ObjectType objectType = ObjectType.cast(type);
if (objectType == null) {
boolean hasLendsName = n.getJSDocInfo() != null &&
if (objectType.hasReferenceName() && !hasLendsName) {
String qObjName = NodeUtil.getBestLValueName(
for (Node name = n.getFirstChild(); name != null;
return scope;
scope = traverse(value, scope);
updateScopeForTypeChange(scope, n, n.getJSType() /* could be null */,
return scope;
this.functionScope.inferSlotType(
}
Var var = varIt.next();
if (isUnflowable(var)) {
scope = traverseChildren(n, scope);
break;
JSType oldType = var.getType();
var.setType(oldType == null ?
}
scope = traverseChildren(n, scope);
if (n.getFirstChild().isGetProp()) {
boolean isInferred = var.isTypeInferred();
boolean unflowable = isInferred &&
boolean nonLocalInferredSlot =
if (!unflowable && !nonLocalInferredSlot) {
type = var.getType();
if (type == null) {
return registry.getNativeType(typeId);
