}
for (int i = 0; i < order; ++i) {
final double[] ltI = lTData[i];
ltI[i] = Math.sqrt(ltI[i]);
final double inverse = 1.0 / ltI[i];
for (int q = order - 1; q > i; --q) {
ltI[q] *= inverse;
final double[] ltQ = lTData[q];
for (int p = q; p < order; ++p) {
ltQ[p] -= ltI[q] * ltI[p];
}
final int order = matrix.getRowDimension();
lTData = matrix.getData();
cachedL= null;
cachedLT = null;
for (int i = 0; i < order; ++i) {
final double[] lI = lTData[i];
if (lTData[i][i] < absolutePositivityThreshold) {
for (int j = i + 1; j < order; ++j) {
final double[] lJ = lTData[j];
final double lIJ = lI[j];
final double lJI = lJ[i];
final double maxDelta =
if (Math.abs(lIJ - lJI) > maxDelta) {
lJ[i] = 0;
this(matrix, DEFAULT_RELATIVE_SYMMETRY_THRESHOLD,
NotSymmetricMatrixException, NotPositiveDefiniteMatrixException {
if (!matrix.isSquare()) {
if (cachedL == null) {
cachedL = getLT().transpose();
return cachedL;
if (cachedLT == null) {
cachedLT = MatrixUtils.createRealMatrix(lTData);
return cachedLT;
throw new NonSquareMatrixException(matrix.getRowDimension(),
throw new NotPositiveDefiniteMatrixException();
throw new NotSymmetricMatrixException();
double determinant = 1.0;
for (int i = 0; i < lTData.length; ++i) {
double lTii = lTData[i][i];
determinant *= lTii * lTii;
return determinant;
return new Solver(lTData);
