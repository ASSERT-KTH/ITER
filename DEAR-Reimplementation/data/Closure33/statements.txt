sb.append(", ");
if (i > 0) {
sb.append(property);
sb.append(": ");
sb.append(getPropertyType(property).toStringHelper(forAnnotations));
++i;
if (!forAnnotations && i == MAX_PRETTY_PRINTED_PROPERTIES) {
}
typeToInfer = getNativeType(JSTypeNative.VOID_TYPE)
} else if (prettyPrint) {
prettyPrint = false;
Set<String> propertyNames = Sets.newTreeSet();
for (ObjectType current = this;
current != null && !current.isNativeObjectType() &&
propertyNames.addAll(current.getOwnPropertyNames());
current = current.getImplicitPrototype()) {
StringBuilder sb = new StringBuilder();
sb.append("{");
int i = 0;
for (String property : propertyNames) {
sb.append("}");
prettyPrint = true;
return sb.toString();
for (String prop : constraintObj.getOwnPropertyNames()) {
JSType propType = constraintObj.getPropertyType(prop);
if (!isPropertyTypeDeclared(prop)) {
JSType typeToInfer = propType;
if (!hasProperty(prop)) {
defineInferredProperty(prop, typeToInfer, null);
}
newProp.setJSDocInfo(oldProp.getJSDocInfo());
return RecordType.isSubtype(this, that.toMaybeRecordType());
if (hasReferenceName()) {
return properties.keySet();
return false;
if (constraintObj.isRecordType()) {
}
return prop;
return true;
return !slot.isTypeInferred();
return null;
Property p = properties.get(propertyName);
if (p != null) {
return p.getJSDocInfo();
if (info != null) {
if (!properties.containsKey(propertyName)) {
Property property = properties.get(propertyName);
if (property != null) {
property.setJSDocInfo(info);
}
