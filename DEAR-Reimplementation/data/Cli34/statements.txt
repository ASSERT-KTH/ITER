OptionBuilder.type = newType;
return instance;
return type;
OptionBuilder.numberOfArgs = 1;
return instance;
return longOpt;
return required;
return numberOfArgs > 0 || numberOfArgs == UNLIMITED_VALUES;
return opt;
OptionBuilder.required = true;
return instance;
OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES;
option.setOptionalArg(optionalArg);
if (opt == null)
return opt;
return longOpt != null;
return numberOfArgs > 1 || numberOfArgs == UNLIMITED_VALUES;
return valuesep > 0;
switch (numberOfArgs)
processValue(value);
}
if (hasValueSeparator())
add(value);
}
if (!acceptsArg())
values.add(value);
}
return values;
Option option = (Option) super.clone();
option.values = new ArrayList(values);
return option;
return (hasArg() || hasArgs() || hasOptionalArg()) && (numberOfArgs <= 0 || values.size() < numberOfArgs);
{
}
private static int numberOfArgs = Option.UNINITIALIZED;
private static OptionBuilder instance = new OptionBuilder();
reset();
}
description = null;
argName = null;
longopt = null;
type = null;
required = false;
numberOfArgs = Option.UNINITIALIZED;
optionalArg = false;
valuesep = (char) 0;
}
Option option = null;
option = new Option(opt, description);
option.setLongOpt(longopt);
