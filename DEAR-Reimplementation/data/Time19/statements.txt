} else if (offsetLocal > 0) {
return offsetAdjusted;
final int offsetLocal = getOffset(instantLocal);
final long instantAdjusted = instantLocal - offsetLocal;
final int offsetAdjusted = getOffset(instantAdjusted);
if (offsetLocal != offsetAdjusted) {
protected DateTimeZone(String id) {
if (id == null) {
iID = id;
}
public static final DateTimeZone UTC = new FixedDateTimeZone("UTC", "UTC", 0, 0);
setProvider0(null);
setNameProvider0(null);
}
if (id == null) {
if (id.equals("UTC")) {
DateTimeZone zone = cProvider.getZone(id);
if (zone != null) {
return zone;
if (provider == null) {
provider = getDefaultProvider();
Set<String> ids = provider.getAvailableIDs();
if (ids == null || ids.size() == 0) {
if (!ids.contains("UTC")) {
if (!UTC.equals(provider.getZone("UTC"))) {
cProvider = provider;
cAvailableIDs = ids;
}
Provider provider = null;
String providerClass =
if (providerClass != null) {
}
if (provider == null) {
provider = new ZoneInfoProvider("org/joda/time/tz/data");
}
if (provider == null) {
return provider;
if (nameProvider == null) {
nameProvider = getDefaultNameProvider();
cNameProvider = nameProvider;
}
NameProvider nameProvider = null;
String providerClass = System.getProperty("org.joda.time.DateTimeZone.NameProvider");
if (providerClass != null) {
}
if (nameProvider == null) {
nameProvider = new DefaultNameProvider();
return nameProvider;
return iID;
return 57 + getID().hashCode();
