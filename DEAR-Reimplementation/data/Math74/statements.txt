scale = new double[y0.length];
java.util.Arrays.fill(scale, scalAbsoluteTolerance);
interpolator.storeTime(stepStart + stepSize);
if (manager.evaluateStep(interpolator)) {
loop = false;
final double nextStep = stepStart + stepSize;
System.arraycopy(yTmp, 0, y, 0, y0.length);
manager.stepAccepted(nextStep, y);
lastStep = manager.stop();
interpolator.storeTime(nextStep);
for (StepHandler handler : stepHandlers) {
handler.handleStep(interpolator, lastStep);
super(name, minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
this.fsal= fsal;
this.c = c;
this.a = a;
this.b = b;
this.prototype = prototype;
exp = -1.0 / getOrder();
setSafety(0.9);
setMinReduction(0.2);
setMaxGrowth(10.0);
}
sanityChecks(equations, t0, y0, t, y);
setEquations(equations);
resetEvaluations();
final boolean forward = t > t0;
final int stages = c.length + 1;
if (y != y0) {
System.arraycopy(y0, 0, y, 0, y0.length);
final double[][] yDotK = new double[stages][y0.length];
final double[] yTmp = new double[y0.length];
if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {
final RungeKuttaStepInterpolator rki = (RungeKuttaStepInterpolator) prototype.copy();
rki.reinitialize(this, yTmp, yDotK, forward);
interpolator = rki;
} else {
interpolator.storeTime(t0);
stepStart = t0;
doublehNew= 0;
boolean firstTime = true;
for (StepHandler handler : stepHandlers) {
handler.reset();
}
CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
boolean lastStep = false;
while (!lastStep) {
interpolator.shift();
double error = 0;
for (boolean loop = true; loop;) {
