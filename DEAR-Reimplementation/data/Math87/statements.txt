return;
matrix[zIndex][getSlackVariableOffset() - 1] =
matrix[row][getSlackVariableOffset() - 1] =
matrix[row][getSlackVariableOffset() + slackVar++] = 1;// slack
double sum = 0;
for (double coefficient : coefficients.getData()) {
sum -= coefficient;
return sum;
double[] coefficients = new double[getOriginalNumDecisionVariables()];
Integer basicRow =
double mostNegative = basicRow == null ? 0 : getEntry(basicRow, getRhsOffset());
Set<Integer> basicRows = new HashSet<Integer>();
for (int i = 0; i < coefficients.length; i++) {
basicRow = getBasicRow(getNumObjectiveFunctions() + i);
if (basicRows.contains(basicRow)) {
basicRows.add(basicRow);
coefficients[i] =
return new RealPointValuePair(coefficients, f.getValue(coefficients));
return restrictToNonNegative ? numDecisionVariables : numDecisionVariables - 1;
if (numArtificialVariables == 0) {
return getNumObjectiveFunctions() + numDecisionVariables;
final double epsilon) {
this.f= f;
this.constraints= constraints;
this.restrictToNonNegative= restrictToNonNegative;
this.epsilon= epsilon;
this.numDecisionVariables = getNumVariables() + (restrictToNonNegative ? 0 : 1);
this.numSlackVariables= getConstraintTypeCounts(Relationship.LEQ) +
this.numArtificialVariables = getConstraintTypeCounts(Relationship.EQ) +
this.tableau = new RealMatrixImpl(createTableau(goalType == GoalType.MAXIMIZE));
initialize();
}
List<LinearConstraint> constraints = getNormalizedConstraints();
int width = numDecisionVariables + numSlackVariables +
int height = constraints.size() + getNumObjectiveFunctions();
double[][] matrix = new double[height][width];
if (getNumObjectiveFunctions() == 2) {
int zIndex = (getNumObjectiveFunctions() == 1) ? 0 : 1;
matrix[zIndex][zIndex] = maximize ? 1 : -1;
RealVector objectiveCoefficients =
copyArray(objectiveCoefficients.getData(), matrix[zIndex], getNumObjectiveFunctions());
matrix[zIndex][width - 1] =
if (!restrictToNonNegative) {
int slackVar = 0;
int artificialVar = 0;
for (int i = 0; i < constraints.size(); i++) {
LinearConstraint constraint = constraints.get(i);
int row = getNumObjectiveFunctions() + i;
copyArray(constraint.getCoefficients().getData(), matrix[row], 1);
if (!restrictToNonNegative) {
