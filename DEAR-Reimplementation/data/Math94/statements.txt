if (u * v == 0) {
return (Math.abs(u) + Math.abs(v));
if (u > 0) {
u = -u;
if (v > 0) {
v = -v;
int k = 0;
while ((u & 1) == 0 && (v & 1) == 0 && k < 31) { // while u and v are
u /= 2;
v /= 2;
k++; // cast out twos.
if (k == 31) {
int t = ((u & 1) == 1) ? v : -(u / 2)/* B3 */;
while ((t & 1) == 0) { // while t is even..
t /= 2; // cast out twos
if (t > 0) {
u = -t;
v = t;
t = (v - u) / 2;
} while (t != 0);
return -u * (1 << k); // gcd is u*2^k
super();
}
long s = (long)x + (long)y;
if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
throw new ArithmeticException("overflow: add");
return (int)s;
return addAndCheck(a, b, "overflow: add");
if (a > b) {
ret = addAndCheck(b, a, msg);
if (a < 0) {
if (b < 0) {
if (Long.MIN_VALUE - b <= a) {
ret = a + b;
throw new ArithmeticException(msg);
ret = a + b;
if (a <= Long.MAX_VALUE - b) {
ret = a + b;
throw new ArithmeticException(msg);
return ret;
if (n < k) {
throw new IllegalArgumentException(
if (n < 0) {
throw new IllegalArgumentException(
if ((n == k) || (k == 0)) {
return 1;
if ((k == 1) || (k == n - 1)) {
return n;
long result = Math.round(binomialCoefficientDouble(n, k));
if (result == Long.MAX_VALUE) {
