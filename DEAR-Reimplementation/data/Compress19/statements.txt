relativeHeaderOffset = new ZipEightByteInteger(buffer, offset);
offset += DWORD;
remaining -= DWORD;
diskStart = new ZipLong(buffer, offset);
offset += WORD;
remaining -= WORD;
rawCentralDirectoryData = new byte[length];
System.arraycopy(buffer, offset, rawCentralDirectoryData, 0, length);
if (length >= 3 * DWORD + WORD) {
parseFromLocalFileData(buffer, offset, length);
}
if (rawCentralDirectoryData != null) {
int expectedLength = (hasUncompressedSize ? DWORD : 0)
if (rawCentralDirectoryData.length != expectedLength) {
throw new ZipException("central directory zip64 extended"
return new ZipShort(size != null ? 2 * DWORD : 0);
if (size != null || compressedSize != null) {
if (size == null || compressedSize == null) {
byte[] data = new byte[2 * DWORD];
addSizes(data);
return data;
if (length == 0) {
if (length < 2 * DWORD) {
size = new ZipEightByteInteger(buffer, offset);
offset += DWORD;
compressedSize = new ZipEightByteInteger(buffer, offset);
offset += DWORD;
int remaining = length - 2 * DWORD;
if (remaining >= DWORD) {
if (remaining >= WORD) {
}
int off = 0;
if (size != null) {
System.arraycopy(size.getBytes(), 0, data, 0, DWORD);
off += DWORD;
if (compressedSize != null) {
System.arraycopy(compressedSize.getBytes(), 0, data, off, DWORD);
off += DWORD;
return off;
public Zip64ExtendedInformationExtraField() { }
static final ZipShort HEADER_ID = new ZipShort(0x0001);
private static final byte[] EMPTY = new byte[0];
return HEADER_ID;
this(size, compressedSize, null, null);
}
ZipLong diskStart) {
this.size = size;
this.compressedSize = compressedSize;
this.relativeHeaderOffset = relativeHeaderOffset;
this.diskStart = diskStart;
