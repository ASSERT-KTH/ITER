writeRawLong(text);
int room = _outputEnd - _outputTail;
text.getChars(0, room, _outputBuffer, _outputTail);
_outputTail += room;
_flushBuffer();
int offset = room;
int len = text.length() - room;
while (len > _outputEnd) {
int amount = _outputEnd;
text.getChars(offset, offset+amount, _outputBuffer, 0);
_outputHead = 0;
_outputTail = amount;
_flushBuffer();
offset += amount;
len -= amount;
}
text.getChars(offset, offset+len, _outputBuffer, 0);
_outputHead = 0;
_outputTail = len;
}
_verifyValueWrite("start an array");
_writeContext = _writeContext.createChildArrayContext();
if (_cfgPrettyPrinter != null) {
if (_outputTail >= _outputEnd) {
_outputBuffer[_outputTail++] = '[';
}
if (!_writeContext.inArray()) {
if (_cfgPrettyPrinter != null) {
if (_outputTail >= _outputEnd) {
_outputBuffer[_outputTail++] = ']';
_writeContext = _writeContext.clearAndGetParent();
}
writeRaw(value.toPlainString());
c = ',';
break;
_verifyValueWrite(WRITE_NUMBER);
if (value == null) {
} elseif (_cfgNumbersAsStrings) {
} else if (isEnabled(Feature.WRITE_BIGDECIMAL_AS_PLAIN)) {
}
int len = text.length();
int room = _outputEnd - _outputTail;
if (room == 0) {
if (room >= len) {
}
if (_outputTail >= _outputEnd) {
_outputBuffer[_outputTail] = c;
++_outputTail;
}
if (_cfgPrettyPrinter != null) {
