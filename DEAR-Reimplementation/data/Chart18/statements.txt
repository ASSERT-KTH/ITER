this.keys.remove(index);
this.values.remove(index);
if (index < this.keys.size()) {
}
int index = getIndex(key);
if (index < 0) {
removeValue(index);
}
return;
Iterator iterator = this.rows.iterator();
while (iterator.hasNext()) {
DefaultKeyedValues rowData = (DefaultKeyedValues) iterator.next();
rowData.removeValue(columnKey);
}
this.columnKeys.remove(columnKey);
}
rebuildIndex();
return i.intValue();
this.indexMap.clear();
for (int i = 0; i < this.keys.size(); i++) {
final Object key = this.keys.get(i);
this.indexMap.put(key, new Integer(i));
}
if (key == null) {
int keyIndex = getIndex(key);
if (keyIndex >= 0) {
this.keys.add(key);
this.values.add(value);
this.indexMap.put(key, new Integer(this.keys.size() - 1));
}
if (key == null) {
final Integer i = (Integer) this.indexMap.get(key);
if (i == null) {
return -1;// key not found
public DefaultKeyedValues() {
this.keys = new ArrayList();
this.values = new ArrayList();
this.indexMap = new HashMap();
}
this.keys.set(keyIndex, key);
row = (DefaultKeyedValues) this.rows.get(rowIndex);
setValue(key, value);
}
addValue(key, new Double(value));
}
setValue(value, rowKey, columnKey);
}
if (key == null) {
if (this.sortRowKeys) {
return this.rowKeys.indexOf(key);
