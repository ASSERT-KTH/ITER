final double convergence, final int maxIterationCount) {
this.handler = handler;
this.maxCheckInterval= maxCheckInterval;
this.convergence = Math.abs(convergence);
this.maxIterationCount = maxIterationCount;
t0= Double.NaN;
g0= Double.NaN;
g0Positive= true;
pendingEvent= false;
pendingEventTime= Double.NaN;
previousEventTime = Double.NaN;
increasing= true;
nextAction= EventHandler.CONTINUE;
}
t0 = tStart;
g0 = handler.g(tStart, yStart);
g0Positive = g0 >= 0;
}
forward = interpolator.isForward();
final double t1 = interpolator.getCurrentTime();
final intn= Math.max(1, (int) Math.ceil(Math.abs(t1 - t0) / maxCheckInterval));
final double h= (t1 - t0) / n;
double ta = t0;
double ga = g0;
double tb = t0 + (interpolator.isForward() ? convergence : -convergence);
for (int i = 0; i < n; ++i) {
tb += h;
interpolator.setInterpolatedTime(tb);
final double gb = handler.g(tb, interpolator.getInterpolatedState());
if (g0Positive ^ (gb >= 0)) {
increasing = gb >= ga;
final UnivariateRealFunction f = new UnivariateRealFunction() {
final BrentSolver solver = new BrentSolver();
solver.setAbsoluteAccuracy(convergence);
solver.setMaximalIterationCount(maxIterationCount);
final double root = (ta <= tb) ? solver.solve(f, ta, tb) : solver.solve(f, tb, ta);
if ((Math.abs(root - ta) <= convergence) &&
} else if (Double.isNaN(previousEventTime) ||
pendingEventTime = root;
if (pendingEvent && (Math.abs(t1 - pendingEventTime) <= convergence)) {
pendingEvent = true;
return true;
return pendingEventTime;
t0 = t;
g0 = handler.g(t, y);
if (pendingEvent) {
previousEventTime = t;
g0Positive= increasing;
nextAction= handler.eventOccurred(t, y, !(increasing ^ forward));
}
