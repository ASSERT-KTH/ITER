throw new IllegalArgumentException(
String string = new String(buffer, offset, length);
string=string.replaceAll("\0", "{NUL}"); // Replace NULs to allow string to be printed
final String s = "Invalid byte "+currentByte+" at offset "+(current-offset)+" in '"+string+"' len="+length;
return s;
longresult = 0;
int end = offset + length;
int start = offset;
if (length < 2){
if (buffer[start] == 0) {
while (start < end){
if (buffer[start] == ' '){
byte trailer = buffer[end - 1];
if (trailer == 0 || trailer == ' '){
static final ZipEncoding DEFAULT_ENCODING =
static final ZipEncoding FALLBACK_ENCODING = new ZipEncoding() {
private TarUtils(){
}
throw new IllegalArgumentException("Length "+length+" must be at least 2");
return 0L;
start++;
end--;
trailer = buffer[end - 1];
while (start < end - 1 && (trailer == 0 || trailer == ' ')) {
end--;
trailer = buffer[end - 1];
for ( ;start < end; start++) {
final byte currentByte = buffer[start];
if (currentByte < '0' || currentByte > '7'){
throw new IllegalArgumentException(
result = (result << 3) + (currentByte - '0'); // convert from ASCII
return result;
if ((buffer[offset] & 0x80) == 0) {
return parseOctal(buffer, offset, length);
final boolean negative = buffer[offset] == (byte) 0xff;
if (length < 9) {
return parseBinaryLong(buffer, offset, length, negative);
return parseBinaryBigInteger(buffer, offset, length, negative);
if (length >= 9) {
throw new IllegalArgumentException("At offset " + offset + ", "
long val = 0;
for (int i = 1; i < length; i++) {
val = (val << 8) + (buffer[offset + i] & 0xff);
if (negative) {
val--;
val ^= (long) Math.pow(2, (length - 1) * 8) - 1;
return negative ? -val : val;
byte[] remainder = new byte[length - 1];
System.arraycopy(buffer, offset + 1, remainder, 0, length - 1);
BigInteger val = new BigInteger(remainder);
