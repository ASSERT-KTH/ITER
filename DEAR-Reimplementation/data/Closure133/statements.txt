type = createJSTypeExpression(newNode(Token.QMARK));
ExtractionInfo returnDescriptionInfo =
restoreLookAhead(token);
return reportGenericTypeSyntaxWarning();
return reportTypeSyntaxWarning("msg.jsdoc.type.syntax");
if (jsdocBuilder.shouldParseDocumentation()) {
if (type == null) {
if (!jsdocBuilder.recordReturnType(type)) {
unreadToken = token;
}
builder.append(' ');
if (lineStartChar != -1 && option == WhitespaceOption.PRESERVE) {
} else if (builder.length() > 0) {
parser.addTypeWarning(warning, stream.getLineno(), stream.getCharno());
return null;
jsdocBuilder.markText(multilineText, startLineno, startCharno,
return extractMultilineTextualBlock(token, WhitespaceOption.SINGLE_LINE);
line = line.trim();
multilineText = multilineText.trim();
ExtractionInfo blockInfo = extractBlockComment(token);
token = blockInfo.token;
if (!blockInfo.string.isEmpty()) {
} else {
if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
stream.update();
int startLineno = stream.getLineno();
int startCharno = stream.getCharno() + 1;
String line = getRemainingJSDocLine();
if (option != WhitespaceOption.PRESERVE) {
StringBuilder builder = new StringBuilder();
builder.append(line);
state = State.SEARCHING_ANNOTATION;
token = next();
boolean ignoreStar = false;
int lineStartChar = -1;
switch (token) {
ignoreStar = false;
state = State.SEARCHING_ANNOTATION;
boolean isEOC = token == JsDocToken.EOC;
if (!isEOC) {
if (token == JsDocToken.EOC ||
String multilineText = builder.toString();
if (option != WhitespaceOption.PRESERVE) {
int endLineno = stream.getLineno();
int endCharno = stream.getCharno();
if (multilineText.length() > 0) {
StringBuilder builder = new StringBuilder();
boolean ignoreStar = true;
switch (token) {
return new ExtractionInfo(builder.toString().trim(), token);
