this(new Well19937c(), samples);
}
if (sampleSize <= 0) {
final T[]out = (T[]) java.lang.reflect.Array.newInstance(singletons.get(0).getClass(), sampleSize);
for (int i = 0; i < sampleSize; i++) {
out[i] = sample();
final double randomValue = random.nextDouble();
double sum = 0;
for (int i = 0; i < probabilities.length; i++) {
sum += probabilities[i];
if (randomValue < sum) {
return singletons.get(i);
throws NotPositiveException, MathArithmeticException, MathIllegalArgumentException {
random = rng;
singletons = new ArrayList<T>(samples.size());
final double[] probs = new double[samples.size()];
for (int i = 0; i < samples.size(); i++) {
final Pair<T, Double> sample = samples.get(i);
singletons.add(sample.getKey());
if (sample.getValue() < 0) {
probs[i] = sample.getValue();
probabilities = MathArrays.normalizeArray(probs, 1.0);
}
throw new NotPositiveException(sample.getValue());
random.setSeed(seed);
}
double probability = 0;
for (int i = 0; i < probabilities.length; i++) {
if ((x == null && singletons.get(i) == null) ||
probability += probabilities[i];
return probability;
final List<Pair<T, Double>> samples = new ArrayList<Pair<T, Double>>(probabilities.length);
for (int i = 0; i < probabilities.length; i++) {
samples.add(new Pair<T, Double>(singletons.get(i), probabilities[i]));
return samples;
return singletons.get(singletons.size() - 1);
throw new NotStrictlyPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
return out;
