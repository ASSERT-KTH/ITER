return new Dfp(getField(), x);
return field.getTwo();
return nans == INFINITE;
if (isInfinite()) {
if (isNaN()) {
Dfp y = this;
boolean negate = false;
if (lessThan(getZero())) {
int exponent = (int)(y.log10() * 3.32);
if (exponent < 0) {
exponent--;
Dfp tempDfp = DfpMath.pow(getTwo(), exponent);
while (tempDfp.lessThan(y) || tempDfp.equals(y)) {
exponent--;
y = y.divide(DfpMath.pow(getTwo(), exponent));
if (exponent > -1023) {
y = y.subtract(getOne());
if (exponent < -1074) {
if (exponent > 1023) {
y = y.multiply(newInstance(4503599627370496l)).rint();
String str = y.toString();
str = str.substring(0, str.length()-1);
long mantissa = Long.parseLong(str);
if (mantissa == 4503599627370496L) {
if (exponent <= -1023) {
while (exponent < -1023) {
long bits = mantissa | ((exponent + 1023L) << 52);
double x = Double.longBitsToDouble(bits);
if (negate) {
return x;
if (mant[mant.length-1] > 1000) {
if (mant[mant.length-1] > 100) {
if (mant[mant.length-1] > 10) {
return exp * 4 - 4;
return result;
a.exp = b.exp;
return trunc(DfpField.RoundingMode.ROUND_HALF_EVEN);
boolean changed = false;
if (isNaN()) {
if (nans == INFINITE) {
if (mant[mant.length-1] == 0) {
if (exp < 0) {
if (exp >= mant.length) {
Dfp result = newInstance(this);
for (int i = 0; i < mant.length-result.exp; i++) {
changed |= result.mant[i] != 0;
result.mant[i] = 0;
if (changed) {
return field.getOne();
buffer[--q] = '-';
