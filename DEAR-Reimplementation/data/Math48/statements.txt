return solve(maxEval, f, min, max, startValue, AllowedSolution.ANY_SIDE);
final double ftol = getFunctionValueAccuracy();
final double atol = getAbsoluteAccuracy();
final double rtol = getRelativeAccuracy();
boolean inverted = false;
final double x = x1 - ((f1 * (x1 - x0)) / (f1 - f0));
final double fx = computeObjectiveValue(x);
if (fx == 0.0) {
if (f1 * fx < 0) {
x0 = x1;
f0 = f1;
inverted = !inverted;
switch (method) {
break;
x1 = x;
f1 = fx;
if (FastMath.abs(f1) <= ftol) {
if (FastMath.abs(x1 - x0) < FastMath.max(rtol * FastMath.abs(x1),
}
verifyBracketing(x0, x1);
super(absoluteAccuracy);
this.allowed = AllowedSolution.ANY_SIDE;
this.method = method;
}
this.allowed = allowedSolution;
return super.solve(maxEval, f, min, max, startValue);
double x0 = getMin();
double x1 = getMax();
double f0 = computeObjectiveValue(x0);
double f1 = computeObjectiveValue(x1);
if (f0 == 0.0) {
if (f1 == 0.0) {
super(relativeAccuracy, absoluteAccuracy);
this.allowed = AllowedSolution.ANY_SIDE;
this.method = method;
}
super(relativeAccuracy, absoluteAccuracy, functionValueAccuracy);
this.allowed = AllowedSolution.ANY_SIDE;
this.method = method;
}
return solve(maxEval, f, min, max, min + 0.5 * (max - min), allowedSolution);
return x0;
return x1;
return x;
f0 *= 0.5;
break;
f0 *= f1 / (f1 + fx);
break;
throw new MathInternalError();
switch (allowed) {
