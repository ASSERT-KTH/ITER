OffsetEntry offsetEntry = entries.get(ze);
if (offsetEntry == null) {
return null;
ZipUtil.checkRequestedFeatures(ze);
long start = offsetEntry.dataOffset;
BoundedInputStream bis =
switch (ze.getMethod()) {
return bis;
noUTF8Flag.put(ze, new NameAndComment(fileName, comment));
String orig = ze.getName();
NameAndComment nc = entriesWithoutUTF8Flag.get(ze);
ZipUtil.setNameAndCommentFromExtraFields(ze, nc.name,
if (!orig.equals(ze.getName())) {
nameMap.remove(orig);
nameMap.put(ze.getName(), ze);
return nameMap.get(name);
throws IOException {
private final Map<ZipArchiveEntry, OffsetEntry> entries =
private final Map<String, ZipArchiveEntry> nameMap =
private final Comparator<ZipArchiveEntry> OFFSET_COMPARATOR =
this.archiveName = f.getAbsolutePath();
this.encoding = encoding;
this.zipEncoding = ZipEncodingHelper.getZipEncoding(encoding);
this.useUnicodeExtraFields = useUnicodeExtraFields;
archive = new RandomAccessFile(f, "r");
boolean success = false;
Map<ZipArchiveEntry, NameAndComment> entriesWithoutUTF8Flag =
resolveLocalFileHeaderData(entriesWithoutUTF8Flag);
success = true;
if (!success) {
}
private static final long CFH_SIG =
closed = true;
archive.close();
}
if (zipfile != null) {
zipfile.close();
}
}
HashMap<ZipArchiveEntry, NameAndComment> noUTF8Flag =
positionAtCentralDirectory();
byte[] signatureBytes = new byte[WORD];
archive.readFully(signatureBytes);
long sig = ZipLong.getValue(signatureBytes);
if (sig != CFH_SIG && startsWithLocalFileHeader()) {
while (sig == CFH_SIG) {
readCentralDirectoryEntry(noUTF8Flag);
archive.readFully(signatureBytes);
sig = ZipLong.getValue(signatureBytes);
return noUTF8Flag;
