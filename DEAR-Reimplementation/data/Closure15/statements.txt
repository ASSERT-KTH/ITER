c.inlineVariable();
for (Node p = n; p != expressionRoot; p = p.getParent()) {
for (Node cur = p.getNext(); cur != null; cur = cur.getNext()) {
return false;
for (Node p = n.getParent(); p != expressionRoot; p = p.getParent()) {
return false;
if (c.canInline()) {
}
public FlowSensitiveInlineVariables(AbstractCompiler compiler) {
this.compiler = compiler;
}
private static final Predicate<Node> SIDE_EFFECT_PREDICATE =
if (t.inGlobalScope()) {
return; // Don't even brother. All global variables are likely escaped.
if (LiveVariablesAnalysis.MAX_VARIABLES_TO_ANALYZE <
ControlFlowAnalysis cfa = new ControlFlowAnalysis(compiler, false, true);
Preconditions.checkState(t.getScopeRoot().isFunction());
cfa.process(null, t.getScopeRoot().getLastChild());
cfg = cfa.getCfg();
reachingDef = new MustBeReachingVariableDef(cfg, t.getScope(), compiler);
reachingDef.analyze();
candidates = Lists.newLinkedList();
new NodeTraversal(compiler, new GatherCandiates()).traverse(
reachingUses = new MaybeReachingVariableUse(cfg, t.getScope(), compiler);
reachingUses.analyze();
for (Candidate c : candidates) {
}
public void exitScope(NodeTraversal t) {}
(new NodeTraversal(compiler, this)).traverseRoots(externs, root);
}
}
return;
if (predicate.apply(cur)) {
return true;
for (Node cur = p.getParent().getFirstChild(); cur != p;
if (predicate.apply(cur)) {
return true;
cur = cur.getNext()) {
