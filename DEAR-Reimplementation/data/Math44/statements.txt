public AbstractIntegrator(final String name) {
this.name = name;
stepHandlers = new ArrayList<StepHandler>();
stepStart = Double.NaN;
stepSize= Double.NaN;
eventsStates = new ArrayList<EventState>();
statesInitialized = false;
evaluations = new Incrementor();
setMaxEvaluations(-1);
resetEvaluations();
}
addEventHandler(handler, maxCheckInterval, convergence,
}
eventsStates.add(new EventState(handler, maxCheckInterval, convergence,
}
evaluations.setMaximalCount((maxEvaluations < 0) ? Integer.MAX_VALUE : maxEvaluations);
}
evaluations.resetCount();
}
this.expandable = equations;
}
if (y0.length != equations.getDimension()) {
if (y.length != equations.getDimension()) {
final ExpandableStatefulODE expandableODE = new ExpandableStatefulODE(equations);
expandableODE.setTime(t0);
expandableODE.setPrimaryState(y0);
integrate(expandableODE, t);
evaluations.incrementCount();
expandable.computeDerivatives(t, y, yDot);
}
this.statesInitialized = stateInitialized;
}
double previousT = interpolator.getGlobalPreviousTime();
final double currentT = interpolator.getGlobalCurrentTime();
resetOccurred = false;
if (! statesInitialized) {
for (EventState state : eventsStates) {
state.reinitializeBegin(interpolator);
}
statesInitialized = true;
final int orderingSign = interpolator.isForward() ? +1 : -1;
SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
for (final EventState state : eventsStates) {
if (state.evaluateStep(interpolator)) {
occuringEvents.add(state);
}
while (!occuringEvents.isEmpty()) {
final Iterator<EventState> iterator = occuringEvents.iterator();
final EventState currentEvent = iterator.next();
iterator.remove();
