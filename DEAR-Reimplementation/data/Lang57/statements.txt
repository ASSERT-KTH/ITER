private static final Map cLanguagesByCountry = Collections.synchronizedMap(new HashMap());
private static final Map cCountriesByLanguage = Collections.synchronizedMap(new HashMap());
List list = Arrays.asList(Locale.getAvailableLocales());
cAvailableLocaleList = Collections.unmodifiableList(list);
}
return cAvailableLocaleSet.contains(locale);
super();
}
if (str == null) {
return null;
int len = str.length();
if (len != 2 && len != 5 && len < 7) {
throw new IllegalArgumentException("Invalid locale format: " + str);
char ch0 = str.charAt(0);
char ch1 = str.charAt(1);
if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
throw new IllegalArgumentException("Invalid locale format: " + str);
if (len == 2) {
return new Locale(str, "");
if (str.charAt(2) != '_') {
throw new IllegalArgumentException("Invalid locale format: " + str);
char ch3 = str.charAt(3);
char ch4 = str.charAt(4);
if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
throw new IllegalArgumentException("Invalid locale format: " + str);
if (len == 5) {
return new Locale(str.substring(0, 2), str.substring(3, 5));
if (str.charAt(5) != '_') {
throw new IllegalArgumentException("Invalid locale format: " + str);
return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
return localeLookupList(locale, locale);
List list = new ArrayList(4);
if (locale != null) {
list.add(locale);
if (locale.getVariant().length() > 0) {
list.add(new Locale(locale.getLanguage(), locale.getCountry()));
if (locale.getCountry().length() > 0) {
list.add(new Locale(locale.getLanguage(), ""));
if (list.contains(defaultLocale) == false) {
list.add(defaultLocale);
return Collections.unmodifiableList(list);
return cAvailableLocaleList;
Set set = cAvailableLocaleSet;
if (set == null) {
set = new HashSet(availableLocaleList());
set = Collections.unmodifiableSet(set);
cAvailableLocaleSet = set;
return set;
List langs = (List) cLanguagesByCountry.get(countryCode);//syncd
if (langs == null) {
private static final Map cLanguagesByCountry = Collections.synchronizedMap(new HashMap());
private static final Map cCountriesByLanguage = Collections.synchronizedMap(new HashMap());
List list = Arrays.asList(Locale.getAvailableLocales());
cAvailableLocaleList = Collections.unmodifiableList(list);
}
return cAvailableLocaleSet.contains(locale);
super();
}
if (str == null) {
return null;
int len = str.length();
if (len != 2 && len != 5 && len < 7) {
throw new IllegalArgumentException("Invalid locale format: " + str);
char ch0 = str.charAt(0);
char ch1 = str.charAt(1);
if (ch0 < 'a' || ch0 > 'z' || ch1 < 'a' || ch1 > 'z') {
throw new IllegalArgumentException("Invalid locale format: " + str);
if (len == 2) {
return new Locale(str, "");
if (str.charAt(2) != '_') {
throw new IllegalArgumentException("Invalid locale format: " + str);
char ch3 = str.charAt(3);
char ch4 = str.charAt(4);
if (ch3 < 'A' || ch3 > 'Z' || ch4 < 'A' || ch4 > 'Z') {
throw new IllegalArgumentException("Invalid locale format: " + str);
if (len == 5) {
return new Locale(str.substring(0, 2), str.substring(3, 5));
if (str.charAt(5) != '_') {
throw new IllegalArgumentException("Invalid locale format: " + str);
return new Locale(str.substring(0, 2), str.substring(3, 5), str.substring(6));
return localeLookupList(locale, locale);
List list = new ArrayList(4);
if (locale != null) {
list.add(locale);
if (locale.getVariant().length() > 0) {
list.add(new Locale(locale.getLanguage(), locale.getCountry()));
if (locale.getCountry().length() > 0) {
list.add(new Locale(locale.getLanguage(), ""));
if (list.contains(defaultLocale) == false) {
list.add(defaultLocale);
return Collections.unmodifiableList(list);
return cAvailableLocaleList;
Set set = cAvailableLocaleSet;
if (set == null) {
set = new HashSet(availableLocaleList());
set = Collections.unmodifiableSet(set);
cAvailableLocaleSet = set;
return set;
List langs = (List) cLanguagesByCountry.get(countryCode);//syncd
if (langs == null) {
