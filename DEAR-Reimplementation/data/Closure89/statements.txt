String propAlias = appendPropForAlias(alias, p.name);
Node nameNode = Node.newString(Token.NAME, propAlias);
Node newVar = new Node(Token.VAR, nameNode)
parent.addChildAfter(newVar, addAfter);
addAfter = newVar;
numStubs++;
compiler.reportCodeChange();
if (p.refs.get(0).node.getLastChild().getBooleanProp(
List<Ref> refs = Lists.newArrayList(name.refs);
for (Ref ref : refs) {
if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
}
flattenNameRef(alias, r.node, rParent, originalName);
Node ref = NodeUtil.newName(
NodeUtil.copyNameAnnotations(n.getLastChild(), ref);
parent.replaceChild(n, ref);
compiler.reportCodeChange();
}
String originalName = n.fullName();
for (Ref r : n.refs) {
Node rParent = r.node.getParent();
if (!NodeUtil.isObjectLitKey(r.node, rParent) &&
}
for (Name p : n.props) {
if (p.needsToBeStubbed()) {
}
flattenReferencesTo(p, propAlias);
if (n.refs != null) {
if (n.props != null) {
}
updateObjLitOrFunctionDeclaration(n, alias);
switch (n.declaration.node.getParent().getType()) {
}
Preconditions.checkArgument(NodeUtil.isStatementBlock(parent));
Preconditions.checkNotNull(addAfter);
int numStubs = 0;
if (n.props != null) {
return numStubs;
for (Name p : n.props) {
String propAlias = appendPropForAlias(alias, p.name);
if (p.canCollapse()) {
flattenReferencesToCollapsibleDescendantNames(p, propAlias);
}
}
for (Name p : n.props) {
collapseDeclarationOfNameAndDescendants(
if (!p.inExterns && canCollapseChildNames && p.declaration != null &&
}
if (prop.indexOf('$') != -1) {
return root + '$' + prop;
