return null;
hasHitEOF = true;
if (entrySize - entryOffset > Integer.MAX_VALUE) {
return (int) (entrySize - entryOffset);
int totalRead = 0;
if (hasHitEOF || entryOffset >= entrySize) {
return -1;
if (currEntry == null) {
numToRead = Math.min(numToRead, available());
totalRead = is.read(buf, offset, numToRead);
count(totalRead);
if (totalRead == -1) {
entryOffset += totalRead;
return totalRead;
long numRecords = (this.entrySize / this.recordSize) + 1;
long padding = (numRecords * this.recordSize) - this.entrySize;
long skipped = IOUtils.skip(is, padding);
count(skipped);
long available = entrySize - entryOffset;
numToSkip = Math.min(numToSkip, available);
long skipped = IOUtils.skip(is, numToSkip);
count(skipped);
entryOffset += skipped;
return skipped;
skip(Long.MAX_VALUE);
skipRecordPadding();
if (this.entrySize > 0 && this.entrySize % this.recordSize != 0) {
}
if (hasHitEOF) {
if (currEntry != null) {
byte[] headerBuf = getRecord();
if (headerBuf == null) {
currEntry = new TarArchiveEntry(headerBuf, encoding);
}
entryOffset = 0;
entrySize = currEntry.getSize();
if (currEntry.isGNULongLinkEntry()) {
if (currEntry.isGNULongNameEntry()) {
if (currEntry.isPaxHeader()){ // Process Pax headers
if (currEntry.isGNUSparse()){ // Process sparse files
entrySize = currEntry.getSize();
return currEntry;
byte[] headerBuf = readRecord();
hasHitEOF = isEOFRecord(headerBuf);
if (hasHitEOF && headerBuf != null) {
return headerBuf;
return record == null || ArchiveUtils.isArrayZero(record, recordSize);
byte[] record = new byte[recordSize];
int readNow = IOUtils.readFully(is, record);
count(readNow);
