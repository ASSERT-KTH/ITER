{
private List args = new LinkedList();
private Map options = new HashMap();
private Map names = new HashMap();
private Map hashcodeMap = new HashMap();
}
return options.containsKey(opt);
return hasOption(String.valueOf(opt));
String[] values = getOptionValues(opt);
return (values == null) ? null : values[0];
return getOptionValue(String.valueOf(opt));
opt = Util.stripLeadingHyphens(opt);
String key = opt;
if (names.containsKey(opt))
key = (String) names.get(opt);
if (options.containsKey(key))
return ((Option) options.get(key)).getValues();
hashcodeMap.put(new Integer(opt.hashCode()), opt);
String key = opt.getKey();
if (key == null)
names.put(opt.getLongOpt(), key);
options.put(key, opt);
}
String res = getOptionValue(opt);
if (!options.containsKey(opt))
return null;
Object type = ((Option) options.get(opt)).getType();
return (res == null)? null : TypeHandler.createValue(res, type);
return getOptionObject(String.valueOf(opt));
return null;
return getOptionValues(String.valueOf(opt));
String answer = getOptionValue(opt);
return (answer != null) ? answer : defaultValue;
return getOptionValue(String.valueOf(opt), defaultValue);
String[] answer = new String[args.size()];
args.toArray(answer);
return answer;
return args;
args.add(arg);
}
key = opt.getLongOpt();
return hashcodeMap.values().iterator();
Collection processed = options.values();
Option[] optionsArray = new Option[processed.size()];
return (Option[]) processed.toArray(optionsArray);
