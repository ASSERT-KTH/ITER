pos = startPos + width;
&& (c != '\n') && (c != '\r'))
++pos;
return pos == text.length() ? -1 : pos;
pos = startPos + width;
&& (c != '\n') && (c != '\r'))
--pos;
if (pos > startPos)
if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
else if (startPos + width >= text.length())
public class HelpFormatter
public int defaultWidth = DEFAULT_WIDTH;
public int defaultLeftPad = DEFAULT_LEFT_PAD;
public int defaultDescPad = DEFAULT_DESC_PAD;
public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;
public String defaultNewLine = System.getProperty("line.separator");
public String defaultOptPrefix = DEFAULT_OPT_PREFIX;
public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;
private String longOptSeparator = DEFAULT_LONG_OPT_SEPARATOR;
public String defaultArgName = DEFAULT_ARG_NAME;
protected Comparator optionComparator = new OptionComparator();
private static class OptionComparator implements Comparator
return pos;
int pos = findWrapPos(text, width, 0);
return -1;
this.defaultWidth = width;
}
return defaultWidth;
this.defaultLeftPad = padding;
}
return defaultLeftPad;
this.defaultDescPad = padding;
}
return defaultDescPad;
this.defaultSyntaxPrefix = prefix;
}
return defaultSyntaxPrefix;
this.defaultNewLine = newline;
}
return defaultNewLine;
this.defaultOptPrefix = prefix;
}
return defaultOptPrefix;
this.defaultLongOptPrefix = prefix;
}
return defaultLongOptPrefix;
this.longOptSeparator = longOptSeparator;
}
return longOptSeparator;
this.defaultArgName = name;
