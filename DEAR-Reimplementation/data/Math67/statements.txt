return optimizer.getResult();
return optimizer.getAbsoluteAccuracy();
return optimizer.getRelativeAccuracy();
optimizer.setAbsoluteAccuracy(accuracy);
}
optimizer.setRelativeAccuracy(accuracy);
}
throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);
throw MathRuntimeException.createIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);
int i = j - 1;
double mIX = optima[i];
double mIY = optimaValues[i];
while ((i >= 0) && ((goalType == GoalType.MAXIMIZE) ^ (currY < mIY))) {
optima[i + 1] = mIX;
optimaValues[i + 1] = mIY;
if (i-- != 0) {
mIX = optima[i];
mIY = optimaValues[i];
optima[i + 1] = currX;
optimaValues[i + 1] = currY;
currX = optima[j];
currY = optimaValues[j];
final RandomGenerator generator) {
this.optimizer= optimizer;
this.totalIterations= 0;
this.starts = starts;
this.generator= generator;
this.optima = null;
setMaximalIterationCount(Integer.MAX_VALUE);
setMaxEvaluations(Integer.MAX_VALUE);
}
this.maxIterations = count;
}
this.maxEvaluations = maxEvaluations;
}
if (optima == null) {
if (optimaValues == null) {
optima = new double[starts];
optimaValues = new double[starts];
totalIterations= 0;
totalEvaluations = 0;
for (int i = 0; i < starts; ++i) {
optimizer.setMaximalIterationCount(maxIterations - totalIterations);
optimizer.setMaxEvaluations(maxEvaluations - totalEvaluations);
final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);
final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);
optima[i] = optimizer.optimize(f, goalType,
optimaValues[i] = optimizer.getFunctionValue();
}
totalIterations+= optimizer.getIterationCount();
