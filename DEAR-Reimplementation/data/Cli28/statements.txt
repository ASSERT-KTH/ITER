else if (!("yes".equalsIgnoreCase(value)
break;
arguments = new String[0];
Option opt = getOptions().getOption(option);
String value = properties.getProperty(option);
if (opt.hasArg())
if (opt.getValues() == null || opt.getValues().length == 0)
opt.addValueForProcessing(value);
}
cmd.addOption(opt);
return parse(options, arguments, properties, false);
for (Enumeration e = properties.propertyNames(); e.hasMoreElements();)
String option = e.nextElement().toString();
if (!cmd.hasOption(option))
}
}
public abstract class Parser implements CommandLineParser
this.options = options;
this.requiredOptions = new ArrayList(options.getRequiredOptions());
}
return options;
return requiredOptions;
return parse(options, arguments, null, false);
for (Iterator it = options.helpOptions().iterator(); it.hasNext();)
Option opt = (Option) it.next();
opt.clearValues();
}
for (Iterator it = options.getOptionGroups().iterator(); it.hasNext();)
setOptions(options);
cmd = new CommandLine();
boolean eatTheRest = false;
if (arguments == null)
List tokenList = Arrays.asList(flatten(getOptions(), arguments, stopAtNonOption));
ListIterator iterator = tokenList.listIterator();
while (iterator.hasNext())
String t = (String) iterator.next();
if ("--".equals(t))
else if ("-".equals(t))
else if (t.startsWith("-"))
if (stopAtNonOption && !getOptions().hasOption(t))
processOption(t, iterator);
if (eatTheRest)
}
processProperties(properties);
checkRequiredOptions();
return cmd;
if (properties == null)
return;
if (!getRequiredOptions().isEmpty())
}
