char[] c = Character.toChars(Character.codePointAt(input, pos));
out.write(c);
}
if (input == null) {
StringWriter writer = new StringWriter(input.length() * 2);
translate(input, writer);
return writer.toString();
if (out == null) {
if (input == null) {
int pos = 0;
int len = Character.codePointCount(input, 0, input.length());
while (pos < len) {
int consumed = translate(input, pos, out);
if (consumed == 0) {
pos++;
}
}
public abstract class CharSequenceTranslator {
CharSequenceTranslator[] newArray = new CharSequenceTranslator[translators.length + 1];
newArray[0] = this;
System.arraycopy(translators, 0, newArray, 1, translators.length);
return new AggregateTranslator(newArray);
return null;
} catch (IOException ioe) {
throw new RuntimeException(ioe);
throw new IllegalArgumentException("The Writer must not be null");
return;
for (int pt = 0; pt < consumed; pt++) {
if (pos < len - 2) {
pos += Character.charCount(Character.codePointAt(input, pos));
pos++;
pos--;
return Integer.toHexString(codepoint).toUpperCase(Locale.ENGLISH);
