double chiSquare = 0;
for (int i = 0; i < rows; ++i) {
final double residual = residuals[i];
chiSquare += residual * residual / residualsWeights[i];
return chiSquare;
return inverse.getData();
double[] errors = new double[cols];
final double c = Math.sqrt(getChiSquare() / (rows - cols));
double[][] covar = getCovariances();
for (int i = 0; i < errors.length; ++i) {
errors[i] = Math.sqrt(covar[i][i]) * c;
return errors;
return objectiveEvaluations;
return jacobianEvaluations;
updateJacobian();
double[][] jTj = new double[cols][cols];
for (int i = 0; i < cols; ++i) {
for (int j = i; j < cols; ++j) {
double sum = 0;
for (int k = 0; k < rows; ++k) {
sum += jacobian[k][i] * jacobian[k][j];
jTj[i][j] = sum;
jTj[j][i] = sum;
RealMatrix inverse =
if (rows <= cols) {
double criterion = 0;
for (int i = 0; i < rows; ++i) {
final double residual = residuals[i];
criterion += residual * residual * residualsWeights[i];
return Math.sqrt(criterion / rows);
protected AbstractLeastSquaresOptimizer() {
setConvergenceChecker(new SimpleVectorialValueChecker());
setMaxIterations(DEFAULT_MAX_ITERATIONS);
setMaxEvaluations(Integer.MAX_VALUE);
}
this.maxIterations = maxIterations;
}
this.maxEvaluations = maxEvaluations;
}
this.checker = convergenceChecker;
}
if (++iterations > maxIterations) {
}
++jacobianEvaluations;
jacobian = jF.value(point);
if (jacobian.length != rows) {
for (int i = 0; i < rows; i++) {
final double[] ji = jacobian[i];
final double factor = -Math.sqrt(residualsWeights[i]);
for (int j = 0; j < cols; ++j) {
