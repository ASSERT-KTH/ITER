Preconditions.checkState(
int p = NodeUtil.precedence(type);
Context rhsContext = getContextForNoInOperator(context);
if (last.getType() == type &&
} else if (NodeUtil.isAssignmentOp(n) && NodeUtil.isAssignmentOp(last)) {
addExpr(first, p, context);
return (context == Context.IN_FOR_INIT_CLAUSE
if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||
add(n, context);
Preconditions.checkState(sourceMapDetailLevel != null);
boolean createSourceMap = (sourceMap != null);
MappedCodePrinter mcp =
CodeGenerator cg =
if (tagAsStrict) {
cg.add(root);
CodeConsumer consumer, Charset outputCharset) {
private final Map<String, String> ESCAPED_JS_STRINGS = Maps.newHashMap();
cc = consumer;
if (outputCharset == null || outputCharset == Charsets.US_ASCII) {
this.outputCharsetEncoder = null;
}
private static final char[] HEX_CHARS
add(n, Context.OTHER);
if (!cc.continueProcessing()) {
int type = n.getType();
String opstr = NodeUtil.opToStr(type);
int childCount = n.getChildCount();
Node first = n.getFirstChild();
Node last = n.getLastChild();
if (opstr != null && first != last) {
class CodePrinter {
enum Format {
cg.tagAsStrict();
mcp.endFile();
String code = mcp.getCode();
if (createSourceMap) {
mcp.generateSourceMap(sourceMap);
return code;
this.outputCharsetEncoder = outputCharset.newEncoder();
this(consumer, null);
}
add("'use strict';");
}
cc.add(str);
}
cc.addIdentifier(identifierEscape(identifier));
}
}
return;
addExpr(first, p, context);
