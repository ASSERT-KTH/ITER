dec = str.substring(decPos + 1);
exp = null;
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
dec = str.substring(decPos + 1, expPos);
mant = str.substring(0, decPos);
numDecimals = dec.length(); // gets number of digits past the decimal to ensure no loss of precision for floating point numbers.
if (expPos > -1 && expPos < str.length() - 1) {
exp = str.substring(expPos + 1, str.length());
if (dec == null && exp == null) { // no decimal point and no exponent
final boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
final Float f = createFloat(str);
if (expPos > -1) { // there is an exponent
if (expPos < decPos || expPos > str.length()) { // prevents double exponent causing IOOBE
if (!Character.isDigit(lastChar) && lastChar != '.') {
if (str == null) {
for (int i = str.length() - 1; i >= 0; i--) {
if (str.charAt(i) != '0') {
return false;
if (str == null) {
return Float.valueOf(str);
if (str == null) {
if (StringUtils.isBlank(str)) {
final String[] hex_prefixes = {"0x", "0X", "-0x", "-0X", "#", "-#"};
int pfxLen = 0;
for(final String pfx : hex_prefixes) {
if (str.startsWith(pfx)) {
if (pfxLen > 0) { // we have a hex number
final char lastChar = str.charAt(str.length() - 1);
final int decPos = str.indexOf('.');
final int expPos = str.indexOf('e') + str.indexOf('E') + 1; // assumes both not present
int numDecimals = 0; // Check required precision (LANG-693)
if (decPos > -1) { // there is a decimal point
public static final Long LONG_ZERO = Long.valueOf(0L);
public static final Long LONG_ONE = Long.valueOf(1L);
public static final Long LONG_MINUS_ONE = Long.valueOf(-1L);
public static final Integer INTEGER_ZERO = Integer.valueOf(0);
public static final Integer INTEGER_ONE = Integer.valueOf(1);
public static final Integer INTEGER_MINUS_ONE = Integer.valueOf(-1);
public static final Short SHORT_ZERO = Short.valueOf((short) 0);
public static final Short SHORT_ONE = Short.valueOf((short) 1);
public static final Short SHORT_MINUS_ONE = Short.valueOf((short) -1);
public static final Byte BYTE_ZERO = Byte.valueOf((byte) 0);
public static final Byte BYTE_ONE = Byte.valueOf((byte) 1);
public static final Byte BYTE_MINUS_ONE = Byte.valueOf((byte) -1);
public static final Double DOUBLE_ZERO = Double.valueOf(0.0d);
public static final Double DOUBLE_ONE = Double.valueOf(1.0d);
public static final Double DOUBLE_MINUS_ONE = Double.valueOf(-1.0d);
public static final Float FLOAT_ZERO = Float.valueOf(0.0f);
public static final Float FLOAT_ONE = Float.valueOf(1.0f);
