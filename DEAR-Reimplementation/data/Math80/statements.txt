i0 = 1 + i / 4;
break;
work[i + 2] = -0.0;
d = work[i];
work[i] = -0.0;
work[j] = d;
work[j + 2] = 0.0;
d = work[i + 2];
dMin2 = Math.min(dMin2, work[l - 1]);
work[l - 1] =
work[l - 2 * pingPong] =
qMax= Math.max(qMax, Math.max(work[3 + pingPong], work[7 + pingPong]));
dMin= -0.0;
int j = 4 * n - 1;
for (int i = 0; i < j; i += 4) {
for (int k = 0; k < 4; k += step) {
final double tmp = work[i + k];
work[i + k] = work[j - k];
work[j - k] = tmp;
j -= 4;
return true;
work[j4] = 0.0;
dN1= work[j4p2 + 2];
dMin = dN1;
eMin = 0.0;
work[j4] = 0.0;
dN = work[j4p2 + 2];
dMin = dN;
eMin = 0.0;
work[j4] = work[j4p2 + 2] * (work[j4p2] / work[j4 - 2]);
dN = work[j4p2 + 2] * (dN1 / work[j4 - 2]);
work[4 * deflatedEnd - 3 - pingPong] = 0.0;
dMin = 0.0;
updateSigma(tau);
return deflatedEnd;
throws InvalidMatrixException {
this.main= main.clone();
this.secondary = secondary.clone();
transformer= null;
squaredSecondary = new double[secondary.length];
for (int i = 0; i < squaredSecondary.length; ++i) {
final double s = secondary[i];
squaredSecondary[i] = s * s;
this.splitTolerance = splitTolerance;
decompose();
}
if (eigenvectors == null) {
findEigenVectors();
return eigenvectors[i].copy();
tau *= 0.25;
