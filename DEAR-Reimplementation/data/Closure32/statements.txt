ExtractionInfo preserveInfo =
String preserve = preserveInfo.string;
if (preserve.length() > 0) {
if (fileLevelJsDocBuilder != null) {
fileLevelJsDocBuilder.append(preserve);
token = preserveInfo.token;
continue retry;
builder.append("\n");
return stream.getString();
if (builder.length() > 0) {
builder.append(' ');
builder.append(toString(token));
line = stream.getRemainingJSDocLine();
if (option != WhitespaceOption.PRESERVE) {
builder.append(line);
token = next();
} while (true);
switch (token) {
jsdocBuilder.markText(multilineText, startLineno, startCharno,
if (option != WhitespaceOption.SINGLE_LINE) {
ignoreStar = true;
token = next();
continue;
if (token == JsDocToken.EOC || token == JsDocToken.EOL ||
stream.update();
int startLineno = stream.getLineno();
int startCharno = stream.getCharno() + 1;
String line = stream.getRemainingJSDocLine();
if (option != WhitespaceOption.PRESERVE) {
StringBuilder builder = new StringBuilder();
builder.append(line);
state = State.SEARCHING_ANNOTATION;
token = next();
boolean ignoreStar = false;
switch (token) {
ignoreStar = false;
state = State.SEARCHING_ANNOTATION;
if (token == JsDocToken.EOC ||
String multilineText = builder.toString();
if (option != WhitespaceOption.PRESERVE) {
int endLineno = stream.getLineno();
int endCharno = stream.getCharno();
if (multilineText.length() > 0) {
return new ExtractionInfo(multilineText, token);
this.fileLevelJsDocBuilder = fileLevelJsDocBuilder;
}
next();
if (ignoreStar) {
token = next();
continue;
