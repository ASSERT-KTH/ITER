headers.remove(keyword);
paxHeaders();
final Map<String, String> headers = parsePaxHeaders(this);
if (isDirectory()) {
if (entrySize - entryOffset > Integer.MAX_VALUE) {
return (int) (entrySize - entryOffset);
if (currEntry == null) {
numToRead = Math.min(numToRead, available());
totalRead = is.read(buf, offset, numToRead);
if (totalRead == -1) {
count(totalRead);
entryOffset += totalRead;
return totalRead;
final Map<String, String> headers = new HashMap<String, String>(globalPaxHeaders);
int len = 0;
int read = 0;
while((ch = i.read()) != -1) {
read++;
if (ch == ' '){
final ByteArrayOutputStream coll = new ByteArrayOutputStream();
while((ch = i.read()) != -1) {
read++;
if (ch == '='){ // end of keyword
final String keyword = coll.toString(CharsetNames.UTF_8);
final int restLen = len - read;
if (restLen == 1) { // only NL
final byte[] rest = new byte[restLen];
final int got = IOUtils.readFully(i, rest);
if (got != restLen) {
final String value = new String(rest, 0,
headers.put(keyword, value);
break;
coll.write((byte) ch);
len *= 10;
len += ch - '0';
if (ch == -1){ // EOF
}
return currEntry != null && currEntry.isDirectory();
int totalRead = 0;
if (hasHitEOF || isDirectory() || entryOffset >= entrySize) {
if (hasHitEOF) {
if (currEntry != null) {
final byte[] headerBuf = getRecord();
if (headerBuf == null) {
currEntry = new TarArchiveEntry(headerBuf, zipEncoding);
}
entryOffset = 0;
entrySize = currEntry.getSize();
if (currEntry.isGNULongLinkEntry()) {
if (currEntry.isGNULongNameEntry()) {
