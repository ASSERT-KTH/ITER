final int dim = getDimension();
if (vals.length != dim) {
return FastMath.pow(2 * FastMath.PI, -dim / 2) *
final double[] centered = new double[values.length];
for (int i = 0; i < centered.length; i++) {
centered[i] = values[i] - getMeans()[i];
final double[] preMultiplied = covarianceMatrixInverse.preMultiply(centered);
double sum = 0;
for (int i = 0; i < preMultiplied.length; i++) {
sum += preMultiplied[i] * centered[i];
return FastMath.exp(-0.5 * sum);
return MathArrays.copyOf(means);
this(new Well19937c(), means, covariances);
}
super(rng, means.length);
final int dim = means.length;
if (covariances.length != dim) {
for (int i = 0; i < dim; i++) {
if (dim != covariances[i].length) {
this.means = MathArrays.copyOf(means);
covarianceMatrix = new Array2DRowRealMatrix(covariances);
final EigenDecomposition covMatDec = new EigenDecomposition(covarianceMatrix);
covarianceMatrixInverse = covMatDec.getSolver().getInverse();
covarianceMatrixDeterminant = covMatDec.getDeterminant();
final double[] covMatEigenvalues = covMatDec.getRealEigenvalues();
for (int i = 0; i < covMatEigenvalues.length; i++) {
if (covMatEigenvalues[i] < 0) {
final Array2DRowRealMatrix covMatEigenvectors = new Array2DRowRealMatrix(dim, dim);
for (int v = 0; v < dim; v++) {
final double[] evec = covMatDec.getEigenvector(v).toArray();
covMatEigenvectors.setColumn(v, evec);
final RealMatrix tmpMatrix = covMatEigenvectors.transpose();
for (int row = 0; row < dim; row++) {
final double factor = FastMath.sqrt(covMatEigenvalues[row]);
for (int col = 0; col < dim; col++) {
tmpMatrix.multiplyEntry(row, col, factor);
samplingMatrix = covMatEigenvectors.multiply(tmpMatrix);
}
throw new DimensionMismatchException(covariances.length, dim);
throw new DimensionMismatchException(covariances[i].length, dim);
throw new NonPositiveDefiniteMatrixException(covMatEigenvalues[i], i, 0);
return covarianceMatrix.copy();
throw new DimensionMismatchException(vals.length, dim);
final int dim = getDimension();
final double[] std = new double[dim];
final double[][] s = covarianceMatrix.getData();
for (int i = 0; i < dim; i++) {
std[i] = FastMath.sqrt(s[i][i]);
return std;
final int dim = getDimension();
