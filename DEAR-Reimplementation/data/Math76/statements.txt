--p;
if (cachedS == null) {
cachedS = MatrixUtils.createRealDiagonalMatrix(singularValues);
return cachedS;
if (cachedVt == null) {
cachedVt = getV().transpose();
return cachedVt;
wData[i] = new double[p];
this(matrix, Math.min(matrix.getRowDimension(), matrix.getColumnDimension()));
}
if (cachedU == null) {
final int p = singularValues.length;
if (m >= n) {
final RealMatrix e =
final double[][] eData = e.getData();
final double[][] wData = new double[m][p];
double[] ei1 = eData[0];
for (int i = 0; i < p - 1; ++i) {
for (int j = 0; j < p; ++j) {
wData[p - 1][j] = ei1[j] * mainBidiagonal[p - 1] / singularValues[j];
for (int i = p; i < m; ++i) {
cachedU =
} else {
return cachedU;
if (cachedV == null) {
final int p = singularValues.length;
if (m >= n) {
final RealMatrix e =
cachedV = transformer.getV().multiply(e);
} else {
return cachedV;
throws InvalidMatrixException {
m = matrix.getRowDimension();
n = matrix.getColumnDimension();
cachedU= null;
cachedS= null;
cachedV= null;
cachedVt = null;
transformer = new BiDiagonalTransformer(matrix);
mainBidiagonal= transformer.getMainDiagonalRef();
secondaryBidiagonal = transformer.getSecondaryDiagonalRef();
mainTridiagonal= new double[mainBidiagonal.length];
secondaryTridiagonal = new double[mainBidiagonal.length - 1];
double a = mainBidiagonal[0];
mainTridiagonal[0] = a * a;
for (int i = 1; i < mainBidiagonal.length; ++i) {
final double b= secondaryBidiagonal[i - 1];
secondaryTridiagonal[i - 1] = a * b;
a = mainBidiagonal[i];
mainTridiagonal[i] = a * a + b * b;
