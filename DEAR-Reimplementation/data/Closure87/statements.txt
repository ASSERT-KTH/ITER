return n;
n.removeChild(cond);
Node and = new Node(Token.AND, cond, expr.removeFirstChild())
Node newExpr = NodeUtil.newExpr(and);
parent.replaceChild(n, newExpr);
reportCodeChange();
return newExpr;
Node expr = getBlockExpression(thenBranch);
if (isPropertyAssignmentInExpression(expr)) {
if (cond.getType() == Token.NOT) {
if (isLowerPrecedenceInExpression(cond, AND_PRECEDENCE) ||
Predicate<Node> isLowerPrecedencePredicate = new Predicate<Node>() {
return NodeUtil.has(n, isLowerPrecedencePredicate,
Predicate<Node> isPropertyAssignmentInExpressionPredicate =
return NodeUtil.has(n, isPropertyAssignmentInExpressionPredicate,
parent.replaceChild(n, newNode);
reportCodeChange();
return newNode;
return n;
boolean result = nVal.toBoolean(true);
int equivalentResult = result ? 1 : 0;
return maybeReplaceChildWithNumber(n, parent, equivalentResult);
Node newNode = Node.newNumber(num);
if (!newNode.isEquivalentTo(n)) {
return n;
Preconditions.checkState(isFoldableExpressBlock(n));
return n.getFirstChild();
Node left = n.getFirstChild();
Node right = n.getLastChild();
left = tryMinimizeCondition(left);
right = tryMinimizeCondition(right);
TernaryValue rightVal = NodeUtil.getBooleanValue(right);
if (NodeUtil.getBooleanValue(right) != TernaryValue.UNKNOWN) {
if (isFoldableExpressBlock(thenBranch)) {
Node maybeExpr = n.getFirstChild();
return NodeUtil.isExpressionNode(maybeExpr);
tryMinimizeCondition(node.getFirstChild());
return tryMinimizeIf(node);
Node parent = n.getParent();
Node cond = n.getFirstChild();
if (NodeUtil.isLiteralValue(cond, true)) {
Node thenBranch = cond.getNext();
Node elseBranch = thenBranch.getNext();
if (elseBranch == null) {
if (n.getType() == Token.BLOCK) {
if (n.hasOneChild()) {
return n;
tryMinimizeCondition(node.getFirstChild());
return node;
return tryFoldLiteralConstructor(node);
