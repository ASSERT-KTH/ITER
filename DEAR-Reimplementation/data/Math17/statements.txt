if (isNaN()) {
return this;
if (x.isNaN()) {
return x;
if (nans == INFINITE && x.nans == FINITE && x.mant[mant.length-1] != 0) {
result = newInstance(this);
result.sign = (byte) (sign * x.sign);
return result;
if (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] != 0) {
result = newInstance(x);
result.sign = (byte) (sign * x.sign);
return result;
if (x.nans == INFINITE && nans == INFINITE) {
result = newInstance(this);
result.sign = (byte) (sign * x.sign);
return result;
if ( (x.nans == INFINITE && nans == FINITE && mant[mant.length-1] == 0) ||
field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
result = newInstance(getZero());
result.nans = QNAN;
result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, x, result);
return result;
if (isNaN()) {
return this;
if (nans == INFINITE && x != 0) {
result = newInstance(this);
return result;
if (nans == INFINITE && x == 0) {
field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
result = newInstance(getZero());
result.nans = QNAN;
result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, newInstance(getZero()), result);
return result;
field.setIEEEFlagsBits(DfpField.FLAG_INVALID);
result = newInstance(getZero());
result.nans = QNAN;
result = dotrap(DfpField.FLAG_INVALID, MULTIPLY_TRAP, result, result);
return result;
lostdigit = result.mant[0];
result.shiftRight();
result.mant[mant.length-1] = rh;
result.exp = 0;
result = dotrap(excp, MULTIPLY_TRAP, result, result);
return multiplyFast(x);
Dfp result = newInstance(this);
if (nans != FINITE) {
if (x < 0 || x >= RADIX) {
int rh = 0;
for (int i = 0; i < mant.length; i++) {
final int r = mant[i] * x + rh;
