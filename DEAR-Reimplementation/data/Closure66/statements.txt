int total = nullCount + unknownCount + typedCount;
if (total == 0) {
return (100.0 * typedCount) / total;
ensureTyped(t, assign, rightType);
JSType leftType = getJSType(lvalue);
Node rightChild = assign.getLastChild();
JSType rightType = getJSType(rightChild);
if (validator.expectCanAssignTo(
}
JSType rvalueType = getJSType(assign.getLastChild());
Var var = t.getScope().getVar(lvalue.getString());
if (var != null) {
} else if (lvalue.getType() == Token.NAME) {
nullCount++;
ensureTyped(t, key, rightType);
String property = NodeUtil.getObjectLitKeyName(key);
if (type.hasProperty(property) &&
return;
visitObjLitKey(t, key, n);
Node rvalue = key.getFirstChild();
JSType rightType = NodeUtil.getObjectLitKeyTypeFromValueType(
if (rightType == null) {
Node owner = objlit;
JSType keyType = getJSType(key);
boolean valid = validator.expectCanAssignToPropertyOf(t, key,
if (valid) {
JSType objlitType = getJSType(objlit);
ObjectType type = ObjectType.cast(
if (type != null) {
return getNativeType(UNKNOWN_TYPE);
for (Node key : n.children()) {
}
n.setJSType(type);
validator.expectCanAssignToPropertyOf(
ensureTyped(t, n);
if (n.getJSType() != null) { // If we didn't run type inference.
if (n.getType() == Token.OBJECTLIT) {
ensureTyped(t, n, NUMBER_TYPE);
break;
visitAssign(t, n);
typeable = false;
break;
JSDocInfo info = assign.getJSDocInfo();
Node lvalue = assign.getFirstChild();
Node rvalue = assign.getLastChild();
if (lvalue.getType() == Token.GETPROP) {
return false;
for (; type != null; type = type.getImplicitPrototype()) {
JSDocInfo docInfo = type.getOwnPropertyJSDocInfo(prop);
if (docInfo != null && docInfo.isImplicitCast()) {
