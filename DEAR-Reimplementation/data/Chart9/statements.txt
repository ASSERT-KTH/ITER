throw new IllegalArgumentException("Requires start <= end.");
if (start == null) {
if (end == null) {
if (start.compareTo(end) > 0) {
boolean emptyRange = false;
int startIndex = getIndex(start);
if (startIndex < 0) {
startIndex = -(startIndex + 1);
if (startIndex == this.data.size()) {
int endIndex = getIndex(end);
if (endIndex < 0) { // end period is not in original series
endIndex = -(endIndex + 1); // this is first item AFTER end period
endIndex = endIndex - 1;// so this is last item BEFORE end
if (endIndex < 0) {
if (emptyRange) {
return createCopy(startIndex, endIndex);
if (start < 0) {
if (end < start) {
this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION,
}
if (period == null) {
TimeSeriesDataItem dummy = new TimeSeriesDataItem(
return Collections.binarySearch(this.data, dummy);
add(period, value, true);
}
TimeSeriesDataItem item = new TimeSeriesDataItem(period, value);
add(item, notify);
}
this(name, DEFAULT_DOMAIN_DESCRIPTION, DEFAULT_RANGE_DESCRIPTION,
}
super(name);
this.domain = domain;
this.range = range;
this.timePeriodClass = timePeriodClass;
this.data = new java.util.ArrayList();
this.maximumItemCount = Integer.MAX_VALUE;
this.maximumItemAge = Long.MAX_VALUE;
}
return this.data.size();
return (TimeSeriesDataItem) this.data.get(index);
return getDataItem(index).getPeriod();
if (item == null) {
if (!item.getPeriod().getClass().equals(this.timePeriodClass)) {
boolean added = false;
int count = getItemCount();
if (count == 0) {
this.data.add(item);
added = true;
RegularTimePeriod last = getTimePeriod(getItemCount() - 1);
if (item.getPeriod().compareTo(last) > 0) {
