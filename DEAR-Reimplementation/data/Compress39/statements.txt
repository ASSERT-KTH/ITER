final char[] chars = s.toCharArray();
final int len = chars.length;
final StringBuilder sb = new StringBuilder();
for (int i = 0; i < len; i++) {
final char c = chars[i];
if (!Character.isISOControl(c)) {
Character.UnicodeBlock block = Character.UnicodeBlock.of(c);
if (block != null && block != Character.UnicodeBlock.SPECIALS) {
sb.append(c);
continue;
return sb.toString();
private ArchiveUtils(){
}
final StringBuilder sb = new StringBuilder();
sb.append(entry.isDirectory()? 'd' : '-');// c.f. "ls -l" output
final String size = Long.toString(entry.getSize());
sb.append(' ');
for(int i=7; i > size.length(); i--){
sb.append(' ');
sb.append(size);
sb.append(' ').append(entry.getName());
return sb.toString();
buffer1 = expected.getBytes(CharsetNames.US_ASCII);
}
} catch (final UnsupportedEncodingException e) {
throw new RuntimeException(e); // Should not happen
return isEqual(buffer1, 0, buffer1.length, buffer, offset, length, false);
return matchAsciiBuffer(expected, buffer, 0, buffer.length);
return inputString.getBytes(CharsetNames.US_ASCII);
} catch (final UnsupportedEncodingException e) {
throw new RuntimeException(e); // Should never happen
return new String(inputBytes, CharsetNames.US_ASCII);
} catch (final UnsupportedEncodingException e) {
throw new RuntimeException(e); // Should never happen
return new String(inputBytes, offset, length, CharsetNames.US_ASCII);
} catch (final UnsupportedEncodingException e) {
throw new RuntimeException(e); // Should never happen
final int minLen=length1 < length2 ? length1 : length2;
for (int i=0; i < minLen; i++){
if (buffer1[offset1+i] != buffer2[offset2+i]){
return false;
if (length1 == length2){
return true;
if (ignoreTrailingNulls){
if (length1 > length2){
for(int i = length2; i < length1; i++){
if (buffer1[offset1+i] != 0){
return false;
for(int i = length1; i < length2; i++){
if (buffer2[offset2+i] != 0){
