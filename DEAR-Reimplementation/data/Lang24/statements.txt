throw new NumberFormatException("A blank string is not a valid number");
return null;
throw new NumberFormatException(str + " is not a valid number.");
mant = str.substring(0, expPos);
throw new NumberFormatException(str + " is not a valid number.");
} catch (NumberFormatException nfe) {
} catch (NumberFormatException nfe) {
} catch (NumberFormatException e) {
throw new NumberFormatException(str + " is not a valid number.");
} catch (NumberFormatException nfe) {
} catch (NumberFormatException nfe) {
return createBigDecimal(str);
return str.length() > 0;
if (StringUtils.isEmpty(str)) {
return false;
char[] chars = str.toCharArray();
int sz = chars.length;
boolean hasExp = false;
boolean hasDecPoint = false;
boolean allowSigns = false;
boolean foundDigit = false;
int start = (chars[0] == '-') ? 1 : 0;
if (sz > start + 1) {
if (chars[start] == '0' && chars[start + 1] == 'x') {
int i = start + 2;
if (i == sz) {
for (; i < chars.length; i++) {
if ((chars[i] < '0' || chars[i] > '9')
return false;
return true;
sz--; // don't want to loop to the last char, check it afterwords
int i = start;
while (i < sz || (i < sz + 1 && allowSigns && !foundDigit)) {
if (chars[i] >= '0' && chars[i] <= '9') {
foundDigit = true;
allowSigns = false;
} else if (chars[i] == '.') {
if (hasDecPoint || hasExp) {
return false;
hasDecPoint = true;
} else if (chars[i] == 'e' || chars[i] == 'E') {
if (hasExp) {
if (!foundDigit) {
hasExp = true;
allowSigns = true;
} else if (chars[i] == '+' || chars[i] == '-') {
if (!allowSigns) {
return false;
allowSigns = false;
foundDigit = false; // we need a digit after the E
