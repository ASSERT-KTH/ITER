double[] tmp1 = new double[getSize()];
multiply(x, xOffset, x, xOffset, tmp1, 0);// x^2
double[] tmp2 = new double[getSize()];
multiply(y, yOffset, y, yOffset, tmp2, 0);// y^2
add(tmp1, 0, tmp2, 0, tmp2, 0); // x^2 + y^2
rootN(tmp2, 0, 2, tmp1, 0); // r = sqrt(x^2 + y^2)
if (x[xOffset] >= 0) {
add(tmp1, 0, x, xOffset, tmp2, 0);// r + x
divide(y, yOffset, tmp2, 0, tmp1, 0); // y /(r + x)
atan(tmp1, 0, tmp2, 0); // atan(y / (r + x))
for (int i = 0; i < tmp2.length; ++i) {
result[resultOffset + i] = 2 * tmp2[i]; // 2 * atan(y / (r + x))
}
double[] function = new double[1 + order];
final double x = operand[operandOffset];
function[0] = FastMath.atan(x);
if (order > 0) {
final double[] q = new double[order];
q[0] = 1;
final double x2= x * x;
final double f = 1.0 / (1 + x2);
double coeff = f;
function[1] = coeff * q[0];
for (int n = 2; n <= order; ++n) {
double v = 0;
q[n - 1] = -n * q[n - 2];
for (int k = n - 1; k >= 0; k -= 2) {
v = v * x2 + q[k];
if (k > 2) {
} else if (k == 2) {
if ((n & 0x1) == 0) {
v *= x;
coeff *= f;
function[n] = coeff * v;
compose(operand, operandOffset, function, result, resultOffset);
}
final double[] reciprocal = new double[getSize()];
pow(rhs, lhsOffset, -1, reciprocal, 0);
multiply(lhs, lhsOffset, reciprocal, 0, result, resultOffset);
}
function[0] = FastMath.sqrt(operand[operandOffset]);
xk= 0.5 / function[0];
final double inv = 1.0 / operand[operandOffset];
double xk = FastMath.pow(inv, -n);
for (int i = 0; i <= order; ++i) {
function[i] = xk;
xk *= inv;
double[] function = new double[1 + order];
if (n == 2) {
final double nReciprocal = 1.0 / n;
