for (int j = 0; j < solvedCols; ++j) {
int pj = permutation[j];
work1[pj] *= diag[pj] / dxNorm;
sum2 = 0;
for (int j = 0; j < solvedCols; ++j) {
int pj = permutation[j];
double sum = 0;
for (int i = 0; i < j; ++i) {
sum += jacobian[i][pj] * work1[permutation[i]];
double s = (work1[pj] - sum) / diagR[pj];
work1[pj] = s;
sum2 += s * s;
parl = fp / (delta * sum2);
tmp = 0.1;
cost = previousCost;
for (int j = 0; j < solvedCols; ++j) {
int pj = permutation[j];
point[pj] = oldX[pj];
tmpVec= residuals;
residuals = oldRes;
oldRes= tmpVec;
double parl = 0;
if (rank == solvedCols) {
sum2 = 0;
for (int j = 0; j < solvedCols; ++j) {
int pj = permutation[j];
double sum = 0;
for (int i = 0; i <= j; ++i) {
sum += jacobian[i][pj] * qy[i];
sum /= diag[pj];
sum2 += sum * sum;
double gNorm = Math.sqrt(sum2);
double paru = gNorm / delta;
if (paru == 0) {
lmPar = Math.min(paru, Math.max(lmPar, parl));
if (lmPar == 0) {
for (int countdown = 10; countdown >= 0; --countdown) {
if (lmPar == 0) {
double sPar = Math.sqrt(lmPar);
for (int j = 0; j < solvedCols; ++j) {
int pj = permutation[j];
work1[pj] = sPar * diag[pj];
determineLMDirection(qy, work1, work2, work3);
dxNorm = 0;
for (int j = 0; j < solvedCols; ++j) {
int pj = permutation[j];
double s = diag[pj] * lmDir[pj];
work3[pj] = s;
dxNorm += s * s;
dxNorm = Math.sqrt(dxNorm);
