CheckLevel requiresLevel) {
private final Map<String, ProvidedName> providedNames =
private final List<UnrecognizedRequire> unrecognizedRequires =
private final Set<String> exportedVariables = Sets.newHashSet();
private final List<Node> defineCalls = Lists.newArrayList();
this.compiler = compiler;
this.preprocessorSymbolTable = preprocessorSymbolTable;
this.moduleGraph = compiler.getModuleGraph();
this.requiresLevel = requiresLevel;
providedNames.put(GOOG,
}
static final DiagnosticType NULL_ARGUMENT_ERROR = DiagnosticType.error(
static final DiagnosticType EXPECTED_OBJECTLIT_ERROR = DiagnosticType.error(
static final DiagnosticType EXPECTED_STRING_ERROR = DiagnosticType.error(
static final DiagnosticType INVALID_ARGUMENT_ERROR = DiagnosticType.error(
static final DiagnosticType INVALID_STYLE_ERROR = DiagnosticType.error(
static final DiagnosticType TOO_MANY_ARGUMENTS_ERROR = DiagnosticType.error(
static final DiagnosticType DUPLICATE_NAMESPACE_ERROR = DiagnosticType.error(
static final DiagnosticType FUNCTION_NAMESPACE_ERROR = DiagnosticType.error(
static final DiagnosticType MISSING_PROVIDE_ERROR = DiagnosticType.error(
static final DiagnosticType LATE_PROVIDE_ERROR = DiagnosticType.error(
static final DiagnosticType INVALID_PROVIDE_ERROR = DiagnosticType.error(
static final DiagnosticType INVALID_DEFINE_NAME_ERROR = DiagnosticType.error(
static final DiagnosticType MISSING_DEFINE_ANNOTATION = DiagnosticType.error(
static final DiagnosticType XMODULE_REQUIRE_ERROR = DiagnosticType.warning(
static final DiagnosticType NON_STRING_PASSED_TO_SET_CSS_NAME_MAPPING_ERROR =
static final DiagnosticType INVALID_CSS_RENAMING_MAP = DiagnosticType.warning(
static final DiagnosticType BASE_CLASS_ERROR = DiagnosticType.error(
new NodeTraversal(compiler, this).traverse(root);
for (Node n : defineCalls) {
for (ProvidedName pn : providedNames.values()) {
pn.replace();
}
if (requiresLevel.isOn()) {
for (UnrecognizedRequire r : unrecognizedRequires) {
ProvidedName expectedName = providedNames.get(r.namespace);
if (expectedName != null && expectedName.firstNode != null) {
error = MISSING_PROVIDE_ERROR;
compiler.report(JSError.make(
}
}
switch (n.getType()) {
boolean isExpr = parent.isExprResult();
Node left = n.getFirstChild();
if (left.isGetProp()) {
Node name = left.getFirstChild();
if (name.isName() &&
String methodName = name.getNext().getString();
if ("base".equals(methodName)) {
} else if (!isExpr) {
