return n;
return n;
result = lhType != rhType;
break;
return n;
return !equivalent;
double numValue = left.getDouble();
if (numValue == 0 || numValue == 1) {
if (!NodeUtil.isLiteralValue(left.getFirstChild(), false)) {
} else if (!rightLiteral) {
result = compareToUndefined(right, op);
break;
result = compareToUndefined(left, op);
break;
return n;// Only eval if they are the same type
result = compareToUndefined(left, op);
break;
return n;// Only eval if they are the same type
return equivalent;
if (left.getType() == Token.NUMBER) {
if (rhType != Token.TRUE &&
switch (op) {
result = lhType == rhType;
break;
break;
boolean undefinedLeft = (left.getString().equals("undefined"));
if (undefinedLeft) {
result = compareToUndefined(right, op);
break;
return tryFoldComparison(subtree, left, right);
if (!NodeUtil.isLiteralValue(left, false) ||
int op = n.getType();
boolean rightLiteral = NodeUtil.isLiteralValue(right, false);
boolean undefinedRight = ((Token.NAME == right.getType()
int lhType = left.getType();
int rhType = right.getType();
switch (lhType) {
switch (n.getType()) {
if (rightLiteral) {
return valueUndefined;
return !valueUndefined;
tryReduceOperandsForOp(subtree);
return tryFoldUnaryOperator(subtree);
Preconditions.checkState(n.hasOneChild());
Node left = n.getFirstChild();
Node parent = n.getParent();
if (left == null) {
TernaryValue leftVal = NodeUtil.getPureBooleanValue(left);
if (leftVal == TernaryValue.UNKNOWN) {
if (undefinedRight) {
