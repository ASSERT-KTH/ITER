final CSVRecord nextRecord = this.nextRecord();
if (nextRecord != null) {
header = nextRecord.values();
} else {
hdrMap = new LinkedHashMap<String, Integer>();
String[] header = null;
if (formatHeader.length == 0) {
if (header != null) {
for (int i = 0; i < header.length; i++) {
hdrMap.put(header[i], Integer.valueOf(i));
return new CSVParser(new StringReader(string), format);
Assertions.notNull(format, "format");
Assertions.notNull(string, "string");
this.addRecordValue();
break;
this.addRecordValue();
break;
final String input = this.reusableToken.content.toString();
final String nullString = this.format.getNullString();
if (nullString == null) {
this.record.add(input);
}
this.recordNumber++;
final String comment = sb == null ? null : sb.toString();
result = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,
CSVRecord result = null;
this.record.clear();
StringBuilder sb = null;
this.reusableToken.reset();
this.lexer.nextToken(this.reusableToken);
switch (this.reusableToken.type) {
} while (this.reusableToken.type == TOKEN);
if (!this.record.isEmpty()) {
return result;
format.validate();
this.format = format;
this.lexer = new Lexer(format, new ExtendedBufferedReader(reader));
this.headerMap = this.initializeHeader();
}
Map<String, Integer> hdrMap = null;
final String[] formatHeader = this.format.getHeader();
if (formatHeader != null) {
return hdrMap;
Assertions.notNull(format, "format");
public CSVParser(final Reader reader, final CSVFormat format) throws IOException {
private final List<String> record = new ArrayList<String>();
private final Token reusableToken = new Token();
Assertions.notNull(reader, "reader");
Assertions.notNull(file, "file");
Assertions.notNull(format, "format");
