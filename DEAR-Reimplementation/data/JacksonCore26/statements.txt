super(ctxt, parserFeatures, sym);
protected byte[] _inputBuffer = NO_BYTES;
}
private final static int FEAT_MASK_TRAILING_COMMA = Feature.ALLOW_TRAILING_COMMA.getMask();
private final static int FEAT_MASK_LEADING_ZEROS = Feature.ALLOW_NUMERIC_LEADING_ZEROS.getMask();
private final static int FEAT_MASK_ALLOW_MISSING = Feature.ALLOW_MISSING_VALUES.getMask();
private final static int FEAT_MASK_ALLOW_SINGLE_QUOTES = Feature.ALLOW_SINGLE_QUOTES.getMask();
private final static int FEAT_MASK_ALLOW_UNQUOTED_NAMES = Feature.ALLOW_UNQUOTED_FIELD_NAMES.getMask();
private final static int FEAT_MASK_ALLOW_JAVA_COMMENTS = Feature.ALLOW_COMMENTS.getMask();
private final static int FEAT_MASK_ALLOW_YAML_COMMENTS = Feature.ALLOW_YAML_COMMENTS.getMask();
private final static int[] _icUTF8 = CharTypes.getInputCodeUtf8();
protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();
return this;
if (_inputPtr < _inputEnd) {
if (end < start) {
if (_endOfInput) {
_currInputProcessed += _origBufferLen;
_currInputRowStart = start - (_inputEnd - _currInputRowStart);
_inputBuffer = buf;
_inputPtr = start;
_inputEnd = end;
_origBufferLen = end - start;
}
if (_inputPtr >= _inputEnd) {
if (_currToken == JsonToken.NOT_AVAILABLE) {
_numTypesValid = NR_UNKNOWN;
_tokenInputTotal = _currInputProcessed + _inputPtr;
_binaryValue = null;
int ch = _inputBuffer[_inputPtr++] & 0xFF;
switch (_majorState) {
return _startDocument(ch);
ch &= 0xFF;
if ((ch == 0xEF) && (_minorState != MINOR_ROOT_BOM)) {
while (ch <= 0x020) {
return _startValue(ch);
if (ch <= 0x0020) {
_updateTokenLocation();
if (ch == INT_QUOTE) {
switch (ch) {
return _startArrayScope();
return (_inputPtr >=_inputEnd) && !_endOfInput;
_reportError("Still have %d undecoded bytes, should not call 'feedInput'", _inputEnd - _inputPtr);
_reportError("Input end (%d) may not be before start (%d)", end, start);
_reportError("Already closed, can not feed more input");
_endOfInput = true;
}
int avail = _inputEnd - _inputPtr;
if (avail > 0) {
out.write(_inputBuffer, _inputPtr, avail);
return avail;
