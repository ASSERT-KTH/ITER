continue;
msg = "Is there a missing '+' on the previous line?";
return;
Node gramps = parent.getParent();
if (gramps.isCall() && parent == gramps.getFirstChild()) {
if (n == parent.getLastChild()) {
for (Node an : parent.getAncestors()) {
int ancestorType = an.getType();
if (ancestorType == Token.COMMA)
if (ancestorType != Token.EXPR_RESULT && ancestorType != Token.BLOCK)
return;
msg = "The result of the '" + Token.name(n.getType()).toLowerCase() +
boolean protectSideEffectFreeCode) {
private final List<Node> problemNodes = Lists.newArrayList();
this.compiler = compiler;
this.level = level;
this.protectSideEffectFreeCode = protectSideEffectFreeCode;
}
static final DiagnosticType USELESS_CODE_ERROR = DiagnosticType.warning(
NodeTraversal.traverse(compiler, root, this);
if (protectSideEffectFreeCode) {
protectSideEffects();
}
if (n.isEmpty() ||
if (parent == null) {
return;
if (parent.getType() == Token.COMMA) {
} else if (parent.getType() != Token.EXPR_RESULT && parent.getType() != Token.BLOCK) {
if (parent.getType() == Token.FOR && parent.getChildCount() == 4 && (n == parent.getFirstChild() ||
return;
boolean isResultUsed = NodeUtil.isExpressionResultUsed(n);
boolean isSimpleOp = NodeUtil.isSimpleOperatorType(n.getType());
if (!isResultUsed &&
if (n.isQualifiedName() && n.getJSDocInfo() != null) {
} else if (n.isExprResult()) {
String msg = "This code lacks side-effects. Is there a bug?";
if (n.isString()) {
} else if (isSimpleOp) {
t.getCompiler().report(
if (!NodeUtil.isStatement(n)) {
problemNodes.add(n);
}
if (!problemNodes.isEmpty()) {
addExtern();
for (Node n : problemNodes) {
Node name = IR.name(PROTECTOR_FN).srcref(n);
name.putBooleanProp(Node.IS_CONSTANT_NAME, true);
Node replacement = IR.call(name).srcref(n);
replacement.putBooleanProp(Node.FREE_CALL, true);
n.getParent().replaceChild(n, replacement);
