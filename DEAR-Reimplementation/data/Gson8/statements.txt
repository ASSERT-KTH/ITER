public abstract class UnsafeAllocator {
Class<?> unsafeClass = Class.forName("sun.misc.Unsafe");
Field f = unsafeClass.getDeclaredField("theUnsafe");
f.setAccessible(true);
final Object unsafe = f.get(null);
final Method allocateInstance = unsafeClass.getMethod("allocateInstance", Class.class);
return new UnsafeAllocator() {
} catch (Exception ignored) {
Method getConstructorId = ObjectStreamClass.class
getConstructorId.setAccessible(true);
final int constructorId = (Integer) getConstructorId.invoke(null, Object.class);
final Method newInstance = ObjectStreamClass.class
newInstance.setAccessible(true);
return new UnsafeAllocator() {
} catch (Exception ignored) {
final Method newInstance = ObjectInputStream.class
newInstance.setAccessible(true);
return new UnsafeAllocator() {
} catch (Exception ignored) {
return new UnsafeAllocator() {
