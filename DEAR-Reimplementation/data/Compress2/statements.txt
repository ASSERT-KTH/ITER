return null;
public ArArchiveInputStream( final InputStream pInput ) {
private long offset = 0;
input = pInput;
closed = false;
}
if (offset == 0) {
final byte[] expected = ArArchiveEntry.HEADER.getBytes();
final byte[] realized = new byte[expected.length];
final int read = read(realized);
if (read != expected.length) {
for (int i = 0; i < expected.length; i++) {
if (expected[i] != realized[i]) {
if (input.available() == 0) {
if (offset % 2 != 0) {
final byte[] name = new byte[16];
final byte[] lastmodified = new byte[12];
final byte[] userid = new byte[6];
final byte[] groupid = new byte[6];
final byte[] filemode = new byte[8];
final byte[] length = new byte[10];
read(name);
read(lastmodified);
read(userid);
read(groupid);
read(filemode);
read(length);
final byte[] expected = ArArchiveEntry.TRAILER.getBytes();
final byte[] realized = new byte[expected.length];
final int read = read(realized);
if (read != expected.length) {
for (int i = 0; i < expected.length; i++) {
if (expected[i] != realized[i]) {
return new ArArchiveEntry(new String(name).trim(),
return getNextArEntry();
if (!closed) {
closed = true;
input.close();
}
return read(b, 0, b.length);
int toRead = len;
final int ret = this.input.read(b, off, toRead);
offset += (ret > 0 ? ret : 0);
return ret;
if (length < 8) {
if (signature[0] != 0x21) {
if (signature[1] != 0x3c) {
if (signature[2] != 0x61) {
if (signature[3] != 0x72) {
if (signature[4] != 0x63) {
