return multiply(100).doubleValue();
return new Fraction(numerator * i, denominator);
return (double)numerator / (double)denominator;
public Fraction(int num, int den) {
if (den == 0) {
if (den < 0) {
final int d = ArithmeticUtils.gcd(num, den);
if (d > 1) {
num /= d;
den /= d;
if (den < 0) {
this.numerator = num;
this.denominator = den;
}
public static final Fraction TWO = new Fraction(2, 1);
public static final Fraction ONE = new Fraction(1, 1);
public static final Fraction ZERO = new Fraction(0, 1);
public static final Fraction FOUR_FIFTHS = new Fraction(4, 5);
public static final Fraction ONE_FIFTH = new Fraction(1, 5);
public static final Fraction ONE_HALF = new Fraction(1, 2);
public static final Fraction ONE_QUARTER = new Fraction(1, 4);
public static final Fraction ONE_THIRD = new Fraction(1, 3);
public static final Fraction THREE_FIFTHS = new Fraction(3, 5);
public static final Fraction THREE_QUARTERS = new Fraction(3, 4);
public static final Fraction TWO_FIFTHS = new Fraction(2, 5);
public static final Fraction TWO_QUARTERS = new Fraction(2, 4);
public static final Fraction TWO_THIRDS = new Fraction(2, 3);
public static final Fraction MINUS_ONE = new Fraction(-1, 1);
this(value, 1.0e-5, 100);
}
this(value, epsilon, Integer.MAX_VALUE, maxIterations);
}
this(value, 0, maxDenominator, 100);
}
{
long overflow = Integer.MAX_VALUE;
double r0 = value;
long a0 = (long)FastMath.floor(r0);
if (a0 > overflow) {
throw new FractionConversionException(value, a0, 1l);
if (FastMath.abs(a0 - value) < epsilon) {
this.numerator = (int) a0;
this.denominator = 1;
return;
long p0 = 1;
long q0 = 0;
long p1 = a0;
long q1 = 1;
long p2 = 0;
long q2 = 1;
