return this.charset;
this(CharEncoding.UTF_8);
}
super();
this.charset = charset;
}
private static final BitSet PRINTABLE_CHARS = new BitSet(256);
for (int i = 33; i <= 60; i++) {
PRINTABLE_CHARS.set(i);
for (int i = 62; i <= 126; i++) {
PRINTABLE_CHARS.set(i);
PRINTABLE_CHARS.set(TAB);
PRINTABLE_CHARS.set(SPACE);
}
buffer.write(b);
return encode(pString, getDefaultCharset());
if (printable == null) {
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (byte c : bytes) {
int b = c;
if (b < 0) {
if (printable.get(b)) {
return buffer.toByteArray();
return encodeQuotedPrintable(PRINTABLE_CHARS, bytes);
if (pString == null) {
return StringUtils.newStringUsAscii(encode(pString.getBytes(charset)));
if (bytes == null) {
if (pString == null) {
buffer.write((char) ((u << 4) + l));
}
int u = Utils.digit16(bytes[++i]);
int l = Utils.digit16(bytes[++i]);
buffer.write(b);
buffer.write(ESCAPE_CHAR);
char hex1 = Character.toUpperCase(Character.forDigit((b >> 4) & 0xF, 16));
char hex2 = Character.toUpperCase(Character.forDigit(b & 0xF, 16));
buffer.write(hex1);
buffer.write(hex2);
}
encodeQuotedPrintable(b, buffer);
return decode(pString, getDefaultCharset());
ByteArrayOutputStream buffer = new ByteArrayOutputStream();
for (int i = 0; i < bytes.length; i++) {
final int b = bytes[i];
if (b == ESCAPE_CHAR) {
return decodeQuotedPrintable(bytes);
return new String(decode(StringUtils.getBytesUsAscii(pString)), charset);
if (pString == null) {
if (bytes == null) {
if (pString == null) {
