return c;
final int c = in.read();
switch (c) {
return c == LF || c == CR || c == UNDEFINED;
return c == escape;
return c == quoteChar;
return c == commmentStart;
Lexer(final CSVFormat format, final ExtendedBufferedReader in) {
this.format = format;
this.in = in;
this.delimiter = format.getDelimiter();
this.escape = mapNullToDisabled(format.getEscape());
this.quoteChar = mapNullToDisabled(format.getQuoteChar());
this.commmentStart = mapNullToDisabled(format.getCommentStart());
this.ignoreSurroundingSpaces = format.getIgnoreSurroundingSpaces();
this.ignoreEmptyLines = format.getIgnoreEmptyLines();
}
return c == null ? DISABLED : c.charValue();
if (c == CR && in.lookAhead() == LF) {
return c == LF || c == CR;
return c == END_OF_STREAM;
return c == delimiter;
return c;
return in.getLineNumber();
return CR;
return LF;
return TAB;
return BACKSPACE;
return FF;
throw new IOException("EOF whilst processing escape sequence");
int length = buffer.length();
while (length > 0 && Character.isWhitespace(buffer.charAt(length - 1))) {
length = length - 1;
if (length != buffer.length()) {
buffer.setLength(length);
}
c = in.read();
return c != format.getDelimiter() && Character.isWhitespace((char) c);
