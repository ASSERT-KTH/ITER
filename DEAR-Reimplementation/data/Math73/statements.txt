return solve(f, min, yMin, max, yMax, initial, yInitial);
throw MathRuntimeException.createIllegalArgumentException(
clearResult();
verifySequence(min, initial, max);
double yInitial = f.value(initial);
if (Math.abs(yInitial) <= functionValueAccuracy) {
double yMin = f.value(min);
if (Math.abs(yMin) <= functionValueAccuracy) {
if (yInitial * yMin < 0) {
double yMax = f.value(max);
if (Math.abs(yMax) <= functionValueAccuracy) {
if (yInitial * yMax < 0) {
if (Math.abs(yMin) <= functionValueAccuracy) {
} else if (Math.abs(yMax) <= functionValueAccuracy) {
delta = 0.5 * dx;
oldDelta = delta;
x1 = x1 + 0.5 * tolerance;
super(100, 1E-6);
}
double dx = x2 - x1;
double tolerance =
if (Math.abs(dx) <= tolerance) {
setResult(x1, i);
return result;
if ((Math.abs(oldDelta) < tolerance) ||
double r3 = y1 / y0;
if (x0 == x2) {
p = dx * r3;
p1 = 1.0 - r3;
if (p > 0.0) {
p1 = -p1;
if (2.0 * p >= 1.5 * dx * p1 - Math.abs(tolerance * p1) ||
x0 = x1;
y0 = y1;
if (Math.abs(delta) > tolerance) {
x1 = x1 + delta;
} else if (dx > 0.0) {
y1 = f.value(x1);
if ((y1 > 0) == (y2 > 0)) {
x2 = x0;
y2 = y0;
delta = x1 - x0;
oldDelta = delta;
i++;
}
clearResult();
verifyInterval(min, max);
double ret = Double.NaN;
double yMin = f.value(min);
double yMax = f.value(max);
