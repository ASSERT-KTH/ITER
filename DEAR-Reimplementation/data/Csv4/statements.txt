return new LinkedHashMap<String, Integer>(this.headerMap);
return new CSVParser(new StringReader(string), format);
Assertions.notNull(format, "format");
Assertions.notNull(string, "string");
format.validate();
this.format = format;
this.lexer = new Lexer(format, new ExtendedBufferedReader(reader));
this.headerMap = this.initializeHeader();
}
Map<String, Integer> hdrMap = null;
final String[] formatHeader = this.format.getHeader();
if (formatHeader != null) {
return hdrMap;
Assertions.notNull(format, "format");
public CSVParser(final Reader reader, final CSVFormat format) throws IOException {
private final List<String> record = new ArrayList<String>();
private final Token reusableToken = new Token();
Assertions.notNull(reader, "reader");
Assertions.notNull(file, "file");
Assertions.notNull(format, "format");
return new CSVParser(new FileReader(file), format);
Assertions.notNull(url, "url");
Assertions.notNull(charset, "charset");
Assertions.notNull(format, "format");
return new CSVParser(new InputStreamReader(url.openStream(),
final String input = this.reusableToken.content.toString();
final String nullString = this.format.getNullString();
if (nullString == null) {
this.record.add(input);
this.record.add(input.equalsIgnoreCase(nullString) ? null : input);
}
if (this.lexer != null) {
this.lexer.close();
}
return this.lexer.getCurrentLineNumber();
return this.recordNumber;
final List<CSVRecord> records = new ArrayList<CSVRecord>();
while ((rec = this.nextRecord()) != null) {
records.add(rec);
return records;
hdrMap = new LinkedHashMap<String, Integer>();
String[] header = null;
if (formatHeader.length == 0) {
final CSVRecord record = this.nextRecord();
if (record != null) {
header = record.values();
} else {
if (this.format.getSkipHeaderRecord()) {
this.nextRecord();
header = formatHeader;
