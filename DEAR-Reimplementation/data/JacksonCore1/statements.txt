return new BigDecimal(numStr);
_inputBuffer = null;
_inputStart = -1;
_inputLen = 0;
_resultString = value;
_resultArray = null;
if (_hasSegments) {
_currentSize = 0;
}
final static String MIN_LONG_STR_NO_SIGN = String.valueOf(Long.MIN_VALUE).substring(1);
final static String MAX_LONG_STR = String.valueOf(Long.MAX_VALUE);
if (_resultString == null) {
return _resultString;
{
private boolean _hasSegments = false;
_allocator = allocator;
}
final static char[] NO_CHARS = new char[0];
if (_allocator == null) {
if (_currentSegment != null) {
}
resetWithEmpty();
resetWithEmpty();
char[] buf = _currentSegment;
_currentSegment = null;
_allocator.releaseCharBuffer(BufferRecycler.CharBufferType.TEXT_BUFFER, buf);
_inputStart = -1; // indicates shared buffer not used
_currentSize = 0;
_inputLen = 0;
_inputBuffer = null;
_resultString = null;
_resultArray = null;
if (_hasSegments) {
clearSegments();
}
_resultString = null;
_resultArray = null;
_inputBuffer = buf;
_inputStart = start;
_inputLen = len;
if (_hasSegments) {
clearSegments();
}
_inputBuffer = null;
_inputStart = -1; // indicates shared buffer not used
_inputLen = 0;
_resultString = null;
_resultArray = null;
if (_hasSegments) {
clearSegments();
