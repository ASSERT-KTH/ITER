throws InvalidMatrixException {
this.main= main.clone();
this.secondary = secondary.clone();
transformer= null;
squaredSecondary = new double[secondary.length];
for (int i = 0; i < squaredSecondary.length; ++i) {
final double s = secondary[i];
squaredSecondary[i] = s * s;
this.splitTolerance = splitTolerance;
decompose();
gam = dN;
a2 = 0.0;
if (work[nn - 5]>work[nn - 7]) {
b2 = work[nn - 5] / work[nn - 7];
np = nn - 9;
if(b2 == 0.0) {
b1 = b2;
if (work[i4]>work[i4 - 2]) {
return;
b2 = b2 * (work[i4] / work[i4 - 2]);
a2 = a2 + b2;
if (100 * Math.max(b2, b1) < a2 || cnst1 < a2) {
tType = -5;
double s = 0.25 * dMin;
final int np = nn - 2 * pingPong;
double b1 = work[np - 2];
double b2 = work[np - 6];
final double gam = dN2;
if (work[np - 8] > b2 || work[np - 4] > b1) {
double a2 = (work[np - 8] / b2) * (1 + work[np - 4] / b1);
if (end - start > 2) {
b2 = work[nn - 13] / work[nn - 15];
if (dMin1 == dN1 && dMin2 == dN2) {
tau = 0.25 * dMin1;
if (dMin1 == dN1) {
tType = -9;
break;
} else if ((dMin < 0.0) &&
} else if (dMin < 0.0) {
if (tType < -22) {
} else if (dMin1 > 0.0) {
tau = (tau + dMin) * (1.0 - 2.0 * MathUtils.EPSILON);
tType -= 11;
tType = -4;
double s = 0.25 * dMin;
if (dMin == dN) {
a2 = a2 + b2;
for (int i4 = np; i4 >= 4 * start + 2 + pingPong; i4 -= 4) {
a2 = cnst3 * a2;
if (a2 < cnst1) {
