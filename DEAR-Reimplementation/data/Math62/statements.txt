final RandomGenerator generator) {
this.optimizer = optimizer;
this.starts = starts;
this.generator = generator;
}
return optimize(f, goal, min, max, 0);
optima = new UnivariateRealPointValuePair[starts];
totalEvaluations = 0;
for (int i = 0; i < starts; ++i) {
final double bound1 = (i == 0) ? min : min + generator.nextDouble() * (max - min);
final double bound2 = (i == 0) ? max : min + generator.nextDouble() * (max - min);
optima[i] = optimizer.optimize(f, goal, FastMath.min(bound1, bound2), FastMath.max(bound1, bound2));
}
final int usedEvaluations = optimizer.getEvaluations();
optimizer.setMaxEvaluations(optimizer.getMaxEvaluations() - usedEvaluations);
totalEvaluations += usedEvaluations;
sortPairs(goal);
if (optima[0] == null) {
return optima[0];
Arrays.sort(optima, new Comparator<UnivariateRealPointValuePair>() {
}
optimizer.setConvergenceChecker(checker);
}
return optimizer.getConvergenceChecker();
return maxEvaluations;
return totalEvaluations;
this.maxEvaluations = maxEvaluations;
optimizer.setMaxEvaluations(maxEvaluations);
}
if (optima == null) {
throw new MathIllegalStateException(LocalizedFormats.NO_OPTIMUM_COMPUTED_YET);
return optima.clone();
} catch (FunctionEvaluationException fee) {
optima[i] = null;
} catch (ConvergenceException ce) {
optima[i] = null;
throw new ConvergenceException(LocalizedFormats.NO_CONVERGENCE_WITH_ANY_START_POINT,
