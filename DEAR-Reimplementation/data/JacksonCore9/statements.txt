if (_currToken == JsonToken.VALUE_STRING) {
if (_currToken == null || _currToken == JsonToken.VALUE_NULL || !_currToken.isScalarValue()) {
return defaultValue;
if (_currToken == JsonToken.VALUE_STRING) {
return super.getValueAsString(null);
if (_currToken == JsonToken.VALUE_STRING) {
return super.getValueAsString(null);
if (i == INT_QUOTE) { // one byte/char case or broken
return findName(q, 1);
super(ctxt, features);
protected boolean _tokenIncomplete = false;
_reader = r;
_inputBuffer = inputBuffer;
_inputPtr = start;
_inputEnd = end;
_objectCodec = codec;
_symbols = st;
_hashSeed = st.hashSeed();
_bufferRecyclable = bufferRecyclable;
}
return _getText2(t);
if (t == null) {
switch (t.id()) {
return _parsingContext.getCurrentName();
protected ParserMinimalBase(int features) { super(features); }
return _getText2(_currToken);
if (t == null) {
switch (t.id()) {
return _parsingContext.getCurrentName();
t = _parsePosNumber(i);
break;
t = _parsePosNumber(i);
break;
int ptr = _inputPtr;
int startPtr = ptr-1; // to include digit already read
final int inputLen = _inputEnd;
if (ch == INT_0) {
int intLen = 1; // already got one
if (ptr >= inputLen) {
ch = (int) _inputBuffer[ptr++];
if (ch < INT_0 || ch > INT_9) {
if (ch == INT_PERIOD || ch == INT_e || ch == INT_E) {
--ptr; // need to push back following separator
_inputPtr = ptr;
if (_parsingContext.inRoot()) {
int len = ptr-startPtr;
_textBuffer.resetWithShared(_inputBuffer, startPtr, len);
return resetInt(false, intLen);
int i = _inputBuffer[++_inputPtr];
if (i > INT_SPACE) { // nor trailing
