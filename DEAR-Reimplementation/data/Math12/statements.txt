final long high = ((long) next(26)) << 26;
final intlow= next(26);
return (high | low) * 0x1.0p-52d;
if (Double.isNaN(nextGaussian)) {
final double x = nextDouble();
final double y = nextDouble();
final double alpha = 2 * FastMath.PI * x;
final double r= FastMath.sqrt(-2 * FastMath.log(y));
random = r * FastMath.cos(alpha);
nextGaussian = r * FastMath.sin(alpha);
} else {
random = nextGaussian;
nextGaussian = Double.NaN;
return random;
public BitsStreamGenerator() {
nextGaussian = Double.NaN;
}
nextGaussian = Double.NaN;
}
return next(1) != 0;
int i = 0;
final int iEnd = bytes.length - 3;
while (i < iEnd) {
final int random = next(32);
bytes[i] = (byte) (random & 0xff);
bytes[i + 1] = (byte) ((random >>8) & 0xff);
bytes[i + 2] = (byte) ((random >> 16) & 0xff);
bytes[i + 3] = (byte) ((random >> 24) & 0xff);
i += 4;
}
int random = next(32);
while (i < bytes.length) {
bytes[i++] = (byte) (random & 0xff);
random = random >> 8;
}
return next(23) * 0x1.0p-23f;
return next(32);
if (n > 0) {
if ((n & -n) == n) {
return (int) ((n * (long) next(31)) >> 31);
bits = next(31);
val = bits % n;
} while (bits - val + (n - 1) < 0);
return val;
throw new NotStrictlyPositiveException(n);
final long high= ((long) next(32)) << 32;
final longlow= ((long) next(32)) & 0xffffffffL;
return high | low;
