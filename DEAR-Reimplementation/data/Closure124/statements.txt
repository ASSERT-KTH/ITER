if (next.isQualifiedName()) {
String nextName = next.getQualifiedName();
if (value.isQualifiedName() &&
if (!isSafeReplacement(next, assign)) {
exprParent.removeChild(expr);
expr.removeChild(assign);
parent.replaceChild(next, assign);
return true;
return false;
if (node.isName()) {
Preconditions.checkArgument(node.isGetProp());
node = node.getFirstChild();
if (node.isName()
return true;
return true;
reportCodeChange();
collapseAssign(rightValue, expr, exprParent);
return !isLValue || value.getFirstChild().isThis();
Node leftSide = next.getFirstChild();
if (leftSide.isName() ||
parent = next;
next = leftSide.getNext();
break;
return false;
class ExploitAssigns extends AbstractPeepholeOptimization {
for (Node child = subtree.getFirstChild(); child != null;) {
Node next = child.getNext();
if (NodeUtil.isExprAssign(child)) {
collapseAssign(child.getFirstChild(), child, subtree);
child = next;
}
return subtree;
Node leftValue = assign.getFirstChild();
Node rightValue = leftValue.getNext();
if (isCollapsibleValue(leftValue, true) &&
} else if (isCollapsibleValue(rightValue, false) &&
} else if (rightValue.isAssign()) {
}
switch (value.getType()) {
return NodeUtil.isImmutableValue(value);
Node assign = expr.getFirstChild();
Node parent = exprParent;
Node next = expr.getNext();
while (next != null) {
switch (next.getType()) {
parent = next;
next = next.getFirstChild();
break;
reportCodeChange();
if (next.getFirstChild().hasChildren()) {
