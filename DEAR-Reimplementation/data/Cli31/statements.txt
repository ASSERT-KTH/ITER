OptionBuilder.required = true;
return instance;
this.defaultArgName = name;
}
buff.append(option.getOpt() == null ? longOptSeparator : " ");
buff.append("<").append(option.getArgName()).append(">");
return argName;
return argName != null && argName.length() > 0;
OptionBuilder.numberOfArgs = 1;
return instance;
this.type = type;
}
this.longOpt = longOpt;
}
this.optionalArg = optionalArg;
}
this.numberOfArgs = num;
}
this.valuesep = sep;
}
{
}
private static int numberOfArgs = Option.UNINITIALIZED;
private static OptionBuilder instance = new OptionBuilder();
reset();
}
description = null;
argName = "arg";
longopt = null;
type = null;
required = false;
numberOfArgs = Option.UNINITIALIZED;
optionalArg = false;
valuesep = (char) 0;
}
Option option = null;
option = new Option(opt, description);
option.setLongOpt(longopt);
option.setRequired(required);
option.setOptionalArg(optionalArg);
option.setArgs(numberOfArgs);
option.setType(type);
option.setValueSeparator(valuesep);
option.setArgName(argName);
OptionBuilder.reset();
}
return option;
this.required = required;
}
this.argName = argName;
