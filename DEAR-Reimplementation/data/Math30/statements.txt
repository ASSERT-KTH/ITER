}
final double[] z = new double[x.length + y.length];
System.arraycopy(x, 0, z, 0, x.length);
System.arraycopy(y, 0, z, x.length, y.length);
return z;
ensureDataConformance(x, y);
final double[] z = concatenateSamples(x, y);
final double[] ranks = naturalRanking.rank(z);
double sumRankX = 0;
for (int i = 0; i < x.length; ++i) {
sumRankX += ranks[i];
final double U1 = sumRankX - (x.length * (x.length + 1)) / 2;
final double U2 = x.length * y.length - U1;
return FastMath.max(U1, U2);
final int n1n2prod = n1 * n2;
final double EU = n1n2prod / 2.0;
final double VarU = n1n2prod * (n1 + n2 + 1) / 12.0;
final double z = (Umin - EU) / FastMath.sqrt(VarU);
final NormalDistribution standardNormal = new NormalDistribution(0, 1);
return 2 * standardNormal.cumulativeProbability(z);
final double Umax = mannWhitneyU(x, y);
final double Umin = x.length * y.length - Umax;
return calculateAsymptoticPValue(Umin, x.length, y.length);
public MannWhitneyUTest() {
naturalRanking = new NaturalRanking(NaNStrategy.FIXED,
}
if (x == null ||
if (x.length == 0 ||
ensureDataConformance(x, y);
final TiesStrategy tiesStrategy) {
naturalRanking = new NaturalRanking(nanStrategy, tiesStrategy);
}
throw new NullArgumentException();
throw new NoDataException();
