throw new IllegalArgumentException("Node cannot be refined. \n" +
return typeRegistry.getNativeType(typeId);
return null;
switch (node.getType()) {
switch (node.getType()) {
JSTypeRegistry typeRegistry) {
private final Visitor<JSType> restrictUndefinedVisitor =
private final Visitor<JSType> restrictNullVisitor =
Preconditions.checkNotNull(convention);
this.convention = convention;
this.typeRegistry = typeRegistry;
firstLink = this;
nextLink = null;
}
Preconditions.checkArgument(lastLink.nextLink == null);
this.nextLink = lastLink;
lastLink.firstLink = this.firstLink;
return lastLink;
return firstLink;
return firstLink.getPreciserScopeKnowingConditionOutcome(
return nextLink != null ? nextLink.getPreciserScopeKnowingConditionOutcome(
StaticSlot<JSType> nameVar = scope.getSlot(node.getString());
if (nameVar != null) {
JSType nameVarType = nameVar.getType();
if (nameVarType == null) {
nameVarType = node.getJSType();
return nameVarType;
return null;
String qualifiedName = node.getQualifiedName();
if (qualifiedName == null) {
return null;
StaticSlot<JSType> propVar = scope.getSlot(qualifiedName);
JSType propVarType = null;
if (propVar != null) {
propVarType = propVar.getType();
if (propVarType == null) {
propVarType = node.getJSType();
if (propVarType == null) {
propVarType = getNativeType(UNKNOWN_TYPE);
return propVarType;
scope.inferSlotType(node.getString(), type);
break;
String qualifiedName = node.getQualifiedName();
Preconditions.checkNotNull(qualifiedName);
JSType origType = node.getJSType();
origType = origType == null ? getNativeType(UNKNOWN_TYPE) : origType;
scope.inferQualifiedSlot(node, qualifiedName, origType, type);
break;
}
return type == null ? null : type.visit(restrictUndefinedVisitor);
