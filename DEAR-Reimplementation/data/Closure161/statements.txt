return tryFoldArrayAccess(n, left, right);
Node parent = n.getParent();
if (right.getType() != Token.NUMBER) {
double index = right.getDouble();
int intIndex = (int) index;
if (intIndex != index) {
if (intIndex < 0) {
Node elem = left.getFirstChild();
for (int i = 0; elem != null && i < intIndex; i++) {
if (elem == null) {
error(INDEX_OUT_OF_BOUNDS_ERROR, right);
return n;
if (left.getType() == Token.ARRAYLIT) {
return tryFoldGetElem(subtree, left, right);
Preconditions.checkArgument(n.getType() == Token.GETELEM);
if (left.getType() == Token.OBJECTLIT) {
return n;
return tryFoldAssign(subtree, left, right);
Preconditions.checkArgument(n.getType() == Token.ASSIGN);
if (!right.hasChildren() ||
switch(subtree.getType()) {
class PeepholeFoldConstants extends AbstractPeepholeOptimization {
return Token.FALSE;
static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =
static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =
static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =
static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =
static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(
static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(
private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);
switch(subtree.getType()) {
tryReduceOperandsForOp(subtree);
return tryFoldBinaryOperator(subtree);
Node left = subtree.getFirstChild();
if (left == null) {
return subtree;
Node right = left.getNext();
if (right == null) {
return subtree;
switch (n.getType()) {
}
return tryFoldCtorCall(subtree);
return tryFoldTypeof(subtree);
tryReduceOperandsForOp(subtree);
return tryFoldUnaryOperator(subtree);
return tryReduceVoid(subtree);
return tryFoldGetProp(subtree, left, right);
return tryFoldInstanceof(subtree, left, right);
return tryFoldAndOr(subtree, left, right);
return tryFoldShift(subtree, left, right);
