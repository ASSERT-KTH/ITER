return false;
if (that.isAllType() || that.isNoType() || that.isUnknownType()) {
if (that.isEnumElementType()) {
if (that instanceof UnionType) {
return null;
if (that instanceof UnionType) {
switch (this.testForEquality(that)) {
return new TypePair(this, that);
if (that instanceof UnionType) {
switch (this.testForEquality(that)) {
return new TypePair(null, null);
return true;
JSType(JSTypeRegistry registry) {
private boolean resolved = false;
private JSType resolveResult = null;
this.registry = registry;
}
static final Comparator<JSType> ALPHA = new Comparator<JSType>() {
return registry.getNativeType(typeId);
return false;
return false;
return isNoType() || isNoObjectType();
return false;
return false;
if (jsType instanceof ProxyObjectType) {
return this == jsType;
return (jsType instanceof JSType) ?
return System.identityHashCode(this);
return this instanceof ObjectType ? (ObjectType) this : null;
if (thatType.isUnknownType()) {
if (thisType.isEquivalentTo(thatType)) {
if (thatType.isAllType()) {
if (thatType instanceof UnionType) {
if (thatType instanceof NamedType) {
return false;
return null;
void forgiveUnknownNames() {}
return false;
return false;
return false;
return false;
return false;
return false;
return this.isSubtype(
return this.isSubtype(
return false;
return false;
return false;
return false;
return false;
