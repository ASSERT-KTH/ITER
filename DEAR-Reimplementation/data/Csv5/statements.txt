} else if (format.isEscaping()) {
out.append(value, offset, offset + len);
public CSVPrinter(final Appendable out, final CSVFormat format) {
private boolean newRecord = true;
Assertions.notNull(out, "out");
Assertions.notNull(format, "format");
this.out = out;
this.format = format;
this.format.validate();
}
if (value == null) {
strValue = value.toString();
this.print(value, strValue, 0, strValue.length());
}
if (!newRecord) {
out.append(format.getDelimiter());
if (format.isQuoting()) {
newRecord = false;
}
final String recordSeparator = format.getRecordSeparator();
out.append(recordSeparator);
newRecord = true;
}
for (final Object value : values) {
print(value);
println();
}
if (out instanceof Closeable) {
((Closeable) out).close();
}
if (out instanceof Flushable) {
((Flushable) out).flush();
}
final String nullString = format.getNullString();
strValue = nullString == null ? Constants.EMPTY : nullString;
} else {
printAndQuote(object, value, offset, len);
printAndEscape(value, offset, len);
int start = offset;
int pos = offset;
final int end = offset + len;
final char delim = format.getDelimiter();
final char escape = format.getEscape().charValue();
while (pos < end) {
char c = value.charAt(pos);
if (c == CR || c == LF || c == delim || c == escape) {
if (pos > start) {
out.append(value, start, pos);
if (c == LF) {
c = 'n';
