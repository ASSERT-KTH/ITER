return true;
final String prefix = oldStyle
if (isDirectory() && !name.endsWith("/")){
if (prefix.length() > 0){
return FORMAT_POSIX;
if (ArchiveUtils.matchAsciiBuffer(MAGIC_POSIX, header, MAGIC_OFFSET, MAGICLEN)) {
if (ArchiveUtils.matchAsciiBuffer(MAGIC_XSTAR, header, XSTAR_MAGIC_OFFSET,
if (file != null) {
if (linkFlag == LF_DIR) {
if (getName().endsWith("/")) {
private TarArchiveEntry() {
private String name = "";
private long userId = 0;
private long groupId = 0;
private long size = 0;
private String linkName = "";
private String magic = MAGIC_POSIX;
private String version = VERSION_POSIX;
private String groupName = "";
private int devMajor = 0;
private int devMinor = 0;
String user = System.getProperty("user.name", "");
if (user.length() > MAX_NAMELEN) {
this.userName = user;
this.file = null;
}
this();
parseTarHeader(headerBuf, encoding);
}
private static final TarArchiveEntry[] EMPTY_TAR_ARCHIVE_ENTRIES = new TarArchiveEntry[0];
return name;
return size;
return linkFlag == LF_GNUTYPE_LONGLINK;
return linkFlag == LF_GNUTYPE_LONGNAME;
return linkFlag == LF_PAX_EXTENDED_HEADER_LC
return linkFlag == LF_PAX_GLOBAL_EXTENDED_HEADER;
parseTarHeader(header, encoding, false);
}
int offset = 0;
name = oldStyle ? TarUtils.parseName(header, offset, NAMELEN)
offset += NAMELEN;
mode = (int) TarUtils.parseOctalOrBinary(header, offset, MODELEN);
offset += MODELEN;
userId = (int) TarUtils.parseOctalOrBinary(header, offset, UIDLEN);
offset += UIDLEN;
groupId = (int) TarUtils.parseOctalOrBinary(header, offset, GIDLEN);
offset += GIDLEN;
size = TarUtils.parseOctalOrBinary(header, offset, SIZELEN);
offset += SIZELEN;
modTime = TarUtils.parseOctalOrBinary(header, offset, MODTIMELEN);
