Node lhs = thenOp.getFirstChild();
if (areNodesEqualForInlining(lhs, elseOp.getFirstChild()) &&
n.removeChild(cond);
Node assignName = thenOp.removeFirstChild();
Node thenExpr = thenOp.removeFirstChild();
Node elseExpr = elseOp.getLastChild();
elseOp.removeChild(elseExpr);
Node hookNode = IR.hook(cond, thenExpr, elseExpr).srcref(n);
Node assign = new Node(thenOp.getType(), assignName, hookNode)
Node expr = NodeUtil.newExpr(assign);
parent.replaceChild(n, expr);
reportCodeChange();
return expr;
if (NodeUtil.isAssignmentOp(thenOp)) {
Node thenOp = getBlockExpression(thenBranch).getFirstChild();
Node elseOp = getBlockExpression(elseBranch).getFirstChild();
if (thenOp.getType() == elseOp.getType()) {
Preconditions.checkState(isFoldableExpressBlock(n));
return n.getFirstChild();
tryRemoveRepeatedStatements(n);
if (cond.isNot() && !consumesDanglingElse(elseBranch)) {
if (isReturnExpressBlock(thenBranch) && isReturnExpressBlock(elseBranch)) {
boolean thenBranchIsExpressionBlock = isFoldableExpressBlock(thenBranch);
boolean elseBranchIsExpressionBlock = isFoldableExpressBlock(elseBranch);
if (thenBranchIsExpressionBlock && elseBranchIsExpressionBlock) {
Preconditions.checkState(n.isIf());
Node parent = n.getParent();
if (!NodeUtil.isStatementBlock(parent)) {
Node cond = n.getFirstChild();
Node trueBranch = cond.getNext();
Node falseBranch = trueBranch.getNext();
Preconditions.checkNotNull(trueBranch);
Preconditions.checkNotNull(falseBranch);
Node lastTrue = trueBranch.getLastChild();
Node lastFalse = falseBranch.getLastChild();
if (lastTrue == null || lastFalse == null
break;
}
if (n.isBlock()) {
if (n.hasOneChild()) {
Node first = n.getFirstChild();
if (first.isReturn()) {
return false;
if (maybeExpr.getFirstChild().isCall()) {
return true;
Node maybeExpr = n.getFirstChild();
if (maybeExpr.isExprResult()) {
tryMinimizeCondition(node.getFirstChild());
return tryMinimizeIf(node);
Node parent = n.getParent();
