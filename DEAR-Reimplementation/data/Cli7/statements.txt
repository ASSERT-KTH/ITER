this(
}
final ArgumentBuilder abuilder) {
private final Set options = new HashSet();
this.gbuilder = gbuilder;
this.obuilder = obuilder;
this.abuilder = abuilder;
}
if (options.size() == 1) {
gbuilder.reset();
for (final Iterator i = options.iterator(); i.hasNext();) {
gbuilder.withOption((Option)i.next());
option = gbuilder.create();
reset();
return option;
options.clear();
return this;
if (type != ' ') {
abuilder.reset();
abuilder.withValidator(validator(type));
if (required) {
abuilder.withMinimum(1);
if (type != '*') {
abuilder.withMaximum(1);
argument = abuilder.create();
argument = null;
obuilder.reset();
obuilder.withArgument(argument);
obuilder.withShortName(String.valueOf(opt));
obuilder.withRequired(required);
options.add(obuilder.create());
}
int sz = pattern.length();
char opt = ' ';
char ch = ' ';
char type = ' ';
boolean required = false;
for (int i = 0; i < sz; i++) {
ch = pattern.charAt(i);
switch (ch) {
required = true;
break;
type = ch;
break;
if (opt != ' ') {
createOption(type, required, opt);
required = false;
type = ' ';
opt = ch;
if (opt != ' ') {
