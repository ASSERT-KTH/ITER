return parsePattern;
fieldKeyValues= createKeyValues(symbols.getWeekdays(), symbols.getShortWeekdays());
break;
return DAY_OF_WEEK_STRATEGY;
Integer fieldInt = Integer.valueOf(field);
KeyValue[] fieldKeyValues= nameValues.get(fieldInt);
if(fieldKeyValues==null) {
DateFormatSymbols symbols= DateFormatSymbols.getInstance(locale);
switch(field) {
KeyValue[] prior = nameValues.putIfAbsent(fieldInt, fieldKeyValues);
if(prior!=null) {
return fieldKeyValues;
KeyValue[] fieldKeyValues= new KeyValue[count(longValues)+count(shortValues)];
copy(fieldKeyValues, copy(fieldKeyValues, 0, longValues), shortValues);
Arrays.sort(fieldKeyValues, IGNORE_CASE_COMPARATOR);
return fieldKeyValues;
int count= 0;
if(values!=null) {
for(String value : values) {
if(value.length()>0) {
++count;
return count;
if(values!=null) {
for(int i= 0; i<values.length; ++i) {
String value= values[i];
if(value.length()>0) {
fieldKeyValues[offset++]= new KeyValue(value, i);
return offset;
if(!wasWhite) {
wasWhite= true;
regex.append("\\s*+");
Date date= parse(source, new ParsePosition(0));
if(date==null) {
return date;
int offset= pos.getIndex();
Matcher matcher= parsePattern.matcher(source.substring(offset));
if(!matcher.lookingAt()) {
Calendar cal= Calendar.getInstance(timeZone, locale);
cal.clear();
for(int i=0; i<strategies.length;) {
Strategy strategy= strategies[i++];
strategy.setCalendar(this, cal, matcher.group(i));
}
pos.setIndex(offset+matcher.end());
return cal.getTime();
collector.add(currentStrategy);
wasWhite= false;
switch(c) {
regex.append(c);
boolean wasWhite= false;
