handler.handleStep(interpolator, isLastStep);
}
System.arraycopy(eventY, 0, y, 0, y.length);
computeDerivatives(eventT, y, yDot);
resetOccurred = true;
for (final EventState remaining : occuringEvents) {
return eventT;
addEventHandler(handler, maxCheckInterval, convergence,
}
eventsStates.add(new EventState(handler, maxCheckInterval, convergence,
}
state.getEventHandler().init(t0, y0, t);
}
state.reinitializeBegin(interpolator);
}
if (state.evaluateStep(interpolator)) {
occuringEvents.add(state);
}
final Iterator<EventState> iterator = occuringEvents.iterator();
final EventState currentEvent = iterator.next();
iterator.remove();
final double eventT = currentEvent.getEventTime();
interpolator.setSoftPreviousTime(previousT);
interpolator.setSoftCurrentTime(eventT);
interpolator.setInterpolatedTime(eventT);
final double[] eventY = interpolator.getInterpolatedState().clone();
currentEvent.stepAccepted(eventT, eventY);
isLastStep = currentEvent.stop();
for (final StepHandler handler : stepHandlers) {
if (isLastStep) {
boolean needReset = currentEvent.reset(eventT, eventY);
if (needReset) {
state.stepAccepted(currentT, currentY);
isLastStep = isLastStep || state.stop();
}
handler.handleStep(interpolator, isLastStep);
}
stepHandlers.add(handler);
}
handler.init(t0, y0, t);
}
double previousT = interpolator.getGlobalPreviousTime();
final double currentT = interpolator.getGlobalCurrentTime();
if (! statesInitialized) {
for (EventState state : eventsStates) {
statesInitialized = true;
final int orderingSign = interpolator.isForward() ? +1 : -1;
SortedSet<EventState> occuringEvents = new TreeSet<EventState>(new Comparator<EventState>() {
for (final EventState state : eventsStates) {
while (!occuringEvents.isEmpty()) {
