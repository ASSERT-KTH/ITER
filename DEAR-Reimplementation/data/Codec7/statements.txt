return StringUtils.newStringUtf8(encodeBase64(binaryData, true));
return StringUtils.newStringUtf8(encode(pArray));
this(MIME_CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
}
System.arraycopy(lineSeparator, 0, buffer, pos, lineSeparator.length);
pos += lineSeparator.length;
this.encodeSize = 4 + lineSeparator.length;
len += 4 - mod;
Base64 b64 = isChunked ? new Base64(urlSafe) : new Base64(0, CHUNK_SEPARATOR, urlSafe);
return b64.encode(binaryData);
return encodeBase64(binaryData, isChunked, false);
long len = getEncodeLength(binaryData, MIME_CHUNK_SIZE, CHUNK_SEPARATOR);
if (len > maxResultSize) {
len += chunkSeparator.length;
return encodeBase64(binaryData, isChunked, urlSafe, Integer.MAX_VALUE);
return binaryData;
if (binaryData == null || binaryData.length == 0) {
boolean lenChunksPerfectly = len % chunkSize == 0;
len += (len / chunkSize) * chunkSeparator.length;
if (!lenChunksPerfectly) {
if (eof) {
if (inAvail < 0) {
eof = true;
if (buffer == null || buffer.length - pos < encodeSize) {
switch (modulus) {
if (lineLength > 0 && pos > 0) {
for (int i = 0; i < inAvail; i++) {
if (buffer == null || buffer.length - pos < encodeSize) {
modulus = (++modulus) % 3;
int b = in[inPos++];
if (b < 0) {
x = (x << 8) + b;
if (0 == modulus) {
}
reset();
if (pArray == null || pArray.length == 0) {
long len = getEncodeLength(pArray, lineLength, lineSeparator);
byte[] buf = new byte[(int) len];
setInitialBuffer(buf, 0, buf.length);
encode(pArray, 0, pArray.length);
encode(pArray, 0, -1); // Notify encoder of EOF.
if (buffer != buf) {
if (isUrlSafe() && pos < buf.length) {
return buf;
return this.encodeTable == URL_SAFE_ENCODE_TABLE;
chunkSize = (chunkSize / 4) * 4;
long len = (pArray.length * 4) / 3;
long mod = len % 4;
if (mod != 0) {
if (chunkSize > 0) {
