return;
return false;
somethingChanged = true;
currentVersionOfNode = newVersionOfNode;
state.changed = false;
state.traverseChildScopes = false;
return true;
AbstractPeepholeOptimization... optimizations) {
private StateStack traversalState = new StateStack();
this.compiler = compiler;
this.peepholeOptimizations = optimizations;
}
PeepholeChangeHandler handler = new PeepholeChangeHandler();
compiler.addChangeHandler(handler);
beginTraversal();
traverse(root);
endTraversal();
compiler.removeChangeHandler(handler);
}
if (!shouldVisit(node)) {
int visits = 0;
Node c = node.getFirstChild();
while(c != null) {
traverse(c);
Node next = c.getNext();
c = next;
}
visit(node);
visits++;
Preconditions.checkState(visits < 10000, "too many interations");
} while (shouldRetraverse(node));
exitNode(node);
}
if (node.getParent() != null && node.isFunction() || node.isScript()) {
ScopeState state = traversalState.peek();
if (state.changed) {
return false;
if (node.isFunction() || node.isScript()) {
ScopeState previous = traversalState.peek();
if (!previous.traverseChildScopes) {
traversalState.push();
return true;
if (node.isFunction() || node.isScript()) {
traversalState.pop();
}
Node currentVersionOfNode = n;
boolean somethingChanged = false;
somethingChanged = false;
for (AbstractPeepholeOptimization optimization : peepholeOptimizations) {
Node newVersionOfNode =
