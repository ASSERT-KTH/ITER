lineLength = 0;// disable chunk-separating
lineSeparator = CHUNK_SEPARATOR;// this just gets ignored
this.encodeSize = 4;
byte[] b = new byte[buffer.length * DEFAULT_BUFFER_RESIZE_FACTOR];
System.arraycopy(buffer, 0, b, 0, buffer.length);
buffer = b;
for (int i = 0; i < inAvail; i++) {
if (buffer == null || buffer.length - pos < encodeSize) {
resizeBuffer();
modulus = (++modulus) % 3;
int b = in[inPos++];
if (b < 0) {
x = (x << 8) + b;
if (0 == modulus) {
buffer[pos++] = encodeTable[(x >> 18) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 12) & MASK_6BITS];
buffer[pos++] = encodeTable[(x >> 6) & MASK_6BITS];
int r = read(singleByte, 0, 1);
base64.encode(buf, 0, c);
if (eof) {
if (inAvail < 0) {
}
base64.setInitialBuffer(b, offset, len);
if (out != null && out.length == outAvail) {
buffer = out;
pos = outPos;
readPos = outPos;
}
int readLen = 0;
while (readLen == 0) {
if (!base64.hasData()) {
byte[] buf = new byte[doEncode ? 4096 : 8192];
int c = in.read(buf);
if (c > 0 && b.length == len) {
if (doEncode) {
readLen = base64.readResults(b, offset, len);
return this.buffer != null;
return buffer != null ? pos - readPos : 0;
if (buffer == null) {
}
if (buffer != null) {
int len = Math.min(avail(), bAvail);
System.arraycopy(buffer, readPos, b, bPos, len);
readPos += len;
if (readPos >= pos) {
buffer = null;
return len;
super(in);
private final byte[] singleByte = new byte[1];
this.doEncode = doEncode;
