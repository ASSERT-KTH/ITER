int argumentCount = 0;
while (arguments.hasNext() && (argumentCount < maximum)) {
final String allValuesQuoted = (String) arguments.next();
final String allValues = stripBoundaryQuotes(allValuesQuoted);
if (allValuesQuoted.equals(consumeRemaining)) {
else if (commandLine.looksLikeOption(allValuesQuoted)) {
else if (subsequentSplit) {
++argumentCount;
commandLine.addValue(option, allValues);
}
}
return true;
processValues(commandLine, args, this);
}
validate(commandLine, this);
final List values = commandLine.getValues(option);
if (values.size() < minimum) {
if (values.size() > maximum) {
throw new OptionException(option, ResourceConstants.ARGUMENT_UNEXPECTED_VALUE,
final boolean optional = helpSettings.contains(DisplaySetting.DISPLAY_OPTIONAL);
final boolean numbered =
final boolean bracketed = helpSettings.contains(DisplaySetting.DISPLAY_ARGUMENT_BRACKETED);
final int max = (maximum == Integer.MAX_VALUE) ? 2 : maximum;
int i = 0;
while (i < max) {
if (i > 0) {
if ((i >= minimum) && (optional || (i > 0))) {
if (bracketed) {
buffer.append(name);
++i;
if (numbered) {
if (bracketed) {
if (maximum == Integer.MAX_VALUE) {
while (i > 0) {
--i;
if ((i >= minimum) && (optional || (i > 0))) {
}
return maximum;
return minimum;
if (!token.startsWith("\"") || !token.endsWith("\"")) {
return token;
options.add(option);
nameToOption.put(option.getPreferredName(), option);
for (Iterator i = option.getTriggers().iterator(); i.hasNext();) {
}
if (option instanceof Argument) {
addOption(option);
List valueList = (List) values.get(option);
if (valueList == null) {
valueList = new ArrayList();
