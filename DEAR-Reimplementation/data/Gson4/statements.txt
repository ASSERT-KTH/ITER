throw new IllegalStateException(
checkLenient();
throw syntaxError("Use JsonReader.setLenient(true) to accept malformed JSON");
writeDeferredName();
beforeValue(false);
throw new MalformedJsonException(message
if (!lenient) {
StringBuilder result = new StringBuilder().append('$');
for (int i = 0, size = stackSize; i < size; i++) {
switch (stack[i]) {
return result.toString();
return lineNumber + 1;
return pos - lineStart + 1;
pos--; // Don't consume the first character in a literal value.
if (stackSize == 1) {
p = doPeek();
int p = peeked;
if (p == PEEKED_NONE) {
} else if (c == '#') {
pos = p;
return c;
switch (c) {
limit += total;
if (lineNumber == 0 && lineStart == 0 && limit > 0 && buffer[0] == '\ufeff') {
if (limit >= minimum) {
return true;
p = pos;
l = limit;
int c = buffer[p++];
if (c == '\n') {
} else if (c == ' ' || c == '\r' || c == '\t') {
if (c == '/') {
this.in = in;
}
int peekStack = stack[stackSize - 1];
if (peekStack == JsonScope.EMPTY_ARRAY) {
} else if (peekStack == JsonScope.NONEMPTY_ARRAY) {
} else if (peekStack == JsonScope.DANGLING_NAME) {
if (lenient) {
stack[stackSize - 1] = JsonScope.NONEMPTY_DOCUMENT;
int c = nextNonWhitespace(true);
char[] buffer = this.buffer;
lineStart -= pos;
if (limit != pos) {
limit = 0;
pos = 0;
while ((total = in.read(buffer, limit, buffer.length - limit)) != -1) {
char[] buffer = this.buffer;
int p = pos;
int l = limit;
