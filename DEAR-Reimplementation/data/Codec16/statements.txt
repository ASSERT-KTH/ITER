throw new IllegalArgumentException("pad must not be in alphabet or whitespace");
this(0, null, useHex, pad);
this.encodeTable = HEX_ENCODE_TABLE;
this.decodeTable = HEX_DECODE_TABLE;
this.encodeSize = BYTES_PER_ENCODED_BLOCK;
this.lineSeparator = null;
super(BYTES_PER_UNENCODED_BLOCK, BYTES_PER_ENCODED_BLOCK, lineLength,
if (useHex) {
if (lineLength > 0) {
this.decodeSize = this.encodeSize - 1;
if (isInAlphabet(pad) || isWhiteSpace(pad)) {
private static final byte[] CHUNK_SEPARATOR = {'\r', '\n'};
private static final byte[] DECODE_TABLE = {
private static final byte[] ENCODE_TABLE = {
private static final byte[] HEX_DECODE_TABLE = {
private static final byte[] HEX_ENCODE_TABLE = {
return octet >= 0 && octet < decodeTable.length && decodeTable[octet] != -1;
this(false);
}
this(false, pad);
}
this(0, null, useHex, PAD_DEFAULT);
}
}
this(lineLength, CHUNK_SEPARATOR);
}
this(lineLength, lineSeparator, false, PAD_DEFAULT);
}
this(lineLength, lineSeparator, useHex, PAD_DEFAULT);
}
this.encodeTable = ENCODE_TABLE;
this.decodeTable = DECODE_TABLE;
if (lineSeparator == null) {
throw new IllegalArgumentException("lineLength " + lineLength + " > 0, but lineSeparator is null");
if (containsAlphabetOrPad(lineSeparator)) {
final String sep = StringUtils.newStringUtf8(lineSeparator);
throw new IllegalArgumentException("lineSeparator must not contain Base32 characters: [" + sep + "]");
this.encodeSize = BYTES_PER_ENCODED_BLOCK + lineSeparator.length;
this.lineSeparator = new byte[lineSeparator.length];
System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
}
if (context.eof) {
return;
if (inAvail < 0) {
context.eof = true;
for (int i = 0; i < inAvail; i++) {
final byte b = in[inPos++];
if (b == pad) {
context.eof = true;
break;
