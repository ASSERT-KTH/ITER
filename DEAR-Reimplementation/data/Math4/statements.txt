super(new Line(start, end), buildIntervalSet(start, end));
}
Line line1 = (Line) getHyperplane();
Line line2 = (Line) subLine.getHyperplane();
Vector2D v2D = line1.intersection(line2);
Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));
this(new Line(start, end), buildIntervalSet(start, end));
}
Vector3D v1D = line.intersection(subLine.line);
Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));
final Line line = new Line(start, end);
return new IntervalsSet(line.toSubSpace(start).getX(),
final Line line = new Line(start, end);
return new IntervalsSet(line.toSubSpace(start).getX(),
public SubLine(final Line line, final IntervalsSet remainingRegion) {
this.line= line;
this.remainingRegion = remainingRegion;
}
super(hyperplane, remainingRegion);
}
super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));
}
final Line line = (Line) getHyperplane();
final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();
final List<Segment> segments = new ArrayList<Segment>();
for (final Interval interval : list) {
final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));
final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));
segments.add(new Segment(start, end, line));
}
return segments;
Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));
if (includeEndPoints) {
return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;
return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;
return new SubLine(hyperplane, remainingRegion);
final LinethisLine= (Line) getHyperplane();
final LineotherLine = (Line) hyperplane;
final Vector2D crossing= thisLine.intersection(otherLine);
if (crossing == null) {
final double global = otherLine.getOffset(thisLine);
return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);
final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;
final Vector1D x = thisLine.toSubSpace(crossing);
return getRemainingRegion().side(new OrientedPoint(x, direct));
final LinethisLine= (Line) getHyperplane();
final LineotherLine = (Line) hyperplane;
final Vector2D crossing= thisLine.intersection(otherLine);
if (crossing == null) {
final double global = otherLine.getOffset(thisLine);
