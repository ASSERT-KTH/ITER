org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:56-super(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:113-Line line1 = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:114-Line line2 = (Line) subLine.getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:117-Vector2D v2D = line1.intersection(line2);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:120-Location loc1 = getRemainingRegion().checkPoint(line1.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:56-this(new Line(start, end), buildIntervalSet(start, end));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:57-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:113-Vector3D v1D = line.intersection(subLine.line);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:116-Location loc1 = remainingRegion.checkPoint(line.toSubSpace(v1D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:139-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:140-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:137-final Line line = new Line(start, end);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:138-return new IntervalsSet(line.toSubSpace(start).getX(),[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:44-public SubLine(final Line line, final IntervalsSet remainingRegion) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:45-this.line= line;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:46-this.remainingRegion = remainingRegion;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.threed.SubLine:47-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:48-super(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:49-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:63-super(segment.getLine(), buildIntervalSet(segment.getStart(), segment.getEnd()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:64-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:82-final Line line = (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:83-final List<Interval> list = ((IntervalsSet) getRemainingRegion()).asList();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:84-final List<Segment> segments = new ArrayList<Segment>();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:86-for (final Interval interval : list) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:87-final Vector2D start = line.toSpace(new Vector1D(interval.getInf()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:88-final Vector2D end = line.toSpace(new Vector1D(interval.getSup()));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:89-segments.add(new Segment(start, end, line));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:90-}[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:92-return segments;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:123-Location loc2 = subLine.getRemainingRegion().checkPoint(line2.toSubSpace(v2D));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:125-if (includeEndPoints) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:126-return ((loc1 != Location.OUTSIDE) && (loc2 != Location.OUTSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:128-return ((loc1 == Location.INSIDE) && (loc2 == Location.INSIDE)) ? v2D : null;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:148-return new SubLine(hyperplane, remainingRegion);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:155-final LinethisLine= (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:156-final LineotherLine = (Line) hyperplane;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:157-final Vector2D crossing= thisLine.intersection(otherLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:159-if (crossing == null) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:161-final double global = otherLine.getOffset(thisLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:162-return (global < -1.0e-10) ? Side.MINUS : ((global > 1.0e-10) ? Side.PLUS : Side.HYPER);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:166-final boolean direct = FastMath.sin(thisLine.getAngle() - otherLine.getAngle()) < 0;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:167-final Vector1D x = thisLine.toSubSpace(crossing);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:168-return getRemainingRegion().side(new OrientedPoint(x, direct));[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:176-final LinethisLine= (Line) getHyperplane();[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:177-final LineotherLine = (Line) hyperplane;[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:178-final Vector2D crossing= thisLine.intersection(otherLine);[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
org.apache.commons.math3.geometry.euclidean.twod.SubLine:180-if (crossing == null) {[CLS]org.apache.commons.math3.geometry.euclidean.twod.SubLine:182-final double global = otherLine.getOffset(thisLine);	0
