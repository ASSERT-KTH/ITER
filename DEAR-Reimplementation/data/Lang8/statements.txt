rule = new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));
break;
rule = new TextField(Calendar.AM_PM, AmPmStrings);
break;
if (tokenLen >= 4) {
rule = new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);
break;
TimeZoneDisplayKey key = new TimeZoneDisplayKey(tz, daylight, style, locale);
String value = cTimeZoneDisplayCache.get(key);
if (value == null) {
value = tz.getDisplayName(daylight, style, locale);
String prior = cTimeZoneDisplayCache.putIfAbsent(key, value);
if (prior != null) {
return value;
rule = selectNumberRule(Calendar.MINUTE, tokenLen);
break;
return new UnpaddedNumberField(field);
return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();
return applyRules(calendar, buf);
for (Rule rule : mRules) {
rule.appendTo(buf, calendar);
return buf;
rule = new CharacterLiteral(sub.charAt(0));
protected FastDatePrinter(String pattern, TimeZone timeZone, Locale locale) {
mPattern = pattern;
mTimeZone = timeZone;
mLocale = locale;
init();
}
private static ConcurrentMap<TimeZoneDisplayKey, String> cTimeZoneDisplayCache =
List<Rule> rulesList = parsePattern();
mRules = rulesList.toArray(new Rule[rulesList.size()]);
int len = 0;
for (int i=mRules.length; --i >= 0; ) {
len += mRules[i].estimateLength();
mMaxLengthEstimate = len;
}
DateFormatSymbols symbols = new DateFormatSymbols(mLocale);
List<Rule> rules = new ArrayList<Rule>();
String[] ERAs = symbols.getEras();
String[] months = symbols.getMonths();
String[] shortMonths = symbols.getShortMonths();
String[] weekdays = symbols.getWeekdays();
String[] shortWeekdays = symbols.getShortWeekdays();
String[] AmPmStrings = symbols.getAmPmStrings();
int length = mPattern.length();
int[] indexRef = new int[1];
for (int i = 0; i < length; i++) {
indexRef[0] = i;
String token = parseToken(mPattern, indexRef);
