throw new FractionConversionException(value, a0, 1l);
throw new FractionConversionException(value, p2, q2);
this.numerator = (int) a0;
this.denominator = 1;
return;
}
this(value, epsilon, Integer.MAX_VALUE, maxIterations);
{
long overflow = Integer.MAX_VALUE;
double r0 = value;
long a0 = (long)FastMath.floor(r0);
if (a0 > overflow) {
if (FastMath.abs(a0 - value) < epsilon) {
long p0 = 1;
long q0 = 0;
long p1 = a0;
long q1 = 1;
long p2 = 0;
long q2 = 1;
int n = 0;
boolean stop = false;
++n;
double r1 = 1.0 / (r0 - a0);
long a1 = (long)FastMath.floor(r1);
p2 = (a1 * p1) + p0;
q2 = (a1 * q1) + q0;
if ((p2 > overflow) || (q2 > overflow)) {
double convergent = (double)p2 / (double)q2;
if (n < maxIterations && FastMath.abs(convergent - value) > epsilon && q2 < maxDenominator) {
p0 = p1;
p1 = p2;
q0 = q1;
q1 = q2;
a0 = a1;
r0 = r1;
} while (!stop);
public Fraction(int num, int den) {
if (den == 0) {
if (den < 0) {
final int d = ArithmeticUtils.gcd(num, den);
if (d > 1) {
num /= d;
den /= d;
if (den < 0) {
this.numerator = num;
this.denominator = den;
}
public static final Fraction TWO = new Fraction(2, 1);
public static final Fraction ONE = new Fraction(1, 1);
public static final Fraction ZERO = new Fraction(0, 1);
