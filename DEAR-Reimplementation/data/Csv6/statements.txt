return putIn(new HashMap<String, String>(values.length));
for (final Entry<String, Integer> entry : mapping.entrySet()) {
final int col = entry.getValue().intValue();
map.put(entry.getKey(), values[col]);
}
final String comment, final long recordNumber) {
this.recordNumber = recordNumber;
this.values = values != null ? values : EMPTY_STRING_ARRAY;
this.mapping = mapping;
this.comment = comment;
}
private static final String[] EMPTY_STRING_ARRAY = new String[0];
return get(e.toString());
return values[i];
if (mapping == null) {
throw new IllegalStateException(
final Integer index = mapping.get(name);
if (index == null) {
throw new IllegalArgumentException(String.format("Mapping for %s not found, expected one of %s", name,
return values[index.intValue()];
} catch (final ArrayIndexOutOfBoundsException e) {
throw new IllegalArgumentException(String.format(
return comment;
return recordNumber;
return mapping == null ? true : mapping.size() == values.length;
return mapping != null ? mapping.containsKey(name) : false;
return isMapped(name) && mapping.get(name).intValue() < values.length;
return toList().iterator();
return map;
return values.length;
return Arrays.asList(values);
return Arrays.toString(values);
return values;
