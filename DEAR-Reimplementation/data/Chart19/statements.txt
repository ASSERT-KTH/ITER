return this.domainAxes.indexOf(axis);
int result = this.rangeAxes.indexOf(axis);
if (result < 0) { // try the parent plot
Plot parent = getParent();
if (parent instanceof CategoryPlot) {
return result;
domainAxis.setPlot(this);
domainAxis.addChangeListener(this);
rangeAxis.setPlot(this);
rangeAxis.addChangeListener(this);
axis.configure();
axis.configure();
yAxis.configure();
Range result = null;
List mappedDatasets = new ArrayList();
int rangeIndex = this.rangeAxes.indexOf(axis);
if (rangeIndex >= 0) {
mappedDatasets.addAll(datasetsMappedToRangeAxis(rangeIndex));
Iterator iterator = mappedDatasets.iterator();
while (iterator.hasNext()) {
return result;
List result = new ArrayList();
for (int i = 0; i < this.datasets.size(); i++) {
Object dataset = this.datasets.get(i);
if (dataset != null) {
return result;
super();
private DatasetRenderingOrder renderingOrder
private SortOrder columnRenderingOrder = SortOrder.ASCENDING;
private SortOrder rowRenderingOrder = SortOrder.ASCENDING;
private boolean rangeCrosshairLockedOnData = true;
this.orientation = PlotOrientation.VERTICAL;
this.domainAxes = new ObjectList();
this.domainAxisLocations = new ObjectList();
this.rangeAxes = new ObjectList();
this.rangeAxisLocations = new ObjectList();
this.datasetToDomainAxisMap = new ObjectList();
this.datasetToRangeAxisMap = new ObjectList();
this.renderers = new ObjectList();
this.datasets = new ObjectList();
this.datasets.set(0, dataset);
if (dataset != null) {
this.axisOffset = new RectangleInsets(4.0, 4.0, 4.0, 4.0);
setDomainAxisLocation(AxisLocation.BOTTOM_OR_LEFT, false);
setRangeAxisLocation(AxisLocation.TOP_OR_LEFT, false);
this.renderers.set(0, renderer);
if (renderer != null) {
this.domainAxes.set(0, domainAxis);
this.mapDatasetToDomainAxis(0, 0);
if (domainAxis != null) {
