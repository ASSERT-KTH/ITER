}
initBlock();
}
if (offs < 0) {
if (len < 0) {
if (offs + len > dest.length) {
if (this.in == null) {
final int hi = offs + len;
int destOffs = offs;
while (destOffs < hi && ((b = read0()) >= 0)) {
dest[destOffs++] = (byte) b;
count(1);
int c = (destOffs == offs) ? -1 : (destOffs - offs);
return c;
final boolean[] inUse = this.data.inUse;
final byte[] seqToUnseq = this.data.seqToUnseq;
int nInUseShadow = 0;
for (int i = 0; i < 256; i++) {
if (inUse[i]) {
seqToUnseq[nInUseShadow++] = (byte) i;
this.nInUse = nInUseShadow;
}
switch (currentState) {
return setupBlock();
return setupNoRandPartB();
int blockSize = this.in.read();
if ((blockSize < '1') || (blockSize > '9')) {
this.blockSize100k = blockSize - '0';
this.bsLive = 0;
this.computedCombinedCRC = 0;
return true;
magic0 = bsGetUByte();
magic1 = bsGetUByte();
magic2 = bsGetUByte();
magic3 = bsGetUByte();
magic4 = bsGetUByte();
magic5 = bsGetUByte();
if (magic0 != 0x17 || magic1 != 0x72 || magic2 != 0x45
if (magic0 != 0x31 || // '1'
this.storedBlockCRC = bsGetInt();
this.blockRandomised = bsR(1) == 1;
if (this.data == null) {
this.data = new Data(this.blockSize100k);
getAndMoveToFrontDecode();
this.crc.initialiseCRC();
this.currentState = START_BLOCK_STATE;
}
int bsLiveShadow = this.bsLive;
int bsBuffShadow = this.bsBuff;
if (bsLiveShadow < n) {
