public abstract class Parser implements CommandLineParser {
return parse(options, arguments, null, false);
this.options = options;
for (Iterator it = options.helpOptions().iterator(); it.hasNext();) {
Option opt = (Option) it.next();
opt.clearValues();
}
requiredOptions = options.getRequiredOptions();
cmd = new CommandLine();
boolean eatTheRest = false;
if (arguments == null)
List tokenList = Arrays.asList(flatten(this.options,
ListIterator iterator = tokenList.listIterator();
while (iterator.hasNext())
processProperties(properties);
checkRequiredOptions();
if (properties == null)
return;
if (requiredOptions.size() > 0)
Iterator iter = requiredOptions.iterator();
StringBuffer buff = new StringBuffer();
while (iter.hasNext())
buff.append(iter.next());
throw new MissingOptionException(buff.toString());
return parse(options, arguments, properties, false);
return parse(options, arguments, null, stopAtNonOption);
arguments = new String[0];
String t = (String) iterator.next();
if ("--".equals(t))
eatTheRest = true;
else if ("-".equals(t))
if (stopAtNonOption)
eatTheRest = true;
cmd.addArg(t);
else if (t.startsWith("-"))
if (stopAtNonOption && !options.hasOption(t))
eatTheRest = true;
cmd.addArg(t);
processOption(t, iterator);
cmd.addArg(t);
if (stopAtNonOption)
eatTheRest = true;
if (eatTheRest)
while (iterator.hasNext())
String str = (String) iterator.next();
if (!"--".equals(str))
cmd.addArg(str);
}
}
return cmd;
