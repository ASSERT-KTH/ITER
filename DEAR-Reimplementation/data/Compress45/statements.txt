formatLongBinary(value, buf, offset, length, negative);
final int bits = (length - 1) * 8;
final long max = 1l << bits;
long val = Math.abs(value); // Long.MIN_VALUE stays Long.MIN_VALUE
if (val < 0 || val >= max) {
if (negative) {
val ^= max - 1;
val++;
val |= 0xffl << bits;
for (int i = offset + length - 1; i >= offset; i--) {
buf[i] = (byte) val;
val >>= 8;
}
throw new IllegalArgumentException("Value " + value +
final long maxAsOctalChar = length == TarConstants.UIDLEN ? TarConstants.MAXID : TarConstants.MAXSIZE;
final boolean negative = value < 0;
if (!negative && value <= maxAsOctalChar) { // OK to store as octal chars
return formatLongOctalBytes(value, buf, offset, length);
if (length < 9) {
formatBigIntegerBinary(value, buf, offset, length, negative);
buf[offset] = (byte) (negative ? 0xff : 0x80);
return offset + length;
final BigInteger val = BigInteger.valueOf(value);
final byte[] b = val.toByteArray();
final int len = b.length;
if (len > length - 1) {
final int off = offset + length - len;
System.arraycopy(b, 0, buf, off, len);
final byte fill = (byte) (negative ? 0xff : 0);
for (int i = offset + 1; i < off; i++) {
buf[i] = fill;
}
return parseOctal(buffer, offset, length);
return parseBinaryLong(buffer, offset, length, negative);
if (length >= 9) {
long val = 0;
for (int i = 1; i < length; i++) {
val = (val << 8) + (buffer[offset + i] & 0xff);
if (negative) {
val--;
val ^= (long) Math.pow(2.0, (length - 1) * 8.0) - 1;
return negative ? -val : val;
buffer[offset + remaining--] = (byte) '0';
buffer[offset + remaining] = (byte) '0';
final int idx=length-1; // For space
formatUnsignedOctalString(value, buf, offset, idx);
buf[offset + idx] = (byte) ' '; // Trailing space
return offset + length;
final boolean negative = buffer[offset] == (byte) 0xff;
if (length < 9) {
