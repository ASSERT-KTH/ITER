return (Double.isNaN(x) && Double.isNaN(y)) || x == y;
if ((x == null) || (y == null)) {
return !((x == null) ^ (y == null));
if (x.length != y.length) {
return false;
for (int i = 0; i < x.length; ++i) {
if (!equals(x[i], y[i])) {
return true;
public final class MathUtils {
private static final long[] FACTORIALS = new long[] {
super();
}
long s = (long)x + (long)y;
if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
throw MathRuntimeException.createArithmeticException(LocalizedFormats.OVERFLOW_IN_ADDITION, x, y);
return (int)s;
return addAndCheck(a, b, LocalizedFormats.OVERFLOW_IN_ADDITION);
if (a > b) {
ret = addAndCheck(b, a, pattern);
if (a < 0) {
if (b < 0) {
if (Long.MIN_VALUE - b <= a) {
ret = a + b;
throw MathRuntimeException.createArithmeticException(pattern, a, b);
ret = a + b;
if (a <= Long.MAX_VALUE - b) {
ret = a + b;
throw MathRuntimeException.createArithmeticException(pattern, a, b);
return ret;
checkBinomial(n, k);
if ((n == k) || (k == 0)) {
return 1;
if ((k == 1) || (k == n - 1)) {
return n;
if (k > n / 2)
return binomialCoefficient(n, n - k);
long result = 1;
if (n <= 61) {
int i = n - k + 1;
for (int j = 1; j <= k; j++) {
result = result * i / j;
i++;
} else if (n <= 66) {
int i = n - k + 1;
for (int j = 1; j <= k; j++) {
final long d = gcd(i, j);
result = (result / (j / d)) * (i / d);
i++;
} else {
int i = n - k + 1;
