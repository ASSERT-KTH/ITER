buff.append(" <").append(option.getArgName()).append(">");
appendOption(buff, option, option.isRequired());
StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app)
final Collection processedGroups = new ArrayList();
List optList = new ArrayList(options.getOptions());
Collections.sort(optList, getOptionComparator() );
for (Iterator i = optList.iterator(); i.hasNext();)
option = (Option) i.next();
OptionGroup group = options.getOptionGroup(option);
if (group != null)
if (i.hasNext())
}
printWrapped(pw, width, buff.toString().indexOf(' ') + 1,
}
if (!required)
if (option.getOpt() != null)
buff.append("-").append(option.getOpt());
if (option.hasArg() && (option.getArgName() != null))
if (!required)
}
StringBuffer sb = new StringBuffer(text.length());
renderWrappedText(sb, width, nextLineTabStop, text);
pw.println(sb.toString());
}
return this.optionComparator;
sb.append(rtrim(text));
return sb;
int pos = findWrapPos(text, width, 0);
if (pos == -1)
if ((s == null) || (s.length() == 0))
int pos = s.length();
while ((pos > 0) && Character.isWhitespace(s.charAt(pos - 1)))
return s.substring(0, pos);
public class HelpFormatter {
public int defaultWidth = DEFAULT_WIDTH;
public int defaultLeftPad = DEFAULT_LEFT_PAD;
public int defaultDescPad = DEFAULT_DESC_PAD;
public String defaultSyntaxPrefix = DEFAULT_SYNTAX_PREFIX;
public String defaultNewLine = System.getProperty("line.separator");
public String defaultOptPrefix = DEFAULT_OPT_PREFIX;
public String defaultLongOptPrefix = DEFAULT_LONG_OPT_PREFIX;
public String defaultArgName = DEFAULT_ARG_NAME;
protected Comparator optionComparator = new OptionComparator();
private static class OptionComparator
int pos = -1;
if (((pos = text.indexOf('\n', startPos)) != -1 && pos <= width)
else if ((startPos + width) >= text.length())
return -1;
this.defaultWidth = width;
}
