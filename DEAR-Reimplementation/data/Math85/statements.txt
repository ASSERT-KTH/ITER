throw new ConvergenceException(
return bracket( function, initial, lowerBound, upperBound,
if (function == null) {
if (maximumIterations <= 0){
if (initial < lowerBound || initial > upperBound || lowerBound >= upperBound) {
double a = initial;
double b = initial;
int numIterations = 0 ;
a = Math.max(a - 1.0, lowerBound);
b = Math.min(b + 1.0, upperBound);
fa = function.value(a);
fb = function.value(b);
numIterations++ ;
} while ((fa * fb > 0.0) && (numIterations < maximumIterations) &&
if (fa * fb >= 0.0 ) {
super();
}
setup(f);
return LazyHolder.FACTORY.newDefaultSolver().solve(f, x0, x1);
setup(f);
UnivariateRealSolver solver = LazyHolder.FACTORY.newDefaultSolver();
solver.setAbsoluteAccuracy(absoluteAccuracy);
return solver.solve(f, x0, x1);
throw MathRuntimeException.createIllegalArgumentException("function is null");
throw MathRuntimeException.createIllegalArgumentException(
throw MathRuntimeException.createIllegalArgumentException(
return new double[]{a, b};
return (a + b) * .5;
if (f == null) {
throw MathRuntimeException.createIllegalArgumentException("function is null");
}
