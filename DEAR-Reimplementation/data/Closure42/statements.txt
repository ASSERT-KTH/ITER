return Token.EQ;
return Token.THIS;
return new Node(type, child1, child2, child3).clonePropsFrom(templateNode);
Node irNode = transform(node);
if (!irNode.isBlock()) {
return irNode;
return Token.ASSIGN;
return position - lineIndex - 1;
Node irNode = transformDispatcher.processName(node, true);
JSDocInfo jsDocInfo = handleJsDoc(node, irNode);
if (jsDocInfo != null) {
setSourceInfo(irNode, node);
return irNode;
return Token.BLOCK;
return Token.EXPR_RESULT;
return new Node(type, child1, child2).clonePropsFrom(templateNode);
switch (token) {
return position;
reservedKeywords = null;
break;
return Node.newString(type, value).clonePropsFrom(templateNode);
ErrorReporter errorReporter) {
private final Set<String> ALLOWED_DIRECTIVES = Sets.newHashSet("use strict");
private final Set<Comment> parsedComments = Sets.newHashSet();
Node rootNodeJsDocHolder = new Node(Token.SCRIPT);
Node.FileLevelJsDocBuilder fileLevelJsDocBuilder =
JSDocInfo fileOverviewInfo = null;
this.sourceString = sourceString;
this.sourceFile = sourceFile;
this.sourceName = sourceFile == null ? null : sourceFile.getName();
this.config = config;
this.errorReporter = errorReporter;
this.transformDispatcher = new TransformDispatcher();
this.templateNode = createTemplateNode();
switch (config.languageMode) {
}
private static final Set<String> ES5_RESERVED_KEYWORDS =
private static final Set<String> ES5_STRICT_RESERVED_KEYWORDS =
Node templateNode = new Node(Token.SCRIPT);
templateNode.setStaticSourceFile(sourceFile);
return templateNode;
IRFactory irFactory = new IRFactory(sourceString, sourceFile,
Node irNode = irFactory.transform(node);
if (node.getComments() != null) {
irFactory.setFileOverviewJsDoc(irNode);
return irNode;
JSDocInfo rootNodeJsDoc = rootNodeJsDocHolder.getJSDocInfo();
if (rootNodeJsDoc != null) {
if (fileOverviewInfo != null) {
}
