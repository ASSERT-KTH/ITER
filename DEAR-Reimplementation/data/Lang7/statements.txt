hexDigits--;
throw new NumberFormatException(str + " is not a valid number.");
} catch (NumberFormatException nfe) { // NOPMD
return createBigInteger(numeric);
}
}
}
if (!(d.isInfinite() || (d.doubleValue() == 0.0D && !allZeros))) {
return d;
return null;
return null;
int hexDigits = str.length() - 2; // drop 0x
if (str.startsWith("-")) { // drop -
if (hexDigits > 8) { // too many for an int
return createInteger(str);
if (expPos > -1) {
if (expPos < decPos || expPos > str.length()) {
dec = str.substring(decPos + 1, expPos);
dec = str.substring(decPos + 1);
mant = str.substring(0, decPos);
if (expPos > str.length()) {
exp = str.substring(expPos + 1, str.length() - 1);
Float f = NumberUtils.createFloat(numeric);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
Double d = NumberUtils.createDouble(numeric);
if (!(d.isInfinite() || (d.floatValue() == 0.0D && !allZeros))) {
return d;
return createBigDecimal(numeric);
if (expPos > -1 && expPos < str.length() - 1) {
exp = str.substring(expPos + 1, str.length());
exp = null;
if (dec == null && exp == null) {
return createInteger(str);
} catch (NumberFormatException nfe) { // NOPMD
return createLong(str);
} catch (NumberFormatException nfe) { // NOPMD
return createBigInteger(str);
boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
Float f = createFloat(str);
if (!(f.isInfinite() || (f.floatValue() == 0.0F && !allZeros))) {
return f;
Double d = createDouble(str);
if (str == null) {
if (StringUtils.isBlank(str)) {
if (str.startsWith("--")) {
if (str.startsWith("0x") || str.startsWith("-0x") || str.startsWith("0X") || str.startsWith("-0X")) {
char lastChar = str.charAt(str.length() - 1);
int decPos = str.indexOf('.');
int expPos = str.indexOf('e') + str.indexOf('E') + 1;
