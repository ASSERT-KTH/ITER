printUsage(pw, width, cmdLineSyntax, options);
printWrapped(pw, width, header);
printWrapped(pw, width, footer);
printWrapped(pw, width, 0, text);
}
return pos + 1;
if (autoUsage)
if ((header != null) && (header.trim().length() > 0))
printOptions(pw, width, options, leftPad, descPad);
if ((footer != null) && (footer.trim().length() > 0))
}
StringBuffer sb = new StringBuffer();
renderOptions(sb, width, options, leftPad, descPad);
pw.println(sb.toString());
}
if ((cmdLineSyntax == null) || (cmdLineSyntax.length() == 0))
final String lpad = createPadding(leftPad);
final String dpad = createPadding(descPad);
int max = 0;
List prefixList = new ArrayList();
List optList = options.helpOptions();
Collections.sort(optList, getOptionComparator());
for (Iterator i = optList.iterator(); i.hasNext();)
int x = 0;
for (Iterator i = optList.iterator(); i.hasNext();)
return sb;
--pos;
sb.append(rtrim(text.substring(0, pos))).append(defaultNewLine);
if (nextLineTabStop >= width)
final String padding = createPadding(nextLineTabStop);
text = padding + text.substring(pos).trim();
pos = findWrapPos(text, width, 0);
if (pos == -1)
sb.append(text);
return sb;
char[] padding = new char[len];
Arrays.fill(padding, ' ');
return new String(padding);
StringBuffer buff = new StringBuffer(defaultSyntaxPrefix).append(app).append(" ");
final Collection processedGroups = new ArrayList();
List optList = new ArrayList(options.getOptions());
Collections.sort(optList, getOptionComparator());
for (Iterator i = optList.iterator(); i.hasNext();)
printWrapped(pw, width, buff.toString().indexOf(' ') + 1, buff.toString());
}
StringBuffer sb = new StringBuffer(text.length());
renderWrappedText(sb, width, nextLineTabStop, text);
pw.println(sb.toString());
}
return optionComparator;
