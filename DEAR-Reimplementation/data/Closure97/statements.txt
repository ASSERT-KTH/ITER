result = lvalInt >>> rvalInt;
break;
return tryFoldShift(subtree, left, right);
if (left.getType() == Token.NUMBER &&
double lval = left.getDouble();
double rval = right.getDouble();
if (!(lval >= Integer.MIN_VALUE && lval <= Integer.MAX_VALUE)) {
if (!(rval >= 0 && rval < 32)) {
int lvalInt = (int) lval;
if (lvalInt != lval) {
int rvalInt = (int) rval;
if (rvalInt != rval) {
switch (n.getType()) {
result = lvalInt << rvalInt;
break;
result = lvalInt >> rvalInt;
break;
Node newNumber = Node.newNumber(result);
n.getParent().replaceChild(n, newNumber);
reportCodeChange();
return newNumber;
return n;
return tryFoldAssign(subtree, left, right);
Preconditions.checkArgument(n.getType() == Token.ASSIGN);
if (!right.hasChildren() ||
public class PeepholeFoldConstants extends AbstractPeepholeOptimization {
static final DiagnosticType DIVIDE_BY_0_ERROR = DiagnosticType.error(
static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =
static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =
static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =
static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =
static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(
static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(
private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);
switch(subtree.getType()) {
return tryFoldBinaryOperator(subtree);
Node left = subtree.getFirstChild();
if (left == null) {
return subtree;
Node right = left.getNext();
if (right == null) {
return subtree;
switch(subtree.getType()) {
return tryFoldKnownMethods(subtree);
return tryFoldTypeof(subtree);
return tryFoldUnaryOperator(subtree);
return tryFoldGetProp(subtree, left, right);
return tryFoldGetElem(subtree, left, right);
return tryFoldInstanceof(subtree, left, right);
return tryFoldAndOr(subtree, left, right);
