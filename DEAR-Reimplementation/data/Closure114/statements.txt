Node replacement = n.getLastChild();
replacement.detachFromParent();
changeProxy.replaceWith(parent, n, replacement);
} else {
return scopes.get(parent);
return Collections.emptyList();
if (parent.isAssign()) {
return null;
Node parent = function.getParent();
if (parent != null) {
while (parent.isHook()) {
if (parent.isName()) {
List<NameInformation> refs = scopes.get(function);
if (!refs.isEmpty()) {
return false;
String singletonGetterClass =
if (singletonGetterClass != null) {
Node rhs = n.getFirstChild();
if (rhs != null) {
List<Node> nodes = Lists.newArrayList();
for (Node child : n.children()) {
nodes.addAll(getRhsSubexpressions(child));
}
return nodes;
CodingConvention convention = compiler.getCodingConvention();
SubclassRelationship classes = convention.getClassesDefinedByCall(parent);
if (classes != null) {
refNode.remove();
if (valueConsumedByParent(n, parent)) {
} else if (n.isAssign() && !parent.isFor()) {
replaceTopLevelExpressionWithRhs(parent, n);
}
switch (parent.getType()) {
break;
switch (n.getType()) {
break;
List<Node> replacements = Lists.newArrayList();
for (Node rhs : getRhsSubexpressions(n)) {
if (parent.isFor()) {
changeProxy.replaceWith(parent, n, replacements);
}
if (NodeUtil.isAssignmentOp(parent)) {
switch (parent.getType()) {
return false;
switch (n.getType()) {
Node function = t.getEnclosingFunction();
if (function == null) {
return null;
return;
return refs;
