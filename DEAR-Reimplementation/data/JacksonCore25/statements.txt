int start = _inputPtr-1;
_inputPtr = ptr;
return _handleOddName2(start, hash, codes);
_textBuffer.resetWithShared(_inputBuffer, startPtr, (_inputPtr - startPtr));
char[] outBuf = _textBuffer.getCurrentSegment();
int outPtr = _textBuffer.getCurrentSegmentSize();
final int maxCode = codes.length;
if (_inputPtr >= _inputEnd) {
if (!_loadMore()) { // acceptable for now (will error out later)
char c = _inputBuffer[_inputPtr];
int i = (int) c;
if (i <= maxCode) {
if (codes[i] != 0) {
if (i != INT_SPACE) {
super(ctxt, features);
_reader = r;
_inputBuffer = ctxt.allocTokenBuffer();
_inputPtr = 0;
_inputEnd = 0;
_objectCodec = codec;
_symbols = st;
_hashSeed = st.hashSeed();
_bufferRecyclable = true;
}
protected final static int FEAT_MASK_TRAILING_COMMA = Feature.ALLOW_TRAILING_COMMA.getMask();
protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();
final int bufSize = _inputEnd;
_currInputProcessed += bufSize;
_currInputRowStart -= bufSize;
_nameStartOffset -= bufSize;
if (_reader != null) {
int count = _reader.read(_inputBuffer, 0, _inputBuffer.length);
if (count > 0) {
_inputPtr = 0;
_inputEnd = count;
return true;
if (_currToken == JsonToken.FIELD_NAME) {
_numTypesValid = NR_UNKNOWN;
if (_tokenIncomplete) {
int i = _skipWSOrEnd();
if (i < 0) { // end-of-input
_binaryValue = null;
if (i == INT_RBRACKET || i == INT_RCURLY) {
if (_parsingContext.expectComma()) {
boolean inObject = _parsingContext.inObject();
if (inObject) {
_updateNameLocation();
String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);
_updateLocation();
switch (i) {
