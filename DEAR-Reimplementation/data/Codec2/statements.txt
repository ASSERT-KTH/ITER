resizeBuf();
this(lineLength, lineSeparator, false);
}
public Base64(int lineLength, byte[] lineSeparator, boolean urlSafe) {
this.lineLength = lineLength;
this.lineSeparator = new byte[lineSeparator.length];
System.arraycopy(lineSeparator, 0, this.lineSeparator, 0, lineSeparator.length);
if (lineLength > 0) {
this.encodeSize = 4 + lineSeparator.length;
this.decodeSize = this.encodeSize - 1;
if (containsBase64Byte(lineSeparator)) {
this.encodeTable = urlSafe ? URL_SAFE_ENCODE_TABLE : STANDARD_ENCODE_TABLE;
}
static final byte[] CHUNK_SEPARATOR = {'\r','\n'};
private static final byte[] STANDARD_ENCODE_TABLE = {
private static final byte[] URL_SAFE_ENCODE_TABLE = {
private static final byte[] DECODE_TABLE = {
return buf != null ? pos - readPos : 0;
if (buf == null) {
buf = new byte[8192];
pos = 0;
readPos = 0;
}
if (buf != null) {
int len = Math.min(avail(), bAvail);
if (buf != b) {
System.arraycopy(buf, readPos, b, bPos, len);
readPos += len;
if (readPos >= pos) {
return len;
if (eof) {
if (inAvail < 0) {
eof = true;
if (buf == null || buf.length - pos < encodeSize) {
switch (modulus) {
if (lineLength > 0) {
System.arraycopy(lineSeparator, 0, buf, pos, lineSeparator.length);
pos += lineSeparator.length;
}
return octet == PAD || (octet >= 0 && octet < DECODE_TABLE.length && DECODE_TABLE[octet] != -1);
for (int i = 0; i < arrayOctet.length; i++) {
if (isBase64(arrayOctet[i])) {
return false;
return this.buf != null;
buf = null;
this(false);
}
this(CHUNK_SIZE, CHUNK_SEPARATOR, urlSafe);
}
this(lineLength, CHUNK_SEPARATOR);
