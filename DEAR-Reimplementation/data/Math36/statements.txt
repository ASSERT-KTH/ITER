float result = numerator.floatValue() / denominator.floatValue();
return result;
double result = numerator.doubleValue() / denominator.doubleValue();
return result;
public BigFraction(BigInteger num, BigInteger den) {
MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR);
MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR);
if (BigInteger.ZERO.equals(den)) {
if (BigInteger.ZERO.equals(num)) {
numerator = BigInteger.ZERO;
denominator = BigInteger.ONE;
final BigInteger gcd = num.gcd(den);
if (BigInteger.ONE.compareTo(gcd) < 0) {
num = num.divide(gcd);
den = den.divide(gcd);
if (BigInteger.ZERO.compareTo(den) > 0) {
numerator = num;
denominator = den;
}
this(BigInteger.valueOf(num), BigInteger.ONE);
}
this(BigInteger.valueOf(num), BigInteger.valueOf(den));
}
public static final BigFraction TWO = new BigFraction(2);
public static final BigFraction ONE = new BigFraction(1);
public static final BigFraction ZERO = new BigFraction(0);
public static final BigFraction MINUS_ONE = new BigFraction(-1);
public static final BigFraction FOUR_FIFTHS = new BigFraction(4, 5);
public static final BigFraction ONE_FIFTH = new BigFraction(1, 5);
public static final BigFraction ONE_HALF = new BigFraction(1, 2);
public static final BigFraction ONE_QUARTER = new BigFraction(1, 4);
public static final BigFraction ONE_THIRD = new BigFraction(1, 3);
public static final BigFraction THREE_FIFTHS = new BigFraction(3, 5);
public static final BigFraction THREE_QUARTERS = new BigFraction(3, 4);
public static final BigFraction TWO_FIFTHS = new BigFraction(2, 5);
public static final BigFraction TWO_QUARTERS = new BigFraction(2, 4);
public static final BigFraction TWO_THIRDS = new BigFraction(2, 3);
private static final BigInteger ONE_HUNDRED = BigInteger.valueOf(100);
this(num, BigInteger.ONE);
}
throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR);
num = num.negate();
den = den.negate();
public BigFraction(final double value) throws MathIllegalArgumentException {
if (Double.isNaN(value)) {
throw new MathIllegalArgumentException(LocalizedFormats.NAN_VALUE_CONVERSION);
if (Double.isInfinite(value)) {
throw new MathIllegalArgumentException(LocalizedFormats.INFINITE_VALUE_CONVERSION);
final long bits = Double.doubleToLongBits(value);
final long sign = bits & 0x8000000000000000L;
