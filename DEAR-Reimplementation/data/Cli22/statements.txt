processNonOptionToken(token);
eatTheRest = true;
tokens.add("--");
tokens.add(value);
}
while (iter.hasNext())
else if (stopAtNonOption)
processOptionToken(token, stopAtNonOption);
if (stopAtNonOption && !options.hasOption(token))
tokens.add(token);
}
if (token.length() == 2 || options.hasOption(token))
else if ("-".equals(token))
else if (token.startsWith("-"))
eatTheRest = false;
tokens.clear();
}
init();
this.options = options;
Iterator iter = Arrays.asList(arguments).iterator();
while (iter.hasNext())
String token = (String) iter.next();
if (token.startsWith("--"))
gobble(iter);
}
return (String[]) tokens.toArray(new String[tokens.size()]);
if (eatTheRest)
}
public class PosixParser extends Parser
private List tokens = new ArrayList();
int pos = token.indexOf('=');
String opt = pos == -1 ? token : token.substring(0, pos); // --foo
if (!options.hasOption(opt))
processNonOptionToken(token);
tokens.add(opt);
if (pos != -1)
tokens.add(token.substring(pos + 1));
}
tokens.add(token);
burstToken(token, stopAtNonOption);
tokens.add(token);
tokens.add(iter.next());
eatTheRest = true;
for (int i = 1; i < token.length(); i++)
String ch = String.valueOf(token.charAt(i));
if (options.hasOption(ch))
tokens.add("-" + ch);
currentOption = options.getOption(ch);
if (currentOption.hasArg() && (token.length() != (i + 1)))
tokens.add(token.substring(i + 1));
