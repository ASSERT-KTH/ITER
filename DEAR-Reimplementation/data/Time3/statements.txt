setMillis(getChronology().hours().add(getMillis(), hours));
}
super(year, monthOfYear, dayOfMonth,
}
return ISODateTimeFormat.dateTime().print(this);
switch (iRoundingMode) {
break;
super.setMillis(instant);
}
setMillis(type.getField(getChronology()).add(getMillis(), amount));
}
setMillis(getChronology().years().add(getMillis(), years));
}
setMillis(getChronology().months().add(getMillis(), months));
}
setMillis(getChronology().weeks().add(getMillis(), weeks));
}
setMillis(getChronology().days().add(getMillis(), days));
}
if (type == null) {
super();
}
super(zone);
}
super(chronology);
}
super(instant);
}
super(instant, zone);
}
super(instant, chronology);
}
super(instant, (Chronology) null);
}
super(instant, zone);
}
super(instant, DateTimeUtils.getChronology(chronology));
}
super(year, monthOfYear, dayOfMonth, hourOfDay, minuteOfHour, secondOfMinute, millisOfSecond);
}
super(year, monthOfYear, dayOfMonth,
}
return new MutableDateTime();
if (zone == null) {
throw new NullPointerException("Zone must not be null");
return new MutableDateTime(zone);
if (chronology == null) {
throw new NullPointerException("Chronology must not be null");
return new MutableDateTime(chronology);
return parse(str, ISODateTimeFormat.dateTimeParser().withOffsetParsed());
