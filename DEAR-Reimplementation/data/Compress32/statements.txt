currEntry.setGroupId(Integer.parseInt(val));
paxHeaders();
Map<String, String> headers = parsePaxHeaders(this);
getNextEntry(); // Get the actual file entry
applyPaxHeadersToCurrentEntry(headers);
for (Entry<String, String> ent : headers.entrySet()){
String key = ent.getKey();
String val = ent.getValue();
if ("path".equals(key)){
} else if ("linkpath".equals(key)){
} else if ("gid".equals(key)){
return getNextTarEntry();
if (entrySize - entryOffset > Integer.MAX_VALUE) {
return (int) (entrySize - entryOffset);
Map<String, String> headers = new HashMap<String, String>();
int len = 0;
int read = 0;
while((ch = i.read()) != -1) {
read++;
if (ch == ' '){ // End of length string
ByteArrayOutputStream coll = new ByteArrayOutputStream();
while((ch = i.read()) != -1) {
read++;
if (ch == '='){ // end of keyword
String keyword = coll.toString(CharsetNames.UTF_8);
final int restLen = len - read;
byte[] rest = new byte[restLen];
int got = IOUtils.readFully(i, rest);
if (got != restLen) {
String value = new String(rest, 0,
headers.put(keyword, value);
break;
coll.write((byte) ch);
len *= 10;
len += ch - '0';
if (ch == -1){ // EOF
break;
}
return headers;
if (currEntry == null) {
numToRead = Math.min(numToRead, available());
totalRead = is.read(buf, offset, numToRead);
if (totalRead == -1) {
count(totalRead);
entryOffset += totalRead;
return totalRead;
long numRecords = (this.entrySize / this.recordSize) + 1;
long padding = (numRecords * this.recordSize) - this.entrySize;
long skipped = IOUtils.skip(is, padding);
count(skipped);
