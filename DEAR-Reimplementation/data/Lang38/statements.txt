rule = selectNumberRule(Calendar.MILLISECOND, tokenLen);
break;
calendar = (Calendar) calendar.clone();
calendar.setTimeZone(mTimeZone);
return getInstance(pattern, timeZone, null);
rule = selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);
break;
rule = selectNumberRule(Calendar.SECOND, tokenLen);
break;
if (i + 1 < length && pattern.charAt(i + 1) == '\'') {
inLiteral = !inLiteral;
rule = selectNumberRule(Calendar.MINUTE, tokenLen);
break;
return format(calendar, new StringBuffer(mMaxLengthEstimate)).toString();
if (mTimeZoneForced) {
return applyRules(calendar, buf);
Rule[] rules = mRules;
int len = mRules.length;
for (int i = 0; i < len; i++) {
rules[i].appendTo(buf, calendar);
return buf;
rule = selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);
break;
locale = Locale.getDefault();
rule = TwoDigitMonthField.INSTANCE;
} else if (tokenLen == 3) {
} else if (tokenLen == 2) {
rule = selectNumberRule(Calendar.YEAR, tokenLen);
return new TwoDigitNumberField(field);
return new PaddedNumberField(field, padding);
super();
if (pattern == null) {
mPattern = pattern;
mTimeZoneForced = (timeZone != null);
if (timeZone == null) {
mTimeZone = timeZone;
mLocaleForced = (locale != null);
if (locale == null) {
mLocale = locale;
}
private static final Map<FastDateFormat, FastDateFormat> cInstanceCache = new HashMap<FastDateFormat, FastDateFormat>(7);
private static final Map<Object, FastDateFormat> cDateInstanceCache = new HashMap<Object, FastDateFormat>(7);
private static final Map<Object, FastDateFormat> cTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);
private static final Map<Object, FastDateFormat> cDateTimeInstanceCache = new HashMap<Object, FastDateFormat>(7);
private static final Map<Object, String> cTimeZoneDisplayCache = new HashMap<Object, String>(7);
FastDateFormat emptyFormat = new FastDateFormat(pattern, timeZone, locale);
FastDateFormat format = cInstanceCache.get(emptyFormat);
if (format == null) {
format = emptyFormat;
format.init();// convert shell format into usable one
