Node assign = n.getFirstChild();
Node lhs = assign.getFirstChild();
Preconditions.checkState(lhs.isName());
Node rhs = assign.getLastChild();
lhs.addChildToBack(rhs.detachFromParent());
var.addChildToBack(lhs.detachFromParent());
redeclaration = true;
JSDocInfo info = new JSDocInfo();
info.addSuppression("duplicate");
var.setJSDocInfo(info);
applyCollapses();
compiler.reportCodeChange();
for (Collapse collapse : collapses) {
Node var = new Node(Token.VAR);
var.copyInformationFrom(collapse.startNode);
collapse.parent.addChildBefore(var, collapse.startNode);
boolean redeclaration = false;
for (Node n = collapse.startNode; n != collapse.endNode;) {
Node next = n.getNext();
Preconditions.checkState(var.getNext() == n);
collapse.parent.removeChildAfter(var);
if (n.isVar()) {
while(n.hasChildren()) {
var.addChildToBack(n.removeFirstChild());
n = next;
}
if (redeclaration) {
}
}
CollapseVariableDeclarations(AbstractCompiler compiler) {
private final List<Collapse> collapses = Lists.newArrayList();
private final Set<Node> nodesToCollapse = Sets.newHashSet();
Preconditions.checkState(!compiler.getLifeCycleStage().isNormalized());
this.compiler = compiler;
}
collapses.clear();
nodesToCollapse.clear();
NodeTraversal.traverse(compiler, root, new GatherCollapses());
if (!collapses.isEmpty()) {
}
