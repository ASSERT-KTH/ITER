addExpr(first, p, context);
cc.addOp(opstr, true);
addExpr(last, p, rhsContext);
add(first, Context.IN_FOR_INIT_CLAUSE);
Preconditions.checkState(childCount == 1);
if (n.getFirstChild().isNumber()) {
cc.addOp(NodeUtil.opToStrNoFail(type), false);
addExpr(first, NodeUtil.precedence(type), Context.OTHER);
break;
cc.endStatement(true);
if (cc.shouldPreserveExtraBlocks()) {
return;
cc.listSeparator();
addExpr(n, isArrayOrFunctionArgument ? 1 : 0,
Preconditions.checkState(childCount == 3);
int p = NodeUtil.precedence(type);
Context rhsContext = Context.OTHER;
addExpr(first, p + 1, context);
cc.addOp("?", true);
addExpr(first.getNext(), 1, rhsContext);
cc.addOp(":", true);
addExpr(last, 1, rhsContext);
break;
if (childCount == 4) {
add("for(");
if (first.isVar()) {
addExpr(first, 0, Context.IN_FOR_INIT_CLAUSE);
add(";");
add(first.getNext());
add(";");
add(first.getNext().getNext());
add(")");
addNonEmptyStatement(
nodeToProcess = firstAndOnlyChild;
if (n.isLabel()) {
return (n.isFunction() || n.isDo());
add("(");
add(n, Context.OTHER);
add(")");
add("return");
if (childCount == 1) {
add(first);
cc.endStatement();
break;
Preconditions.checkState(childCount == 2);
unrollBinaryOperator(n, Token.COMMA, ",", context,
break;
Preconditions.checkState(childCount == 0);
break;
if (count > 1) {
