behavior.afterExitScope(t, new ReferenceMapWrapper(referenceMap));
Predicate<Var> varFilter) {
private final Map<Var, ReferenceCollection> referenceMap =
private final Deque<BasicBlock> blockStack = new ArrayDeque<BasicBlock>();
this.compiler = compiler;
this.behavior = behavior;
this.varFilter = varFilter;
}
static final Behavior DO_NOTHING_BEHAVIOR = new Behavior() {
NodeTraversal.traverseRoots(
}
if (n.isName()) {
if (n.getString().equals("arguments")) {
v = t.getScope().getVar(n.getString());
if (v != null && varFilter.apply(v)) {
addReference(v, new Reference(n, t, blockStack.peek()));
if (isBlockBoundary(n, parent)) {
}
Node n = t.getScope().getRootNode();
BasicBlock parent = blockStack.isEmpty() ? null : blockStack.peek();
blockStack.push(new BasicBlock(parent, n));
}
blockStack.pop();
if (t.getScope().isGlobal()) {
compiler.updateGlobalVarReferences(referenceMap, t.getScopeRoot());
behavior.afterExitScope(t, compiler.getGlobalVarReferences());
}
if (isBlockBoundary(n, parent)) {
return true;
if (parent != null) {
switch (parent.getType()) {
return n.isCase();
ReferenceCollection referenceInfo = referenceMap.get(v);
if (referenceInfo == null) {
referenceInfo = new ReferenceCollection();
referenceMap.put(v, referenceInfo);
referenceInfo.add(reference);
}
this(compiler, behavior, Predicates.<Var>alwaysTrue());
}
NodeTraversal.traverse(compiler, scriptRoot, this);
}
return referenceMap.keySet();
return var.scope;
return referenceMap.get(v);
v = t.getScope().getArgumentsVar();
blockStack.pop();
blockStack.push(new BasicBlock(blockStack.peek(), n));
return true;
return n != parent.getFirstChild();
