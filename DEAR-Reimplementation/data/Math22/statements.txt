return true;
return false;
final double nhalf = numeratorDegreesOfFreedom / 2;
final double mhalf = denominatorDegreesOfFreedom / 2;
final double logx = FastMath.log(x);
final double logn = FastMath.log(numeratorDegreesOfFreedom);
final double logm = FastMath.log(denominatorDegreesOfFreedom);
final double lognxm = FastMath.log(numeratorDegreesOfFreedom * x +
return FastMath.exp(nhalf * logn + nhalf * logx - logx +
if (x < lower || x > upper) {
return 1 / (upper - lower);
return upper;
return 0;
this(lower, upper, DEFAULT_INVERSE_ABSOLUTE_ACCURACY);
}
this(newWell19937c(), lower, upper, inverseCumAccuracy);
}
super(rng);
if (lower >= upper) {
this.lower = lower;
this.upper = upper;
solverAbsoluteAccuracy = inverseCumAccuracy;
}
this(numeratorDegreesOfFreedom, denominatorDegreesOfFreedom,
}
this(new Well19937c(), numeratorDegreesOfFreedom,
}
super(rng);
private double numericalVariance = Double.NaN;
private boolean numericalVarianceIsCalculated = false;
if (numeratorDegreesOfFreedom <= 0) {
if (denominatorDegreesOfFreedom <= 0) {
this.numeratorDegreesOfFreedom = numeratorDegreesOfFreedom;
this.denominatorDegreesOfFreedom = denominatorDegreesOfFreedom;
solverAbsoluteAccuracy = inverseCumAccuracy;
}
throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,
throw new NotStrictlyPositiveException(LocalizedFormats.DEGREES_OF_FREEDOM,
if (x <= 0) {
ret = 0;
double n = numeratorDegreesOfFreedom;
double m = denominatorDegreesOfFreedom;
ret = Beta.regularizedBeta((n * x) / (m + n * x),
return ret;
return numeratorDegreesOfFreedom;
return denominatorDegreesOfFreedom;
return solverAbsoluteAccuracy;
final double denominatorDF = getDenominatorDegreesOfFreedom();
if (denominatorDF > 2) {
return denominatorDF / (denominatorDF - 2);
