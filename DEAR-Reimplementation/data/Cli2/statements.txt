public class PosixParser extends Parser {
private ArrayList tokens = new ArrayList();
eatTheRest = false;
tokens.clear();
currentOption = null;
}
init();
this.options = options;
Iterator iter = Arrays.asList(arguments).iterator();
while (iter.hasNext())
token = (String) iter.next();
if (token.startsWith("--"))
else if ("-".equals(token))
else if (token.startsWith("-"))
int tokenLength = token.length();
if (tokenLength == 2)
processOptionToken(token, stopAtNonOption);
else if (options.hasOption(token)) {
burstToken(token, stopAtNonOption);
}
gobble(iter);
return (String[]) tokens.toArray(new String[] {});
if (eatTheRest)
}
if (this.options.hasOption(token))
currentOption = this.options.getOption(token);
tokens.add(token);
}
int tokenLength = token.length();
for (int i = 1; i < tokenLength; i++)
String ch = String.valueOf(token.charAt(i));
boolean hasOption = options.hasOption(ch);
if (hasOption)
tokens.add("-" + ch);
currentOption = options.getOption(ch);
if (currentOption.hasArg() && (token.length() != (i + 1)))
tokens.add(token.substring(i + 1));
break;
else if (stopAtNonOption)
tokens.add("-" + ch);
}
if (token.indexOf('=') != -1)
tokens.add(token.substring(0, token.indexOf('=')));
tokens.add(token.substring(token.indexOf('=') + 1,
tokens.add(token);
processSingleHyphen(token);
tokens.add(token);
if (stopAtNonOption)
process(token);
tokens.add(token);
