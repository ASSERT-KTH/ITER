return (double) (getSampleSize() * getNumberOfSuccesses()) / (double) getPopulationSize();
if (!numericalVarianceIsCalculated) {
numericalVariance = calculateNumericalVariance();
numericalVarianceIsCalculated = true;
return numericalVariance;
final double N = getPopulationSize();
final double m = getNumberOfSuccesses();
final double n = getSampleSize();
return (n * m * (N - n) * (N - m)) / (N * N * (N - 1));
return FastMath.max(0,
return FastMath.min(getNumberOfSuccesses(), getSampleSize());
return numberOfSuccesses;
return populationSize;
return sampleSize;
this(new Well19937c(), populationSize, numberOfSuccesses, sampleSize);
}
super(rng);
private double numericalVariance = Double.NaN;
private boolean numericalVarianceIsCalculated = false;
if (populationSize <= 0) {
if (numberOfSuccesses < 0) {
if (sampleSize < 0) {
if (numberOfSuccesses > populationSize) {
if (sampleSize > populationSize) {
this.numberOfSuccesses = numberOfSuccesses;
this.populationSize = populationSize;
this.sampleSize = sampleSize;
}
throw new NotStrictlyPositiveException(LocalizedFormats.POPULATION_SIZE,
throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SUCCESSES,
throw new NotPositiveException(LocalizedFormats.NUMBER_OF_SAMPLES,
throw new NumberIsTooLargeException(LocalizedFormats.NUMBER_OF_SUCCESS_LARGER_THAN_POPULATION_SIZE,
throw new NumberIsTooLargeException(LocalizedFormats.SAMPLE_SIZE_LARGER_THAN_POPULATION_SIZE,
int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);
if (x < domain[0]) {
ret = 0.0;
} else if (x >= domain[1]) {
ret = 1.0;
ret = innerCumulativeProbability(domain[0], x, 1);
return ret;
return new int[] { getLowerDomain(n, m, k), getUpperDomain(m, k) };
return FastMath.max(0, m - (n - k));
return FastMath.min(k, m);
int[] domain = getDomain(populationSize, numberOfSuccesses, sampleSize);
if (x < domain[0] || x > domain[1]) {
ret = 0.0;
double p = (double) sampleSize / (double) populationSize;
double q = (double) (populationSize - sampleSize) / (double) populationSize;
double p1 = SaddlePointExpansion.logBinomialProbability(x,
double p2 =
