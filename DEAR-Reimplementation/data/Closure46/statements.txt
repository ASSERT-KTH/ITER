RecordTypeBuilder builder = new RecordTypeBuilder(registry);
for (String property : properties.keySet()) {
if (that.toMaybeRecordType().hasProperty(property) &&
}
return builder.build();
if (!that.isRecordType()) {
return false;
return RecordType.isSubtype(this, that.toMaybeRecordType());
Set<String> keySet = properties.keySet();
Map<String, JSType> otherProps = otherRecord.properties;
if (!otherProps.keySet().equals(keySet)) {
builder.addProperty(property, getPropertyType(property),
}
for (String property : thatRecord.properties.keySet()) {
if (!hasProperty(property)) {
builder.addProperty(property, thatRecord.getPropertyType(property),
}
return builder.build();
builder.addProperty(property, getPropertyType(property),
RecordType otherRecord = other.toMaybeRecordType();
if (otherRecord == this) {
RecordType thatRecord = that.toMaybeRecordType();
RecordTypeBuilder builder = new RecordTypeBuilder(registry);
for (String property : properties.keySet()) {
if (thatRecord.hasProperty(property) &&
return false;
if (!that.isRecordType()) {
for (String property : typeB.properties.keySet()) {
if (!typeA.hasProperty(property)) {
if (registry.getNativeObjectType(
return true;
return this;
if (JSType.isSubtypeHelper(this, that)) {
}
if (!other.isRecordType()) {
return registry.getNativeObjectType(JSTypeNative.OBJECT_TYPE);
if (typeA.isPropertyTypeDeclared(property)) {
if (!propA.isEquivalentTo(propB)) {
JSType propA = typeA.getPropertyType(property);
JSType propB = typeB.getPropertyType(property);
if (!propA.isUnknownType() && !propB.isUnknownType()) {
if (that.isRecordType()) {
}
return true;
for (String key : keySet) {
if (!otherProps.get(key).isEquivalentTo(properties.get(key))) {
super(registry, null, null);
private final SortedMap<String, JSType> properties = Maps.newTreeMap();
private boolean isFrozen = false;
setPrettyPrint(true);
