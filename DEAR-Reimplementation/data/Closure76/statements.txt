return false;
return VariableLiveness.KILL;
} else if (state == VariableLiveness.KILL) {
return;
return true;
if (NodeUtil.isLhs(n, n.getParent())) {
return VariableLiveness.READ;
if (!ControlFlowGraph.isEnteringNewCfgNode(sibling)) {
state = isVariableReadBeforeKill(sibling, variable);
if (state == VariableLiveness.READ) {
if (NodeUtil.isName(n) && variable.equals(n.getString())) {
Preconditions.checkState(n.getParent().getType() == Token.ASSIGN);
Node rhs = n.getNext();
VariableLiveness state = isVariableReadBeforeKill(rhs, variable);
if (state == VariableLiveness.READ) {
switch (n.getType()) {
return; // Variable not dead.
VariableLiveness state = VariableLiveness.MAYBE_LIVE;
switch (n.getParent().getType()) {
for(Node sibling = n.getNext(); sibling != null;
if (!ControlFlowGraph.isEnteringNewCfgNode(child)) { // Not a FUNCTION
VariableLiveness state = isVariableReadBeforeKill(child, variable);
if (state != VariableLiveness.MAYBE_LIVE) {
return state;
return VariableLiveness.MAYBE_LIVE;
while (n != exprRoot) {
for (Node child = n.getFirstChild();
child != null; child = child.getNext()) {
if (n.hasChildren()) {
tryRemoveAssignment(t, n.getFirstChild(), state);
return checkHookBranchReadBeforeKill(
VariableLiveness v1 = isVariableReadBeforeKill(
VariableLiveness v2 = isVariableReadBeforeKill(
if (v1 == VariableLiveness.READ || v2 == VariableLiveness.READ) {
return VariableLiveness.READ;
if (state.getIn().isLive(var) &&
n = n.getParent();
}
if (state.getOut().isLive(var)) {
Var var = scope.getVar(name);
if (liveness.getEscapedLocals().contains(var)) {
if (rhs != null &&
tryRemoveAssignment(t, rhs, exprRoot, state);
rhs = lhs.getNext();
ControlFlowGraph<Node> cfg = t.getControlFlowGraph();
liveness = new LiveVariablesAnalysis(cfg, scope, compiler);
liveness.analyze();
tryRemoveDeadAssignments(t, cfg);
}
Iterable<DiGraphNode<Node, Branch>> nodes = cfg.getDirectedGraphNodes();
