private SourceMap(SourceMapGenerator generator) {
private List<LocationMapping> prefixMappings = Collections.emptyList();
private final Map<String, String> sourceLocationFixupCache =
this.generator = generator;
}
String sourceFile = node.getSourceFileName();
if (sourceFile == null || node.getLineno() < 0) {
sourceFile = fixupSourceLocation(sourceFile);
String originalName = (String) node.getProp(Node.ORIGINALNAME_PROP);
generator.addMapping(
}
if (prefixMappings.isEmpty()) {
return sourceFile;
generator.appendTo(out, name);
}
generator.setStartingPosition(offsetLine, offsetIndex);
}
generator.validate(validate);
}
this.prefixMappings = sourceMapLocationMappings;
}
public SourceMapConsumerV3() {
private ArrayList<ArrayList<Entry>> lines = null;
}
int version = sourceMapRoot.getInt("version");
if (version != 3) {
String file = sourceMapRoot.getString("file");
if (file.isEmpty()) {
if (sourceMapRoot.has("sections")) {
lineCount = sourceMapRoot.getInt("lineCount");
String lineMap = sourceMapRoot.getString("mappings");
sources = getJavaStringArray(sourceMapRoot.getJSONArray("sources"));
names = getJavaStringArray(sourceMapRoot.getJSONArray("names"));
lines = Lists.newArrayListWithCapacity(lineCount);
new MappingBuilder(lineMap).build();
}
}
lineNumber--;
column--;
if (lineNumber < 0 || lineNumber >= lines.size()) {
Preconditions.checkState(lineNumber >= 0);
Preconditions.checkState(column >= 0);
if (lines.get(lineNumber) == null) {
ArrayList<Entry> entries = lines.get(lineNumber);
Preconditions.checkState(entries.size() > 0);
if (entries.get(0).getGeneratedColumn() > column) {
int index = search(entries, column, 0, entries.size() - 1);
Preconditions.checkState(index >= 0, "unexpected:%s", index);
return getOriginalMappingForEntry(entries.get(index));
int len = array.length();
