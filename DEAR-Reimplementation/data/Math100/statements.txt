incrementJacobianEvaluationsCounter();
Arrays.fill(jacobian, 0);
for (int i = 0, index = 0; i < rows; i++) {
WeightedMeasurement wm = measurements[i];
double factor = -Math.sqrt(wm.getWeight());
for (int j = 0; j < cols; ++j) {
jacobian[index++] = factor * wm.getPartial(parameters[j]);
}
updateJacobian();
final int rows = problem.getMeasurements().length;
final int cols = problem.getAllParameters().length;
final int max= cols * rows;
double[][] jTj = new double[cols][cols];
for (int i = 0; i < cols; ++i) {
for (int j = i; j < cols; ++j) {
double sum = 0;
for (int k = 0; k < max; k += cols) {
sum += jacobian[k + i] * jacobian[k + j];
WeightedMeasurement[] wm = problem.getMeasurements();
double criterion = 0;
for (int i = 0; i < wm.length; ++i) {
double residual = wm[i].getResidual();
criterion += wm[i].getWeight() * residual * residual;
return Math.sqrt(criterion / wm.length);
return costEvaluations;
if (++costEvaluations > maxCostEval) {
cost = 0;
for (int i = 0, index = 0; i < rows; i++, index += cols) {
WeightedMeasurement wm = measurements[i];
double residual = wm.getResidual();
residuals[i] = Math.sqrt(wm.getWeight()) * residual;
cost += wm.getWeight() * residual * residual;
cost = Math.sqrt(cost);
}
protected AbstractEstimator() {
}
this.maxCostEval = maxCostEval;
}
++jacobianEvaluations;
}
costEvaluations = 0;
jacobianEvaluations = 0;
measurements = problem.getMeasurements();
parameters = problem.getUnboundParameters();
rows= measurements.length;
cols= parameters.length;
jacobian= new double[rows * cols];
residuals = new double[rows];
cost = Double.POSITIVE_INFINITY;
}
