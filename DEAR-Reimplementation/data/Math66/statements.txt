d = p / q;
u = x + d;
if (u - a < tol2
e = a - x;
public BrentOptimizer() {
setMaxEvaluations(Integer.MAX_VALUE);
setMaximalIterationCount(100);
setAbsoluteAccuracy(1E-10);
setRelativeAccuracy(1.0e-14);
}
private static final double GOLDEN_SECTION = 0.5 * (3 - Math.sqrt(5));
clearResult();
return localMin(getGoalType() == GoalType.MINIMIZE,
if (eps <= 0) {
if (t <= 0) {
if (lo < hi) {
a = lo;
b = hi;
double x = mid;
double v = x;
double w = x;
double d = 0;
double e = 0;
double fx = computeObjectiveValue(f, x);
if (goalType == GoalType.MAXIMIZE) {
double fv = fx;
double fw = fx;
int count = 0;
while (count < maximalIterationCount) {
double m = 0.5 * (a + b);
final double tol1 = eps * Math.abs(x) + t;
final double tol2 = 2 * tol1;
if (Math.abs(x - m) > tol2 - 0.5 * (b - a)) {
double p = 0;
double q = 0;
double r = 0;
double u = 0;
if (Math.abs(e) > tol1) { // Fit parabola.
r = (x - w) * (fx - fv);
q = (x - v) * (fx - fw);
p = (x - v) * q - (x - w) * r;
q = 2 * (q - r);
if (q > 0) {
p = -p;
q = -q;
r = e;
e = d;
if (p > q * (a - x)
if (x < m) {
e = b - x;
