throw new NumberFormatException(str + " is not a valid number.");
return false;
if (str == null) {
if (StringUtils.isBlank(str)) {
if (str.startsWith("--")) {
if (str.startsWith("0x") || str.startsWith("-0x")) {
char lastChar = str.charAt(str.length() - 1);
int decPos = str.indexOf('.');
int expPos = str.indexOf('e') + str.indexOf('E') + 1;
if (decPos > -1) {
if (expPos > -1) {
mant = str;
dec = null;
if (!Character.isDigit(lastChar)) {
if (expPos > -1 && expPos < str.length() - 1) {
exp = null;
String numeric = str.substring(0, str.length() - 1);
boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
if (dec == null
return createLong(numeric);
if (str == null) {
for (int i = str.length() - 1; i >= 0; i--) {
if (str.charAt(i) != '0') {
return false;
if (str == null) {
return Long.valueOf(str);
if (StringUtils.isEmpty(str)) {
for (int i = 0; i < str.length(); i++) {
if (!Character.isDigit(str.charAt(i))) {
return true;
public static final Long LONG_ZERO = new Long(0L);
public static final Long LONG_ONE = new Long(1L);
public static final Long LONG_MINUS_ONE = new Long(-1L);
public static final Integer INTEGER_ZERO = new Integer(0);
public static final Integer INTEGER_ONE = new Integer(1);
public static final Integer INTEGER_MINUS_ONE = new Integer(-1);
public static final Short SHORT_ZERO = new Short((short) 0);
public static final Short SHORT_ONE = new Short((short) 1);
public static final Short SHORT_MINUS_ONE = new Short((short) -1);
public static final Byte BYTE_ZERO = new Byte((byte) 0);
public static final Byte BYTE_ONE = new Byte((byte) 1);
public static final Byte BYTE_MINUS_ONE = new Byte((byte) -1);
public static final Double DOUBLE_ZERO = new Double(0.0d);
public static final Double DOUBLE_ONE = new Double(1.0d);
public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);
public static final Float FLOAT_ZERO = new Float(0.0f);
public static final Float FLOAT_ONE = new Float(1.0f);
public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);
super();
throw new NumberFormatException(str + " is not a valid number.");
return false;
if (str == null) {
if (StringUtils.isBlank(str)) {
if (str.startsWith("--")) {
if (str.startsWith("0x") || str.startsWith("-0x")) {
char lastChar = str.charAt(str.length() - 1);
int decPos = str.indexOf('.');
int expPos = str.indexOf('e') + str.indexOf('E') + 1;
if (decPos > -1) {
if (expPos > -1) {
mant = str;
dec = null;
if (!Character.isDigit(lastChar)) {
if (expPos > -1 && expPos < str.length() - 1) {
exp = null;
String numeric = str.substring(0, str.length() - 1);
boolean allZeros = isAllZeros(mant) && isAllZeros(exp);
switch (lastChar) {
if (dec == null
return createLong(numeric);
if (str == null) {
for (int i = str.length() - 1; i >= 0; i--) {
if (str.charAt(i) != '0') {
return false;
if (str == null) {
return Long.valueOf(str);
if (StringUtils.isEmpty(str)) {
for (int i = 0; i < str.length(); i++) {
if (!Character.isDigit(str.charAt(i))) {
return true;
public static final Long LONG_ZERO = new Long(0L);
public static final Long LONG_ONE = new Long(1L);
public static final Long LONG_MINUS_ONE = new Long(-1L);
public static final Integer INTEGER_ZERO = new Integer(0);
public static final Integer INTEGER_ONE = new Integer(1);
public static final Integer INTEGER_MINUS_ONE = new Integer(-1);
public static final Short SHORT_ZERO = new Short((short) 0);
public static final Short SHORT_ONE = new Short((short) 1);
public static final Short SHORT_MINUS_ONE = new Short((short) -1);
public static final Byte BYTE_ZERO = new Byte((byte) 0);
public static final Byte BYTE_ONE = new Byte((byte) 1);
public static final Byte BYTE_MINUS_ONE = new Byte((byte) -1);
public static final Double DOUBLE_ZERO = new Double(0.0d);
public static final Double DOUBLE_ONE = new Double(1.0d);
public static final Double DOUBLE_MINUS_ONE = new Double(-1.0d);
public static final Float FLOAT_ZERO = new Float(0.0f);
public static final Float FLOAT_ONE = new Float(1.0f);
public static final Float FLOAT_MINUS_ONE = new Float(-1.0f);
super();
