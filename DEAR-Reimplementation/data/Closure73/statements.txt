appendHexJavaScriptRepresentation(sb, c);
appendHexJavaScriptRepresentation(c, sb);
}
}
if (Character.isSupplementaryCodePoint(codePoint)) {
out.append("\\u")
}
if (outputCharsetEncoder != null) {
if (c > 0x1f && c <= 0x7f) {
sb.append(c);
if (childCount !=
add(jsString(n.getString(), outputCharsetEncoder));
break;
switch (s.charAt(i)) {
char c = s.charAt(i);
switch (c) {
int singleq = 0, doubleq = 0;
for (int i = 0; i < s.length(); i++) {
if (singleq < doubleq) {
quote = '\"';
doublequote = "\\\"";
singlequote = "\'";
return strEscape(s, quote, doublequote, singlequote, "\\\\",
StringBuilder sb = new StringBuilder(s.length() + 2);
sb.append(quote);
for (int i = 0; i < s.length(); i++) {
sb.append(quote);
return sb.toString();
Preconditions.checkState(childCount == 1);
addIdentifier(n.getString());
cc.addOp("=", true);
if (first.getType() == Token.COMMA) {
addExpr(first, 0, getContextForNoInOperator(context));
break;
if (first != null) {
add("var ");
addList(first, false, getContextForNoInOperator(context));
cc.endStatement();
return (context == Context.IN_FOR_INIT_CLAUSE
boolean isFirst = n == firstInList;
if (isFirst) {
addLeftExpr(n, isArrayOrFunctionArgument ? 1 : 0, lhsContext);
addExpr(n, minPrecedence, context);
}
for (Node n = firstInList; n != null; n = n.getNext()) {
}
if ((NodeUtil.precedence(n.getType()) < minPrecedence) ||
add(n, context);
}
if (first == null || first.getType() == Token.EMPTY) {
