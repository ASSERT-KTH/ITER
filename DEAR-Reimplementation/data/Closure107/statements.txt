options.messageBundle = new EmptyMessageBundle();
processedArgs.add(matcher.group(1));
String value = matcher.group(2);
Matcher quotesMatcher = quotesPattern.matcher(value);
if (quotesMatcher.matches()) {
processedArgs.add(value);
} else {
processedArgs.add(arg);
return this.isConfigValid;
if (flags.thirdParty) {
} else if (flags.processJqueryPrimitives) {
conv = new ClosureCodingConvention();
getCommandLineConfig()
CompilerOptions options = new CompilerOptions();
if (flags.processJqueryPrimitives) {
options.setCodingConvention(new ClosureCodingConvention());
options.setExtraAnnotationNames(flags.extraAnnotationName);
CompilationLevel level = flags.compilationLevel;
level.setOptionsForCompilationLevel(options);
if (flags.debug) {
if (flags.useTypesForOptimization) {
if (flags.generateExports) {
WarningLevel wLevel = flags.warningLevel;
wLevel.setOptionsForWarningLevel(options);
for (FormattingOption formattingOption : flags.formatting) {
options.closurePass = flags.processClosurePrimitives;
options.jqueryPass = CompilationLevel.ADVANCED_OPTIMIZATIONS == level &&
options.angularPass = flags.angularPass;
if (!flags.translationsFile.isEmpty()) {
} else if (CompilationLevel.ADVANCED_OPTIMIZATIONS == level) {
return options;
return new Compiler(getErrorPrintStream());
List<SourceFile> externs = super.createExterns();
if (flags.useOnlyCustomExterns || isInTestMode()) {
return externs;
super(out, err);
private final Flags flags = new Flags();
private boolean isConfigValid = false;
initConfigFromFlags(args, err);
}
private static final List<String> DEFAULT_EXTERNS_NAMES = ImmutableList.of(
Pattern argPattern = Pattern.compile("(--[a-zA-Z_]+)=(.*)");
Pattern quotesPattern = Pattern.compile("^['\"](.*)['\"]$");
List<String> processedArgs = Lists.newArrayList();
for (String arg : args) {
Matcher matcher = argPattern.matcher(arg);
if (matcher.matches()) {
return processedArgs;
List<String> processedArgs = processArgs(args);
CmdLineParser parser = new CmdLineParser(flags);
