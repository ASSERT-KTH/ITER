char[] thisBuf = buffer;
for (int i = 0; i < thisBuf.length; i++) {
if (thisBuf[i] == ch) {
return true;
int len = (str == null ? 0 : str.length());
if (len > 0) {
int index = indexOf(str, 0);
if (index >= 0) {
deleteImpl(index, index + len, len);
return this;
System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);
size -= len;
}
startIndex = (startIndex < 0 ? 0 : startIndex);
if (str == null || startIndex >= size) {
int strLen = str.length();
if (strLen == 1) {
if (strLen == 0) {
if (strLen > size) {
char[] thisBuf = buffer;
int len = size - strLen + 1;
for (int i = startIndex; i < len; i++) {
for (int j = 0; j < strLen; j++) {
if (str.charAt(j) != thisBuf[i + j]) {
continue outer;
return i;
super();
if (str == null) {
buffer = new char[str.length() + CAPACITY];
append(str);
}
if (str == null) {
int strLen = str.length();
if (strLen > 0) {
int len = length();
ensureCapacity(len + strLen);
str.getChars(0, strLen, buffer, len);
size += strLen;
return this;
return size;
if (capacity > buffer.length) {
return this;
this(CAPACITY);
}
super();
if (initialCapacity <= 0) {
initialCapacity = CAPACITY;
buffer = new char[initialCapacity];
}
buffer = new char[CAPACITY];
char[] thisBuf = buffer;
for (int i = 0; i < thisBuf.length; i++) {
if (thisBuf[i] == ch) {
return true;
int len = (str == null ? 0 : str.length());
if (len > 0) {
int index = indexOf(str, 0);
if (index >= 0) {
deleteImpl(index, index + len, len);
return this;
System.arraycopy(buffer, endIndex, buffer, startIndex, size - endIndex);
size -= len;
}
startIndex = (startIndex < 0 ? 0 : startIndex);
if (str == null || startIndex >= size) {
int strLen = str.length();
if (strLen == 1) {
if (strLen == 0) {
if (strLen > size) {
char[] thisBuf = buffer;
int len = size - strLen + 1;
for (int i = startIndex; i < len; i++) {
for (int j = 0; j < strLen; j++) {
if (str.charAt(j) != thisBuf[i + j]) {
continue outer;
return i;
super();
if (str == null) {
buffer = new char[str.length() + CAPACITY];
append(str);
}
if (str == null) {
int strLen = str.length();
if (strLen > 0) {
int len = length();
ensureCapacity(len + strLen);
str.getChars(0, strLen, buffer, len);
size += strLen;
return this;
return size;
if (capacity > buffer.length) {
return this;
this(CAPACITY);
}
super();
if (initialCapacity <= 0) {
initialCapacity = CAPACITY;
buffer = new char[initialCapacity];
}
buffer = new char[CAPACITY];
