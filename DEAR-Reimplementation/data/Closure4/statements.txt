validator.apply(type);
if (this.isResolved()) {
this.validator = validator;
return true;
return reference;
super.resolveInternal(t, enclosing);
finishPropertyContinuations();
return registry.isLastGeneration() ?
setReferencedAndResolvedType(type, t, enclosing);
return true;
if (propertyContinuations != null) {
if (validator != null) {
setReferencedType(type);
checkEnumElementCycle(t);
setResolvedTypeInternal(getReferencedType());
}
JSType referencedType = getReferencedType();
if (referencedType instanceof EnumElementType &&
}
return reference.hashCode();
super(registry, registry.getNativeObjectType(JSTypeNative.UNKNOWN_TYPE));
private List<PropertyContinuation> propertyContinuations = null;
Preconditions.checkNotNull(reference);
this.reference = reference;
this.sourceName = sourceName;
this.lineno = lineno;
this.charno = charno;
}
ObjectType referencedObjType = getReferencedObjTypeInternal();
if (referencedObjType != null && !referencedObjType.isUnknownType()) {
propertyContinuations = null;
}
return getReferencedTypeInternal();
boolean resolved = resolveViaRegistry(t, enclosing);
if (detectImplicitPrototypeCycle()) {
if (resolved) {
JSType type = registry.getType(reference);
if (type != null) {
if (!isResolved()) {
if (propertyContinuations == null) {
propertyContinuations = Lists.newArrayList();
propertyContinuations.add(
return true;
return super.defineProperty(
for (PropertyContinuation c : propertyContinuations) {
c.commit(this);
}
return reference;
return true;
return true;
