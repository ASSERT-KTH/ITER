break;
long available = numToSkip;
while (numToSkip > 0) {
long skipped = input.skip(numToSkip);
if (skipped == 0) {
return available - numToSkip;
numToSkip -= skipped;
}
private IOUtils(){
}
return copy(input, output, COPY_BUF_SIZE);
final byte[] buffer = new byte[buffersize];
int n = 0;
long count=0;
while (-1 != (n = input.read(buffer))) {
output.write(buffer, 0, n);
count += n;
return count;
return readFully(input, b, 0, b.length);
if (len < 0 || offset < 0 || len + offset > b.length) {
throw new IndexOutOfBoundsException();
int count = 0, x = 0;
while (count != len) {
x = input.read(b, offset + count, len - count);
if (x == -1) {
break;
count += x;
return count;
final ByteArrayOutputStream output = new ByteArrayOutputStream();
copy(input, output);
return output.toByteArray();
if (c != null) {
c.close();
}
} catch (IOException ignored) { // NOPMD
}
