super(ctxt, features);
protected boolean _tokenIncomplete = false;
_reader = r;
_inputBuffer = inputBuffer;
_inputPtr = start;
_inputEnd = end;
_objectCodec = codec;
_symbols = st;
_hashSeed = st.hashSeed();
_bufferRecyclable = bufferRecyclable;
}
protected final static int[] _icLatin1 = CharTypes.getInputCodeLatin1();
if (_currToken == JsonToken.FIELD_NAME) {
return _nextAfterName();
_numTypesValid = NR_UNKNOWN;
if (_tokenIncomplete) {
int i = _skipWSOrEnd();
if (i < 0) { // end-of-input
_binaryValue = null;
if (i == INT_RBRACKET) {
if (i == INT_RCURLY) {
if (_parsingContext.expectComma()) {
_updateLocation();
boolean inObject = _parsingContext.inObject();
if (inObject) {
String name = (i == INT_QUOTE) ? _parseName() : _handleOddName(i);
_parsingContext.setCurrentName(name);
_currToken = JsonToken.FIELD_NAME;
i = _skipColon();
switch (i) {
_tokenIncomplete = true;
t = JsonToken.VALUE_STRING;
break;
if (!inObject) {
_parsingContext = _parsingContext.createChildObjectContext(_tokenInputRow, _tokenInputCol);
t = JsonToken.START_OBJECT;
break;
if (inObject) {
_nextToken = t;
return _currToken;
_currToken = t;
return t;
_nameCopied = false; // need to invalidate if it was copied
JsonToken t = _nextToken;
_nextToken = null;
if (t == JsonToken.START_ARRAY) {
} else if (t == JsonToken.START_OBJECT) {
return (_currToken = t);
int ptr = _inputPtr;
int hash = _hashSeed;
