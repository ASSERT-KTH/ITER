static final byte[] sevenZSignature = {
int nid = header.readUnsignedByte();
if (nid == NID.kPackInfo) {
readPackInfo(header, archive);
nid = header.readUnsignedByte();
if (nid == NID.kUnpackInfo) {
readUnpackInfo(header, archive);
nid = header.readUnsignedByte();
if (nid == NID.kSubStreamsInfo) {
if (nid != NID.kEnd) {
}
archive.packPos = readUint64(header);
final long numPackStreams = readUint64(header);
int nid = header.readUnsignedByte();
if (nid == NID.kSize) {
archive.packSizes = new long[(int)numPackStreams];
for (int i = 0; i < archive.packSizes.length; i++) {
archive.packSizes[i] = readUint64(header);
nid = header.readUnsignedByte();
if (nid == NID.kCRC) {
if (nid != NID.kEnd) {
}
int nid = header.readUnsignedByte();
if (nid != NID.kFolder) {
final long numFolders = readUint64(header);
final Folder[] folders = new Folder[(int)numFolders];
archive.folders = folders;
final int external = header.readUnsignedByte();
if (external != 0) {
for (int i = 0; i < (int)numFolders; i++) {
folders[i] = readFolder(header);
nid = header.readUnsignedByte();
if (nid != NID.kCodersUnpackSize) {
for (final Folder folder : folders) {
folder.unpackSizes = new long[(int)folder.totalOutputStreams];
for (int i = 0; i < folder.totalOutputStreams; i++) {
folder.unpackSizes[i] = readUint64(header);
nid = header.readUnsignedByte();
if (nid == NID.kCRC) {
if (nid != NID.kEnd) {
}
final Folder folder = new Folder();
final long numCoders = readUint64(header);
final Coder[] coders = new Coder[(int)numCoders];
long totalInStreams = 0;
long totalOutStreams = 0;
for (int i = 0; i < coders.length; i++) {
coders[i] = new Coder();
final int bits = header.readUnsignedByte();
final int idSize = bits & 0xf;
