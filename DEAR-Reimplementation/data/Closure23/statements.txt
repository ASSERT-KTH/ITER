if (!right.isNumber()) {
double index = right.getDouble();
int intIndex = (int) index;
if (intIndex != index) {
if (intIndex < 0) {
Node current = left.getFirstChild();
Node elem = null;
for (int i = 0; current != null && i < intIndex; i++) {
if (elem == null) {
error(INDEX_OUT_OF_BOUNDS_ERROR, right);
return n;
return tryFoldArrayAccess(n, left, right);
Node parent = n.getParent();
if (isAssignmentTarget(n)) {
if (left.isArrayLit()) {
return tryFoldGetElem(subtree, left, right);
Preconditions.checkArgument(n.isGetElem());
if (left.isObjectLit()) {
return false;
Node parent = n.getParent();
if ((NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == n)
return subtree;
return n;
return tryFoldAssign(subtree, left, right);
Preconditions.checkArgument(n.isAssign());
if (!late) {
switch(subtree.getType()) {
PeepholeFoldConstants(boolean late) {
this.late = late;
}
static final DiagnosticType INVALID_GETELEM_INDEX_ERROR =
static final DiagnosticType INDEX_OUT_OF_BOUNDS_ERROR =
static final DiagnosticType NEGATING_A_NON_NUMBER_ERROR =
static final DiagnosticType BITWISE_OPERAND_OUT_OF_RANGE =
static final DiagnosticType SHIFT_AMOUNT_OUT_OF_BOUNDS = DiagnosticType.error(
static final DiagnosticType FRACTIONAL_BITWISE_OPERAND = DiagnosticType.error(
private static final double MAX_FOLD_NUMBER = Math.pow(2, 53);
switch(subtree.getType()) {
tryReduceOperandsForOp(subtree);
return tryFoldBinaryOperator(subtree);
Node left = subtree.getFirstChild();
if (left == null) {
return subtree;
Node right = left.getNext();
if (right == null) {
return subtree;
switch (n.getType()) {
}
return tryFoldCtorCall(subtree);
return tryFoldTypeof(subtree);
