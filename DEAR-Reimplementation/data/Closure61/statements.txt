if (callNode.hasOneChild()
if (callNode.isOnlyModifiesThisCall()
if (compiler != null && !compiler.hasRegExpGlobalReferences()) {
if (!functionCallHasSideEffects(n, compiler)) {
return true;
if (callNode.getType() != Token.CALL) {
if (callNode.isNoSideEffectsCall()) {
Node nameNode = callNode.getFirstChild();
if (nameNode.getType() == Token.NAME) {
} else if (nameNode.getType() == Token.GETPROP) {
return true;
return NodeUtil.functionCallHasSideEffects(n, compiler);
return n.getType() == Token.GETPROP
if (checkForStateChangeHelper(c, checkForNewObjects, compiler)) {
return true;
break;
for (Node c = n.getFirstChild(); c != null; c = c.getNext()) {
switch(n.getType()) {
switch (type) {
return 15;
return nodeTypeMayHaveSideEffects(n, null);
if (isAssignmentOp(n)) {
char LARGEST_BASIC_LATIN = 0x7f;
int len = s.length();
for (int index = 0; index < len; index++) {
char c = s.charAt(index);
if (c > LARGEST_BASIC_LATIN) {
return true;
static final long MAX_POSITIVE_INTEGER_NUMBER = (long)Math.pow(2, 53);
private static final Set<String> CONSTRUCTORS_WITHOUT_SIDE_EFFECTS =
private static final Set<String> BUILTIN_FUNCTIONS_WITHOUT_SIDEEFFECTS =
private static final Set<String> OBJECT_METHODS_WITHOUT_SIDEEFFECTS =
private static final Set<String> REGEXP_METHODS =
private static final Set<String> STRING_REGEXP_METHODS =
static final NumbericResultPredicate NUMBERIC_RESULT_PREDICATE =
static final BooleanResultPredicate BOOLEAN_RESULT_PREDICATE =
static final MayBeStringResultPredicate MAY_BE_STRING_PREDICATE =
static final Predicate<Node> MATCH_NOT_FUNCTION = new MatchNotFunction();
switch (type) {
return false;
return checkForStateChangeHelper(n, false, compiler);
switch (n.getType()) {
if (isSimpleOperatorType(n.getType())) {
if (isAssignmentOp(n)) {
return true;
switch (n.getType()){
return false;
return n.getType() == Token.EXPR_RESULT
switch (operator) {
default: return null;
