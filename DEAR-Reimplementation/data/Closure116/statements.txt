cArg = cArg.getNext();
fnParam = fnParam.getNext();
if (NodeUtil.mayEffectMutableState(cArg, compiler)
if (cArg != null) {
if (NodeUtil.mayHaveSideEffects(cArg, compiler)) {
if (cArg != null) {
if (fnParam != null) {
return CanInlineResult.YES;
Node fnParam = NodeUtil.getFunctionParameters(fnNode).getFirstChild();
while (cArg != null || fnParam != null) {
return true;
Node block = fnNode.getLastChild();
Node cArg = callNode.getFirstChild().getNext();
if (!callNode.getFirstChild().isName()) {
return canInlineReferenceDirectly(callNode, fnNode);
if (!isDirectCallNodeReplacementPossible(fnNode)) {
return true;
Node returnNode = block.getFirstChild();
Preconditions.checkArgument(returnNode.isReturn());
Node safeReturnNode = returnNode.cloneTree();
Node inlineResult = FunctionArgumentInjector.inject(
Preconditions.checkArgument(safeReturnNode == inlineResult);
newExpression = safeReturnNode.removeFirstChild();
return inlineReturnValue(callNode, fnNode);
Node block = fnNode.getLastChild();
Node callParentNode = callNode.getParent();
Map<String, Node> argMap =
if (!block.hasChildren()) {
callParentNode.replaceChild(callNode, newExpression);
return newExpression;
if (block.getFirstChild().isReturn()
} else if (block.hasOneChild()) {
Node block = NodeUtil.getFunctionBody(fnNode);
if (!block.hasChildren()) {
if (mode == InliningMode.DIRECT) {
if (referencesThis && !NodeUtil.isFunctionObjectCall(callNode)) {
if (containsFunctions) {
return true;
if (ref.module != fnModule &&
if (!isSupportedCallType(callNode)) {
if (!callNode.getFirstChild().isName()) {
int referenceCount = refs.size();
if (referenceCount == 0) {
int referencesUsingBlockInlining = 0;
boolean checkModules = isRemovable && fnModule != null;
JSModuleGraph moduleGraph = compiler.getModuleGraph();
for (Reference ref : refs) {
if (ref.mode == InliningMode.BLOCK) {
if (checkModules && ref.module != null) {
}
