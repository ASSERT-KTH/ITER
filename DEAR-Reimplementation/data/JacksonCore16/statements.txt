super(parsers[0]);
_parsers = parsers;
_nextParser = 1;
}
if (!(first instanceof JsonParserSequence || second instanceof JsonParserSequence)) {
return new JsonParserSequence(new JsonParser[] { first, second });
JsonToken t = delegate.nextToken();
if (t != null) return t;
while (switchToNext()) {
t = delegate.nextToken();
if (t != null) return t;
if (_nextParser >= _parsers.length) {
delegate = _parsers[_nextParser++];
return true;
ArrayList<JsonParser> p = new ArrayList<JsonParser>();
if (first instanceof JsonParserSequence) {
((JsonParserSequence) first).addFlattenedActiveParsers(p);
p.add(first);
if (second instanceof JsonParserSequence) {
((JsonParserSequence) second).addFlattenedActiveParsers(p);
p.add(second);
return new JsonParserSequence(p.toArray(new JsonParser[p.size()]));
for (int i = _nextParser-1, len = _parsers.length; i < len; ++i) {
JsonParser p = _parsers[i];
if (p instanceof JsonParserSequence) {
((JsonParserSequence) p).addFlattenedActiveParsers(result);
result.add(p);
}
do { delegate.close(); } while (switchToNext());
}
return null;
return _parsers.length;
return false;
