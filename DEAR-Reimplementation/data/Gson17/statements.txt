throw new JsonParseException("The date should be a string value");
if (in.peek() != JsonToken.STRING) {
this(dateType,
}
DefaultDateTypeAdapter(final Class<? extends Date> dateType, DateFormat enUsFormat, DateFormat localFormat) {
if ( dateType != Date.class && dateType != java.sql.Date.class && dateType != Timestamp.class ) {
this.dateType = dateType;
this.enUsFormat = enUsFormat;
this.localFormat = localFormat;
}
this(dateType, new SimpleDateFormat(datePattern, Locale.US), new SimpleDateFormat(datePattern));
}
this(dateType, DateFormat.getDateInstance(style, Locale.US), DateFormat.getDateInstance(style));
}
this(Date.class,
}
this(dateType,
}
throw new IllegalArgumentException("Date type must be one of " + Date.class + ", " + Timestamp.class + ", or " + java.sql.Date.class + " but was " + dateType);
if (value == null) {
out.nullValue();
return;
synchronized (localFormat) {
String dateFormatAsString = enUsFormat.format(value);
out.value(dateFormatAsString);
}
}
Date date = deserializeToDate(in.nextString());
if (dateType == Date.class) {
return date;
} else if (dateType == Timestamp.class) {
return new Timestamp(date.getTime());
} else if (dateType == java.sql.Date.class) {
return new java.sql.Date(date.getTime());
throw new AssertionError();
synchronized (localFormat) {
return localFormat.parse(s);
} catch (ParseException ignored) {}
return enUsFormat.parse(s);
} catch (ParseException ignored) {}
return ISO8601Utils.parse(s, new ParsePosition(0));
} catch (ParseException e) {
throw new JsonSyntaxException(s, e);
}
StringBuilder sb = new StringBuilder();
sb.append(SIMPLE_NAME);
sb.append('(').append(localFormat.getClass().getSimpleName()).append(')');
return sb.toString();
