if (p1 == null) {
if (p2 == null) {
if (p1.getWindingRule() != p2.getWindingRule()) {
PathIterator iterator1 = p1.getPathIterator(null);
PathIterator iterator2 = p1.getPathIterator(null);
double[] d1 = new double[6];
double[] d2 = new double[6];
boolean done = iterator1.isDone() && iterator2.isDone();
while (!done) {
if (iterator1.isDone() != iterator2.isDone()) {
int seg1 = iterator1.currentSegment(d1);
int seg2 = iterator2.currentSegment(d2);
if (seg1 != seg2) {
if (!Arrays.equals(d1, d2)) {
iterator1.next();
iterator2.next();
done = iterator1.isDone() && iterator2.isDone();
}
return true;
private static final float SQRT2 = (float) Math.pow(2.0, 0.5);
private ShapeUtilities() {
}
if (shape instanceof Cloneable) {
return (Shape) ObjectUtilities.clone(shape);
catch (CloneNotSupportedException cnse) {
Shape result = null;
return result;
if (s1 instanceof Line2D && s2 instanceof Line2D) {
return equal((Line2D) s1, (Line2D) s2);
else if (s1 instanceof Ellipse2D && s2 instanceof Ellipse2D) {
return equal((Ellipse2D) s1, (Ellipse2D) s2);
else if (s1 instanceof Arc2D && s2 instanceof Arc2D) {
return equal((Arc2D) s1, (Arc2D) s2);
else if (s1 instanceof Polygon && s2 instanceof Polygon) {
return equal((Polygon) s1, (Polygon) s2);
else if (s1 instanceof GeneralPath && s2 instanceof GeneralPath) {
return equal((GeneralPath) s1, (GeneralPath) s2);
return ObjectUtilities.equal(s1, s2);
if (l1 == null) {
return (l2 == null);
if (l2 == null) {
return false;
if (!l1.getP1().equals(l2.getP1())) {
return false;
if (!l1.getP2().equals(l2.getP2())) {
return false;
return true;
if (e1 == null) {
return (e2 == null);
if (e2 == null) {
