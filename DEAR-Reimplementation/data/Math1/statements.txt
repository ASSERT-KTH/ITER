throw new FractionConversionException(value, p2, q2);
numerator = BigInteger.valueOf(p1);
denominator = BigInteger.valueOf(q1);
this(value, 0, maxDenominator, 100);
}
this(value, 0, maxDenominator, 100);
}
throw new FractionConversionException(value, p2, q2);
this.numerator = (int) p1;
this.denominator = (int) q1;
numerator = BigInteger.valueOf(p2);
denominator = BigInteger.valueOf(q2);
if (q2 < maxDenominator) {
}
this.numerator = (int) p2;
this.denominator = (int) q2;
throws FractionConversionException {
long overflow = Integer.MAX_VALUE;
double r0 = value;
long a0 = (long) FastMath.floor(r0);
if (a0 > overflow) {
if (FastMath.abs(a0 - value) < epsilon) {
long p0 = 1;
long q0 = 0;
long p1 = a0;
long q1 = 1;
long p2 = 0;
long q2 = 1;
int n = 0;
boolean stop = false;
++n;
final double r1 = 1.0 / (r0 - a0);
final long a1 = (long) FastMath.floor(r1);
p2 = (a1 * p1) + p0;
q2 = (a1 * q1) + q0;
if ((p2 > overflow) || (q2 > overflow)) {
final double convergent = (double) p2 / (double) q2;
if ((n < maxIterations) &&
p0 = p1;
p1 = p2;
q0 = q1;
q1 = q2;
a0 = a1;
r0 = r1;
stop = true;
} while (!stop);
if (n >= maxIterations) {
if (q2 < maxDenominator) {
}
stop = true;
