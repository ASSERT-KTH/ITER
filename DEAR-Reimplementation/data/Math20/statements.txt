this(0);
}
this(lambda, null, DEFAULT_MAXITERATIONS, DEFAULT_STOPFITNESS,
}
break generationLoop;
lambda = 4 + (int) (3. * Math.log(dimension));
boundaries = new double[2][];
boundaries[0] = lB;
boundaries[1] = uB;
hasFiniteBounds = true;
break;
for (int i = 0; i < lB.length; i++) {
if (Double.isInfinite(lB[i]) ||
if (hasInfiniteBounds) {
isMinimize = getGoalType().equals(GoalType.MINIMIZE);
final FitnessFunction fitfun = new FitnessFunction();
final double[] guess = fitfun.encode(getStartPoint());
dimension = guess.length;
initializeCMA(guess);
iterations = 0;
double bestValue = fitfun.value(guess);
push(fitnessHistory, bestValue);
PointValuePair optimum = new PointValuePair(getStartPoint(),
PointValuePair lastResult = null;
for (iterations = 1; iterations <= maxIterations; iterations++) {
RealMatrix arz = randn1(dimension, lambda);
RealMatrix arx = zeros(dimension, lambda);
double[] fitness = new double[lambda];
for (int k = 0; k < lambda; k++) {
RealMatrix arxk = null;
for (int i = 0; i < checkFeasableCount+1; i++) {
if (diagonalOnly <= 0) {
arxk = xmean.add(BD.multiply(arz.getColumnMatrix(k))
if (i >= checkFeasableCount || fitfun.isFeasible(arxk.getColumn(0))) {
copyColumn(arxk, 0, arx, k);
fitness[k] = fitfun.value(arx.getColumn(k)); // compute fitness
}
int[] arindex = sortedIndices(fitness);
RealMatrix xold = xmean; // for speed up of Eq. (2) and (3)
RealMatrix bestArx = selectColumns(arx, MathArrays.copyOf(arindex, mu));
xmean = bestArx.multiply(weights);
RealMatrix bestArz = selectColumns(arz, MathArrays.copyOf(arindex, mu));
RealMatrix zmean = bestArz.multiply(weights);
boolean hsig = updateEvolutionPaths(zmean, xold);
if (diagonalOnly <= 0) {
updateCovariance(hsig, bestArx, arz, arindex, xold);
sigma *= Math.exp(Math.min(1.0,(normps/chiN - 1.)*cs/damps));
double bestFitness = fitness[arindex[0]];
double worstFitness = fitness[arindex[arindex.length-1]];
if (bestValue > bestFitness) {
