return new ObjectConstructor<T>() {
return new ObjectConstructor<T>() {
ObjectConstructor<T> defaultImplementation = newDefaultImplementationConstructor(type, rawType);
if (defaultImplementation != null) {
return defaultImplementation;
} catch (NoSuchMethodException e) {
return null;
if (Collection.class.isAssignableFrom(rawType)) {
if (Map.class.isAssignableFrom(rawType)) {
if (SortedMap.class.isAssignableFrom(rawType)) {
final InstanceCreator<T> rawTypeCreator =
if (rawTypeCreator != null) {
ObjectConstructor<T> defaultConstructor = newDefaultConstructor(rawType);
if (defaultConstructor != null) {
final Constructor<? super T> constructor = rawType.getDeclaredConstructor();
final Type type = typeToken.getType();
final Class<? super T> rawType = typeToken.getRawType();
final InstanceCreator<T> typeCreator = (InstanceCreator<T>) instanceCreators.get(type);
if (typeCreator != null) {
public ConstructorConstructor(Map<Type, InstanceCreator<?>> instanceCreators) {
this.instanceCreators = instanceCreators;
}
} else if (type instanceof ParameterizedType && !(String.class.isAssignableFrom(
return new ObjectConstructor<T>() {
return new ObjectConstructor<T>() {
return defaultConstructor;
return newUnsafeAllocator(type, rawType);
if (!constructor.isAccessible()) {
constructor.setAccessible(true);
return new ObjectConstructor<T>() {
if (SortedSet.class.isAssignableFrom(rawType)) {
return new ObjectConstructor<T>() {
} else if (EnumSet.class.isAssignableFrom(rawType)) {
return new ObjectConstructor<T>() {
} else if (Set.class.isAssignableFrom(rawType)) {
return new ObjectConstructor<T>() {
} else if (Queue.class.isAssignableFrom(rawType)) {
return new ObjectConstructor<T>() {
return new ObjectConstructor<T>() {
return new ObjectConstructor<T>() {
return null;
return new ObjectConstructor<T>() {
return instanceCreators.toString();
