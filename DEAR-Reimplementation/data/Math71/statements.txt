loop = false;
loop = false;
interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);
interpolator = new DummyStepInterpolator(yTmp, yDotK[stages - 1], forward);
setEquations(equations);
resetEvaluations();
final boolean forward = t > t0;
final int stages = c.length + 1;
if (y != y0) {
System.arraycopy(y0, 0, y, 0, y0.length);
final double[][] yDotK = new double[stages][];
for (int i = 0; i < stages; ++i) {
yDotK [i] = new double[y0.length];
final double[] yTmp = new double[y0.length];
if (requiresDenseOutput() || (! eventsHandlersManager.isEmpty())) {
interpolator.storeTime(t0);
stepStart = t0;
stepSize= forward ? step : -step;
for (StepHandler handler : stepHandlers) {
CombinedEventsManager manager = addEndTimeChecker(t0, t, eventsHandlersManager);
boolean lastStep = false;
while (!lastStep) {
interpolator.shift();
for (boolean loop = true; loop;) {
computeDerivatives(stepStart, y, yDotK[0]);
for (int k = 1; k < stages; ++k) {
for (int j = 0; j < y0.length; ++j) {
double sum = a[k-1][0] * yDotK[0][j];
for (int l = 1; l < k; ++l) {
sum += a[k-1][l] * yDotK[l][j];
yTmp[j] = y[j] + stepSize * sum;
computeDerivatives(stepStart + c[k-1] * stepSize, yTmp, yDotK[k]);
for (int j = 0; j < y0.length; ++j) {
double sum= b[0] * yDotK[0][j];
for (int l = 1; l < stages; ++l) {
sum+= b[l] * yDotK[l][j];
yTmp[j] = y[j] + stepSize * sum;
interpolator.storeTime(stepStart + stepSize);
if (manager.evaluateStep(interpolator)) {
final double dt = manager.getEventTime() - stepStart;
if (Math.abs(dt) <= Math.ulp(stepStart)) {
stepSize = dt;
} else {
loop = false;
final double nextStep = stepStart + stepSize;
System.arraycopy(yTmp, 0, y, 0, y0.length);
manager.stepAccepted(nextStep, y);
lastStep = manager.stop();
interpolator.storeTime(nextStep);
for (StepHandler handler : stepHandlers) {
