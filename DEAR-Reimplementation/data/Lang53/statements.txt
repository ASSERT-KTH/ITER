if (field == DateUtils.SEMI_MONTH) {
val.add(fields[i][0], 1);
if (date == null) {
Calendar gval = Calendar.getInstance();
gval.setTime(date);
modify(gval, field, true);
return gval.getTime();
if (val.get(Calendar.YEAR) > 280000000) {
if (field == Calendar.MILLISECOND) {
Date date = val.getTime();
long time = date.getTime();
boolean done = false;
int millisecs = val.get(Calendar.MILLISECOND);
if (!round || millisecs < 500) {
time = time - millisecs;
if (field == Calendar.SECOND) {
int seconds = val.get(Calendar.SECOND);
if (!done && (!round || seconds < 30)) {
int minutes = val.get(Calendar.MINUTE);
if (!done && (!round || minutes < 30)) {
time = time - (minutes * 60000L);
if (date.getTime() != time) {
date.setTime(time);
val.setTime(date);
boolean roundUp = false;
for (int i = 0; i < fields.length; i++) {
for (int j = 0; j < fields[i].length; j++) {
if (fields[i][j] == field) {
if (round && roundUp) {
return;
int offset = 0;
boolean offsetSet = false;
switch (field) {
if (!offsetSet) {
int min = val.getActualMinimum(fields[i][0]);
int max = val.getActualMaximum(fields[i][0]);
offset = val.get(fields[i][0]) - min;
roundUp = offset > ((max - min) / 2);
if (offset != 0) {
val.set(fields[i][0], val.get(fields[i][0]) - offset);
public static final TimeZone UTC_TIME_ZONE = TimeZone.getTimeZone("GMT");
private static final int[][] fields = {
super();
}
if (date1 == null || date2 == null) {
throw new IllegalArgumentException("The date must not be null");
Calendar cal1 = Calendar.getInstance();
cal1.setTime(date1);
Calendar cal2 = Calendar.getInstance();
cal2.setTime(date2);
