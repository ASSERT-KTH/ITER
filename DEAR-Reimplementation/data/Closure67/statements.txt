NodeTraversal.traverse(compiler, externRoot,
boolean anchorUnusedVars) {
private final SymbolType PROPERTY = SymbolType.PROPERTY;
private final SymbolType VAR = SymbolType.VAR;
private final LinkedDirectedGraph<NameInfo, JSModule> symbolGraph =
private final NameInfo globalNode = new NameInfo("[global]");
private final NameInfo externNode = new NameInfo("[extern]");
private final NameInfo anonymousNode = new NameInfo("[anonymous]");
private final Map<String, NameInfo> propertyNameInfo = Maps.newHashMap();
private final Map<String, NameInfo> varNameInfo = Maps.newHashMap();
this.compiler = compiler;
this.moduleGraph = moduleGraph;
this.canModifyExterns = canModifyExterns;
this.anchorUnusedVars = anchorUnusedVars;
if (moduleGraph != null) {
firstModule = null;
globalNode.markReference(null);
externNode.markReference(null);
symbolGraph.createNode(globalNode);
symbolGraph.createNode(externNode);
for (String property : IMPLICITLY_USED_PROPERTIES) {
NameInfo nameInfo = getNameInfoForName(property, PROPERTY);
if (moduleGraph == null) {
symbolGraph.connect(externNode, null, nameInfo);
}
}
private static final Set<String> IMPLICITLY_USED_PROPERTIES =
if (!canModifyExterns) {
NodeTraversal.traverse(compiler, root, new ProcessProperties());
FixedPointGraphTraversal<NameInfo, JSModule> t =
t.computeFixedPoint(symbolGraph,
}
List<NameInfo> result = Lists.newArrayList(propertyNameInfo.values());
result.addAll(varNameInfo.values());
return result;
Map<String, NameInfo> map = type == PROPERTY ?
if (map.containsKey(name)) {
return map.get(name);
NameInfo nameInfo = new NameInfo(name);
map.put(name, nameInfo);
symbolGraph.createNode(nameInfo);
return nameInfo;
firstModule = moduleGraph.getRootModule();
for (JSModule module : moduleGraph.getAllModules()) {
symbolGraph.connect(externNode, module, nameInfo);
}
