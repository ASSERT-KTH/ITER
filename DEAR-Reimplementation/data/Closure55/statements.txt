Node helperCode = parseHelperCode(reducer);
if (helperCode == null) {
int helperCodeCost = InlineCostEstimator.getCost(helperCode);
int savings = 0;
for (Reduction reduction : reductions) {
savings += reduction.estimateSavings();
}
if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) {
for (Reduction reduction : reductions) {
reduction.apply();
}
Node addingRoot = compiler.getNodeForCodeInsertion(null);
addingRoot.addChildrenToFront(helperCode);
compiler.reportCodeChange();
}
Node root = compiler.parseSyntheticCode(
return (root != null) ? root.removeFirstChild() : null;
FunctionRewriter(AbstractCompiler compiler) {
this.compiler = compiler;
}
List<Reducer> reducers = ImmutableList.of(new ReturnConstantReducer(),
Multimap<Reducer, Reduction> reductionMap = HashMultimap.create();
NodeTraversal.traverse(compiler, root,
for (Reducer reducer : reducers) {
Collection<Reduction> reductions = reductionMap.get(reducer);
if (reductions.isEmpty()) {
continue;
}
return NodeUtil.isFunctionExpression(n);
continue;
