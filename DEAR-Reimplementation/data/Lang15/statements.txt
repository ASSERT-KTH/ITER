ParameterizedType parameterizedOwnerType = (ParameterizedType) ownerType;
typeVarAssigns = getTypeArguments(parameterizedOwnerType,
} else {
return typeVarAssigns;
return isAssignable(type, (GenericArrayType) toType, typeVarAssigns);
return false;
if (type instanceof ParameterizedType) {
return isAssignable(getRawType((ParameterizedType) type), toClass);
if (type instanceof TypeVariable<?>) {
if (type instanceof GenericArrayType) {
return toClass.equals(Object.class)
return true;
return true;
if (type == null) {
if (toGenericArrayType == null) {
if (toGenericArrayType.equals(type)) {
return true;
Type toComponentType = toGenericArrayType.getGenericComponentType();
if (type instanceof Class<?>) {
Class<?> cls = (Class<?>) type;
return cls.isArray()
if (type instanceof GenericArrayType) {
return isAssignable(((GenericArrayType) type).getGenericComponentType(),
WildcardType wildcardType = (WildcardType) type;
Type[] upperBounds = getImplicitUpperBounds(wildcardType);
Type[] lowerBounds = getImplicitLowerBounds(wildcardType);
for (Type toBound : toUpperBounds) {
toBound = substituteTypeVariables(toBound, typeVarAssigns);
for (Type bound : upperBounds) {
if (!isAssignable(bound, toBound, typeVarAssigns)) {
return false;
for (Type toBound : toLowerBounds) {
toBound = substituteTypeVariables(toBound, typeVarAssigns);
for (Type bound : lowerBounds) {
if (!isAssignable(toBound, bound, typeVarAssigns)) {
return false;
return true;
return false;
return false;
if (toClass.isPrimitive()) {
cls = ClassUtils.primitiveToWrapper(cls);
if (type instanceof Class<?>) {
return getTypeArguments((Class<?>) type, toClass, subtypeVarAssigns);
if (type instanceof ParameterizedType) {
return getTypeArguments((ParameterizedType) type, toClass, subtypeVarAssigns);
if (!isAssignable(cls, toClass)) {
if (cls.isPrimitive()) {
HashMap<TypeVariable<?>, Type> typeVarAssigns = subtypeVarAssigns == null ? new HashMap<TypeVariable<?>, Type>()
if (cls.getTypeParameters().length > 0 || toClass.equals(cls)) {
return isAssignable(type, toType, null);
