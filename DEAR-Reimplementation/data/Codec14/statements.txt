this(nameType, ruleType, concat, DEFAULT_MAX_PHONEMES);
final int maxPhonemes) {
if (ruleType == RuleType.RULES) {
this.nameType = nameType;
this.ruleType = ruleType;
this.concat = concat;
this.lang = Lang.instance(nameType);
private static final Map<NameType, Set<String>> NAME_PREFIXES = new EnumMap<NameType, Set<String>>(NameType.class);
NAME_PREFIXES.put(NameType.ASHKENAZI,
NAME_PREFIXES.put(NameType.SEPHARDIC,
NAME_PREFIXES.put(NameType.GENERIC,
}
private static final Map<NameType, Lang> Langs = new EnumMap<NameType, Lang>(NameType.class);
for (final NameType s : NameType.values()) {
Langs.put(s, loadFromResource(LANGUAGE_RULES_RN, Languages.getInstance(s)));
}
throw new IllegalArgumentException("ruleType must not be " + RuleType.RULES);
this.maxPhonemes = maxPhonemes;
}
final StringBuilder sb = new StringBuilder();
final Iterator<String> si = strings.iterator();
if (si.hasNext()) {
sb.append(si.next());
while (si.hasNext()) {
sb.append(sep).append(si.next());
return sb.toString();
if (finalRules == null) {
throw new NullPointerException("finalRules can not be null");
if (finalRules.isEmpty()) {
return phonemeBuilder;
final Set<Rule.Phoneme> phonemes = new TreeSet<Rule.Phoneme>(Rule.Phoneme.COMPARATOR);
for (final Rule.Phoneme phoneme : phonemeBuilder.getPhonemes()) {
PhonemeBuilder subBuilder = PhonemeBuilder.empty(phoneme.getLanguages());
final String phonemeText = phoneme.getPhonemeText().toString();
for (int i = 0; i < phonemeText.length();) {
final RulesApplication rulesApplication =
final boolean found = rulesApplication.isFound();
subBuilder = rulesApplication.getPhonemeBuilder();
if (!found) {
subBuilder.append(phonemeText.subSequence(i, i + 1));
i = rulesApplication.getI();
}
phonemes.addAll(subBuilder.getPhonemes());
}
return new PhonemeBuilder(phonemes);
final Languages.LanguageSet languageSet = this.lang.guessLanguages(input);
return encode(input, languageSet);
final Map<String, List<Rule>> rules = Rule.getInstanceMap(this.nameType, RuleType.RULES, languageSet);
final Map<String, List<Rule>> finalRules1 = Rule.getInstanceMap(this.nameType, this.ruleType, "common");
final Map<String, List<Rule>> finalRules2 = Rule.getInstanceMap(this.nameType, this.ruleType, languageSet);
