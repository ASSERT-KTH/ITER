throw new IOException("request to write '" + numToWrite
paxHeaders.put("path", entryName);
addPaxHeadersForNonAsciiNames = b;
}
currSize = 0;
writePaxHeaders(entryName, paxHeaders);
len = actualLength;
line = len + " " + key + "=" + value + "\n";
actualLength = line.getBytes(CharsetNames.UTF_8).length;
this(os, TarBuffer.DEFAULT_BLKSIZE, TarBuffer.DEFAULT_RCDSIZE);
}
this(os, blockSize, recordSize, null);
}
String name = "./PaxHeaders.X/" + stripTo7Bits(entryName);
if (name.length() >= TarConstants.NAMELEN) {
TarArchiveEntry pex = new TarArchiveEntry(name,
StringWriter w = new StringWriter();
for (Map.Entry<String, String> h : headers.entrySet()) {
String key = h.getKey();
String value = h.getValue();
int len = key.length() + value.length()
String line = len + " " + key + "=" + value + "\n";
int actualLength = line.getBytes(CharsetNames.UTF_8).length;
while (len != actualLength) {
w.write(line);
}
byte[] data = w.toString().getBytes(CharsetNames.UTF_8);
pex.setSize(data.length);
putArchiveEntry(pex);
write(data);
final int length = name.length();
StringBuffer result = new StringBuffer(length);
for (int i = 0; i < length; i++) {
char stripped = (char) (name.charAt(i) & 0x7F);
if (stripped != 0) { // would be read as Trailing null
result.append(stripped);
return result.toString();
failForBigNumber("user id", entry.getUserId(), TarConstants.MAXID);
failForBigNumber("mode", entry.getMode(), TarConstants.MAXID);
failForBigNumber("major device number", entry.getDevMajor(),
failForBigNumber("minor device number", entry.getDevMinor(),
}
failForBigNumbers(entry);
failForBigNumber("entry size", entry.getSize(), TarConstants.MAXSIZE);
failForBigNumber("group id", entry.getGroupId(), TarConstants.MAXID);
failForBigNumber("last modification time",
} else if (bigNumberMode != BIGNUMBER_STAR) {
if ((currBytes + numToWrite) > currSize) {
if (value < 0 || value > maxValue) {
}
