this.record.add(input.equalsIgnoreCase(nullString) ? null : input);
final CSVRecord nextRecord = this.nextRecord();
if (nextRecord != null) {
headerRecord = nextRecord.values();
} else {
hdrMap = new LinkedHashMap<String, Integer>();
String[] headerRecord = null;
if (formatHeader.length == 0) {
if (headerRecord != null) {
for (int i = 0; i < headerRecord.length; i++) {
final String header = headerRecord[i];
final boolean containsHeader = hdrMap.containsKey(header);
final boolean emptyHeader = header.trim().isEmpty();
if (containsHeader && (!emptyHeader || (emptyHeader && !this.format.getIgnoreEmptyHeaders()))) {
hdrMap.put(header, Integer.valueOf(i));
this.addRecordValue();
break;
this.addRecordValue();
break;
final String input = this.reusableToken.content.toString();
final String nullString = this.format.getNullString();
if (nullString == null) {
}
this.recordNumber++;
final String comment = sb == null ? null : sb.toString();
result = new CSVRecord(this.record.toArray(new String[this.record.size()]), this.headerMap, comment,
CSVRecord result = null;
this.record.clear();
StringBuilder sb = null;
this.reusableToken.reset();
this.lexer.nextToken(this.reusableToken);
switch (this.reusableToken.type) {
} while (this.reusableToken.type == TOKEN);
if (!this.record.isEmpty()) {
return result;
this.format = format;
this.lexer = new Lexer(format, new ExtendedBufferedReader(reader));
this.headerMap = this.initializeHeader();
Map<String, Integer> hdrMap = null;
final String[] formatHeader = this.format.getHeader();
if (formatHeader != null) {
Assertions.notNull(format, "format");
public CSVParser(final Reader reader, final CSVFormat format) throws IOException {
private final List<String> record = new ArrayList<String>();
private final Token reusableToken = new Token();
Assertions.notNull(reader, "reader");
}
Assertions.notNull(file, "file");
Assertions.notNull(format, "format");
return new CSVParser(new InputStreamReader(new FileInputStream(file), charset), format);
