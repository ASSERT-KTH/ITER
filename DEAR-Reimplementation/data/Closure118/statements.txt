++propsSkipped;
if (prop.skipRenaming) {
TypeSystem<T> typeSystem, Map<String, CheckLevel> propertiesToErrorFor) {
private Map<String, Property> properties = Maps.newHashMap();
this.compiler = compiler;
this.typeSystem = typeSystem;
this.propertiesToErrorFor = propertiesToErrorFor;
if (!this.propertiesToErrorFor.isEmpty()) {
this.invalidationMap = LinkedHashMultimap.create();
}
private static final Logger logger = Logger.getLogger(
return new DisambiguateProperties<JSType>(
Preconditions.checkState(
for (TypeMismatch mis : compiler.getTypeValidator().getMismatches()) {
NodeTraversal.traverse(compiler, externs, new FindExternProperties());
NodeTraversal.traverse(compiler, root, new FindRenameableProperties());
renameProperties();
}
if (!properties.containsKey(name)) {
properties.put(name, new Property(name));
return properties.get(name);
int propsRenamed = 0, propsSkipped = 0, instancesRenamed = 0,
instancesSkipped = 0, singleTypeProps = 0;
Set<String> reported = Sets.newHashSet();
for (Property prop : properties.values()) {
if (prop.shouldRename()) {
}
logger.fine("Renamed " + instancesRenamed + " instances of "
logger.fine("Skipped renaming " + instancesSkipped + " invalidated "
}
++singleTypeProps;
String newName = propNames.get(rootType);
node.setString(newName);
compiler.reportCodeChange();
++instancesRenamed;
} else {
Map<T, String> propNames = buildPropNames(prop.getTypes(), prop.name);
++propsRenamed;
prop.expandTypesToSkip();
for (Node node : prop.renameNodes) {
T rootType = prop.rootTypes.get(node);
if (prop.shouldRename(rootType)) {
}
} else {
Map<T, String> names = Maps.newHashMap();
for (Set<T> set : types.allEquivalenceClasses()) {
checkState(!set.isEmpty());
String typeName = null;
for (T type : set) {
if (typeName == null || type.toString().compareTo(typeName) < 0) {
