return n;
return result;
return addAndCheck(a, b, "overflow: add");
return 1;
if ((k == 1) || (k == n - 1)) {
long result = Math.round(binomialCoefficientDouble(n, k));
if (result == Long.MAX_VALUE) {
if ((k == 1) || (k == n - 1)) {
double logSum = 0;
for (int i = k + 1; i <= n; i++) {
logSum += Math.log((double)i);
for (int i = 2; i <= n - k; i++) {
logSum -= Math.log((double)i);
return logSum;
if (a > b) {
ret = addAndCheck(b, a, msg);
if (a < 0) {
if (a <= Long.MAX_VALUE - b) {
ret = a + b;
return ret;
if (n < k) {
if (n < 0) {
if ((n == k) || (k == 0)) {
return Math.floor(Math.exp(binomialCoefficientLog(n, k)) + 0.5);
if (n < k) {
if (n < 0) {
if ((n == k) || (k == 0)) {
private static final long[] factorials = new long[]
super();
}
long s = (long)x + (long)y;
if (s < Integer.MIN_VALUE || s > Integer.MAX_VALUE) {
throw new ArithmeticException("overflow: add");
return (int)s;
if (b < 0) {
if (Long.MIN_VALUE - b <= a) {
ret = a + b;
throw new ArithmeticException(msg);
ret = a + b;
throw new ArithmeticException(msg);
throw new IllegalArgumentException(
throw new IllegalArgumentException(
throw new ArithmeticException(
throw new IllegalArgumentException(
throw new IllegalArgumentException(
return 0;
return Math.log((double) n);
return (Math.exp(x) + Math.exp(-x)) / 2.0;
return ((Double.isNaN(x) && Double.isNaN(y)) || x == y);
if ((x == null) || (y == null)) {
